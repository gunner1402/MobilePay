Index: app/src/main/res/layout/fragment_main_shop_review_item.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_main_shop_review_item.xml	(revision )
+++ app/src/main/res/layout/fragment_main_shop_review_item.xml	(revision )
@@ -0,0 +1,65 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="@dimen/fragment_shop_category_review_item_height"
+    android:paddingLeft="@dimen/common_content_margin_15"
+    android:paddingRight="@dimen/common_content_margin_15"
+    android:paddingTop="@dimen/common_content_margin_10"
+    android:paddingBottom="@dimen/common_content_margin_10">
+
+    <ImageView
+        android:id="@+id/product_item_img"
+        android:layout_width="@dimen/fragment_shop_category_review_item_img_width"
+        android:layout_height="@dimen/fragment_shop_category_review_item_img_height"
+        android:scaleType="fitXY"
+        android:layout_centerVertical="true"
+        android:layout_alignParentRight="true"
+        android:background="@mipmap/common_default_bg"/>
+
+    <TextView
+        android:id="@+id/product_item_title"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_toLeftOf="@id/product_item_img"
+        android:layout_alignParentTop="true"
+        android:layout_marginRight="@dimen/common_content_margin_10"
+        android:text="sljfsdjfsd"
+        android:textSize="@dimen/common_font_size_12"
+        android:textColor="@color/common_font_color_000000"/>
+
+    <LinearLayout
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:layout_toLeftOf="@id/product_item_img"
+        android:layout_alignParentBottom="true"
+        android:gravity="center_vertical">
+
+        <TextView
+            android:id="@+id/product_item_diamond_count"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginRight="@dimen/common_content_margin_5"
+            android:text="300"
+            android:textSize="@dimen/common_font_size_12"
+            android:textColor="@color/common_font_color_ff5a00"/>
+        <TextView
+            android:id="@+id/product_item_diamond_bg"
+            android:layout_width="@dimen/fragment_shop_category_review_item_diamond_width"
+            android:layout_height="@dimen/fragment_shop_category_review_item_diamond_width"
+            android:layout_marginRight="@dimen/common_content_margin_10"
+            android:background="@mipmap/common_diamond_blue"/>
+    </LinearLayout>
+
+    <TextView
+        android:id="@+id/product_item_charge"
+        android:layout_width="@dimen/fragment_shop_category_review_item_charge_width"
+        android:layout_height="@dimen/fragment_shop_category_review_item_charge_height"
+        android:layout_alignParentLeft="true"
+        android:layout_centerVertical="true"
+        android:gravity="center"
+        android:text="@string/fragment_shop_category_review_charge"
+        android:textColor="@color/common_font_color_ffffff"
+        android:textSize="@dimen/common_font_size_12"
+        android:background="@drawable/common_button_1_selector"/>
+</RelativeLayout>
+
Index: app/src/main/res/drawable/common_head_search_selector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/common_head_search_selector.xml	(revision )
+++ app/src/main/res/drawable/common_head_search_selector.xml	(revision )
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@mipmap/common_head_search_selected" android:state_pressed="true"/>
+    <item android:drawable="@mipmap/common_head_search_selected" android:state_focused="true"/>
+    <item android:drawable="@mipmap/common_head_search_selected" android:state_selected="true"/>
+    <item android:drawable="@mipmap/common_head_search_unselected"/>
+
+</selector>
\ No newline at end of file
Index: app/src/main/res/layout/page_search_history_list_item.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/page_search_history_list_item.xml	(revision )
+++ app/src/main/res/layout/page_search_history_list_item.xml	(revision )
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="match_parent">
+    <TextView
+        android:id="@+id/search_history_list_item_name"
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/search_history_list_item_height"
+        android:textSize="@dimen/common_font_size_12"
+        android:textColor="@color/common_font_color_868585"
+        android:paddingRight="@dimen/common_content_margin_20"
+        android:gravity="center_vertical|right"
+        android:text="界面 搜索"/>
+</LinearLayout>
\ No newline at end of file
Index: settings.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- settings.gradle	(revision )
+++ settings.gradle	(revision )
@@ -0,0 +1,1 @@
+include ':app'
Index: app/src/main/res/layout/pay_google.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/pay_google.xml	(revision )
+++ app/src/main/res/layout/pay_google.xml	(revision )
@@ -0,0 +1,68 @@
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+    
+    <TextView android:layout_width="match_parent"
+    	android:layout_height="match_parent"
+    	android:visibility="invisible"/>
+    
+    <RelativeLayout
+        android:id="@+id/oasisgames_sdk_pay_google_sandbox"
+        android:layout_width="450dip"
+    	android:layout_height="280dip"
+    	android:layout_gravity="center"
+    	android:visibility="invisible">
+        <!--android:background="@drawable/oasisgames_sdk_common_bg_209_209_209"-->
+    	<LinearLayout
+	        android:id="@+id/oasisgames_sdk_pay_google_sandbox_close"
+	        android:layout_width="40dip"
+    		android:layout_height="40dip"
+    		android:layout_alignParentTop="true"
+    		android:layout_alignParentRight="true"
+    		android:gravity="center">
+    	    <TextView
+	        	android:layout_width="wrap_content"
+	    		android:layout_height="wrap_content"
+	    		/><!--android:background="@drawable/oasisgames_sdk_common_close"-->
+    	</LinearLayout>
+
+        <TextView
+        	android:id="@+id/oasisgames_sdk_pay_google_sandbox_content"
+        	android:layout_width="wrap_content"
+    		android:layout_height="wrap_content"
+            android:layout_centerInParent="true"
+            android:textSize="18sp"/>
+        <!--android:textColor="@color/oasisgames_sdk_color_font_9f9f9f"-->
+        <LinearLayout android:layout_width="fill_parent"
+	    	android:layout_height="wrap_content"
+	    	android:orientation="horizontal"
+	    	android:layout_margin="20dip"
+	    	android:layout_alignParentBottom="true">
+
+            <TextView
+        		android:id="@+id/oasisgames_sdk_pay_google_sandbox_pay_success"
+                android:layout_width="fill_parent"
+	    		android:layout_height="40dip"
+	    		android:layout_weight="1"
+                android:layout_marginRight="10dip"
+                android:textSize="18sp"
+            android:gravity="center"/>
+            <!--android:background="@drawable/oasisgames_sdk_common_00aed9_017baa"
+            android:text="@string/oasisgames_sdk_sandbox_google_notice2"
+            android:textColor="@color/oasisgames_sdk_color_font_FFFFFF"-->
+            <TextView
+        		android:id="@+id/oasisgames_sdk_pay_google_sandbox_pay_fail"
+                android:layout_width="fill_parent"
+	    		android:layout_height="40dip"
+	    		android:layout_weight="1"
+                android:layout_marginLeft="10dip"
+                android:textSize="18sp"
+            android:gravity="center"/>
+            <!-- android:background="@drawable/oasisgames_sdk_common_009999_21c9bc"
+             android:text="@string/oasisgames_sdk_sandbox_google_notice3"
+             android:textColor="@color/oasisgames_sdk_color_font_FFFFFF"-->
+        </LinearLayout>
+    </RelativeLayout>
+
+</FrameLayout>
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build.gradle	(revision )
+++ build.gradle	(revision )
@@ -0,0 +1,23 @@
+// Top-level build file where you can add configuration options common to all sub-projects/modules.
+
+buildscript {
+    repositories {
+        jcenter()
+        mavenCentral()
+    }
+    dependencies {
+        classpath 'com.android.tools.build:gradle:1.3.0'
+        // NOTE: Do not place your application dependencies here; they belong
+        // in the individual module build.gradle files
+    }
+}
+
+allprojects {
+    repositories {
+        jcenter()
+    }
+}
+
+task clean(type: Delete) {
+    delete rootProject.buildDir
+}
Index: app/src/main/java/com/base/tools/exception/CrashHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/exception/CrashHandler.java	(revision )
+++ app/src/main/java/com/base/tools/exception/CrashHandler.java	(revision )
@@ -0,0 +1,99 @@
+package com.base.tools.exception;
+
+import android.content.Context;
+
+import com.base.tools.utils.FileUtils;
+
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.io.Writer;
+
+public class CrashHandler implements Thread.UncaughtExceptionHandler {
+        public static final String TAG = CrashHandler.class.getSimpleName();
+        private static CrashHandler INSTANCE = new CrashHandler();
+        private Context mContext;
+        private Thread.UncaughtExceptionHandler mDefaultHandler;
+
+
+        private CrashHandler() {  }
+
+
+        public static CrashHandler getInstance() {
+            return INSTANCE;
+        }
+
+
+        public void init(Context ctx) {
+            mContext = ctx;
+            mDefaultHandler = Thread.getDefaultUncaughtExceptionHandler();
+            Thread.setDefaultUncaughtExceptionHandler(this);
+        }
+
+
+        @Override
+        public void uncaughtException(Thread thread, Throwable ex) {
+            // if (!handleException(ex) && mDefaultHandler != null) {
+            // mDefaultHandler.uncaughtException(thread, ex);
+            // } else {
+            // android.os.Process.killProcess(android.os.Process.myPid());
+            // System.exit(10);
+            // }
+//            System.out.println("uncaughtException"+"\n"+ex.toString()+"\n"+ex.getMessage()+"\n"+ex.getLocalizedMessage());
+
+            handleException(ex);
+
+//            new Thread() {
+//                @Override
+//                public void run() {
+//                    Looper.prepare();
+//                    new AlertDialog.Builder(mContext).setTitle("提示").setCancelable(false)
+//                            .setMessage("程序崩溃了...").setNeutralButton("我知道了", new OnClickListener() {
+//                        @Override
+//                        public void onClick(DialogInterface dialog, int which) {
+//                            System.exit(0);
+//                        }
+//                    })
+//                            .create().show();
+//                    Looper.loop();
+//                }
+//            }.start();
+        }
+
+
+        /**
+         * 自定义错误处理,收集错误信息 发送错误报告等操作均在此完成. 开发者可以根据自己的情况来自定义异常处理逻辑
+         *
+         * @param ex
+         * @return true:如果处理了该异常信息;否则返回false
+         */
+        private boolean handleException(Throwable ex) {
+            if (ex == null) {
+                return true;
+            }
+            // new Handler(Looper.getMainLooper()).post(new Runnable() {
+            // @Override
+            // public void run() {
+            // new AlertDialog.Builder(mContext).setTitle("提示")
+            // .setMessage("程序崩溃了...").setNeutralButton("我知道了", null)
+            // .create().show();
+            // }
+            // });
+            StringBuffer sb = new StringBuffer();
+            Writer writer = new StringWriter();
+            PrintWriter printWriter = new PrintWriter(writer);
+            ex.printStackTrace(printWriter);
+            Throwable cause = ex.getCause();
+            while (cause != null) {
+                cause.printStackTrace(printWriter);
+                cause = cause.getCause();
+                }
+            printWriter.close();
+            String result = writer.toString();
+            sb.append(result);
+
+            FileUtils.writeLogToStore(sb.toString());
+            System.exit(0);
+
+            return true;
+        }
+    }
\ No newline at end of file
Index: app/src/main/res/drawable/common_bg_1_selector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/common_bg_1_selector.xml	(revision )
+++ app/src/main/res/drawable/common_bg_1_selector.xml	(revision )
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@color/common_button_bg_selected" android:state_pressed="true"/>
+    <item android:drawable="@color/common_button_bg_selected" android:state_focused="true"/>
+    <item android:drawable="@color/common_button_bg_selected" android:state_selected="true"/>
+    <item android:drawable="@color/common_button_bg_unselected"/>
+
+</selector>
\ No newline at end of file
Index: app/proguard-rules.pro
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/proguard-rules.pro	(revision )
+++ app/proguard-rules.pro	(revision )
@@ -0,0 +1,17 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in C:\Users\Administrator\AppData\Local\Android\Sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
Index: app/src/main/res/layout/row_left_back_view.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/row_left_back_view.xml	(revision )
+++ app/src/main/res/layout/row_left_back_view.xml	(revision )
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:background="#000000" >
+
+    <Button
+        android:id="@+id/detail"
+        android:layout_width="match_parent"
+        android:layout_height="70dp"
+        android:layout_gravity="center"
+        android:text="查看详情" />
+
+</LinearLayout>
\ No newline at end of file
Index: app/src/main/res/layout/common_network_error.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/common_network_error.xml	(revision )
+++ app/src/main/res/layout/common_network_error.xml	(revision )
@@ -0,0 +1,42 @@
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+	android:id="@+id/common_network_error"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/common_background_all_page"
+	android:gravity="center"
+	android:orientation="vertical"
+	android:visibility="invisible">
+
+    <TextView
+        android:layout_width="wrap_content"
+    	android:layout_height="wrap_content"
+    	android:layout_gravity="center"
+		android:background="@mipmap/common_nowifi"/>
+
+	<TextView
+		android:layout_width="wrap_content"
+		android:layout_height="wrap_content"
+		android:layout_marginTop="@dimen/common_content_margin_10"
+		android:gravity="center"
+		android:text="@string/common_nowifi"
+		android:textColor="@color/common_font_color_868585"
+		android:textSize="@dimen/common_font_size_12"/>
+	<TextView
+		android:id="@+id/common_network_retry"
+		android:layout_width="match_parent"
+		android:layout_height="@dimen/login_style_btn_height"
+		android:layout_marginTop="@dimen/common_content_margin_30"
+		android:layout_marginLeft="@dimen/common_content_margin_20"
+		android:layout_marginRight="@dimen/common_content_margin_20"
+		android:gravity="center"
+		android:text="@string/common_retry"
+		android:background="@drawable/common_button_1_selector"
+		android:textColor="@color/common_font_color_ffffff"
+		android:textSize="@dimen/common_font_size_16"
+		android:clickable="true"
+		android:onClick="onClickView"/>
+
+
+
+</LinearLayout>
Index: app/src/main/java/com/nineoldandroids/util/NoSuchPropertyException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nineoldandroids/util/NoSuchPropertyException.java	(revision )
+++ app/src/main/java/com/nineoldandroids/util/NoSuchPropertyException.java	(revision )
@@ -0,0 +1,30 @@
+/*
+ * Copyright (C) 2011 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.nineoldandroids.util;
+
+/**
+ * Thrown when code requests a {@link Property} on a class that does
+ * not expose the appropriate method or field.
+ *
+ * @see Property#of(Class, Class, String)
+ */
+public class NoSuchPropertyException extends RuntimeException {
+
+    public NoSuchPropertyException(String s) {
+        super(s);
+    }
+
+}
Index: app/src/main/res/layout/page_login_user_list.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/page_login_user_list.xml	(revision )
+++ app/src/main/res/layout/page_login_user_list.xml	(revision )
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/common_list_item_divide_bg"
+    android:padding="2dip">
+
+    <ListView
+        android:id="@+id/login_user_list"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:background="@color/common_font_color_ffffff"
+        android:divider="@color/common_list_item_divide_bg"
+        android:dividerHeight="2dip"
+        android:listSelector="@drawable/common_list_item_selector"/>
+
+</LinearLayout>
\ No newline at end of file
Index: app/src/main/java/com/oasgames/android/oaspay/entity/ShopList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/entity/ShopList.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/entity/ShopList.java	(revision )
@@ -0,0 +1,31 @@
+package com.oasgames.android.oaspay.entity;
+
+import java.util.List;
+
+/**
+ * 商城数据集合（首页）
+ * @author Administrator
+ *
+ */
+public class ShopList {
+	public List<ShopFocus> focusList;
+	public List<ProductInfo> newestList;
+	public List<ProductInfo> hotList;
+	public List<ProductInfo> browseList;
+
+	public void setFocusList(List focusList) {
+		this.focusList = focusList;
+	}
+
+	public void setNewestList(List newestList) {
+		this.newestList = newestList;
+	}
+
+	public void setHotList(List hotList) {
+		this.hotList = hotList;
+	}
+
+	public void setBrowseList(List browseList) {
+		this.browseList = browseList;
+	}
+}
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/strings.xml	(revision )
+++ app/src/main/res/values/strings.xml	(revision )
@@ -0,0 +1,106 @@
+<resources>
+    <string name="app_name">OAS PAY</string>
+    <string name="main_foot_1">المتجر</string>
+    <string name="main_foot_2">المعلومات </string>
+    <string name="main_foot_3">الخاص بك </string>
+    <string name="common_head_title">الأسطورة اونلاين العربية</string>
+    <string name="fragment_shop_function_prop">جميع الأدوات</string>
+    <string name="fragment_shop_function_order">طلبياتي</string>
+    <string name="fragment_shop_function_charge">شحن اللعبة</string>
+    <string name="fragment_shop_function_capture">مسح الكود</string>
+    <string name="fragment_shop_category_newest">البضائع الجديدة</string>
+    <string name="fragment_shop_category_hot">الموصى به</string>
+    <string name="fragment_shop_category_review">ماتم استعراضة </string>
+    <string name="fragment_shop_category_more">المزيد</string>
+    <string name="fragment_shop_category_review_charge">شراء</string>
+    <string name="search_title_sub1">إلغاء</string>
+    <string name="search_title_sub2">تأكيد</string>
+    <string name="search_title_sub3">فضلاً قم بإدخال كلمات ذات صلة بالبحث الذي ترغب القيام به</string>
+    <string name="search_title_sub4">العروض الأكثر طلباً والموصى بها</string>
+    <string name="search_title_sub5">سجل البحث</string>
+    <string name="search_title_sub6">تفريغ سجل البحث</string>
+    <string name="search_title_sub7">لم يتم العثور عليه ، قم بتغيير الكلمة وأعد المحاولة.</string>
+    <string name="product_list_title">قائمة البضائع</string>
+    <string name="product_details_title">تفاصيل البضائع</string>
+    <string name="product_details_price">السعر:</string>
+    <string name="order_details_title">تفاصيل الطلبية</string>
+    <string name="order_details_id">رقم الطلبية:</string>
+    <string name="order_details_label_1">تبديل الكود:</string>
+    <string name="order_details_label_2">نسخ</string>
+    <string name="order_details_label_3">حالة الطلبية:</string>
+    <string name="order_details_label_4">وقت الطلبية:</string>
+    <string name="order_details_label_5">وقت الدفع:</string>
+    <string name="order_details_label_6">طريقة الدفع:</string>
+    <string name="order_details_label_7">تمت الطلبية بنجاح</string>
+    <string name="order_details_label_8">في إنتظار استكمال الدفع</string>
+    <string name="order_details_label_9">الدفع</string>
+    <string name="order_details_label_10">الإجمالي:</string>
+    <string name="pay_package_list_title">شحن الأسطورة اونلاين العربية</string>
+    <string name="pay_package_list_sub1">شحن الحساب:</string>
+    <string name="pay_package_list_sub2">باقة الألماس:</string>
+    <string name="pay_package_list_sub3">فضلاً قم بإختيار نوع الشخصية الخاصة بك في اللعبة </string>
+    <string name="pay_package_list_sub4">فضلاً قم بإختيار السيرفر</string>
+    <string name="pay_package_list_sub5">فضلاً قم بإختيار الشخصية</string>
+    <string name="pay_package_list_sub6">المبلغ المطلوب:</string>
+    <string name="pay_package_list_sub7">الدفع فوراً</string>
+    <string name="order_list_title_sub2">طلبيات الشهر الحالي</string>
+    <string name="order_list_title_sub1">سجل الطلبيات</string>
+    <string name="order_list_item_label5">لا يوجد </string>
+    <string name="order_list_item_label6">الذهاب للتسوق</string>
+    <string name="order_list_item_label2">متابعة الدفع</string>
+    <string name="order_list_item_label3">إلغاء الطلبية</string>
+    <string name="order_list_item_label4">حذف</string>
+    <string name="capture_scan_text2_2">سيتم وضع كود الـ QR في المربع ، وستتمكن من مسحة تلقائياً</string>
+    <string name="capture_scan_text2_3">إدخال رقم الطلبية</string>
+    <string name="capture_scan_text2_4">ارسال </string>
+    <string name="fragment_mine_head_login">تسجيل الدخول</string>
+    <string name="login_edit_user">الحساب:</string>
+    <string name="login_edit_password">كلمة المرور:</string>
+    <string name="login_edit_user_hint">إسم المستخدم / البريد</string>
+    <string name="login_edit_password_hint">إدخال 6-15 حرف ، رقم ، رمز</string>
+    <string name="login_other_findpwd">إستعادة كلمة المرور</string>
+    <string name="login_other_rule">شروط خدمات المستخدم</string>
+    <string name="login_other_loginstyle">تسجيل دخول حساب الطرف الثالث</string>
+    <string name="login_register">التسجيل</string>
+    <string name="fragment_news_title">تفاصيل</string>
+    <string name="fragment_mine_head_title">البيانات الشخصية</string>
+    <string name="fragment_mine_head_list_2">إزالة الصورة من الذاكرة التلقائية</string>
+    <string name="fragment_mine_head_list_3">من نحن</string>
+    <string name="fragment_mine_head_exit">الخروج من الحساب الحالي</string>
+    <string name="app_version_1">الإصدار الحالي</string>
+    <string name="app_version_2">إكتشاف الإصدار الجديدة</string>
+    <string name="app_version_3">الإصدار الجديد</string>
+    <string name="app_version_4">حجم الإصدار الجديدة</string>
+    <string name="app_version_5">التحميل يحتاج إلى :</string>
+    <string name="app_version_6">محتوى التحديث</string>
+    <string name="app_version_7">التحديث فوراً</string>
+    <string name="app_version_8">في وقتاً لاحق</string>
+    <string name="order_details_label_11">تم نسخ المحتوى إلى الحافظة</string>
+    <string name="order_list_item_label8">بعد القيام بإلغاء الطلبية ، فإنه سيتم حذفة</string>
+    <string name="order_list_item_label7">سيتم حذف هذة الطلبية</string>
+    <string name="capture_scan_text4">الحساب الذي قمت بتسجيل الدخول إلية غير متطابق مع الحساب الذي في إنتظار إستكمال الدفع منه ، هل  تريد إعادة تسجيل الدخول؟</string>
+    <string name="capture_scan_text3">غير معترف به</string>
+    <string name="capture_scan_text5">خطأ في الإدخال ، فضلاً قم بالإدخال مرة اخرى .</string>
+    <string name="fragment_mine_head_list_2_1">هل تريد تأكيد حذف الذاكرة التلقائية ؟</string>
+    <string name="common_nowifi">خطأ في الإتصال بالشبكة</string>
+    <string name="about_content">طريقة الدفع oas pay هي طريقة دفع خاصة بالموقع الرسمي لـ oasis games ، هذه الطريقة تجعل الشراء اكثر مرونة ، كما يمكنك التمتع بتجربة الخصومات الخاصة . </string>
+    <string name="google_error_notice6">الانتهاء من الدفع </string>
+    <string name="order_list_item_label9"> لم يتم حفظ هذه الطلبية !</string>
+    <string name="order_list_item_label10">تم الانتهاء من دفع هذه الطلبية !</string>
+    <string name="google_error_notice1"> فشل تهيئة الدفع ، يرجى المحاولة مرة أخرى !</string>
+    <string name="google_error_notice2"> فشل الحصول على الباقة ، يرجى المحاولة مرة أخرى !</string>
+    <string name="google_error_notice3">فشل الحصول على المنتج ، يرجى المحاولة مرة أخرى !</string>
+    <string name="google_error_notice4">لم يتم العثور على الباقة ، يرجى مراجعة المكونات !</string>
+    <string name="google_error_notice5">فشل بيانات التحقق ، يرجى المحاولة مرة أخرى !</string>
+    <string name="common_error_notice_2000">خطأ في إتصال الشبكة ، يرجى المحاولة مرة أخرى!</string>
+
+    <string name="capture_scan_text6">خطأ في الأحرف ،فضلاً قم بإدخال الأرقام العربية الخاصة بنمط الطلبية</string>
+    <string name="fragment_mine_head_list_2_2">لقد تم مسح الذاكرة التلقائية</string>
+    <string name="login_title_sub">حساب Oasis</string>
+    <string name="pay_package_list_sub8">لا توجد شخصية</string>
+    <string name="common_retry">بإعادة المحاولة</string>
+    <string name="common_error_notice_4">اسم المستخدم او كلمة المرور تحتوي على خطأ</string>
+    <string name="main_notice_1">قم بالنقر مرة أخرى للخروج من البرنامج</string>
+    <string name="order_details_label_12">في طور توليد الأكواد التي تم تبديلها</string>
+    <string name="google_error_notice7">لقد حدث خلل في هذة الطلبية ، يرجى التواصل مع خدمة العملاء !</string>
+</resources>
Index: app/src/main/res/layout/page_search_result_list_empty.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/page_search_result_list_empty.xml	(revision )
+++ app/src/main/res/layout/page_search_result_list_empty.xml	(revision )
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/common_background_all_page"
+    android:paddingTop="120dip"
+    android:gravity="center_horizontal">
+
+    <TextView
+        android:layout_width="80dip"
+        android:layout_height="80dip"
+        android:background="@mipmap/common_search_noresult"
+        android:gravity="center"/>
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginTop="@dimen/common_content_margin_10"
+        android:textSize="@dimen/common_font_size_12"
+        android:textColor="@color/common_font_color_868585"
+        android:text="@string/search_title_sub7"/>
+
+</LinearLayout>
\ No newline at end of file
Index: app/src/main/assets/details.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/assets/details.css	(revision )
+++ app/src/main/assets/details.css	(revision )
@@ -0,0 +1,37 @@
+@charset "utf-8";
+/* CSS Reset */
+html, body, ul, li, ol, dl, dd, dt, p, h1, h2, h3, h4, h5, h6, form, fieldset, legend, img, td { margin: 0; padding: 0; }
+fieldset, img { border: none; vertical-align: middle; }
+address, caption, cite, code, dfn, th, var { font-style: normal; font-weight: normal; }
+ul, ol { list-style: none; }
+i,em,ins,u{font-style:normal; text-decoration:none }
+select, input { vertical-align: middle; }
+select, input, textarea { margin: 0; outline: none; resize: none; color: #888; font-family: "黑体";}
+table { border-collapse: collapse; }
+html{-webkit-text-size-adjust: none}
+body { color: #333333; font-family: "微软雅黑"; background: #f5f5f5;min-width: 320px;}
+* { -webkit-tap-highlight-color: rgba(0,0,0,0); -webkit-box-sizing: border-box; -moz-box-sizing: border-box; -ms-box-sizing: border-box; box-sizing: border-box }
+p,h1,h2,h3,h4{font-size: 1em;font-weight: normal}
+@media screen and (min-width: 320px) {
+    body { font-size: 16px;}
+}
+
+@media screen and (min-width: 480px) {
+    body { font-size: 24px; }
+}
+
+@media screen and (min-width: 640px) {
+    body { font-size: 32px; }
+}
+/*关于我们*/
+section.about_section{text-align: center;}
+.about_section img{margin-top: 2.1875em}
+.pay_name{text-align: center;height: 0.75em;line-height: 0.45em;margin-top: 1em;}
+.pay_name span{color: #000;font-size: 0.75em;}
+span.about_section_versions{font-size: 0.75em;display: block;margin-top: 0.4em;}
+.about_section p{margin-top: 1.75em;line-height: 1.5em;text-align: right}
+.about_section p span{color: #000;font-size: 0.8125em;}
+.about_footer{text-align: center;color: #868585;line-height: 0.8em;margin-top: 3.4375em;}
+.about_footer span{font-size: 0.6875em;}
+/*关于我们*/
+
Index: app/src/main/java/com/oasgames/android/oaspay/activity/ActivityMain.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/activity/ActivityMain.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/activity/ActivityMain.java	(revision )
@@ -0,0 +1,359 @@
+package com.oasgames.android.oaspay.activity;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentActivity;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.app.FragmentPagerAdapter;
+import android.support.v4.view.ViewPager;
+import android.support.v4.view.ViewPager.OnPageChangeListener;
+import android.text.TextUtils;
+import android.util.DisplayMetrics;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.view.animation.TranslateAnimation;
+import android.widget.LinearLayout;
+import android.widget.RadioButton;
+import android.widget.RadioGroup;
+import android.widget.RadioGroup.OnCheckedChangeListener;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.base.tools.google.GoogleBillingTimer;
+import com.base.tools.google.GoogleBillingUtils;
+import com.base.tools.utils.BasesUtils;
+import com.base.tools.utils.DisplayUtil;
+import com.facebook.FacebookSdk;
+import com.oasgames.android.oaspay.R;
+import com.oasgames.android.oaspay.tools.ReportTimer;
+import com.oasgames.android.oaspay.tools.ReportUtils;
+
+import java.util.Locale;
+import java.util.Timer;
+
+
+public class ActivityMain extends FragmentActivity {
+	public final int FRAGMENT_SHOP = 0;
+	public final int FRAGMENT_NEWS = 1;
+	public final int FRAGMENT_MINE = 2;
+	private int curFragment = 0;
+
+	Toast toast;
+    /**
+     * The {@link android.support.v4.view.PagerAdapter} that will provide
+     * fragments for each of the sections. We use a
+     * {@link FragmentPagerAdapter} derivative, which will keep every
+     * loaded fragment in memory. If this becomes too memory intensive, it
+     * may be best to switch to a
+     * {@link android.support.v4.app.FragmentStatePagerAdapter}.
+     */
+    SectionsPagerAdapter mSectionsPagerAdapter;
+
+    /**
+     * The {@link ViewPager} that will host the section contents.
+     */
+    ViewPager mViewPager;
+    
+    RadioGroup tabGroup;
+
+	TextView radioFlag;
+
+	DisplayMetrics dm;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+		//不显示程序的标题栏
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+
+		//不显示系统的标题栏
+		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+				WindowManager.LayoutParams.FLAG_FULLSCREEN);
+		setContentView(R.layout.activity_main);
+
+		FacebookSdk.sdkInitialize(getApplicationContext());
+
+		dm = BasesUtils.getDisplayMetrics(this);
+
+		init();// 初始化
+
+		setOnListener();// 设置监听事件
+
+		try {
+			GoogleBillingUtils.GoogleBillingTimer.schedule(new GoogleBillingTimer(), 10000, 30000);
+		} catch (Exception e) {
+			GoogleBillingUtils.GoogleBillingTimer = new Timer();
+			GoogleBillingUtils.GoogleBillingTimer.schedule(new GoogleBillingTimer(), 10000, 2);
+		}
+		try {
+			ReportUtils.reportTimer.schedule(new ReportTimer(), 10000, 30000);
+		} catch (Exception e) {
+			ReportUtils.reportTimer = new Timer();
+			ReportUtils.reportTimer.schedule(new ReportTimer(), 10000, 30000);
+		}
+
+		reportEvent();// 初始化默认上报一次
+	}
+    private void init(){
+    	tabGroup = (RadioGroup) findViewById(R.id.main_tab_group);
+		tabGroup.check(R.id.main_tab_0);
+		RadioButton btn0 = ((RadioButton) tabGroup.getChildAt(0));
+		btn0.setTextColor(getResources().getColor(R.color.common_font_color_49a81a));
+
+		radioFlag = new TextView(this);
+		radioFlag.setLayoutParams(new LinearLayout.LayoutParams(dm.widthPixels / tabGroup.getChildCount(), DisplayUtil.dip2px(6, dm.scaledDensity)));
+		radioFlag.setBackgroundColor(getResources().getColor(R.color.common_font_color_49a81a));
+		((LinearLayout)findViewById(R.id.main_foot_flag)).addView(radioFlag);
+
+        // Set up the ViewPager with the sections adapter.
+        mViewPager = (ViewPager) findViewById(R.id.pager);
+		mViewPager.setOffscreenPageLimit(2);// 缓存当前页面左右两边的页面个数
+        
+     // Create the adapter that will return a fragment for each of the three
+        // primary sections of the activity.
+        mSectionsPagerAdapter = new SectionsPagerAdapter(getSupportFragmentManager());
+        mViewPager.setAdapter(mSectionsPagerAdapter);
+    }
+
+	public void onClickView(View view){
+		switch (view.getId()){
+			case R.id.common_head_back:
+				break;
+			case R.id.common_head_tool:
+				startActivity(new Intent().setClass(this, ActivitySearch.class));
+				break;
+			case R.id.fragment_shop_function_order_layout:
+				if(BasesUtils.isLogin()) {
+					startActivity(new Intent().setClass(this, ActivityOrderListSlide.class));
+					ReportUtils.add(ReportUtils.DEFAULTEVENT_FMENUTMYLIST, null, null);
+				}else
+					startActivity(new Intent().setClass(this, ActivityLogin.class));
+				break;
+			case R.id.fragment_shop_function_prop_layout:
+				startActivity(new Intent().setClass(this, ActivityProductList.class));
+				break;
+			case R.id.fragment_shop_function_capture_layout:
+				startActivity(new Intent().setClass(this, ActivityCapture.class));
+				break;
+			case R.id.fragment_shop_function_charge_layout:
+				if(BasesUtils.isLogin())
+					startActivity(new Intent().setClass(this, ActivityPayPackageList.class));
+				else
+					startActivity(new Intent().setClass(this, ActivityLogin.class));
+				break;
+			case R.id.fragment_shop_category_newest_more:
+				startActivity(new Intent().setClass(this, ActivityProductList.class).putExtra("product_type", "1"));
+				break;
+			case R.id.fragment_shop_category_hot_more:
+				startActivity(new Intent().setClass(this, ActivityProductList.class).putExtra("product_type", "2"));
+				break;
+			case R.id.fragment_shop_category_review_more:
+				startActivity(new Intent().setClass(this, ActivityProductList.class).putExtra("product_type", "3"));
+				break;
+			case R.id.fragment_mine_head_touxiang:
+				if(BasesUtils.isLogin())
+					return;
+				startActivity(new Intent().setClass(this, ActivityLogin.class));
+				break;
+//			case R.id.fragment_mine_exit:
+//				((MyApplication)getApplication()).clearUserInfo();
+//				((FragmentMine)mSectionsPagerAdapter.getItem(FRAGMENT_MINE)).updateUserInfo();
+//				break;
+		}
+	}
+    private void setOnListener(){
+    	mViewPager.addOnPageChangeListener(new OnPageChangeListener() {
+
+			@Override
+			public void onPageSelected(int arg0) {
+				// 更新 tab 样式及选中位置
+				int type = -1;
+				switch (arg0) {
+					case FRAGMENT_SHOP:
+						type = R.id.main_tab_0;
+						break;
+					case FRAGMENT_NEWS:
+						type = R.id.main_tab_1;
+						break;
+					case FRAGMENT_MINE:
+						type = R.id.main_tab_2;
+						break;
+
+					default:
+						break;
+				}
+				tabGroup.check(type);
+			}
+
+			@Override
+			public void onPageScrolled(int arg0, float arg1, int arg2) {
+			}
+
+			@Override
+			public void onPageScrollStateChanged(int arg0) {
+			}
+		});
+    	tabGroup.setOnCheckedChangeListener(new OnCheckedChangeListener() {
+			
+			@Override
+			public void onCheckedChanged(RadioGroup group, int checkedId) {
+				int type = -1;
+				switch (checkedId) {
+				case R.id.main_tab_0:
+					type = FRAGMENT_SHOP;
+					break;
+				case R.id.main_tab_1:
+					type = FRAGMENT_NEWS;
+					break;
+				case R.id.main_tab_2:
+					type = FRAGMENT_MINE;
+					break;
+
+				default:
+					break;
+				}
+				if(type == -1){
+					Toast.makeText(ActivityMain.this, "该项未完成", Toast.LENGTH_LONG).show();
+					return;
+				}
+				if(curFragment == type)
+					return;
+
+				changeRadioStyle(checkedId);
+
+				if(mViewPager.getCurrentItem() != type)
+		        	mViewPager.setCurrentItem(type);// 指定项
+
+				curFragment = type;
+
+				reportEvent();// 每切换一次，上报事件
+			}
+		});
+    }
+
+	/**
+	 * Mdata 上报
+	 */
+	private void reportEvent(){
+		String eventName = "";
+		switch (curFragment){
+			case FRAGMENT_SHOP:
+				eventName = ReportUtils.DEFAULTEVENT_MALL;
+				break;
+			case FRAGMENT_NEWS:
+				eventName = ReportUtils.DEFAULTEVENT_INFORMATION;
+				break;
+			case FRAGMENT_MINE:
+				eventName = ReportUtils.DEFAULTEVENT_ME;
+				break;
+		}
+		if(!TextUtils.isEmpty(eventName))
+			ReportUtils.add(eventName, null, null);
+	}
+	/**
+	 * 改变 RadioButton的字体颜色，及动画
+	 * @param checkedId
+	 */
+	private void changeRadioStyle(int checkedId){
+		int count = tabGroup.getChildCount();
+		int index = 0;
+		for (int i=0;i<count;i++){
+			RadioButton v = (RadioButton)tabGroup.getChildAt(i);
+			if(v.getId() == checkedId){
+				v.setTextColor(getResources().getColor(R.color.common_font_color_49a81a));
+				index = i;
+			}else
+				v.setTextColor(getResources().getColor(R.color.common_font_color_000000));
+		}
+		int singleRadioWidth = dm.widthPixels/count;
+		float fromX = curFragment*singleRadioWidth;
+		float toX = index*singleRadioWidth;
+		TranslateAnimation animation = new TranslateAnimation(fromX, toX, 0, 0);
+		animation.setDuration(Math.abs((int)(toX-fromX)/singleRadioWidth*200));
+		animation.setFillAfter(true);
+		radioFlag.startAnimation(animation);
+	}
+	int keyBackRepeatCount = 0;// 点击返回键的次数
+	long lastTime = 0;// 上一次点击返回的时间
+	@Override
+	public boolean onKeyDown(int keyCode, KeyEvent event) {
+		super.onKeyDown(keyCode, event);
+		if (KeyEvent.KEYCODE_BACK == keyCode){
+			long curTime = System.currentTimeMillis();
+			if(keyBackRepeatCount >= 1 && (curTime - lastTime<3000)){// 在3秒内连续2次点击返回键
+				if(GoogleBillingUtils.GoogleBillingTimer!=null)
+					GoogleBillingUtils.GoogleBillingTimer.cancel();
+				if(ReportUtils.reportTimer!=null)
+					ReportUtils.reportTimer.cancel();
+
+				if(toast != null)
+					toast.cancel();
+				finish();
+				return true;
+			}
+			
+			keyBackRepeatCount ++;
+			lastTime = curTime;
+
+			if(toast == null)
+				toast = Toast.makeText(this, getString(R.string.main_notice_1), Toast.LENGTH_LONG);
+			toast.setText(getString(R.string.main_notice_1));
+			toast.show();
+//			Toast.makeText(this, getString(R.string.main_notice_1), Toast.LENGTH_LONG).show();
+		}
+		return false;
+	}
+    
+
+    /**
+     * A {@link FragmentPagerAdapter} that returns a fragment corresponding to
+     * one of the sections/tabs/pages.
+     */
+    public class SectionsPagerAdapter extends FragmentPagerAdapter {
+        public SectionsPagerAdapter(FragmentManager fm) {
+            super(fm);
+        }
+
+        @Override
+        public Fragment getItem(int position) {
+            // getItem is called to instantiate the fragment for the given page.
+            // Return a PlaceholderFragment (defined as a static inner class below).
+//            return PlaceholderFragment.newInstance(position + 1);
+//        	return lists.get(position);
+        	switch (position) {
+            	case FRAGMENT_SHOP:
+                   		return new FragmentShop();
+               case FRAGMENT_NEWS:
+                   		return new FragmentNews();
+               case FRAGMENT_MINE:
+                   		return new FragmentMine();
+               default:
+                   return null;
+               }
+        }
+
+        @Override
+        public int getCount() {
+            // Show 3 total pages.
+            return 3;
+        }
+
+        @Override
+        public CharSequence getPageTitle(int position) {
+            Locale l = Locale.getDefault();
+//            switch (position) {
+//                case 0:
+//                    return getString(R.string.title_section1).toUpperCase(l);
+//                case 1:
+//                    return getString(R.string.title_section2).toUpperCase(l);
+//                case 2:
+//                    return getString(R.string.title_section3).toUpperCase(l);
+//            }
+            return null;
+        }
+    }
+
+}
Index: app/src/main/java/com/nineoldandroids/animation/AnimatorSet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nineoldandroids/animation/AnimatorSet.java	(revision )
+++ app/src/main/java/com/nineoldandroids/animation/AnimatorSet.java	(revision )
@@ -0,0 +1,1113 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.nineoldandroids.animation;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.List;
+
+import android.view.animation.Interpolator;
+
+/**
+ * This class plays a set of {@link Animator} objects in the specified order. Animations
+ * can be set up to play together, in sequence, or after a specified delay.
+ *
+ * <p>There are two different approaches to adding animations to a <code>AnimatorSet</code>:
+ * either the {@link AnimatorSet#playTogether(Animator[]) playTogether()} or
+ * {@link AnimatorSet#playSequentially(Animator[]) playSequentially()} methods can be called to add
+ * a set of animations all at once, or the {@link AnimatorSet#play(Animator)} can be
+ * used in conjunction with methods in the {@link Builder Builder}
+ * class to add animations
+ * one by one.</p>
+ *
+ * <p>It is possible to set up a <code>AnimatorSet</code> with circular dependencies between
+ * its animations. For example, an animation a1 could be set up to start before animation a2, a2
+ * before a3, and a3 before a1. The results of this configuration are undefined, but will typically
+ * result in none of the affected animations being played. Because of this (and because
+ * circular dependencies do not make logical sense anyway), circular dependencies
+ * should be avoided, and the dependency flow of animations should only be in one direction.
+ */
+public final class AnimatorSet extends Animator {
+
+    /**
+     * Internal variables
+     * NOTE: This object implements the clone() method, making a deep copy of any referenced
+     * objects. As other non-trivial fields are added to this class, make sure to add logic
+     * to clone() to make deep copies of them.
+     */
+
+    /**
+     * Tracks animations currently being played, so that we know what to
+     * cancel or end when cancel() or end() is called on this AnimatorSet
+     */
+    private ArrayList<Animator> mPlayingSet = new ArrayList<Animator>();
+
+    /**
+     * Contains all nodes, mapped to their respective Animators. When new
+     * dependency information is added for an Animator, we want to add it
+     * to a single node representing that Animator, not create a new Node
+     * if one already exists.
+     */
+    private HashMap<Animator, Node> mNodeMap = new HashMap<Animator, Node>();
+
+    /**
+     * Set of all nodes created for this AnimatorSet. This list is used upon
+     * starting the set, and the nodes are placed in sorted order into the
+     * sortedNodes collection.
+     */
+    private ArrayList<Node> mNodes = new ArrayList<Node>();
+
+    /**
+     * The sorted list of nodes. This is the order in which the animations will
+     * be played. The details about when exactly they will be played depend
+     * on the dependency relationships of the nodes.
+     */
+    private ArrayList<Node> mSortedNodes = new ArrayList<Node>();
+
+    /**
+     * Flag indicating whether the nodes should be sorted prior to playing. This
+     * flag allows us to cache the previous sorted nodes so that if the sequence
+     * is replayed with no changes, it does not have to re-sort the nodes again.
+     */
+    private boolean mNeedsSort = true;
+
+    private AnimatorSetListener mSetListener = null;
+
+    /**
+     * Flag indicating that the AnimatorSet has been manually
+     * terminated (by calling cancel() or end()).
+     * This flag is used to avoid starting other animations when currently-playing
+     * child animations of this AnimatorSet end. It also determines whether cancel/end
+     * notifications are sent out via the normal AnimatorSetListener mechanism.
+     */
+    boolean mTerminated = false;
+
+    /**
+     * Indicates whether an AnimatorSet has been start()'d, whether or
+     * not there is a nonzero startDelay.
+     */
+    private boolean mStarted = false;
+
+    // The amount of time in ms to delay starting the animation after start() is called
+    private long mStartDelay = 0;
+
+    // Animator used for a nonzero startDelay
+    private ValueAnimator mDelayAnim = null;
+
+
+    // How long the child animations should last in ms. The default value is negative, which
+    // simply means that there is no duration set on the AnimatorSet. When a real duration is
+    // set, it is passed along to the child animations.
+    private long mDuration = -1;
+
+
+    /**
+     * Sets up this AnimatorSet to play all of the supplied animations at the same time.
+     *
+     * @param items The animations that will be started simultaneously.
+     */
+    public void playTogether(Animator... items) {
+        if (items != null) {
+            mNeedsSort = true;
+            Builder builder = play(items[0]);
+            for (int i = 1; i < items.length; ++i) {
+                builder.with(items[i]);
+            }
+        }
+    }
+
+    /**
+     * Sets up this AnimatorSet to play all of the supplied animations at the same time.
+     *
+     * @param items The animations that will be started simultaneously.
+     */
+    public void playTogether(Collection<Animator> items) {
+        if (items != null && items.size() > 0) {
+            mNeedsSort = true;
+            Builder builder = null;
+            for (Animator anim : items) {
+                if (builder == null) {
+                    builder = play(anim);
+                } else {
+                    builder.with(anim);
+                }
+            }
+        }
+    }
+
+    /**
+     * Sets up this AnimatorSet to play each of the supplied animations when the
+     * previous animation ends.
+     *
+     * @param items The animations that will be started one after another.
+     */
+    public void playSequentially(Animator... items) {
+        if (items != null) {
+            mNeedsSort = true;
+            if (items.length == 1) {
+                play(items[0]);
+            } else {
+                for (int i = 0; i < items.length - 1; ++i) {
+                    play(items[i]).before(items[i+1]);
+                }
+            }
+        }
+    }
+
+    /**
+     * Sets up this AnimatorSet to play each of the supplied animations when the
+     * previous animation ends.
+     *
+     * @param items The animations that will be started one after another.
+     */
+    public void playSequentially(List<Animator> items) {
+        if (items != null && items.size() > 0) {
+            mNeedsSort = true;
+            if (items.size() == 1) {
+                play(items.get(0));
+            } else {
+                for (int i = 0; i < items.size() - 1; ++i) {
+                    play(items.get(i)).before(items.get(i+1));
+                }
+            }
+        }
+    }
+
+    /**
+     * Returns the current list of child Animator objects controlled by this
+     * AnimatorSet. This is a copy of the internal list; modifications to the returned list
+     * will not affect the AnimatorSet, although changes to the underlying Animator objects
+     * will affect those objects being managed by the AnimatorSet.
+     *
+     * @return ArrayList<Animator> The list of child animations of this AnimatorSet.
+     */
+    public ArrayList<Animator> getChildAnimations() {
+        ArrayList<Animator> childList = new ArrayList<Animator>();
+        for (Node node : mNodes) {
+            childList.add(node.animation);
+        }
+        return childList;
+    }
+
+    /**
+     * Sets the target object for all current {@link #getChildAnimations() child animations}
+     * of this AnimatorSet that take targets ({@link ObjectAnimator} and
+     * AnimatorSet).
+     *
+     * @param target The object being animated
+     */
+    @Override
+    public void setTarget(Object target) {
+        for (Node node : mNodes) {
+            Animator animation = node.animation;
+            if (animation instanceof AnimatorSet) {
+                ((AnimatorSet)animation).setTarget(target);
+            } else if (animation instanceof ObjectAnimator) {
+                ((ObjectAnimator)animation).setTarget(target);
+            }
+        }
+    }
+
+    /**
+     * Sets the TimeInterpolator for all current {@link #getChildAnimations() child animations}
+     * of this AnimatorSet.
+     *
+     * @param interpolator the interpolator to be used by each child animation of this AnimatorSet
+     */
+    @Override
+    public void setInterpolator(/*Time*/Interpolator interpolator) {
+        for (Node node : mNodes) {
+            node.animation.setInterpolator(interpolator);
+        }
+    }
+
+    /**
+     * This method creates a <code>Builder</code> object, which is used to
+     * set up playing constraints. This initial <code>play()</code> method
+     * tells the <code>Builder</code> the animation that is the dependency for
+     * the succeeding commands to the <code>Builder</code>. For example,
+     * calling <code>play(a1).with(a2)</code> sets up the AnimatorSet to play
+     * <code>a1</code> and <code>a2</code> at the same time,
+     * <code>play(a1).before(a2)</code> sets up the AnimatorSet to play
+     * <code>a1</code> first, followed by <code>a2</code>, and
+     * <code>play(a1).after(a2)</code> sets up the AnimatorSet to play
+     * <code>a2</code> first, followed by <code>a1</code>.
+     *
+     * <p>Note that <code>play()</code> is the only way to tell the
+     * <code>Builder</code> the animation upon which the dependency is created,
+     * so successive calls to the various functions in <code>Builder</code>
+     * will all refer to the initial parameter supplied in <code>play()</code>
+     * as the dependency of the other animations. For example, calling
+     * <code>play(a1).before(a2).before(a3)</code> will play both <code>a2</code>
+     * and <code>a3</code> when a1 ends; it does not set up a dependency between
+     * <code>a2</code> and <code>a3</code>.</p>
+     *
+     * @param anim The animation that is the dependency used in later calls to the
+     * methods in the returned <code>Builder</code> object. A null parameter will result
+     * in a null <code>Builder</code> return value.
+     * @return Builder The object that constructs the AnimatorSet based on the dependencies
+     * outlined in the calls to <code>play</code> and the other methods in the
+     * <code>Builder</code object.
+     */
+    public Builder play(Animator anim) {
+        if (anim != null) {
+            mNeedsSort = true;
+            return new Builder(anim);
+        }
+        return null;
+    }
+
+    /**
+     * {@inheritDoc}
+     *
+     * <p>Note that canceling a <code>AnimatorSet</code> also cancels all of the animations that it
+     * is responsible for.</p>
+     */
+    @SuppressWarnings("unchecked")
+    @Override
+    public void cancel() {
+        mTerminated = true;
+        if (isStarted()) {
+            ArrayList<AnimatorListener> tmpListeners = null;
+            if (mListeners != null) {
+                tmpListeners = (ArrayList<AnimatorListener>) mListeners.clone();
+                for (AnimatorListener listener : tmpListeners) {
+                    listener.onAnimationCancel(this);
+                }
+            }
+            if (mDelayAnim != null && mDelayAnim.isRunning()) {
+                // If we're currently in the startDelay period, just cancel that animator and
+                // send out the end event to all listeners
+                mDelayAnim.cancel();
+            } else  if (mSortedNodes.size() > 0) {
+                for (Node node : mSortedNodes) {
+                    node.animation.cancel();
+                }
+            }
+            if (tmpListeners != null) {
+                for (AnimatorListener listener : tmpListeners) {
+                    listener.onAnimationEnd(this);
+                }
+            }
+            mStarted = false;
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     *
+     * <p>Note that ending a <code>AnimatorSet</code> also ends all of the animations that it is
+     * responsible for.</p>
+     */
+    @Override
+    public void end() {
+        mTerminated = true;
+        if (isStarted()) {
+            if (mSortedNodes.size() != mNodes.size()) {
+                // hasn't been started yet - sort the nodes now, then end them
+                sortNodes();
+                for (Node node : mSortedNodes) {
+                    if (mSetListener == null) {
+                        mSetListener = new AnimatorSetListener(this);
+                    }
+                    node.animation.addListener(mSetListener);
+                }
+            }
+            if (mDelayAnim != null) {
+                mDelayAnim.cancel();
+            }
+            if (mSortedNodes.size() > 0) {
+                for (Node node : mSortedNodes) {
+                    node.animation.end();
+                }
+            }
+            if (mListeners != null) {
+                ArrayList<AnimatorListener> tmpListeners =
+                        (ArrayList<AnimatorListener>) mListeners.clone();
+                for (AnimatorListener listener : tmpListeners) {
+                    listener.onAnimationEnd(this);
+                }
+            }
+            mStarted = false;
+        }
+    }
+
+    /**
+     * Returns true if any of the child animations of this AnimatorSet have been started and have
+     * not yet ended.
+     * @return Whether this AnimatorSet has been started and has not yet ended.
+     */
+    @Override
+    public boolean isRunning() {
+        for (Node node : mNodes) {
+            if (node.animation.isRunning()) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    @Override
+    public boolean isStarted() {
+        return mStarted;
+    }
+
+    /**
+     * The amount of time, in milliseconds, to delay starting the animation after
+     * {@link #start()} is called.
+     *
+     * @return the number of milliseconds to delay running the animation
+     */
+    @Override
+    public long getStartDelay() {
+        return mStartDelay;
+    }
+
+    /**
+     * The amount of time, in milliseconds, to delay starting the animation after
+     * {@link #start()} is called.
+
+     * @param startDelay The amount of the delay, in milliseconds
+     */
+    @Override
+    public void setStartDelay(long startDelay) {
+        mStartDelay = startDelay;
+    }
+
+    /**
+     * Gets the length of each of the child animations of this AnimatorSet. This value may
+     * be less than 0, which indicates that no duration has been set on this AnimatorSet
+     * and each of the child animations will use their own duration.
+     *
+     * @return The length of the animation, in milliseconds, of each of the child
+     * animations of this AnimatorSet.
+     */
+    @Override
+    public long getDuration() {
+        return mDuration;
+    }
+
+    /**
+     * Sets the length of each of the current child animations of this AnimatorSet. By default,
+     * each child animation will use its own duration. If the duration is set on the AnimatorSet,
+     * then each child animation inherits this duration.
+     *
+     * @param duration The length of the animation, in milliseconds, of each of the child
+     * animations of this AnimatorSet.
+     */
+    @Override
+    public AnimatorSet setDuration(long duration) {
+        if (duration < 0) {
+            throw new IllegalArgumentException("duration must be a value of zero or greater");
+        }
+        for (Node node : mNodes) {
+            // TODO: don't set the duration of the timing-only nodes created by AnimatorSet to
+            // insert "play-after" delays
+            node.animation.setDuration(duration);
+        }
+        mDuration = duration;
+        return this;
+    }
+
+    @Override
+    public void setupStartValues() {
+        for (Node node : mNodes) {
+            node.animation.setupStartValues();
+        }
+    }
+
+    @Override
+    public void setupEndValues() {
+        for (Node node : mNodes) {
+            node.animation.setupEndValues();
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     *
+     * <p>Starting this <code>AnimatorSet</code> will, in turn, start the animations for which
+     * it is responsible. The details of when exactly those animations are started depends on
+     * the dependency relationships that have been set up between the animations.
+     */
+    @SuppressWarnings("unchecked")
+    @Override
+    public void start() {
+        mTerminated = false;
+        mStarted = true;
+
+        // First, sort the nodes (if necessary). This will ensure that sortedNodes
+        // contains the animation nodes in the correct order.
+        sortNodes();
+
+        int numSortedNodes = mSortedNodes.size();
+        for (int i = 0; i < numSortedNodes; ++i) {
+            Node node = mSortedNodes.get(i);
+            // First, clear out the old listeners
+            ArrayList<AnimatorListener> oldListeners = node.animation.getListeners();
+            if (oldListeners != null && oldListeners.size() > 0) {
+                final ArrayList<AnimatorListener> clonedListeners = new
+                        ArrayList<AnimatorListener>(oldListeners);
+
+                for (AnimatorListener listener : clonedListeners) {
+                    if (listener instanceof DependencyListener ||
+                            listener instanceof AnimatorSetListener) {
+                        node.animation.removeListener(listener);
+                    }
+                }
+            }
+        }
+
+        // nodesToStart holds the list of nodes to be started immediately. We don't want to
+        // start the animations in the loop directly because we first need to set up
+        // dependencies on all of the nodes. For example, we don't want to start an animation
+        // when some other animation also wants to start when the first animation begins.
+        final ArrayList<Node> nodesToStart = new ArrayList<Node>();
+        for (int i = 0; i < numSortedNodes; ++i) {
+            Node node = mSortedNodes.get(i);
+            if (mSetListener == null) {
+                mSetListener = new AnimatorSetListener(this);
+            }
+            if (node.dependencies == null || node.dependencies.size() == 0) {
+                nodesToStart.add(node);
+            } else {
+                int numDependencies = node.dependencies.size();
+                for (int j = 0; j < numDependencies; ++j) {
+                    Dependency dependency = node.dependencies.get(j);
+                    dependency.node.animation.addListener(
+                            new DependencyListener(this, node, dependency.rule));
+                }
+                node.tmpDependencies = (ArrayList<Dependency>) node.dependencies.clone();
+            }
+            node.animation.addListener(mSetListener);
+        }
+        // Now that all dependencies are set up, start the animations that should be started.
+        if (mStartDelay <= 0) {
+            for (Node node : nodesToStart) {
+                node.animation.start();
+                mPlayingSet.add(node.animation);
+            }
+        } else {
+            mDelayAnim = ValueAnimator.ofFloat(0f, 1f);
+            mDelayAnim.setDuration(mStartDelay);
+            mDelayAnim.addListener(new AnimatorListenerAdapter() {
+                boolean canceled = false;
+                public void onAnimationCancel(Animator anim) {
+                    canceled = true;
+                }
+                public void onAnimationEnd(Animator anim) {
+                    if (!canceled) {
+                        int numNodes = nodesToStart.size();
+                        for (int i = 0; i < numNodes; ++i) {
+                            Node node = nodesToStart.get(i);
+                            node.animation.start();
+                            mPlayingSet.add(node.animation);
+                        }
+                    }
+                }
+            });
+            mDelayAnim.start();
+        }
+        if (mListeners != null) {
+            ArrayList<AnimatorListener> tmpListeners =
+                    (ArrayList<AnimatorListener>) mListeners.clone();
+            int numListeners = tmpListeners.size();
+            for (int i = 0; i < numListeners; ++i) {
+                tmpListeners.get(i).onAnimationStart(this);
+            }
+        }
+        if (mNodes.size() == 0 && mStartDelay == 0) {
+            // Handle unusual case where empty AnimatorSet is started - should send out
+            // end event immediately since the event will not be sent out at all otherwise
+            mStarted = false;
+            if (mListeners != null) {
+                ArrayList<AnimatorListener> tmpListeners =
+                        (ArrayList<AnimatorListener>) mListeners.clone();
+                int numListeners = tmpListeners.size();
+                for (int i = 0; i < numListeners; ++i) {
+                    tmpListeners.get(i).onAnimationEnd(this);
+                }
+            }
+        }
+    }
+
+    @Override
+    public AnimatorSet clone() {
+        final AnimatorSet anim = (AnimatorSet) super.clone();
+        /*
+         * The basic clone() operation copies all items. This doesn't work very well for
+         * AnimatorSet, because it will copy references that need to be recreated and state
+         * that may not apply. What we need to do now is put the clone in an uninitialized
+         * state, with fresh, empty data structures. Then we will build up the nodes list
+         * manually, as we clone each Node (and its animation). The clone will then be sorted,
+         * and will populate any appropriate lists, when it is started.
+         */
+        anim.mNeedsSort = true;
+        anim.mTerminated = false;
+        anim.mStarted = false;
+        anim.mPlayingSet = new ArrayList<Animator>();
+        anim.mNodeMap = new HashMap<Animator, Node>();
+        anim.mNodes = new ArrayList<Node>();
+        anim.mSortedNodes = new ArrayList<Node>();
+
+        // Walk through the old nodes list, cloning each node and adding it to the new nodemap.
+        // One problem is that the old node dependencies point to nodes in the old AnimatorSet.
+        // We need to track the old/new nodes in order to reconstruct the dependencies in the clone.
+        HashMap<Node, Node> nodeCloneMap = new HashMap<Node, Node>(); // <old, new>
+        for (Node node : mNodes) {
+            Node nodeClone = node.clone();
+            nodeCloneMap.put(node, nodeClone);
+            anim.mNodes.add(nodeClone);
+            anim.mNodeMap.put(nodeClone.animation, nodeClone);
+            // Clear out the dependencies in the clone; we'll set these up manually later
+            nodeClone.dependencies = null;
+            nodeClone.tmpDependencies = null;
+            nodeClone.nodeDependents = null;
+            nodeClone.nodeDependencies = null;
+            // clear out any listeners that were set up by the AnimatorSet; these will
+            // be set up when the clone's nodes are sorted
+            ArrayList<AnimatorListener> cloneListeners = nodeClone.animation.getListeners();
+            if (cloneListeners != null) {
+                ArrayList<AnimatorListener> listenersToRemove = null;
+                for (AnimatorListener listener : cloneListeners) {
+                    if (listener instanceof AnimatorSetListener) {
+                        if (listenersToRemove == null) {
+                            listenersToRemove = new ArrayList<AnimatorListener>();
+                        }
+                        listenersToRemove.add(listener);
+                    }
+                }
+                if (listenersToRemove != null) {
+                    for (AnimatorListener listener : listenersToRemove) {
+                        cloneListeners.remove(listener);
+                    }
+                }
+            }
+        }
+        // Now that we've cloned all of the nodes, we're ready to walk through their
+        // dependencies, mapping the old dependencies to the new nodes
+        for (Node node : mNodes) {
+            Node nodeClone = nodeCloneMap.get(node);
+            if (node.dependencies != null) {
+                for (Dependency dependency : node.dependencies) {
+                    Node clonedDependencyNode = nodeCloneMap.get(dependency.node);
+                    Dependency cloneDependency = new Dependency(clonedDependencyNode,
+                            dependency.rule);
+                    nodeClone.addDependency(cloneDependency);
+                }
+            }
+        }
+
+        return anim;
+    }
+
+    /**
+     * This class is the mechanism by which animations are started based on events in other
+     * animations. If an animation has multiple dependencies on other animations, then
+     * all dependencies must be satisfied before the animation is started.
+     */
+    private static class DependencyListener implements AnimatorListener {
+
+        private AnimatorSet mAnimatorSet;
+
+        // The node upon which the dependency is based.
+        private Node mNode;
+
+        // The Dependency rule (WITH or AFTER) that the listener should wait for on
+        // the node
+        private int mRule;
+
+        public DependencyListener(AnimatorSet animatorSet, Node node, int rule) {
+            this.mAnimatorSet = animatorSet;
+            this.mNode = node;
+            this.mRule = rule;
+        }
+
+        /**
+         * Ignore cancel events for now. We may want to handle this eventually,
+         * to prevent follow-on animations from running when some dependency
+         * animation is canceled.
+         */
+        public void onAnimationCancel(Animator animation) {
+        }
+
+        /**
+         * An end event is received - see if this is an event we are listening for
+         */
+        public void onAnimationEnd(Animator animation) {
+            if (mRule == Dependency.AFTER) {
+                startIfReady(animation);
+            }
+        }
+
+        /**
+         * Ignore repeat events for now
+         */
+        public void onAnimationRepeat(Animator animation) {
+        }
+
+        /**
+         * A start event is received - see if this is an event we are listening for
+         */
+        public void onAnimationStart(Animator animation) {
+            if (mRule == Dependency.WITH) {
+                startIfReady(animation);
+            }
+        }
+
+        /**
+         * Check whether the event received is one that the node was waiting for.
+         * If so, mark it as complete and see whether it's time to start
+         * the animation.
+         * @param dependencyAnimation the animation that sent the event.
+         */
+        private void startIfReady(Animator dependencyAnimation) {
+            if (mAnimatorSet.mTerminated) {
+                // if the parent AnimatorSet was canceled, then don't start any dependent anims
+                return;
+            }
+            Dependency dependencyToRemove = null;
+            int numDependencies = mNode.tmpDependencies.size();
+            for (int i = 0; i < numDependencies; ++i) {
+                Dependency dependency = mNode.tmpDependencies.get(i);
+                if (dependency.rule == mRule &&
+                        dependency.node.animation == dependencyAnimation) {
+                    // rule fired - remove the dependency and listener and check to
+                    // see whether it's time to start the animation
+                    dependencyToRemove = dependency;
+                    dependencyAnimation.removeListener(this);
+                    break;
+                }
+            }
+            mNode.tmpDependencies.remove(dependencyToRemove);
+            if (mNode.tmpDependencies.size() == 0) {
+                // all dependencies satisfied: start the animation
+                mNode.animation.start();
+                mAnimatorSet.mPlayingSet.add(mNode.animation);
+            }
+        }
+
+    }
+
+    private class AnimatorSetListener implements AnimatorListener {
+
+        private AnimatorSet mAnimatorSet;
+
+        AnimatorSetListener(AnimatorSet animatorSet) {
+            mAnimatorSet = animatorSet;
+        }
+
+        public void onAnimationCancel(Animator animation) {
+            if (!mTerminated) {
+                // Listeners are already notified of the AnimatorSet canceling in cancel().
+                // The logic below only kicks in when animations end normally
+                if (mPlayingSet.size() == 0) {
+                    if (mListeners != null) {
+                        int numListeners = mListeners.size();
+                        for (int i = 0; i < numListeners; ++i) {
+                            mListeners.get(i).onAnimationCancel(mAnimatorSet);
+                        }
+                    }
+                }
+            }
+        }
+
+        @SuppressWarnings("unchecked")
+        public void onAnimationEnd(Animator animation) {
+            animation.removeListener(this);
+            mPlayingSet.remove(animation);
+            Node animNode = mAnimatorSet.mNodeMap.get(animation);
+            animNode.done = true;
+            if (!mTerminated) {
+                // Listeners are already notified of the AnimatorSet ending in cancel() or
+                // end(); the logic below only kicks in when animations end normally
+                ArrayList<Node> sortedNodes = mAnimatorSet.mSortedNodes;
+                boolean allDone = true;
+                int numSortedNodes = sortedNodes.size();
+                for (int i = 0; i < numSortedNodes; ++i) {
+                    if (!sortedNodes.get(i).done) {
+                        allDone = false;
+                        break;
+                    }
+                }
+                if (allDone) {
+                    // If this was the last child animation to end, then notify listeners that this
+                    // AnimatorSet has ended
+                    if (mListeners != null) {
+                        ArrayList<AnimatorListener> tmpListeners =
+                                (ArrayList<AnimatorListener>) mListeners.clone();
+                        int numListeners = tmpListeners.size();
+                        for (int i = 0; i < numListeners; ++i) {
+                            tmpListeners.get(i).onAnimationEnd(mAnimatorSet);
+                        }
+                    }
+                    mAnimatorSet.mStarted = false;
+                }
+            }
+        }
+
+        // Nothing to do
+        public void onAnimationRepeat(Animator animation) {
+        }
+
+        // Nothing to do
+        public void onAnimationStart(Animator animation) {
+        }
+
+    }
+
+    /**
+     * This method sorts the current set of nodes, if needed. The sort is a simple
+     * DependencyGraph sort, which goes like this:
+     * - All nodes without dependencies become 'roots'
+     * - while roots list is not null
+     * -   for each root r
+     * -     add r to sorted list
+     * -     remove r as a dependency from any other node
+     * -   any nodes with no dependencies are added to the roots list
+     */
+    private void sortNodes() {
+        if (mNeedsSort) {
+            mSortedNodes.clear();
+            ArrayList<Node> roots = new ArrayList<Node>();
+            int numNodes = mNodes.size();
+            for (int i = 0; i < numNodes; ++i) {
+                Node node = mNodes.get(i);
+                if (node.dependencies == null || node.dependencies.size() == 0) {
+                    roots.add(node);
+                }
+            }
+            ArrayList<Node> tmpRoots = new ArrayList<Node>();
+            while (roots.size() > 0) {
+                int numRoots = roots.size();
+                for (int i = 0; i < numRoots; ++i) {
+                    Node root = roots.get(i);
+                    mSortedNodes.add(root);
+                    if (root.nodeDependents != null) {
+                        int numDependents = root.nodeDependents.size();
+                        for (int j = 0; j < numDependents; ++j) {
+                            Node node = root.nodeDependents.get(j);
+                            node.nodeDependencies.remove(root);
+                            if (node.nodeDependencies.size() == 0) {
+                                tmpRoots.add(node);
+                            }
+                        }
+                    }
+                }
+                roots.clear();
+                roots.addAll(tmpRoots);
+                tmpRoots.clear();
+            }
+            mNeedsSort = false;
+            if (mSortedNodes.size() != mNodes.size()) {
+                throw new IllegalStateException("Circular dependencies cannot exist"
+                        + " in AnimatorSet");
+            }
+        } else {
+            // Doesn't need sorting, but still need to add in the nodeDependencies list
+            // because these get removed as the event listeners fire and the dependencies
+            // are satisfied
+            int numNodes = mNodes.size();
+            for (int i = 0; i < numNodes; ++i) {
+                Node node = mNodes.get(i);
+                if (node.dependencies != null && node.dependencies.size() > 0) {
+                    int numDependencies = node.dependencies.size();
+                    for (int j = 0; j < numDependencies; ++j) {
+                        Dependency dependency = node.dependencies.get(j);
+                        if (node.nodeDependencies == null) {
+                            node.nodeDependencies = new ArrayList<Node>();
+                        }
+                        if (!node.nodeDependencies.contains(dependency.node)) {
+                            node.nodeDependencies.add(dependency.node);
+                        }
+                    }
+                }
+                // nodes are 'done' by default; they become un-done when started, and done
+                // again when ended
+                node.done = false;
+            }
+        }
+    }
+
+    /**
+     * Dependency holds information about the node that some other node is
+     * dependent upon and the nature of that dependency.
+     *
+     */
+    private static class Dependency {
+        static final int WITH = 0; // dependent node must start with this dependency node
+        static final int AFTER = 1; // dependent node must start when this dependency node finishes
+
+        // The node that the other node with this Dependency is dependent upon
+        public Node node;
+
+        // The nature of the dependency (WITH or AFTER)
+        public int rule;
+
+        public Dependency(Node node, int rule) {
+            this.node = node;
+            this.rule = rule;
+        }
+    }
+
+    /**
+     * A Node is an embodiment of both the Animator that it wraps as well as
+     * any dependencies that are associated with that Animation. This includes
+     * both dependencies upon other nodes (in the dependencies list) as
+     * well as dependencies of other nodes upon this (in the nodeDependents list).
+     */
+    private static class Node implements Cloneable {
+        public Animator animation;
+
+        /**
+         *  These are the dependencies that this node's animation has on other
+         *  nodes. For example, if this node's animation should begin with some
+         *  other animation ends, then there will be an item in this node's
+         *  dependencies list for that other animation's node.
+         */
+        public ArrayList<Dependency> dependencies = null;
+
+        /**
+         * tmpDependencies is a runtime detail. We use the dependencies list for sorting.
+         * But we also use the list to keep track of when multiple dependencies are satisfied,
+         * but removing each dependency as it is satisfied. We do not want to remove
+         * the dependency itself from the list, because we need to retain that information
+         * if the AnimatorSet is launched in the future. So we create a copy of the dependency
+         * list when the AnimatorSet starts and use this tmpDependencies list to track the
+         * list of satisfied dependencies.
+         */
+        public ArrayList<Dependency> tmpDependencies = null;
+
+        /**
+         * nodeDependencies is just a list of the nodes that this Node is dependent upon.
+         * This information is used in sortNodes(), to determine when a node is a root.
+         */
+        public ArrayList<Node> nodeDependencies = null;
+
+        /**
+         * nodeDepdendents is the list of nodes that have this node as a dependency. This
+         * is a utility field used in sortNodes to facilitate removing this node as a
+         * dependency when it is a root node.
+         */
+        public ArrayList<Node> nodeDependents = null;
+
+        /**
+         * Flag indicating whether the animation in this node is finished. This flag
+         * is used by AnimatorSet to check, as each animation ends, whether all child animations
+         * are done and it's time to send out an end event for the entire AnimatorSet.
+         */
+        public boolean done = false;
+
+        /**
+         * Constructs the Node with the animation that it encapsulates. A Node has no
+         * dependencies by default; dependencies are added via the addDependency()
+         * method.
+         *
+         * @param animation The animation that the Node encapsulates.
+         */
+        public Node(Animator animation) {
+            this.animation = animation;
+        }
+
+        /**
+         * Add a dependency to this Node. The dependency includes information about the
+         * node that this node is dependency upon and the nature of the dependency.
+         * @param dependency
+         */
+        public void addDependency(Dependency dependency) {
+            if (dependencies == null) {
+                dependencies = new ArrayList<Dependency>();
+                nodeDependencies = new ArrayList<Node>();
+            }
+            dependencies.add(dependency);
+            if (!nodeDependencies.contains(dependency.node)) {
+                nodeDependencies.add(dependency.node);
+            }
+            Node dependencyNode = dependency.node;
+            if (dependencyNode.nodeDependents == null) {
+                dependencyNode.nodeDependents = new ArrayList<Node>();
+            }
+            dependencyNode.nodeDependents.add(this);
+        }
+
+        @Override
+        public Node clone() {
+            try {
+                Node node = (Node) super.clone();
+                node.animation = (Animator) animation.clone();
+                return node;
+            } catch (CloneNotSupportedException e) {
+               throw new AssertionError();
+            }
+        }
+    }
+
+    /**
+     * The <code>Builder</code> object is a utility class to facilitate adding animations to a
+     * <code>AnimatorSet</code> along with the relationships between the various animations. The
+     * intention of the <code>Builder</code> methods, along with the {@link
+     * AnimatorSet#play(Animator) play()} method of <code>AnimatorSet</code> is to make it possible
+     * to express the dependency relationships of animations in a natural way. Developers can also
+     * use the {@link AnimatorSet#playTogether(Animator[]) playTogether()} and {@link
+     * AnimatorSet#playSequentially(Animator[]) playSequentially()} methods if these suit the need,
+     * but it might be easier in some situations to express the AnimatorSet of animations in pairs.
+     * <p/>
+     * <p>The <code>Builder</code> object cannot be constructed directly, but is rather constructed
+     * internally via a call to {@link AnimatorSet#play(Animator)}.</p>
+     * <p/>
+     * <p>For example, this sets up a AnimatorSet to play anim1 and anim2 at the same time, anim3 to
+     * play when anim2 finishes, and anim4 to play when anim3 finishes:</p>
+     * <pre>
+     *     AnimatorSet s = new AnimatorSet();
+     *     s.play(anim1).with(anim2);
+     *     s.play(anim2).before(anim3);
+     *     s.play(anim4).after(anim3);
+     * </pre>
+     * <p/>
+     * <p>Note in the example that both {@link Builder#before(Animator)} and {@link
+     * Builder#after(Animator)} are used. These are just different ways of expressing the same
+     * relationship and are provided to make it easier to say things in a way that is more natural,
+     * depending on the situation.</p>
+     * <p/>
+     * <p>It is possible to make several calls into the same <code>Builder</code> object to express
+     * multiple relationships. However, note that it is only the animation passed into the initial
+     * {@link AnimatorSet#play(Animator)} method that is the dependency in any of the successive
+     * calls to the <code>Builder</code> object. For example, the following code starts both anim2
+     * and anim3 when anim1 ends; there is no direct dependency relationship between anim2 and
+     * anim3:
+     * <pre>
+     *   AnimatorSet s = new AnimatorSet();
+     *   s.play(anim1).before(anim2).before(anim3);
+     * </pre>
+     * If the desired result is to play anim1 then anim2 then anim3, this code expresses the
+     * relationship correctly:</p>
+     * <pre>
+     *   AnimatorSet s = new AnimatorSet();
+     *   s.play(anim1).before(anim2);
+     *   s.play(anim2).before(anim3);
+     * </pre>
+     * <p/>
+     * <p>Note that it is possible to express relationships that cannot be resolved and will not
+     * result in sensible results. For example, <code>play(anim1).after(anim1)</code> makes no
+     * sense. In general, circular dependencies like this one (or more indirect ones where a depends
+     * on b, which depends on c, which depends on a) should be avoided. Only create AnimatorSets
+     * that can boil down to a simple, one-way relationship of animations starting with, before, and
+     * after other, different, animations.</p>
+     */
+    public class Builder {
+
+        /**
+         * This tracks the current node being processed. It is supplied to the play() method
+         * of AnimatorSet and passed into the constructor of Builder.
+         */
+        private Node mCurrentNode;
+
+        /**
+         * package-private constructor. Builders are only constructed by AnimatorSet, when the
+         * play() method is called.
+         *
+         * @param anim The animation that is the dependency for the other animations passed into
+         * the other methods of this Builder object.
+         */
+        Builder(Animator anim) {
+            mCurrentNode = mNodeMap.get(anim);
+            if (mCurrentNode == null) {
+                mCurrentNode = new Node(anim);
+                mNodeMap.put(anim, mCurrentNode);
+                mNodes.add(mCurrentNode);
+            }
+        }
+
+        /**
+         * Sets up the given animation to play at the same time as the animation supplied in the
+         * {@link AnimatorSet#play(Animator)} call that created this <code>Builder</code> object.
+         *
+         * @param anim The animation that will play when the animation supplied to the
+         * {@link AnimatorSet#play(Animator)} method starts.
+         */
+        public Builder with(Animator anim) {
+            Node node = mNodeMap.get(anim);
+            if (node == null) {
+                node = new Node(anim);
+                mNodeMap.put(anim, node);
+                mNodes.add(node);
+            }
+            Dependency dependency = new Dependency(mCurrentNode, Dependency.WITH);
+            node.addDependency(dependency);
+            return this;
+        }
+
+        /**
+         * Sets up the given animation to play when the animation supplied in the
+         * {@link AnimatorSet#play(Animator)} call that created this <code>Builder</code> object
+         * ends.
+         *
+         * @param anim The animation that will play when the animation supplied to the
+         * {@link AnimatorSet#play(Animator)} method ends.
+         */
+        public Builder before(Animator anim) {
+            Node node = mNodeMap.get(anim);
+            if (node == null) {
+                node = new Node(anim);
+                mNodeMap.put(anim, node);
+                mNodes.add(node);
+            }
+            Dependency dependency = new Dependency(mCurrentNode, Dependency.AFTER);
+            node.addDependency(dependency);
+            return this;
+        }
+
+        /**
+         * Sets up the given animation to play when the animation supplied in the
+         * {@link AnimatorSet#play(Animator)} call that created this <code>Builder</code> object
+         * to start when the animation supplied in this method call ends.
+         *
+         * @param anim The animation whose end will cause the animation supplied to the
+         * {@link AnimatorSet#play(Animator)} method to play.
+         */
+        public Builder after(Animator anim) {
+            Node node = mNodeMap.get(anim);
+            if (node == null) {
+                node = new Node(anim);
+                mNodeMap.put(anim, node);
+                mNodes.add(node);
+            }
+            Dependency dependency = new Dependency(node, Dependency.AFTER);
+            mCurrentNode.addDependency(dependency);
+            return this;
+        }
+
+        /**
+         * Sets up the animation supplied in the
+         * {@link AnimatorSet#play(Animator)} call that created this <code>Builder</code> object
+         * to play when the given amount of time elapses.
+         *
+         * @param delay The number of milliseconds that should elapse before the
+         * animation starts.
+         */
+        public Builder after(long delay) {
+            // setup dummy ValueAnimator just to run the clock
+            ValueAnimator anim = ValueAnimator.ofFloat(0f, 1f);
+            anim.setDuration(delay);
+            after(anim);
+            return this;
+        }
+
+    }
+
+}
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/modules.xml	(revision )
+++ .idea/modules.xml	(revision )
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/MobilePay.iml" filepath="$PROJECT_DIR$/MobilePay.iml" />
+      <module fileurl="file://$PROJECT_DIR$/app/app.iml" filepath="$PROJECT_DIR$/app/app.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/compiler.xml	(revision )
+++ .idea/compiler.xml	(revision )
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <option name="DEFAULT_COMPILER" value="Javac" />
+    <resourceExtensions />
+    <wildcardResourcePatterns>
+      <entry name="!?*.java" />
+      <entry name="!?*.form" />
+      <entry name="!?*.class" />
+      <entry name="!?*.groovy" />
+      <entry name="!?*.scala" />
+      <entry name="!?*.flex" />
+      <entry name="!?*.kt" />
+      <entry name="!?*.clj" />
+    </wildcardResourcePatterns>
+    <annotationProcessing>
+      <profile default="true" name="Default" enabled="false">
+        <processorPath useClasspath="true" />
+      </profile>
+    </annotationProcessing>
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/java/com/base/tools/google/Base64.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/google/Base64.java	(revision )
+++ app/src/main/java/com/base/tools/google/Base64.java	(revision )
@@ -0,0 +1,570 @@
+// Portions copyright 2002, Google, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.base.tools.google;
+
+// This code was converted from code at http://iharder.sourceforge.net/base64/
+// Lots of extraneous features were removed.
+/* The original code said:
+ * <p>
+ * I am placing this code in the Public Domain. Do with it as you will.
+ * This software comes with no guarantees or warranties but with
+ * plenty of well-wishing instead!
+ * Please visit
+ * <a href="http://iharder.net/xmlizable">http://iharder.net/xmlizable</a>
+ * periodically to check for updates or to contribute improvements.
+ * </p>
+ *
+ * @author Robert Harder
+ * @author rharder@usa.net
+ * @version 1.3
+ */
+
+/**
+ * Base64 converter class. This code is not a complete MIME encoder;
+ * it simply converts binary data to base64 data and back.
+ *
+ * <p>Note {@link CharBase64} is a GWT-compatible implementation of this
+ * class.
+ */
+public class Base64 {
+    /** Specify encoding (value is {@code true}). */
+    public final static boolean ENCODE = true;
+
+    /** Specify decoding (value is {@code false}). */
+    public final static boolean DECODE = false;
+
+    /** The equals sign (=) as a byte. */
+    private final static byte EQUALS_SIGN = (byte) '=';
+
+    /** The new line character (\n) as a byte. */
+    private final static byte NEW_LINE = (byte) '\n';
+
+    /**
+     * The 64 valid Base64 values.
+     */
+    private final static byte[] ALPHABET =
+        {(byte) 'A', (byte) 'B', (byte) 'C', (byte) 'D', (byte) 'E', (byte) 'F',
+        (byte) 'G', (byte) 'H', (byte) 'I', (byte) 'J', (byte) 'K',
+        (byte) 'L', (byte) 'M', (byte) 'N', (byte) 'O', (byte) 'P',
+        (byte) 'Q', (byte) 'R', (byte) 'S', (byte) 'T', (byte) 'U',
+        (byte) 'V', (byte) 'W', (byte) 'X', (byte) 'Y', (byte) 'Z',
+        (byte) 'a', (byte) 'b', (byte) 'c', (byte) 'd', (byte) 'e',
+        (byte) 'f', (byte) 'g', (byte) 'h', (byte) 'i', (byte) 'j',
+        (byte) 'k', (byte) 'l', (byte) 'm', (byte) 'n', (byte) 'o',
+        (byte) 'p', (byte) 'q', (byte) 'r', (byte) 's', (byte) 't',
+        (byte) 'u', (byte) 'v', (byte) 'w', (byte) 'x', (byte) 'y',
+        (byte) 'z', (byte) '0', (byte) '1', (byte) '2', (byte) '3',
+        (byte) '4', (byte) '5', (byte) '6', (byte) '7', (byte) '8',
+        (byte) '9', (byte) '+', (byte) '/'};
+
+    /**
+     * The 64 valid web safe Base64 values.
+     */
+    private final static byte[] WEBSAFE_ALPHABET =
+        {(byte) 'A', (byte) 'B', (byte) 'C', (byte) 'D', (byte) 'E', (byte) 'F',
+        (byte) 'G', (byte) 'H', (byte) 'I', (byte) 'J', (byte) 'K',
+        (byte) 'L', (byte) 'M', (byte) 'N', (byte) 'O', (byte) 'P',
+        (byte) 'Q', (byte) 'R', (byte) 'S', (byte) 'T', (byte) 'U',
+        (byte) 'V', (byte) 'W', (byte) 'X', (byte) 'Y', (byte) 'Z',
+        (byte) 'a', (byte) 'b', (byte) 'c', (byte) 'd', (byte) 'e',
+        (byte) 'f', (byte) 'g', (byte) 'h', (byte) 'i', (byte) 'j',
+        (byte) 'k', (byte) 'l', (byte) 'm', (byte) 'n', (byte) 'o',
+        (byte) 'p', (byte) 'q', (byte) 'r', (byte) 's', (byte) 't',
+        (byte) 'u', (byte) 'v', (byte) 'w', (byte) 'x', (byte) 'y',
+        (byte) 'z', (byte) '0', (byte) '1', (byte) '2', (byte) '3',
+        (byte) '4', (byte) '5', (byte) '6', (byte) '7', (byte) '8',
+        (byte) '9', (byte) '-', (byte) '_'};
+
+    /**
+     * Translates a Base64 value to either its 6-bit reconstruction value
+     * or a negative number indicating some other meaning.
+     **/
+    private final static byte[] DECODABET = {-9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal  0 -  8
+        -5, -5, // Whitespace: Tab and Linefeed
+        -9, -9, // Decimal 11 - 12
+        -5, // Whitespace: Carriage Return
+        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 14 - 26
+        -9, -9, -9, -9, -9, // Decimal 27 - 31
+        -5, // Whitespace: Space
+        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 33 - 42
+        62, // Plus sign at decimal 43
+        -9, -9, -9, // Decimal 44 - 46
+        63, // Slash at decimal 47
+        52, 53, 54, 55, 56, 57, 58, 59, 60, 61, // Numbers zero through nine
+        -9, -9, -9, // Decimal 58 - 60
+        -1, // Equals sign at decimal 61
+        -9, -9, -9, // Decimal 62 - 64
+        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, // Letters 'A' through 'N'
+        14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, // Letters 'O' through 'Z'
+        -9, -9, -9, -9, -9, -9, // Decimal 91 - 96
+        26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, // Letters 'a' through 'm'
+        39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, // Letters 'n' through 'z'
+        -9, -9, -9, -9, -9 // Decimal 123 - 127
+        /*  ,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 128 - 139
+        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 140 - 152
+        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 153 - 165
+        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 166 - 178
+        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 179 - 191
+        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 192 - 204
+        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 205 - 217
+        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 218 - 230
+        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 231 - 243
+        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9         // Decimal 244 - 255 */
+    };
+
+    /** The web safe decodabet */
+    private final static byte[] WEBSAFE_DECODABET =
+        {-9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal  0 -  8
+        -5, -5, // Whitespace: Tab and Linefeed
+        -9, -9, // Decimal 11 - 12
+        -5, // Whitespace: Carriage Return
+        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 14 - 26
+        -9, -9, -9, -9, -9, // Decimal 27 - 31
+        -5, // Whitespace: Space
+        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 33 - 44
+        62, // Dash '-' sign at decimal 45
+        -9, -9, // Decimal 46-47
+        52, 53, 54, 55, 56, 57, 58, 59, 60, 61, // Numbers zero through nine
+        -9, -9, -9, // Decimal 58 - 60
+        -1, // Equals sign at decimal 61
+        -9, -9, -9, // Decimal 62 - 64
+        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, // Letters 'A' through 'N'
+        14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, // Letters 'O' through 'Z'
+        -9, -9, -9, -9, // Decimal 91-94
+        63, // Underscore '_' at decimal 95
+        -9, // Decimal 96
+        26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, // Letters 'a' through 'm'
+        39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, // Letters 'n' through 'z'
+        -9, -9, -9, -9, -9 // Decimal 123 - 127
+        /*  ,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 128 - 139
+        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 140 - 152
+        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 153 - 165
+        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 166 - 178
+        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 179 - 191
+        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 192 - 204
+        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 205 - 217
+        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 218 - 230
+        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 231 - 243
+        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9         // Decimal 244 - 255 */
+        };
+
+    // Indicates white space in encoding
+    private final static byte WHITE_SPACE_ENC = -5;
+    // Indicates equals sign in encoding
+    private final static byte EQUALS_SIGN_ENC = -1;
+
+    /** Defeats instantiation. */
+    private Base64() {
+    }
+
+    /* ********  E N C O D I N G   M E T H O D S  ******** */
+
+    /**
+     * Encodes up to three bytes of the array <var>source</var>
+     * and writes the resulting four Base64 bytes to <var>destination</var>.
+     * The source and destination arrays can be manipulated
+     * anywhere along their length by specifying
+     * <var>srcOffset</var> and <var>destOffset</var>.
+     * This method does not check to make sure your arrays
+     * are large enough to accommodate <var>srcOffset</var> + 3 for
+     * the <var>source</var> array or <var>destOffset</var> + 4 for
+     * the <var>destination</var> array.
+     * The actual number of significant bytes in your array is
+     * given by <var>numSigBytes</var>.
+     *
+     * @param source the array to convert
+     * @param srcOffset the index where conversion begins
+     * @param numSigBytes the number of significant bytes in your array
+     * @param destination the array to hold the conversion
+     * @param destOffset the index where output will be put
+     * @param alphabet is the encoding alphabet
+     * @return the <var>destination</var> array
+     * @since 1.3
+     */
+    private static byte[] encode3to4(byte[] source, int srcOffset,
+            int numSigBytes, byte[] destination, int destOffset, byte[] alphabet) {
+        //           1         2         3
+        // 01234567890123456789012345678901 Bit position
+        // --------000000001111111122222222 Array position from threeBytes
+        // --------|    ||    ||    ||    | Six bit groups to index alphabet
+        //          >>18  >>12  >> 6  >> 0  Right shift necessary
+        //                0x3f  0x3f  0x3f  Additional AND
+
+        // Create buffer with zero-padding if there are only one or two
+        // significant bytes passed in the array.
+        // We have to shift left 24 in order to flush out the 1's that appear
+        // when Java treats a value as negative that is cast from a byte to an int.
+        int inBuff =
+                (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)
+                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)
+                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);
+
+        switch (numSigBytes) {
+            case 3:
+                destination[destOffset] = alphabet[(inBuff >>> 18)];
+                destination[destOffset + 1] = alphabet[(inBuff >>> 12) & 0x3f];
+                destination[destOffset + 2] = alphabet[(inBuff >>> 6) & 0x3f];
+                destination[destOffset + 3] = alphabet[(inBuff) & 0x3f];
+                return destination;
+            case 2:
+                destination[destOffset] = alphabet[(inBuff >>> 18)];
+                destination[destOffset + 1] = alphabet[(inBuff >>> 12) & 0x3f];
+                destination[destOffset + 2] = alphabet[(inBuff >>> 6) & 0x3f];
+                destination[destOffset + 3] = EQUALS_SIGN;
+                return destination;
+            case 1:
+                destination[destOffset] = alphabet[(inBuff >>> 18)];
+                destination[destOffset + 1] = alphabet[(inBuff >>> 12) & 0x3f];
+                destination[destOffset + 2] = EQUALS_SIGN;
+                destination[destOffset + 3] = EQUALS_SIGN;
+                return destination;
+            default:
+                return destination;
+        } // end switch
+    } // end encode3to4
+
+    /**
+     * Encodes a byte array into Base64 notation.
+     * Equivalent to calling
+     * {@code encodeBytes(source, 0, source.length)}
+     *
+     * @param source The data to convert
+     * @since 1.4
+     */
+    public static String encode(byte[] source) {
+        return encode(source, 0, source.length, ALPHABET, true);
+    }
+
+    /**
+     * Encodes a byte array into web safe Base64 notation.
+     *
+     * @param source The data to convert
+     * @param doPadding is {@code true} to pad result with '=' chars
+     *        if it does not fall on 3 byte boundaries
+     */
+    public static String encodeWebSafe(byte[] source, boolean doPadding) {
+        return encode(source, 0, source.length, WEBSAFE_ALPHABET, doPadding);
+    }
+
+    /**
+     * Encodes a byte array into Base64 notation.
+     *
+     * @param source the data to convert
+     * @param off offset in array where conversion should begin
+     * @param len length of data to convert
+     * @param alphabet the encoding alphabet
+     * @param doPadding is {@code true} to pad result with '=' chars
+     * if it does not fall on 3 byte boundaries
+     * @since 1.4
+     */
+    public static String encode(byte[] source, int off, int len, byte[] alphabet,
+            boolean doPadding) {
+        byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);
+        int outLen = outBuff.length;
+
+        // If doPadding is false, set length to truncate '='
+        // padding characters
+        while (doPadding == false && outLen > 0) {
+            if (outBuff[outLen - 1] != '=') {
+                break;
+            }
+            outLen -= 1;
+        }
+
+        return new String(outBuff, 0, outLen);
+    }
+
+    /**
+     * Encodes a byte array into Base64 notation.
+     *
+     * @param source the data to convert
+     * @param off offset in array where conversion should begin
+     * @param len length of data to convert
+     * @param alphabet is the encoding alphabet
+     * @param maxLineLength maximum length of one line.
+     * @return the BASE64-encoded byte array
+     */
+    public static byte[] encode(byte[] source, int off, int len, byte[] alphabet,
+            int maxLineLength) {
+        int lenDiv3 = (len + 2) / 3; // ceil(len / 3)
+        int len43 = lenDiv3 * 4;
+        byte[] outBuff = new byte[len43 // Main 4:3
+                                  + (len43 / maxLineLength)]; // New lines
+
+        int d = 0;
+        int e = 0;
+        int len2 = len - 2;
+        int lineLength = 0;
+        for (; d < len2; d += 3, e += 4) {
+
+            // The following block of code is the same as
+            // encode3to4( source, d + off, 3, outBuff, e, alphabet );
+            // but inlined for faster encoding (~20% improvement)
+            int inBuff =
+                    ((source[d + off] << 24) >>> 8)
+                    | ((source[d + 1 + off] << 24) >>> 16)
+                    | ((source[d + 2 + off] << 24) >>> 24);
+            outBuff[e] = alphabet[(inBuff >>> 18)];
+            outBuff[e + 1] = alphabet[(inBuff >>> 12) & 0x3f];
+            outBuff[e + 2] = alphabet[(inBuff >>> 6) & 0x3f];
+            outBuff[e + 3] = alphabet[(inBuff) & 0x3f];
+
+            lineLength += 4;
+            if (lineLength == maxLineLength) {
+                outBuff[e + 4] = NEW_LINE;
+                e++;
+                lineLength = 0;
+            } // end if: end of line
+        } // end for: each piece of array
+
+        if (d < len) {
+            encode3to4(source, d + off, len - d, outBuff, e, alphabet);
+
+            lineLength += 4;
+            if (lineLength == maxLineLength) {
+                // Add a last newline
+                outBuff[e + 4] = NEW_LINE;
+                e++;
+            }
+            e += 4;
+        }
+
+        assert (e == outBuff.length);
+        return outBuff;
+    }
+
+
+    /* ********  D E C O D I N G   M E T H O D S  ******** */
+
+
+    /**
+     * Decodes four bytes from array <var>source</var>
+     * and writes the resulting bytes (up to three of them)
+     * to <var>destination</var>.
+     * The source and destination arrays can be manipulated
+     * anywhere along their length by specifying
+     * <var>srcOffset</var> and <var>destOffset</var>.
+     * This method does not check to make sure your arrays
+     * are large enough to accommodate <var>srcOffset</var> + 4 for
+     * the <var>source</var> array or <var>destOffset</var> + 3 for
+     * the <var>destination</var> array.
+     * This method returns the actual number of bytes that
+     * were converted from the Base64 encoding.
+     *
+     *
+     * @param source the array to convert
+     * @param srcOffset the index where conversion begins
+     * @param destination the array to hold the conversion
+     * @param destOffset the index where output will be put
+     * @param decodabet the decodabet for decoding Base64 content
+     * @return the number of decoded bytes converted
+     * @since 1.3
+     */
+    private static int decode4to3(byte[] source, int srcOffset,
+            byte[] destination, int destOffset, byte[] decodabet) {
+        // Example: Dk==
+        if (source[srcOffset + 2] == EQUALS_SIGN) {
+            int outBuff =
+                    ((decodabet[source[srcOffset]] << 24) >>> 6)
+                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);
+
+            destination[destOffset] = (byte) (outBuff >>> 16);
+            return 1;
+        } else if (source[srcOffset + 3] == EQUALS_SIGN) {
+            // Example: DkL=
+            int outBuff =
+                    ((decodabet[source[srcOffset]] << 24) >>> 6)
+                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
+                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);
+
+            destination[destOffset] = (byte) (outBuff >>> 16);
+            destination[destOffset + 1] = (byte) (outBuff >>> 8);
+            return 2;
+        } else {
+            // Example: DkLE
+            int outBuff =
+                    ((decodabet[source[srcOffset]] << 24) >>> 6)
+                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)
+                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)
+                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);
+
+            destination[destOffset] = (byte) (outBuff >> 16);
+            destination[destOffset + 1] = (byte) (outBuff >> 8);
+            destination[destOffset + 2] = (byte) (outBuff);
+            return 3;
+        }
+    } // end decodeToBytes
+
+
+    /**
+     * Decodes data from Base64 notation.
+     *
+     * @param s the string to decode (decoded in default encoding)
+     * @return the decoded data
+     * @since 1.4
+     */
+    public static byte[] decode(String s) throws Base64DecoderException {
+        byte[] bytes = s.getBytes();
+        return decode(bytes, 0, bytes.length);
+    }
+
+    /**
+     * Decodes data from web safe Base64 notation.
+     * Web safe encoding uses '-' instead of '+', '_' instead of '/'
+     *
+     * @param s the string to decode (decoded in default encoding)
+     * @return the decoded data
+     */
+    public static byte[] decodeWebSafe(String s) throws Base64DecoderException {
+        byte[] bytes = s.getBytes();
+        return decodeWebSafe(bytes, 0, bytes.length);
+    }
+
+    /**
+     * Decodes Base64 content in byte array format and returns
+     * the decoded byte array.
+     *
+     * @param source The Base64 encoded data
+     * @return decoded data
+     * @since 1.3
+     * @throws Base64DecoderException
+     */
+    public static byte[] decode(byte[] source) throws Base64DecoderException {
+        return decode(source, 0, source.length);
+    }
+
+    /**
+     * Decodes web safe Base64 content in byte array format and returns
+     * the decoded data.
+     * Web safe encoding uses '-' instead of '+', '_' instead of '/'
+     *
+     * @param source the string to decode (decoded in default encoding)
+     * @return the decoded data
+     */
+    public static byte[] decodeWebSafe(byte[] source)
+            throws Base64DecoderException {
+        return decodeWebSafe(source, 0, source.length);
+    }
+
+    /**
+     * Decodes Base64 content in byte array format and returns
+     * the decoded byte array.
+     *
+     * @param source the Base64 encoded data
+     * @param off    the offset of where to begin decoding
+     * @param len    the length of characters to decode
+     * @return decoded data
+     * @since 1.3
+     * @throws Base64DecoderException
+     */
+    public static byte[] decode(byte[] source, int off, int len)
+            throws Base64DecoderException {
+        return decode(source, off, len, DECODABET);
+    }
+
+    /**
+     * Decodes web safe Base64 content in byte array format and returns
+     * the decoded byte array.
+     * Web safe encoding uses '-' instead of '+', '_' instead of '/'
+     *
+     * @param source the Base64 encoded data
+     * @param off    the offset of where to begin decoding
+     * @param len    the length of characters to decode
+     * @return decoded data
+     */
+    public static byte[] decodeWebSafe(byte[] source, int off, int len)
+            throws Base64DecoderException {
+        return decode(source, off, len, WEBSAFE_DECODABET);
+    }
+
+    /**
+     * Decodes Base64 content using the supplied decodabet and returns
+     * the decoded byte array.
+     *
+     * @param source the Base64 encoded data
+     * @param off the offset of where to begin decoding
+     * @param len the length of characters to decode
+     * @param decodabet the decodabet for decoding Base64 content
+     * @return decoded data
+     */
+    public static byte[] decode(byte[] source, int off, int len, byte[] decodabet)
+            throws Base64DecoderException {
+        int len34 = len * 3 / 4;
+        byte[] outBuff = new byte[2 + len34]; // Upper limit on size of output
+        int outBuffPosn = 0;
+
+        byte[] b4 = new byte[4];
+        int b4Posn = 0;
+        int i = 0;
+        byte sbiCrop = 0;
+        byte sbiDecode = 0;
+        for (i = 0; i < len; i++) {
+            sbiCrop = (byte) (source[i + off] & 0x7f); // Only the low seven bits
+            sbiDecode = decodabet[sbiCrop];
+
+            if (sbiDecode >= WHITE_SPACE_ENC) { // White space Equals sign or better
+                if (sbiDecode >= EQUALS_SIGN_ENC) {
+                    // An equals sign (for padding) must not occur at position 0 or 1
+                    // and must be the last byte[s] in the encoded value
+                    if (sbiCrop == EQUALS_SIGN) {
+                        int bytesLeft = len - i;
+                        byte lastByte = (byte) (source[len - 1 + off] & 0x7f);
+                        if (b4Posn == 0 || b4Posn == 1) {
+                            throw new Base64DecoderException(
+                                    "invalid padding byte '=' at byte offset " + i);
+                        } else if ((b4Posn == 3 && bytesLeft > 2)
+                                || (b4Posn == 4 && bytesLeft > 1)) {
+                            throw new Base64DecoderException(
+                                    "padding byte '=' falsely signals end of encoded value "
+                                            + "at offset " + i);
+                        } else if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {
+                            throw new Base64DecoderException(
+                                    "encoded value has invalid trailing byte");
+                        }
+                        break;
+                    }
+
+                    b4[b4Posn++] = sbiCrop;
+                    if (b4Posn == 4) {
+                        outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, decodabet);
+                        b4Posn = 0;
+                    }
+                }
+            } else {
+                throw new Base64DecoderException("Bad Base64 input character at " + i
+                        + ": " + source[i + off] + "(decimal)");
+            }
+        }
+
+        // Because web safe encoding allows non padding base64 encodes, we
+        // need to pad the rest of the b4 buffer with equal signs when
+        // b4Posn != 0.  There can be at most 2 equal signs at the end of
+        // four characters, so the b4 buffer must have two or three
+        // characters.  This also catches the case where the input is
+        // padded with EQUALS_SIGN
+        if (b4Posn != 0) {
+            if (b4Posn == 1) {
+                throw new Base64DecoderException("single trailing character at offset "
+                        + (len - 1));
+            }
+            b4[b4Posn++] = EQUALS_SIGN;
+            outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, decodabet);
+        }
+
+        byte[] out = new byte[outBuffPosn];
+        System.arraycopy(outBuff, 0, out, 0, outBuffPosn);
+        return out;
+    }
+}
Index: app/src/main/java/com/oasgames/android/oaspay/tools/APPUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/tools/APPUtils.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/tools/APPUtils.java	(revision )
@@ -0,0 +1,110 @@
+/**
+ * 应用工具类
+ */
+package com.oasgames.android.oaspay.tools;
+
+import android.app.Activity;
+import android.util.Log;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ListAdapter;
+import android.widget.ListView;
+
+import com.base.tools.BasesApplication;
+import com.base.tools.utils.BasesUtils;
+import com.oasgames.android.oaspay.entity.SearchInfo;
+import com.oasgames.android.oaspay.service.SearchUtil;
+
+import java.util.ArrayList;
+import java.util.List;
+
+
+/**
+ * @author xdb
+ * 
+ */
+public class APPUtils {
+
+    /**
+     * 注销时，清除服ID、角色ID
+     * @return
+     */
+    public static boolean clearInfoForLogout(){
+        if(BasesApplication.userInfo != null){
+            BasesApplication.userInfo.setServerID("");
+            BasesApplication.userInfo.setRoleID("");
+        }
+        return true;
+    }
+
+    /**
+     * 获取本地的搜索记录
+     * @return
+     */
+    public static List<SearchInfo> getLocalSearchHistory(int maxCount){
+        List<SearchInfo> list = new ArrayList<SearchInfo>();
+        try {
+
+            list = SearchUtil.getAll(maxCount);
+        }catch (Exception e){
+            Log.d("", e.getMessage());
+        }
+        return list;
+    }
+    /**
+     * 删除本地所有搜索记录
+     * @return
+     */
+    public static boolean deleteAllSearchHistory(){
+
+        return SearchUtil.deleteAll();
+    }
+    /**
+     * 新增本地搜索记录
+     * @return
+     */
+    public static long insertToSearchHistory(String keyword){
+
+        return SearchUtil.insert(keyword);
+    }
+
+    /**
+     * Toast 显示错误信息
+     * -4       用户名密码错误
+     * -2000    网络异常
+     * @param activity
+     * @param errorCode
+     */
+    public static void showErrorMessageByErrorCode(Activity activity, String errorCode){
+        ;
+        BasesUtils.showMsg(activity, activity.getString(BasesUtils.getResourceValue(activity, "string", "common_error_notice" + errorCode.replace("-", "_"))));
+    }
+
+    /**
+     * 测量listView的高度
+     * @param listView
+     */
+    public static void setListViewHeightBasedOnChildren(ListView listView) {
+        // 获取ListView对应的Adapter
+        ListAdapter listAdapter = listView.getAdapter();
+        if (listAdapter == null) {
+            return;
+        }
+
+        int totalHeight = 0;
+        for (int i = 0, len = listAdapter.getCount(); i < len; i++) {
+            // listAdapter.getCount()返回数据项的数目
+            View listItem = listAdapter.getView(i, null, listView);
+            // 计算子项View 的宽高
+            listItem.measure(0, 0);
+            // 统计所有子项的总高度
+            totalHeight += listItem.getMeasuredHeight();
+        }
+
+        ViewGroup.LayoutParams params = listView.getLayoutParams();
+        params.height = totalHeight+ (listView.getDividerHeight() * (listAdapter.getCount() - 1));
+        // listView.getDividerHeight()获取子项间分隔符占用的高度
+        // params.height最后得到整个ListView完整显示需要的高度
+        listView.setLayoutParams(params);
+    }
+}
Index: app/src/main/java/com/oasgames/android/oaspay/adapter/AdapterSearchResultList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/adapter/AdapterSearchResultList.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/adapter/AdapterSearchResultList.java	(revision )
@@ -0,0 +1,65 @@
+package com.oasgames.android.oaspay.adapter;
+
+import android.app.Activity;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.base.tools.list.BasesListAdapter;
+import com.oasgames.android.oaspay.R;
+import com.oasgames.android.oaspay.entity.ProductInfo;
+
+import java.util.List;
+
+
+/**
+ * 搜索结果 列表 适配器
+ * @author Administrator
+ *
+ */
+public class AdapterSearchResultList extends BasesListAdapter<ProductInfo> {
+	Activity c;
+	public AdapterSearchResultList(Activity activity, List<ProductInfo> data,
+								   int count, LinearLayout footerView) {
+		super(activity, data, count, footerView);
+		this.c = activity;
+	}
+
+	@Override
+	public void loadMore() {
+		// no more
+	}
+
+	@Override
+	public View getRowView(int position, View convertView, ViewGroup parent) {
+		ViewHoder hoder = null;
+		if(null == convertView){
+			convertView = c.getLayoutInflater().inflate(R.layout.fragment_main_shop_review_item, null);
+			hoder = new ViewHoder();
+			hoder.title = (TextView) convertView.findViewById(R.id.product_item_title);
+			hoder.img = (ImageView) convertView.findViewById(R.id.product_item_img);
+			hoder.diamond = (TextView) convertView.findViewById(R.id.product_item_diamond_count);
+			hoder.pay = (View) convertView.findViewById(R.id.product_item_charge);
+			convertView.setTag(hoder);
+		}else{
+			hoder = (ViewHoder) convertView.getTag();
+		}
+
+		final ProductInfo info = getItem(position);
+		hoder.title.setText(info.product_name);
+		hoder.pay.setVisibility(View.INVISIBLE);
+		return convertView;
+	}
+
+	static class ViewHoder{
+		TextView title;
+		ImageView img;
+		TextView diamond;
+		View pay;
+
+
+	}
+	
+}
Index: app/src/main/java/com/nineoldandroids/animation/AnimatorListenerAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nineoldandroids/animation/AnimatorListenerAdapter.java	(revision )
+++ app/src/main/java/com/nineoldandroids/animation/AnimatorListenerAdapter.java	(revision )
@@ -0,0 +1,54 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.nineoldandroids.animation;
+
+/**
+ * This adapter class provides empty implementations of the methods from {@link android.animation.Animator.AnimatorListener}.
+ * Any custom listener that cares only about a subset of the methods of this listener can
+ * simply subclass this adapter class instead of implementing the interface directly.
+ */
+public abstract class AnimatorListenerAdapter implements Animator.AnimatorListener {
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public void onAnimationCancel(Animator animation) {
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public void onAnimationEnd(Animator animation) {
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public void onAnimationRepeat(Animator animation) {
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public void onAnimationStart(Animator animation) {
+    }
+
+}
Index: app/src/main/java/com/base/tools/db/BasesDBHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/db/BasesDBHelper.java	(revision )
+++ app/src/main/java/com/base/tools/db/BasesDBHelper.java	(revision )
@@ -0,0 +1,393 @@
+package com.base.tools.db;
+
+import android.content.ContentValues;
+import android.content.Context;
+import android.database.Cursor;
+import android.database.SQLException;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteOpenHelper;
+import android.util.Log;
+
+import com.base.tools.exception.BasesDataErrorException;
+
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * 数据库操作的帮助类.
+ * 
+ * @author xdb
+ * 
+ */
+public class BasesDBHelper {
+
+	private static final String TAG = "BaseDBHelper";
+	private static final int DATABASE_VERSION = 5;
+	private static final String DATABASE_NAME = "OASSDK";
+
+	private final Context context;
+	private DatabaseHelper DBHelper;
+	public SQLiteDatabase db;
+	private String[] createTable;
+	private String[] dropTable;
+
+	/**
+	 * 构造方法.
+	 * 
+	 * @param ctx
+	 *            上下文对象
+	 * @param createTable
+	 *            建表的sql语句,是一个数组,每个元素是一个建表语句.
+	 * @param dropTable
+	 *            删除表的sql语句,是一个数组,每个元素是一个删除表语句.
+	 */
+	public BasesDBHelper(Context ctx, String[] createTable, String[] dropTable) {
+
+		this.context = ctx;
+		this.createTable = createTable;
+		this.dropTable = dropTable;
+		DBHelper = new DatabaseHelper(context);
+	}
+
+	/**
+	 * 主要是建数据库和升级数据库.
+	 * 
+	 * @author Administrator
+	 * 
+	 */
+	private class DatabaseHelper extends SQLiteOpenHelper {
+
+		DatabaseHelper(Context context) {
+			super(context, DATABASE_NAME, null, DATABASE_VERSION);
+		}
+
+		@Override
+		public void onCreate(SQLiteDatabase db) {
+			int len = createTable.length;
+			for (int i = 0; i < len; i++) {
+				if (createTable[i] != null && createTable[i].trim().length() > 0) {
+					db.execSQL(createTable[i]);
+				}
+			}
+		}
+
+		@Override
+		public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+
+			Log.w(TAG, "Upgrading database from version " + oldVersion + " to " + newVersion + ", which will destroy all old data");
+			int len = dropTable.length;
+			for (int i = 0; i < len; i++) {
+				db.execSQL(dropTable[i]);
+			}
+
+			onCreate(db);
+		}
+	}
+
+	/**
+	 * 执行sql操作数据库
+	 * 
+	 * @param sql
+	 */
+	public void execSQL(String sql) {
+		db.execSQL(sql);
+	}
+
+	/**
+	 * 打开数据库.
+	 * 
+	 * @return
+	 * @throws SQLException
+	 */
+	public BasesDBHelper open() throws SQLException {
+		db = DBHelper.getWritableDatabase();
+		return this;
+	}
+
+	/**
+	 * 关才数据库.
+	 */
+	public void close() {
+		DBHelper.close();
+	}
+
+	public long insert(String tableName, ContentValues initialValues) {
+		return db.insert(tableName, null, initialValues);
+	}
+
+	/**
+	 * 删除记录.
+	 * 
+	 * @param tableName
+	 *            表名
+	 * @param where
+	 *            条件.
+	 * @return
+	 */
+	public boolean delete(String tableName, String where) {
+		return db.delete(tableName, where, null) > 0;
+	}
+
+	/**
+	 * 删除记录.
+	 * 
+	 * @param tableName
+	 *            表名
+	 * @param where
+	 *            条件.
+	 * @return
+	 */
+	public int delete(String tableName, String where, String[] whereArgs) {
+		return db.delete(tableName, where, whereArgs);
+	}
+
+	/**
+	 * 加载所有数据.
+	 * 
+	 * @param tableName
+	 *            表名
+	 * @param columns
+	 *            列名,字符串数组,每一个元素是要显示的列.
+	 * @param order
+	 *            排序方式.
+	 * @return
+	 */
+	public Cursor loadAll(String tableName, String[] columns, String order) {
+
+		return db.query(tableName, columns, null, null, null, null, order);
+	}
+
+	/**
+	 * 根据指定的条件加载数据.
+	 * 
+	 * @param tableName
+	 *            表名
+	 * @param columns
+	 *            列名,字符串数组,每一个元素是要显示的列.
+	 * @param where
+	 *            条件.
+	 * @return
+	 * @throws SQLException
+	 */
+	public Cursor loadByWhere(String tableName, String[] columns, String where) throws SQLException {
+
+		Cursor mCursor = db.query(true, tableName, columns, where, null, null, null, null, null);
+		if (mCursor != null) {
+			mCursor.moveToFirst();
+		}
+
+		return mCursor;
+	}
+
+	/**
+	 * 根据指定的条件加载数据.
+	 * 
+	 * @param tableName
+	 *            表名
+	 * @param columns
+	 *            列名,字符串数组,每一个元素是要显示的列.
+	 * @param where
+	 *            条件.
+	 * @return
+	 * @throws SQLException
+	 */
+	public Cursor loadByWhere(String tableName, String[] columns, String where, String[] whereArgs) throws SQLException {
+
+		Cursor mCursor = db.query(true, tableName, columns, where, whereArgs, null, null, null, null);
+		if (mCursor != null) {
+			mCursor.moveToFirst();
+		}
+
+		return mCursor;
+	}
+
+	/**
+	 * 更新数据.
+	 * 
+	 * @param tableName
+	 *            表名
+	 * @param args
+	 *            参数.
+	 * @param where
+	 *            条件.
+	 * @return
+	 */
+	public boolean update(String tableName, ContentValues args, String where) {
+
+		return db.update(tableName, args, where, null) > 0;
+	}
+
+	/**
+	 * 更新数据.
+	 * 
+	 * @param tableName
+	 *            表名
+	 * @param args
+	 *            参数.
+	 * @param where
+	 *            条件.
+	 * @return
+	 */
+	public boolean update(String tableName, ContentValues args, String where, String[] whereArgs) {
+
+		return db.update(tableName, args, where, whereArgs) > 0;
+	}
+
+	/**
+	 * 不带查询条件的数据库查询.
+	 * 
+	 * @param tableName
+	 *            表名
+	 * @param columns
+	 *            字段名
+	 * @param order
+	 *            顺序
+	 * @param obj
+	 *            需要映射的对象
+	 * @return List
+	 * @throws SQLException
+	 * @throws InstantiationException
+	 * @throws IllegalAccessException
+	 * @throws BasesDataErrorException
+	 */
+	@SuppressWarnings({ "unchecked", "rawtypes" })
+	public List loadAll2List(String tableName, String[] columns, String order, Object obj) throws SQLException, IllegalAccessException, InstantiationException,
+			BasesDataErrorException {
+		List list = new ArrayList();
+		Cursor mCursor = db.query(tableName, columns, null, null, null, null, order);
+		String columnName;
+		String columnValue;
+		Object valueObj;
+		if (mCursor.getCount() > 0) {
+			while (mCursor.moveToNext()) {
+				valueObj = obj.getClass().newInstance();
+				for (int i = 0; i < columns.length; i++) {
+					columnName = columns[i];
+					columnValue = mCursor.getString(mCursor.getColumnIndex(columnName));
+					this.setValue(columnName, columnValue, valueObj);
+				}
+				list.add(valueObj);
+			}
+		}
+		mCursor.close();
+		return list;
+	}
+
+	/**
+	 * * 带查询条件的数据库查询.
+	 * 
+	 * @param tableName
+	 *            表名
+	 * @param columns
+	 *            字段名
+	 * @param obj
+	 *            需要映射的对象
+	 * @param selection
+	 *            查询条件
+	 * @param selectionArgs
+	 *            查询条件对应的值
+	 * @param groupBy
+	 *            groupBy
+	 * @param orderBy
+	 *            orderBy
+	 * @param limit
+	 *            limit
+	 * @return List
+	 * @throws SQLException
+	 * @throws InstantiationException
+	 * @throws IllegalAccessException
+	 * @throws BasesDataErrorException
+	 */
+	@SuppressWarnings({ "unchecked", "rawtypes" })
+	public List loadByWhere2List(String tableName, String[] columns, Object obj, String selection, String[] selectionArgs, String groupBy, String orderBy,
+			String limit) throws SQLException, IllegalAccessException, InstantiationException, BasesDataErrorException {
+
+		List list = new ArrayList();
+		Cursor mCursor = db.query(true, tableName, columns, selection, selectionArgs, groupBy, null, orderBy, limit);
+		String columnName;
+		String columnValue;
+		Object valueObj;
+		if (mCursor.getCount() > 0) {
+			while (mCursor.moveToNext()) {
+				valueObj = obj.getClass().newInstance();
+				for (int i = 0; i < columns.length; i++) {
+					columnName = columns[i];
+					columnValue = mCursor.getString(mCursor.getColumnIndex(columnName));
+					this.setValue(columnName, columnValue, valueObj);
+				}
+				list.add(valueObj);
+			}
+		}
+		mCursor.close();
+		return list;
+	}
+
+	/**
+	 * 对象赋值方法.
+	 * 
+	 * @param fieldName
+	 *            属性名称
+	 * @param fieldValue
+	 *            属性值
+	 * @param obj
+	 *            所属对象
+	 * @throws BasesDataErrorException
+	 */
+	@SuppressWarnings({ "rawtypes" })
+	private void setValue(String fieldName, String fieldValue, Object obj) throws BasesDataErrorException {
+
+		if (fieldValue == null || fieldValue.length() == 0)
+			return;
+
+		Class cls = obj.getClass();
+
+		String methodName = getMethodName(fieldName);
+		Method method;
+
+		try {
+			method = cls.getDeclaredMethod(methodName, String.class);
+			method.invoke(obj, new Object[] { fieldValue });
+		} catch (SecurityException e) {
+			throw new BasesDataErrorException(e.getMessage());
+		} catch (IllegalArgumentException e) {
+			throw new BasesDataErrorException(e.getMessage());
+		} catch (IllegalAccessException e) {
+			throw new BasesDataErrorException(e.getMessage());
+		} catch (InvocationTargetException e) {
+			throw new BasesDataErrorException(e.getMessage());
+		} catch (NoSuchMethodException e) {
+			Class superclass = cls.getSuperclass();
+			try {
+				method = superclass.getDeclaredMethod(methodName, String.class);
+				method.invoke(obj, new Object[] { fieldValue });
+			} catch (SecurityException ex) {
+				throw new BasesDataErrorException(ex.getMessage());
+			} catch (NoSuchMethodException ex) {
+				return;
+			} catch (IllegalArgumentException ex) {
+				throw new BasesDataErrorException(ex.getMessage());
+			} catch (IllegalAccessException ex) {
+				throw new BasesDataErrorException(ex.getMessage());
+			} catch (InvocationTargetException ex) {
+				throw new BasesDataErrorException(ex.getMessage());
+			}
+		}
+
+	}
+
+	/**
+	 * 根据属性名得到相应的set方法名.
+	 * 
+	 * @param fieldName
+	 *            属性名
+	 * @return
+	 */
+	private String getMethodName(String fieldName) {
+		char[] charArray = fieldName.toCharArray();
+		if (charArray[0] >= 'a' && charArray[0] <= 'z')
+			charArray[0] = (char) (charArray[0] - 32);
+		return "set" + new String(charArray);
+	}
+}
Index: app/src/main/res/values-zh-rCN/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values-zh-rCN/strings.xml	(revision )
+++ app/src/main/res/values-zh-rCN/strings.xml	(revision )
@@ -0,0 +1,106 @@
+<resources>
+    <string name="app_name">OAS PAY</string>
+    <string name="main_foot_1">商城</string>
+    <string name="main_foot_2">资讯</string>
+    <string name="main_foot_3">我</string>
+    <string name="common_head_title">阿语神曲</string>
+    <string name="fragment_shop_function_prop">全部道具</string>
+    <string name="fragment_shop_function_order">我的订单</string>
+    <string name="fragment_shop_function_charge">游戏充值</string>
+    <string name="fragment_shop_function_capture">扫码</string>
+    <string name="fragment_shop_category_newest">新品上架</string>
+    <string name="fragment_shop_category_hot">热门推荐</string>
+    <string name="fragment_shop_category_review">最近浏览</string>
+    <string name="fragment_shop_category_more">更多</string>
+    <string name="fragment_shop_category_review_charge">购买</string>
+    <string name="search_title_sub1">取消</string>
+    <string name="search_title_sub2">确认</string>
+    <string name="search_title_sub3">请输入要搜索的关键字</string>
+    <string name="search_title_sub4">热门推荐</string>
+    <string name="search_title_sub5">搜索历史</string>
+    <string name="search_title_sub6">清空搜索历史</string>
+    <string name="search_title_sub7">没找到，换个词试试。</string>
+    <string name="product_list_title">商品列表</string>
+    <string name="product_details_title">商品详情</string>
+    <string name="product_details_price">价格:</string>
+    <string name="order_details_title">订单详情</string>
+    <string name="order_details_id">订单号:</string>
+    <string name="order_details_label_1">兑换码:</string>
+    <string name="order_details_label_2">复制</string>
+    <string name="order_details_label_3">订单状态:</string>
+    <string name="order_details_label_4">下单时间:</string>
+    <string name="order_details_label_5">支付时间:</string>
+    <string name="order_details_label_6">支付方式:</string>
+    <string name="order_details_label_7">已完成</string>
+    <string name="order_details_label_8">等待支付</string>
+    <string name="order_details_label_9">支付</string>
+    <string name="order_details_label_10">合计:</string>
+    <string name="pay_package_list_title">阿语神曲充值</string>
+    <string name="pay_package_list_sub1">充值账号:</string>
+    <string name="pay_package_list_sub2">钻石套餐:</string>
+    <string name="pay_package_list_sub3">请选择游戏角色</string>
+    <string name="pay_package_list_sub4">请选择服务器</string>
+    <string name="pay_package_list_sub5">请选择角色</string>
+    <string name="pay_package_list_sub6">应付金额:</string>
+    <string name="pay_package_list_sub7">立即支付</string>
+    <string name="order_list_title_sub2">当月订单</string>
+    <string name="order_list_title_sub1">历史订单</string>
+    <string name="order_list_item_label5">没有订单</string>
+    <string name="order_list_item_label6">去逛逛</string>
+    <string name="order_list_item_label2">继续支付</string>
+    <string name="order_list_item_label3">取消订单</string>
+    <string name="order_list_item_label4">删除</string>
+    <string name="capture_scan_text2_2">将二维码放入框内，即可自动扫描</string>
+    <string name="capture_scan_text2_3">输入订单号</string>
+    <string name="capture_scan_text2_4">提交</string>
+    <string name="fragment_mine_head_login">登录</string>
+    <string name="login_edit_user">账号:</string>
+    <string name="login_edit_password">密码:</string>
+    <string name="login_edit_user_hint">用户名/邮箱</string>
+    <string name="login_edit_password_hint">6-15位字母、数字和符号</string>
+    <string name="login_other_findpwd">找回密码</string>
+    <string name="login_other_rule">用户服务条款</string>
+    <string name="login_other_loginstyle">第三方账号登录</string>
+    <string name="login_register">注册</string>
+    <string name="fragment_news_title">详情</string>
+    <string name="fragment_mine_head_title">个人中心</string>
+    <string name="fragment_mine_head_list_2">清除缓存</string>
+    <string name="fragment_mine_head_list_3">关于我们</string>
+    <string name="fragment_mine_head_exit">退出当前账号</string>
+    <string name="app_version_1">当前版本</string>
+    <string name="app_version_2">发现新版本</string>
+    <string name="app_version_3">最新版本</string>
+    <string name="app_version_4">新版本大小</string>
+    <string name="app_version_5">需要下载</string>
+    <string name="app_version_6">内容更新</string>
+    <string name="app_version_7">立即更新</string>
+    <string name="app_version_8">以后再说</string>
+    <string name="order_details_label_11">内容已复制到剪贴板</string>
+    <string name="order_list_item_label8">取消订单后，该订单将被删除</string>
+    <string name="order_list_item_label7">该订单将被删除</string>
+    <string name="capture_scan_text4">当前登录的账号与待支付账号不一致，是否重新登录？</string>
+    <string name="capture_scan_text3">无法识别</string>
+    <string name="capture_scan_text5">输入有误，请重新输入。</string>
+    <string name="fragment_mine_head_list_2_1">是否确认清除缓存？</string>
+    <string name="common_nowifi">网络连接错误</string>
+    <string name="about_content">OAS PAY是OASIS GAMES官方的支付方式，旨在给用户提供更流畅、更优惠的购买体验。</string>
+    <string name="google_error_notice6">支付完成</string>
+    <string name="order_list_item_label9">该订单不存在！</string>
+    <string name="order_list_item_label10">该订单已完成支付！</string>
+    <string name="google_error_notice1">支付初始化失败，请稍后再试！</string>
+    <string name="google_error_notice2">获取套餐失败，请稍后再试！</string>
+    <string name="google_error_notice3">获取商品失败，请稍后再试！</string>
+    <string name="google_error_notice4">未找到套餐，请检查配置！</string>
+    <string name="google_error_notice5">数据验证失败，请稍后再试！</string>
+    <string name="common_error_notice_2000">网络连接错误，请稍后重试！</string>
+
+    <string name="capture_scan_text6">字符类型错误，请输入阿拉伯数字类型的订单号</string>
+    <string name="fragment_mine_head_list_2_2">缓存已清除</string>
+    <string name="login_title_sub">Oasis账号</string>
+    <string name="pay_package_list_sub8">没有角色</string>
+    <string name="common_retry">重试</string>
+    <string name="common_error_notice_4">用户名或密码错误</string>
+    <string name="main_notice_1">再按一次退出程序</string>
+    <string name="order_details_label_12">兑换码正在努力生成中</string>
+    <string name="google_error_notice7">该订单发现异常，请联系客服！</string>
+</resources>
Index: app/src/main/java/com/oasgames/android/oaspay/entity/ShopFocus.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/entity/ShopFocus.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/entity/ShopFocus.java	(revision )
@@ -0,0 +1,46 @@
+package com.oasgames.android.oaspay.entity;
+
+import android.app.Activity;
+import android.content.Intent;
+
+import com.oasgames.android.oaspay.activity.ActivityNewsDetails;
+import com.oasgames.android.oaspay.activity.ActivityProductDetails;
+
+/**
+ * 商城 - 轮播图
+ * @author Administrator
+ *
+ */
+public class ShopFocus {
+
+	public String focus_id;
+	public String focus_img_url;
+	public String focus_type;// 1:资讯	2:礼包
+	public String focus_product_id;// 第三方主要参数
+	public String link;
+
+
+	public void setFocus_img_url(String focus_img_url) {
+		this.focus_img_url = focus_img_url;
+	}
+
+	public void setFocus_type(String type) {
+		this.focus_type = type;
+	}
+
+	public void setFocus_id(String focus_id) {
+		this.focus_id = focus_id;
+	}
+
+	public void startActivity(Activity activity){
+		if(this.focus_type.equals("1"))
+			activity.startActivity(new Intent().setClass(activity, ActivityNewsDetails.class).putExtra("link", this.focus_product_id));// 条件不足，无法跳转
+		else if(this.focus_type.equals("2"))
+			activity.startActivity(new Intent().setClass(activity, ActivityProductDetails.class).putExtra("id", this.focus_product_id));
+
+	}
+
+	public void setFocus_product_id(String focus_product_id) {
+		this.focus_product_id = focus_product_id;
+	}
+}
Index: app/src/main/res/anim/common_loading_pic.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/anim/common_loading_pic.xml	(revision )
+++ app/src/main/res/anim/common_loading_pic.xml	(revision )
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+	<!--
+		Copyright (C) 2007 The Android Open Source Project Licensed under the
+		Apache License, Version 2.0 (the "License"); you may not use this file
+		except in compliance with the License. You may obtain a copy of the
+		License at http://www.apache.org/licenses/LICENSE-2.0 Unless required
+		by applicable law or agreed to in writing, software distributed under
+		the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
+		CONDITIONS OF ANY KIND, either express or implied. See the License for
+		the specific language governing permissions and limitations under the
+		License.
+	-->
+
+
+	<!--
+		<translate xmlns:android="http://schemas.android.com/apk/res/android"
+		android:fromXDelta="0" android:toXDelta="10" android:duration="1000"
+		android:interpolator="@anim/cycle_7" />
+		android:interpolator="@anim/shake_cycle"
+	-->
+
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+	<item>
+		<rotate android:drawable="@drawable/common_waiting_xuanzhuan"
+			android:fromDegrees="0.0" android:toDegrees="360.0" android:pivotX="50.0%"
+			android:pivotY="50.0%" android:duration="2000" android:repeatCount="infinite"/>
+	</item>
+</layer-list>
\ No newline at end of file
Index: app/src/main/res/drawable/order_list_head_right_selector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/order_list_head_right_selector.xml	(revision )
+++ app/src/main/res/drawable/order_list_head_right_selector.xml	(revision )
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <!--<item android:drawable="@mipmap/main_foot_shop_checked" android:state_pressed="true"/>
+    <item android:drawable="@mipmap/main_foot_shop_checked" android:state_focused="true"/>
+    <item android:drawable="@mipmap/main_foot_shop_checked" android:state_selected="true"/>-->
+    <item android:drawable="@drawable/order_list_head_right_select" android:state_checked="true"/>
+    <item android:drawable="@drawable/order_list_head_right_unselect"/>
+
+</selector>
\ No newline at end of file
Index: app/src/main/res/layout/page_about.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/page_about.xml	(revision )
+++ app/src/main/res/layout/page_about.xml	(revision )
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="match_parent">
+    <include layout="@layout/common_head"/>
+
+    <WebView
+        android:id="@+id/about_webview"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_marginLeft="@dimen/common_content_margin_5"
+        android:layout_marginRight="@dimen/common_content_margin_5"/>
+</LinearLayout>
\ No newline at end of file
Index: app/src/main/java/com/base/tools/google/IabException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/google/IabException.java	(revision )
+++ app/src/main/java/com/base/tools/google/IabException.java	(revision )
@@ -0,0 +1,43 @@
+/* Copyright (c) 2012 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.base.tools.google;
+
+/**
+ * Exception thrown when something went wrong with in-app billing.
+ * An IabException has an associated IabResult (an error).
+ * To get the IAB result that caused this exception to be thrown,
+ * call {@link #getResult()}.
+ */
+public class IabException extends Exception {
+    IabResult mResult;
+
+    public IabException(IabResult r) {
+        this(r, null);
+    }
+    public IabException(int response, String message) {
+        this(new IabResult(response, message));
+    }
+    public IabException(IabResult r, Exception cause) {
+        super(r.getMessage(), cause);
+        mResult = r;
+    }
+    public IabException(int response, String message, Exception cause) {
+        this(new IabResult(response, message), cause);
+    }
+
+    /** Returns the IAB result (error) that this exception signals. */
+    public IabResult getResult() { return mResult; }
+}
\ No newline at end of file
Index: app/src/main/java/com/oasgames/android/oaspay/adapter/AdapterPayPackageList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/adapter/AdapterPayPackageList.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/adapter/AdapterPayPackageList.java	(revision )
@@ -0,0 +1,85 @@
+package com.oasgames.android.oaspay.adapter;
+
+import android.app.Activity;
+import android.text.TextUtils;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.LinearLayout;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.base.tools.list.BasesListAdapter;
+import com.oasgames.android.oaspay.R;
+import com.oasgames.android.oaspay.activity.ActivityPayPackageList;
+import com.oasgames.android.oaspay.entity.PayInfoDetail;
+
+import java.util.List;
+
+/**
+ * 支付套餐列表
+ * @author Administrator
+ *
+ */
+public class AdapterPayPackageList extends BasesListAdapter<PayInfoDetail> {
+	ActivityPayPackageList c;
+	public AdapterPayPackageList(Activity activity, List<PayInfoDetail> data,
+								 int count, LinearLayout footerView) {
+		super(activity, data, count, footerView);
+		this.c = (ActivityPayPackageList)activity;
+	}
+
+	@Override
+	public void loadMore() {
+		// no more
+	}
+
+	@Override
+	public View getRowView(int position, View convertView, ViewGroup parent) {
+		ViewHolder hoder = null;
+		if(null == convertView){
+			convertView = c.getLayoutInflater().inflate(R.layout.page_pay_package_list_item, null);
+			hoder = new ViewHolder();
+			hoder.price = (TextView) convertView.findViewById(R.id.pay_package_list_item_price);
+			hoder.coins = (TextView) convertView.findViewById(R.id.pay_package_list_item_diamond_blue);
+			hoder.addCoinsLayout = (RelativeLayout) convertView.findViewById(R.id.pay_package_list_item_diamond_red_layout);
+			hoder.addCoins = (TextView) convertView.findViewById(R.id.pay_package_list_item_diamond_red);
+
+			convertView.setTag(hoder);
+		}else{
+			hoder = (ViewHolder) convertView.getTag();
+		}
+		
+		final PayInfoDetail info = getItem(position);
+		if(c.selectedPayInfo == info){
+			convertView.setBackgroundResource(R.color.common_list_item_bg_selected);
+		}else{
+			convertView.setBackgroundResource(R.color.common_list_item_bg_unselected);
+		}
+		hoder.price.setText(info.currency_show + info.amount_show);
+		int addCoins = 0;
+		try {
+			if(!TextUtils.isEmpty(info.price_discount)){
+				addCoins = Integer.parseInt(info.price_discount);
+			}
+		} catch (NumberFormatException e) {
+			addCoins = 0;
+		}
+		hoder.coins.setText(info.game_coins_show);
+		
+		if(addCoins > 0){
+			hoder.addCoins.setText(info.price_discount);
+			hoder.addCoinsLayout.setVisibility(View.VISIBLE);
+		}else{
+			hoder.addCoinsLayout.setVisibility(View.INVISIBLE);
+		}
+		
+		return convertView;
+	}
+
+	static class ViewHolder {
+		TextView price;					// 套餐价格
+		TextView coins;					// 蓝钻
+		RelativeLayout addCoinsLayout;	// 赠送钻石布局
+		TextView addCoins;				// 赠送钻石
+	}
+}
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/vcs.xml	(revision )
+++ .idea/vcs.xml	(revision )
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/java/com/base/tools/entity/UserInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/entity/UserInfo.java	(revision )
+++ app/src/main/java/com/base/tools/entity/UserInfo.java	(revision )
@@ -0,0 +1,112 @@
+package com.base.tools.entity;
+
+/**
+ * 用户基本信息
+ * @author Administrator
+ *
+ */
+public class UserInfo {
+	
+	public String status;
+	public String uid;
+	public String user_type;
+	public String token;
+	public String platform;
+	public String platform_token;
+	public String error;
+	public String err_msg;
+	public String avatar_pic;// 头像
+
+	public String serverID;
+	public String serverName;
+	public String serverType;
+	public String roleID;
+	public String username;
+	public String nickname;// 昵称
+	public String gameNickname;// 游戏昵称
+
+	public void setUser_type(String user_type) {
+		this.user_type = user_type;
+	}
+
+	public void setStatus(String status) {
+		this.status = status;
+	}
+	public void setToken(String token) {
+		this.token = token;
+	}
+	public String getPlatform_token() {
+		return platform_token;
+	}
+	public void setPlatform_token(String platform_token) {
+		this.platform_token = platform_token;
+	}
+	public String getUid() {
+		return uid;
+	}
+	public void setUid(String uid) {
+		this.uid = uid;
+	}
+	public String getError() {
+		return error;
+	}
+	public void setError(String error) {
+		this.error = error;
+	}
+	public String getErr_msg() {
+		return err_msg;
+	}
+	public void setErr_msg(String err_msg) {
+		this.err_msg = err_msg;
+	}
+	public String getServerID() {
+		return serverID;
+	}
+	public void setServerID(String serverID) {
+		this.serverID = serverID;
+	}
+	public String getServerName() {
+		return serverName;
+	}
+	public void setServerName(String serverName) {
+		this.serverName = serverName;
+	}
+	public String getServerType() {
+		return serverType;
+	}
+	public void setServerType(String serverType) {
+		this.serverType = serverType;
+	}
+	public String getRoleID() {
+		return roleID;
+	}
+	public void setRoleID(String roleID) {
+		this.roleID = roleID;
+	}
+	public String getUsername() {
+		return username;
+	}
+	public void setUsername(String username) {
+		this.username = username;
+	}
+	public String getPlatform() {
+		return platform;
+	}
+	public void setPlatform(String paltform) {
+		this.platform = paltform;
+	}
+	public String getGameNickname() {
+		return gameNickname;
+	}
+	public void setGameNickname(String gameNickname) {
+		this.gameNickname = gameNickname;
+	}
+
+	public void setAvatar_pic(String avatar_pic) {
+		this.avatar_pic = avatar_pic;
+	}
+
+	public void setNickname(String nickname) {
+		this.nickname = nickname;
+	}
+}
Index: app/src/main/java/com/nineoldandroids/animation/IntKeyframeSet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nineoldandroids/animation/IntKeyframeSet.java	(revision )
+++ app/src/main/java/com/nineoldandroids/animation/IntKeyframeSet.java	(revision )
@@ -0,0 +1,135 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.nineoldandroids.animation;
+
+import android.view.animation.Interpolator;
+
+import com.nineoldandroids.animation.Keyframe.IntKeyframe;
+
+import java.util.ArrayList;
+
+/**
+ * This class holds a collection of IntKeyframe objects and is called by ValueAnimator to calculate
+ * values between those keyframes for a given animation. The class internal to the animation
+ * package because it is an implementation detail of how Keyframes are stored and used.
+ *
+ * <p>This type-specific subclass of KeyframeSet, along with the other type-specific subclass for
+ * float, exists to speed up the getValue() method when there is no custom
+ * TypeEvaluator set for the animation, so that values can be calculated without autoboxing to the
+ * Object equivalents of these primitive types.</p>
+ */
+class IntKeyframeSet extends KeyframeSet {
+    private int firstValue;
+    private int lastValue;
+    private int deltaValue;
+    private boolean firstTime = true;
+
+    public IntKeyframeSet(IntKeyframe... keyframes) {
+        super(keyframes);
+    }
+
+    @Override
+    public Object getValue(float fraction) {
+        return getIntValue(fraction);
+    }
+
+    @Override
+    public IntKeyframeSet clone() {
+        ArrayList<Keyframe> keyframes = mKeyframes;
+        int numKeyframes = mKeyframes.size();
+        IntKeyframe[] newKeyframes = new IntKeyframe[numKeyframes];
+        for (int i = 0; i < numKeyframes; ++i) {
+            newKeyframes[i] = (IntKeyframe) keyframes.get(i).clone();
+        }
+        IntKeyframeSet newSet = new IntKeyframeSet(newKeyframes);
+        return newSet;
+    }
+
+    public int getIntValue(float fraction) {
+        if (mNumKeyframes == 2) {
+            if (firstTime) {
+                firstTime = false;
+                firstValue = ((IntKeyframe) mKeyframes.get(0)).getIntValue();
+                lastValue = ((IntKeyframe) mKeyframes.get(1)).getIntValue();
+                deltaValue = lastValue - firstValue;
+            }
+            if (mInterpolator != null) {
+                fraction = mInterpolator.getInterpolation(fraction);
+            }
+            if (mEvaluator == null) {
+                return firstValue + (int)(fraction * deltaValue);
+            } else {
+                return ((Number)mEvaluator.evaluate(fraction, firstValue, lastValue)).intValue();
+            }
+        }
+        if (fraction <= 0f) {
+            final IntKeyframe prevKeyframe = (IntKeyframe) mKeyframes.get(0);
+            final IntKeyframe nextKeyframe = (IntKeyframe) mKeyframes.get(1);
+            int prevValue = prevKeyframe.getIntValue();
+            int nextValue = nextKeyframe.getIntValue();
+            float prevFraction = prevKeyframe.getFraction();
+            float nextFraction = nextKeyframe.getFraction();
+            final /*Time*/Interpolator interpolator = nextKeyframe.getInterpolator();
+            if (interpolator != null) {
+                fraction = interpolator.getInterpolation(fraction);
+            }
+            float intervalFraction = (fraction - prevFraction) / (nextFraction - prevFraction);
+            return mEvaluator == null ?
+                    prevValue + (int)(intervalFraction * (nextValue - prevValue)) :
+                    ((Number)mEvaluator.evaluate(intervalFraction, prevValue, nextValue)).
+                            intValue();
+        } else if (fraction >= 1f) {
+            final IntKeyframe prevKeyframe = (IntKeyframe) mKeyframes.get(mNumKeyframes - 2);
+            final IntKeyframe nextKeyframe = (IntKeyframe) mKeyframes.get(mNumKeyframes - 1);
+            int prevValue = prevKeyframe.getIntValue();
+            int nextValue = nextKeyframe.getIntValue();
+            float prevFraction = prevKeyframe.getFraction();
+            float nextFraction = nextKeyframe.getFraction();
+            final /*Time*/Interpolator interpolator = nextKeyframe.getInterpolator();
+            if (interpolator != null) {
+                fraction = interpolator.getInterpolation(fraction);
+            }
+            float intervalFraction = (fraction - prevFraction) / (nextFraction - prevFraction);
+            return mEvaluator == null ?
+                    prevValue + (int)(intervalFraction * (nextValue - prevValue)) :
+                    ((Number)mEvaluator.evaluate(intervalFraction, prevValue, nextValue)).intValue();
+        }
+        IntKeyframe prevKeyframe = (IntKeyframe) mKeyframes.get(0);
+        for (int i = 1; i < mNumKeyframes; ++i) {
+            IntKeyframe nextKeyframe = (IntKeyframe) mKeyframes.get(i);
+            if (fraction < nextKeyframe.getFraction()) {
+                final /*Time*/Interpolator interpolator = nextKeyframe.getInterpolator();
+                if (interpolator != null) {
+                    fraction = interpolator.getInterpolation(fraction);
+                }
+                float intervalFraction = (fraction - prevKeyframe.getFraction()) /
+                    (nextKeyframe.getFraction() - prevKeyframe.getFraction());
+                int prevValue = prevKeyframe.getIntValue();
+                int nextValue = nextKeyframe.getIntValue();
+                return mEvaluator == null ?
+                        prevValue + (int)(intervalFraction * (nextValue - prevValue)) :
+                        ((Number)mEvaluator.evaluate(intervalFraction, prevValue, nextValue)).
+                                intValue();
+            }
+            prevKeyframe = nextKeyframe;
+        }
+        // shouldn't get here
+        return ((Number)mKeyframes.get(mNumKeyframes - 1).getValue()).intValue();
+    }
+
+}
+
Index: app/src/main/java/com/oasgames/android/oaspay/entity/SearchKeywordInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/entity/SearchKeywordInfo.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/entity/SearchKeywordInfo.java	(revision )
@@ -0,0 +1,43 @@
+package com.oasgames.android.oaspay.entity;
+
+import java.io.Serializable;
+
+/**
+ * 默认搜索关键词 详细信息
+ * @author xdb
+ *
+ */
+public class SearchKeywordInfo implements Serializable{
+	private static final long serialVersionUID = 1598605839985469091L;
+
+	public String id;			//主键 以创建时间代替
+	public String keyword;		//名称
+	public String createtime;	//创建时间
+	public String ext1;			//扩展1
+	public String ext2;			//扩展2
+	public String px;			//扩展3
+
+	public void setId(String id) {
+		this.id = id;
+	}
+
+	public void setKeyword(String keyword) {
+		this.keyword = keyword;
+	}
+
+	public void setCreatetime(String createtime) {
+		this.createtime = createtime;
+	}
+
+	public void setExt1(String ext1) {
+		this.ext1 = ext1;
+	}
+
+	public void setExt2(String ext2) {
+		this.ext2 = ext2;
+	}
+
+	public void setPx(String px) {
+		this.px = px;
+	}
+}
Index: app/src/main/java/com/oasgames/android/oaspay/entity/ProductInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/entity/ProductInfo.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/entity/ProductInfo.java	(revision )
@@ -0,0 +1,74 @@
+package com.oasgames.android.oaspay.entity;
+
+import java.io.Serializable;
+
+/**
+ * 商品（礼包）详细信息
+ * @author xdb
+ *
+ */
+public class ProductInfo implements Serializable{
+	private static final long serialVersionUID = 1598605839985469091L;
+	
+	public String product_id;			//商品礼包id
+	private String price_product_id;		//商店id
+	public String product_name;			//名称
+	public String product_img_url;		//图片地址
+	public String game_coins;			//钻石数量
+	public String game_coins_show;		//钻石数量
+	public String price_discount;		//钻石数量
+	public String amount;				//显示价格
+	public String amount_show;			//显示价格
+	public String currency;				//显示货币
+	public String currency_show;		//显示货币
+	public String content_info;			//商品说明 数组
+
+
+	public void setProduct_id(String product_id) {
+		this.product_id = product_id;
+	}
+
+	public void setProduct_name(String product_name) {
+		this.product_name = product_name;
+	}
+
+	public void setProduct_img_url(String product_img_url) {
+		this.product_img_url = product_img_url;
+	}
+
+	public void setGame_coins(String game_coins) {
+		this.game_coins = game_coins;
+	}
+
+	public void setGame_coins_show(String game_coins_show) {
+		this.game_coins_show = game_coins_show;
+	}
+
+	public void setPrice_discount(String price_discount) {
+		this.price_discount = price_discount;
+	}
+
+	public void setAmount(String amount) {
+		this.amount = amount;
+	}
+
+	public void setAmount_show(String amount_show) {
+		this.amount_show = amount_show;
+	}
+
+	public void setCurrency(String currency) {
+		this.currency = currency;
+	}
+
+	public void setCurrency_show(String currency_show) {
+		this.currency_show = currency_show;
+	}
+
+	public void setContent_info(String content_info) {
+		this.content_info = content_info;
+	}
+
+	public void setPrice_product_id(String price_product_id) {
+		this.price_product_id = price_product_id;
+	}
+}
Index: app/src/main/java/com/base/tools/google/Base64DecoderException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/google/Base64DecoderException.java	(revision )
+++ app/src/main/java/com/base/tools/google/Base64DecoderException.java	(revision )
@@ -0,0 +1,32 @@
+// Copyright 2002, Google, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.base.tools.google;
+
+/**
+ * Exception thrown when encountering an invalid Base64 input character.
+ *
+ * @author nelson
+ */
+public class Base64DecoderException extends Exception {
+    public Base64DecoderException() {
+        super();
+    }
+
+    public Base64DecoderException(String s) {
+        super(s);
+    }
+
+    private static final long serialVersionUID = 1L;
+}
Index: app/src/main/res/layout/page_common_webview.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/page_common_webview.xml	(revision )
+++ app/src/main/res/layout/page_common_webview.xml	(revision )
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="match_parent">
+    <include layout="@layout/common_head"/>
+
+    <WebView
+        android:id="@+id/common_webview"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_marginLeft="@dimen/common_content_margin_5"
+        android:layout_marginRight="@dimen/common_content_margin_5"/>
+</LinearLayout>
\ No newline at end of file
Index: app/src/main/java/com/google/zxing/decoding/FinishListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/google/zxing/decoding/FinishListener.java	(revision )
+++ app/src/main/java/com/google/zxing/decoding/FinishListener.java	(revision )
@@ -0,0 +1,47 @@
+/*
+ * Copyright (C) 2010 ZXing authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.zxing.decoding;
+
+import android.app.Activity;
+import android.content.DialogInterface;
+
+/**
+ * Simple listener used to exit the app in a few cases.
+ *
+ */
+public final class FinishListener
+    implements DialogInterface.OnClickListener, DialogInterface.OnCancelListener, Runnable {
+
+  private final Activity activityToFinish;
+
+  public FinishListener(Activity activityToFinish) {
+    this.activityToFinish = activityToFinish;
+  }
+
+  public void onCancel(DialogInterface dialogInterface) {
+    run();
+  }
+
+  public void onClick(DialogInterface dialogInterface, int i) {
+    run();
+  }
+
+  public void run() {
+    activityToFinish.finish();
+  }
+
+}
Index: app/src/main/res/layout/page_login_user_list_item.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/page_login_user_list_item.xml	(revision )
+++ app/src/main/res/layout/page_login_user_list_item.xml	(revision )
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:paddingRight="@dimen/common_content_margin_30">
+    <TextView
+                android:id="@+id/login_user_list_item_name"
+                android:layout_width="match_parent"
+                android:layout_height="@dimen/login_user_list_item_height"
+                android:text="@string/login_title_sub"
+                android:textColor="@color/common_font_color_000000"
+                android:textSize="@dimen/common_font_size_12"
+                android:gravity="right|center_vertical"/>
+
+
+</RelativeLayout>
\ No newline at end of file
Index: app/src/test/java/com/oasgames/mobilepay/ExampleUnitTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/test/java/com/oasgames/mobilepay/ExampleUnitTest.java	(revision )
+++ app/src/test/java/com/oasgames/mobilepay/ExampleUnitTest.java	(revision )
@@ -0,0 +1,15 @@
+package com.oasgames.mobilepay;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+/**
+ * To work on unit tests, switch the Test Artifact in the Build Variants view.
+ */
+public class ExampleUnitTest {
+    @Test
+    public void addition_isCorrect() throws Exception {
+        assertEquals(4, 2 + 2);
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/base/tools/slide/SlideTouchListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/slide/SlideTouchListener.java	(revision )
+++ app/src/main/java/com/base/tools/slide/SlideTouchListener.java	(revision )
@@ -0,0 +1,524 @@
+package com.base.tools.slide;
+
+import android.os.Build;
+import android.support.v4.view.MotionEventCompat;
+import android.util.Log;
+import android.view.MotionEvent;
+import android.view.VelocityTracker;
+import android.view.View;
+import android.view.View.OnTouchListener;
+import android.view.ViewConfiguration;
+import android.view.ViewParent;
+import android.widget.AbsListView;
+
+import com.nineoldandroids.animation.Animator;
+import com.nineoldandroids.animation.AnimatorListenerAdapter;
+import com.base.tools.slide.SlideListView.SlideAction;
+import com.base.tools.slide.SlideListView.SlideMode;
+
+import static com.nineoldandroids.view.ViewHelper.setTranslationX;
+import static com.nineoldandroids.view.ViewPropertyAnimator.animate;
+
+public class SlideTouchListener implements OnTouchListener {
+	private static final int INVALID_POINTER = -1;
+	// Sliding status
+	private static final int SLIDING_STATE_NONE = 0;// no sliding
+	private static final int SLIDING_STATE_MANUAL = 1;// manual sliding
+	private static final int SLIDING_STATE_AUTO = 2;// auto sliding
+
+	private SlideListView mSlideListView;
+	private int mTouchSlop;
+	private long mConfigShortAnimationTime;
+
+	private int mDownPosition;
+	private int mActivePointerId;
+	private int mDownMotionX;
+	private VelocityTracker mVelocityTracker;
+	private int mScrollState = SLIDING_STATE_NONE;
+	//
+	private SlideItem mSlideItem;
+
+	public SlideTouchListener(SlideListView slideListView) {
+		mSlideListView = slideListView;
+		ViewConfiguration configuration = ViewConfiguration.get(slideListView.getContext());
+		mTouchSlop = configuration.getScaledTouchSlop();
+		mConfigShortAnimationTime = slideListView.getContext().getResources().getInteger(android.R.integer.config_shortAnimTime);
+	}
+
+	/**
+	 * reset items status when adapter is modified
+	 */
+	void reset() {
+		mSlideItem = null;
+		mScrollState = SLIDING_STATE_NONE;
+	}
+
+	/**
+	 * If there is a item in opend status,return the position.Else return
+	 * AbsListView.INVALID_POSITION =-1
+	 * 
+	 * @return
+	 */
+	public int getOpendPosition() {
+		if (isOpend()) {
+			return mSlideItem.position;
+		}
+		return AbsListView.INVALID_POSITION;
+	}
+
+	/**
+	 * 
+	 * @return if return true,there is in sliding,else not
+	 */
+	boolean isInSliding() {
+		return mScrollState != SLIDING_STATE_NONE;
+	}
+
+	/**
+	 * If there is a item in opend status,close it.Else do no thing
+	 */
+	public void closeOpenedItem() {
+		if (isOpend()) {
+			autoScroll(mSlideItem.offset, false);
+		}
+	}
+
+	public boolean isOpend() {
+		return mSlideItem != null && mSlideItem.isOpend();
+	}
+
+	private long getAnimationTime() {
+		long time = mSlideListView.getAnimationTime();
+		if (time <= 0) {
+			time = mConfigShortAnimationTime;
+		}
+		return time;
+	}
+
+	private void initOrResetVelocityTracker() {
+		if (mVelocityTracker == null) {
+			mVelocityTracker = VelocityTracker.obtain();
+		} else {
+			mVelocityTracker.clear();
+		}
+	}
+
+	private void initVelocityTrackerIfNotExists() {
+		if (mVelocityTracker == null) {
+			mVelocityTracker = VelocityTracker.obtain();
+		}
+	}
+
+	private class SlideItem {
+		/**
+		 * The slideItem's position
+		 */
+		private final int position;
+		// slide item's view
+		private SlideItemWrapLayout child;
+		private FrontViewWrapLayout frontView;
+		private View leftBackView;
+		private View rightBackView;
+		/**
+		 * represent the offset of slide item(Actual,it is the front view's
+		 * offset).<br/>
+		 * The value must between {@link #minOffset} and {@link #maxOffset}.<br/>
+		 * if the item has no sliding any more,offset==0.
+		 */
+		private int offset;
+
+		/**
+		 * if rightBackView!=null && rightBackView.getWidth()!=0,then the
+		 * item(front view) can sliding to left.<br/>
+		 * than the {@link #offset} will less than 0.So the minOffset=
+		 * -rightBackView.getWidth();
+		 */
+		private final int minOffset;
+
+		/**
+		 * if leftBackView!=null && leftBackView.getWidth()!=0,then the
+		 * item(front view) can sliding to right.<br/>
+		 * than the {@link #offset} will greater than 0.So the maxOffset=
+		 * leftBackView.getWidth();
+		 */
+		private final int maxOffset;
+
+		/**
+		 * Record the previous offset value.Used for notify
+		 * {@link #offset}
+		 */
+		private int previousOffset;
+
+		private int preDelatX;
+
+		public SlideItem(int pos) {
+			position = pos;
+			child = (SlideItemWrapLayout) mSlideListView.getChildAt(position - mSlideListView.getFirstVisiblePosition());
+			if (child == null) {
+				throw new NullPointerException("At position:" + position
+						+ "child(Item) cann't be null.Are your sure you have use createConvertView() method in your adapter");
+			}
+			frontView = child.getFrontView();
+			if (frontView == null) {
+				throw new NullPointerException("At position:" + position
+						+ "front view cann't be null.Are your sure you have use createConvertView() method in your adapter");
+			}
+			leftBackView = child.getLeftBackView();
+			rightBackView = child.getRightBackView();
+			SlideMode slideMode = mSlideListView.getSlideAdapter().getSlideModeInPosition(position - mSlideListView.getHeaderViewsCount());
+			if (rightBackView != null && (slideMode == SlideMode.RIGHT || slideMode == SlideMode.BOTH)) {
+				minOffset = -rightBackView.getWidth();
+			} else {
+				minOffset = 0;
+			}
+			if (leftBackView != null && (slideMode == SlideMode.LEFT || slideMode == SlideMode.BOTH)) {
+				maxOffset = leftBackView.getWidth();
+			} else {
+				maxOffset = 0;
+			}
+		}
+
+		private boolean isOpend() {
+			return offset != 0 /*
+								 * && (xOffset == xMinOffset || xOffset ==
+								 * xMaxOffset)
+								 */;
+		}
+	}
+
+	private int getPointerIndex(MotionEvent event) {
+		int pointerIndex = event.findPointerIndex(mActivePointerId);
+		if (pointerIndex == INVALID_POINTER) {
+			pointerIndex = 0;
+			mActivePointerId = event.getPointerId(pointerIndex);
+		}
+		return pointerIndex;
+	}
+
+	boolean onInterceptTouchEvent(MotionEvent event) {
+		int action = MotionEventCompat.getActionMasked(event);
+		switch (action) {
+		case MotionEvent.ACTION_DOWN: {// All MotionEvent.ACTION_DOWN will
+										// dispatch to here
+			if (isInSliding()) {// if previous slideing has not finished,prevent
+								// it
+				return true;
+			}
+			// reset
+			mDownPosition = AbsListView.INVALID_POSITION;
+			mDownMotionX = 0;
+			mActivePointerId = INVALID_POINTER;
+
+			int position = mSlideListView.pointToPosition((int) event.getX(), (int) event.getY());
+			if (position == AbsListView.INVALID_POSITION) {
+				break;
+			}
+			// don't allow swiping if this is on the header or footer or
+			// IGNORE_ITEM_VIEW_TYPE or enabled is false on the adapter
+			boolean allowSlide = mSlideListView.getAdapter().isEnabled(position) && mSlideListView.getAdapter().getItemViewType(position) >= 0;
+			if (allowSlide) {
+				if (Build.VERSION.SDK_INT <= 11) {// below 3.0
+					mSlideListView.checkScrolling();
+				}
+				mDownPosition = position;
+				mActivePointerId = event.getPointerId(0);
+				mDownMotionX = (int) event.getX();
+				initOrResetVelocityTracker();
+				mVelocityTracker.addMovement(event);
+			}
+		}
+			break;
+		case MotionEvent.ACTION_MOVE: {// If MotionEvent.ACTION_DOWN in the sub
+										// view,MotionEvent.ACTION_MOVE will
+										// dispatch to here at
+										// first.So if it is sliding some
+										// distance on the x axis,we should
+										// intercept the touch event
+			if (mDownPosition == AbsListView.INVALID_POSITION) {
+				break;
+			}
+			if (mSlideListView.isInScrolling()) {
+				break;
+			}
+			int pointerIndex = getPointerIndex(event);
+			// get scroll speed
+			initVelocityTrackerIfNotExists();
+			mVelocityTracker.addMovement(event);
+			mVelocityTracker.computeCurrentVelocity(1000);
+			float velocityX = Math.abs(mVelocityTracker.getXVelocity(mActivePointerId));
+			float velocityY = Math.abs(mVelocityTracker.getYVelocity(mActivePointerId));
+			// whether is scroll on x axis
+			boolean isScrollX = velocityX > velocityY;
+			// get scroll distance
+			int distance = Math.abs((int) event.getX(pointerIndex) - mDownMotionX);
+
+			if (isScrollX && distance > mTouchSlop) {
+				ViewParent parent = mSlideListView.getParent();
+				if (parent != null) {
+					parent.requestDisallowInterceptTouchEvent(true);
+				}
+				mScrollState = SLIDING_STATE_MANUAL;
+				return true;
+			}
+		}
+			break;
+		// case MotionEvent.ACTION_UP:
+		// case MotionEvent.ACTION_CANCEL:
+		// default:
+		// mScrollState = SLIDING_STATE_NONE;
+		// break;
+		}
+		return false;
+	}
+
+	@Override
+	public boolean onTouch(View v, MotionEvent event) {
+		if (!mSlideListView.isEnabled() || !mSlideListView.isSlideEnable()) {
+			return false;
+		}
+		int action = MotionEventCompat.getActionMasked(event);
+		switch (action) {
+		case MotionEvent.ACTION_DOWN: {
+			if (isInSliding()) {// if previous slideing has not finished,prevent
+								// it
+				return true;
+			}
+		}
+			break;
+		case MotionEvent.ACTION_MOVE: {// Handle the event which dispatch to
+										// ListView.If is in
+										// sliding,intercept(return true)
+			if (mDownPosition == AbsListView.INVALID_POSITION) {
+				break;
+			}
+			if (mSlideListView.isInScrolling()) {
+				break;
+			}
+			int pointerIndex = getPointerIndex(event);
+
+			if (mScrollState == SLIDING_STATE_MANUAL) {
+				if (mSlideItem == null) {// start sliding and init mSlideItem
+					mSlideItem = new SlideItem(mDownPosition);
+				}
+
+				int deltaX = (int) event.getX(pointerIndex) - mDownMotionX;
+				int nextOffset = deltaX - mSlideItem.preDelatX + mSlideItem.offset;
+				mSlideItem.preDelatX = deltaX;
+				if (nextOffset < mSlideItem.minOffset) {
+					nextOffset = mSlideItem.minOffset;
+				}
+				if (nextOffset > mSlideItem.maxOffset) {
+					nextOffset = mSlideItem.maxOffset;
+				}
+				if (mSlideItem.offset != nextOffset) {
+					mSlideItem.offset = nextOffset;
+					move(nextOffset);
+				}
+				return true;
+			} else {
+				// See onInterceptTouchEvent() Method
+				initVelocityTrackerIfNotExists();
+				mVelocityTracker.addMovement(event);
+				mVelocityTracker.computeCurrentVelocity(1000);
+				float velocityX = Math.abs(mVelocityTracker.getXVelocity(mActivePointerId));
+				float velocityY = Math.abs(mVelocityTracker.getYVelocity(mActivePointerId));
+				// whether is scroll on x axis
+				boolean isScrollX = velocityX > velocityY;
+				// get scroll distance
+				int distance = Math.abs((int) event.getX(pointerIndex) - mDownMotionX);
+
+				if (isScrollX && distance > mTouchSlop) {
+					ViewParent parent = mSlideListView.getParent();
+					if (parent != null) {
+						parent.requestDisallowInterceptTouchEvent(true);
+					}
+					mScrollState = SLIDING_STATE_MANUAL;
+					return true;
+				}
+			}
+		}
+			break;
+		case MotionEvent.ACTION_UP: {
+			if (mDownPosition == AbsListView.INVALID_POSITION) {
+				break;
+			}
+			if (mSlideItem == null) {
+				break;
+			}
+			if (mScrollState == SLIDING_STATE_MANUAL) {
+				int pointerIndex = getPointerIndex(event);
+
+				int deltaX = (int) event.getX(pointerIndex) - mDownMotionX;
+				if (deltaX == 0) {// sliding distance equals 0
+					reset();
+					return true;
+				}
+				/*
+				 * Don't need automatic sliding, has already reached a fixed
+				 * position
+				 */
+				if (mSlideItem.offset == 0 || mSlideItem.offset == mSlideItem.minOffset || mSlideItem.offset == mSlideItem.maxOffset) {
+					slidingFinish();
+					return true;
+				}
+
+				SlideMode slideMode = mSlideListView.getSlideAdapter().getSlideModeInPosition(
+						mSlideItem.position - mSlideListView.getHeaderViewsCount());
+				boolean doOpen = false;// open or close
+				if (mSlideItem.offset > 0) {// left back view is showing
+					if (slideMode == SlideMode.LEFT || slideMode == SlideMode.BOTH) {// SlideMode
+																						// support
+																						// left
+						// the move distance greater than leftBackView's width/4
+						boolean distanceGreater = Math.abs(mSlideItem.offset - mSlideItem.previousOffset) > Math.abs(mSlideItem.maxOffset)
+								/ (float) 4;
+						if (mSlideItem.offset - mSlideItem.previousOffset > 0) {
+							doOpen = distanceGreater;
+						} else {
+							doOpen = !distanceGreater;
+						}
+					}
+				} else {// right back view is showing
+					if (slideMode == SlideMode.RIGHT || slideMode == SlideMode.BOTH) {// SlideMode
+																						// support
+																						// right
+						// the move distance greater than rightBackView's
+						// width/4
+						boolean distanceGreater = Math.abs(mSlideItem.offset - mSlideItem.previousOffset) > Math.abs(mSlideItem.minOffset)
+								/ (float) 4;
+						if (mSlideItem.offset - mSlideItem.previousOffset > 0) {
+							doOpen = !distanceGreater;
+						} else {
+							doOpen = distanceGreater;
+						}
+					}
+				}
+				autoScroll(mSlideItem.offset, doOpen);
+				return true;
+			} else {
+				if (mSlideListView.isInScrolling()) {
+					closeOpenedItem();
+				}
+			}
+		}
+			break;
+		case MotionEvent.ACTION_CANCEL:
+		default:
+			mScrollState = SLIDING_STATE_NONE;
+			break;
+		}
+		return false;
+	}
+
+	private void slidingFinish() {
+		mScrollState = SLIDING_STATE_NONE;
+		if (mSlideItem.previousOffset != mSlideItem.offset) {// notify
+			if (mSlideItem.previousOffset != 0) {// Previous sliding has open
+													// left or right back
+													// view.So wo should norify
+													// closed
+				// if previousOffset between 0 and maxOffset.The left back view
+				// is opend or half opend(exception) in previous sliding
+				boolean left = mSlideItem.previousOffset > 0 && mSlideItem.previousOffset <= mSlideItem.maxOffset;
+				mSlideListView.onClosed(mSlideItem.position, left);
+			}
+			if (mSlideItem.offset != 0) {// Current sliding has open left or
+											// right back view.So wo should
+											// norify opend
+				boolean left = mSlideItem.offset > 0 && mSlideItem.offset <= mSlideItem.maxOffset;
+				mSlideListView.onOpend(mSlideItem.position, left);
+			}
+		}
+
+		if (mSlideItem.offset != 0) {
+			mSlideItem.frontView.setOpend(true);
+			mSlideItem.previousOffset = mSlideItem.offset;
+			mSlideItem.preDelatX = 0;
+		} else {
+			mSlideItem.frontView.setOpend(false);
+			mSlideItem.child.setLeftBackViewShow(false);
+			mSlideItem.child.setRightBackViewShow(false);
+			mSlideItem = null;
+		}
+	}
+
+	private void autoScroll(final int offset, final boolean toOpen) {
+		mScrollState = SLIDING_STATE_AUTO;
+		int moveTo = 0;
+		if (offset < 0) {// right back view is showing
+			moveTo = toOpen ? mSlideItem.minOffset : 0;
+			// if SlideRightAction==SCROLL,right back view will sliding with
+			// front view
+			SlideAction rightAction = mSlideListView.getSlideRightAction();
+			if (mSlideItem.rightBackView != null && rightAction == SlideAction.SCROLL) {
+				animate(mSlideItem.rightBackView).translationX(moveTo).setDuration(getAnimationTime());
+			}
+		} else {// left back view is showing
+			moveTo = toOpen ? mSlideItem.maxOffset : 0;
+			// if SlideLeftAction==SCROLL,left back view will sliding with front
+			// view
+			SlideAction leftAction = mSlideListView.getSlideLeftAction();
+			if (mSlideItem.leftBackView != null && leftAction == SlideAction.SCROLL) {
+				animate(mSlideItem.leftBackView).translationX(moveTo).setDuration(getAnimationTime());
+			}
+		}
+
+		animate(mSlideItem.frontView).translationX(moveTo).setDuration(getAnimationTime()).setListener(new AnimatorListenerAdapter() {
+			@Override
+			public void onAnimationEnd(Animator animation) {
+				// In some extreme cases,the mSlideItem will be null when the
+				// animation end.
+				// For example,when the item is in sliding or auto sliding,you
+				// set a new Adapter to the listview.etc.
+				// So,add this judgment to avoid NullPointerException
+				if (mSlideItem == null) {
+					if (SlideListView.DEUBG) {
+						Log.d(SlideListView.TAG, "NullPointerException(onAnimationEnd,mSlideItem has been reset)");
+					}
+					return;
+				}
+				if (toOpen) {// to open
+					if (offset < 0) {// right back view is opend
+						mSlideItem.offset = mSlideItem.minOffset;
+					} else {// left back view is opend
+						mSlideItem.offset = mSlideItem.maxOffset;
+					}
+				} else {// to close
+					mSlideItem.offset = 0;
+				}
+				slidingFinish();
+			}
+		});
+
+	}
+
+	private void move(int offset) {
+		setTranslationX(mSlideItem.frontView, offset);
+		if (offset < 0) {// offset less than 0,right back view is showing and
+							// left dismiss
+			if (mSlideItem.rightBackView != null) {
+				mSlideItem.child.setRightBackViewShow(true);
+				SlideAction rightAction = mSlideListView.getSlideRightAction();
+				if (rightAction == SlideAction.SCROLL) {
+					setTranslationX(mSlideItem.rightBackView, offset);
+				}
+			}
+			if (mSlideItem.leftBackView != null) {
+				mSlideItem.child.setLeftBackViewShow(false);
+			}
+		} else {// offset greater than 0,left back view is showing and right
+				// dismiss
+			if (mSlideItem.leftBackView != null) {
+				mSlideItem.child.setLeftBackViewShow(true);
+				SlideAction leftAction = mSlideListView.getSlideLeftAction();
+				if (leftAction == SlideAction.SCROLL) {
+					setTranslationX(mSlideItem.leftBackView, offset);
+				}
+			}
+			if (mSlideItem.rightBackView != null) {
+				mSlideItem.child.setRightBackViewShow(false);
+			}
+		}
+	}
+
+}
Index: app/src/main/res/drawable/login_style_google_selector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/login_style_google_selector.xml	(revision )
+++ app/src/main/res/drawable/login_style_google_selector.xml	(revision )
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@mipmap/login_style_google_select" android:state_pressed="true"/>
+    <item android:drawable="@mipmap/login_style_google_select" android:state_focused="true"/>
+    <item android:drawable="@mipmap/login_style_google_select" android:state_selected="true"/>
+    <item android:drawable="@mipmap/login_style_google_unselect"/>
+
+</selector>
\ No newline at end of file
Index: app/src/main/java/com/google/zxing/decoding/DecodeHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/google/zxing/decoding/DecodeHandler.java	(revision )
+++ app/src/main/java/com/google/zxing/decoding/DecodeHandler.java	(revision )
@@ -0,0 +1,107 @@
+/*
+ * Copyright (C) 2010 ZXing authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.zxing.decoding;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.Message;
+import android.util.Log;
+
+import com.base.tools.utils.BasesUtils;
+import com.google.zxing.BinaryBitmap;
+import com.google.zxing.DecodeHintType;
+import com.google.zxing.MultiFormatReader;
+import com.google.zxing.ReaderException;
+import com.google.zxing.Result;
+import com.google.zxing.camera.CameraManager;
+import com.google.zxing.camera.PlanarYUVLuminanceSource;
+import com.google.zxing.common.HybridBinarizer;
+import com.oasgames.android.oaspay.activity.ActivityCapture;
+
+import java.util.Hashtable;
+
+final class DecodeHandler extends Handler {
+
+  private static final String TAG = DecodeHandler.class.getSimpleName();
+
+  private final ActivityCapture activity;
+  private final MultiFormatReader multiFormatReader;
+
+  DecodeHandler(ActivityCapture activity, Hashtable<DecodeHintType, Object> hints) {
+    multiFormatReader = new MultiFormatReader();
+    multiFormatReader.setHints(hints);
+    this.activity = activity;
+  }
+
+  @Override
+  public void handleMessage(Message message) {
+    if(message.what == BasesUtils.getResourceValue("id", "com_google_zxing_decode")) {
+        //Log.d(TAG, "Got decode message");
+        decode((byte[]) message.obj, message.arg1, message.arg2);
+    }else if(message.what == BasesUtils.getResourceValue("id", "com_google_zxing_quit")){
+        Looper.myLooper().quit();
+    }
+  }
+
+  /**
+   * Decode the data within the viewfinder rectangle, and time how long it took. For efficiency,
+   * reuse the same reader objects from one decode to the next.
+   *
+   * @param data   The YUV preview frame.
+   * @param width  The width of the preview frame.
+   * @param height The height of the preview frame.
+   */
+  private void decode(byte[] data, int width, int height) {
+    long start = System.currentTimeMillis();
+    Result rawResult = null;
+    
+    //modify here
+    byte[] rotatedData = new byte[data.length];
+    for (int y = 0; y < height; y++) {
+        for (int x = 0; x < width; x++)
+            rotatedData[x * height + height - y - 1] = data[x + y * width];
+    }
+    int tmp = width; // Here we are swapping, that's the difference to #11
+    width = height;
+    height = tmp;
+    
+    PlanarYUVLuminanceSource source = CameraManager.get().buildLuminanceSource(rotatedData, width, height);
+    BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
+    try {
+      rawResult = multiFormatReader.decodeWithState(bitmap);
+    } catch (ReaderException re) {
+      // continue
+    } finally {
+      multiFormatReader.reset();
+    }
+
+    if (rawResult != null) {
+      long end = System.currentTimeMillis();
+      Log.d(TAG, "Found barcode (" + (end - start) + " ms):\n" + rawResult.toString());
+      Message message = Message.obtain(activity.getHandler(), BasesUtils.getResourceValue("id", "com_google_zxing_decode_succeeded"), rawResult);
+      Bundle bundle = new Bundle();
+      bundle.putParcelable(DecodeThread.BARCODE_BITMAP, source.renderCroppedGreyscaleBitmap());
+      message.setData(bundle);
+      //Log.d(TAG, "Sending decode succeeded message...");
+      message.sendToTarget();
+    } else {
+      Message message = Message.obtain(activity.getHandler(), BasesUtils.getResourceValue("id", "com_google_zxing_decode_failed"));
+      message.sendToTarget();
+    }
+  }
+
+}
Index: app/src/main/java/com/nineoldandroids/animation/Animator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nineoldandroids/animation/Animator.java	(revision )
+++ app/src/main/java/com/nineoldandroids/animation/Animator.java	(revision )
@@ -0,0 +1,278 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.nineoldandroids.animation;
+
+import java.util.ArrayList;
+
+import android.view.animation.Interpolator;
+
+/**
+ * This is the superclass for classes which provide basic support for animations which can be
+ * started, ended, and have <code>AnimatorListeners</code> added to them.
+ */
+public abstract class Animator implements Cloneable {
+
+
+    /**
+     * The set of listeners to be sent events through the life of an animation.
+     */
+    ArrayList<AnimatorListener> mListeners = null;
+
+    /**
+     * Starts this animation. If the animation has a nonzero startDelay, the animation will start
+     * running after that delay elapses. A non-delayed animation will have its initial
+     * value(s) set immediately, followed by calls to
+     * {@link AnimatorListener#onAnimationStart(Animator)} for any listeners of this animator.
+     *
+     * <p>The animation started by calling this method will be run on the thread that called
+     * this method. This thread should have a Looper on it (a runtime exception will be thrown if
+     * this is not the case). Also, if the animation will animate
+     * properties of objects in the view hierarchy, then the calling thread should be the UI
+     * thread for that view hierarchy.</p>
+     *
+     */
+    public void start() {
+    }
+
+    /**
+     * Cancels the animation. Unlike {@link #end()}, <code>cancel()</code> causes the animation to
+     * stop in its tracks, sending an
+     * {@link android.animation.Animator.AnimatorListener#onAnimationCancel(Animator)} to
+     * its listeners, followed by an
+     * {@link android.animation.Animator.AnimatorListener#onAnimationEnd(Animator)} message.
+     *
+     * <p>This method must be called on the thread that is running the animation.</p>
+     */
+    public void cancel() {
+    }
+
+    /**
+     * Ends the animation. This causes the animation to assign the end value of the property being
+     * animated, then calling the
+     * {@link android.animation.Animator.AnimatorListener#onAnimationEnd(Animator)} method on
+     * its listeners.
+     *
+     * <p>This method must be called on the thread that is running the animation.</p>
+     */
+    public void end() {
+    }
+
+    /**
+     * The amount of time, in milliseconds, to delay starting the animation after
+     * {@link #start()} is called.
+     *
+     * @return the number of milliseconds to delay running the animation
+     */
+    public abstract long getStartDelay();
+
+    /**
+     * The amount of time, in milliseconds, to delay starting the animation after
+     * {@link #start()} is called.
+
+     * @param startDelay The amount of the delay, in milliseconds
+     */
+    public abstract void setStartDelay(long startDelay);
+
+
+    /**
+     * Sets the length of the animation.
+     *
+     * @param duration The length of the animation, in milliseconds.
+     */
+    public abstract Animator setDuration(long duration);
+
+    /**
+     * Gets the length of the animation.
+     *
+     * @return The length of the animation, in milliseconds.
+     */
+    public abstract long getDuration();
+
+    /**
+     * The time interpolator used in calculating the elapsed fraction of this animation. The
+     * interpolator determines whether the animation runs with linear or non-linear motion,
+     * such as acceleration and deceleration. The default value is
+     * {@link android.view.animation.AccelerateDecelerateInterpolator}
+     *
+     * @param value the interpolator to be used by this animation
+     */
+    public abstract void setInterpolator(/*Time*/Interpolator value);
+
+    /**
+     * Returns whether this Animator is currently running (having been started and gone past any
+     * initial startDelay period and not yet ended).
+     *
+     * @return Whether the Animator is running.
+     */
+    public abstract boolean isRunning();
+
+    /**
+     * Returns whether this Animator has been started and not yet ended. This state is a superset
+     * of the state of {@link #isRunning()}, because an Animator with a nonzero
+     * {@link #getStartDelay() startDelay} will return true for {@link #isStarted()} during the
+     * delay phase, whereas {@link #isRunning()} will return true only after the delay phase
+     * is complete.
+     *
+     * @return Whether the Animator has been started and not yet ended.
+     */
+    public boolean isStarted() {
+        // Default method returns value for isRunning(). Subclasses should override to return a
+        // real value.
+        return isRunning();
+    }
+
+    /**
+     * Adds a listener to the set of listeners that are sent events through the life of an
+     * animation, such as start, repeat, and end.
+     *
+     * @param listener the listener to be added to the current set of listeners for this animation.
+     */
+    public void addListener(AnimatorListener listener) {
+        if (mListeners == null) {
+            mListeners = new ArrayList<AnimatorListener>();
+        }
+        mListeners.add(listener);
+    }
+
+    /**
+     * Removes a listener from the set listening to this animation.
+     *
+     * @param listener the listener to be removed from the current set of listeners for this
+     *                 animation.
+     */
+    public void removeListener(AnimatorListener listener) {
+        if (mListeners == null) {
+            return;
+        }
+        mListeners.remove(listener);
+        if (mListeners.size() == 0) {
+            mListeners = null;
+        }
+    }
+
+    /**
+     * Gets the set of {@link android.animation.Animator.AnimatorListener} objects that are currently
+     * listening for events on this <code>Animator</code> object.
+     *
+     * @return ArrayList<AnimatorListener> The set of listeners.
+     */
+    public ArrayList<AnimatorListener> getListeners() {
+        return mListeners;
+    }
+
+    /**
+     * Removes all listeners from this object. This is equivalent to calling
+     * <code>getListeners()</code> followed by calling <code>clear()</code> on the
+     * returned list of listeners.
+     */
+    public void removeAllListeners() {
+        if (mListeners != null) {
+            mListeners.clear();
+            mListeners = null;
+        }
+    }
+
+    @Override
+    public Animator clone() {
+        try {
+            final Animator anim = (Animator) super.clone();
+            if (mListeners != null) {
+                ArrayList<AnimatorListener> oldListeners = mListeners;
+                anim.mListeners = new ArrayList<AnimatorListener>();
+                int numListeners = oldListeners.size();
+                for (int i = 0; i < numListeners; ++i) {
+                    anim.mListeners.add(oldListeners.get(i));
+                }
+            }
+            return anim;
+        } catch (CloneNotSupportedException e) {
+           throw new AssertionError();
+        }
+    }
+
+    /**
+     * This method tells the object to use appropriate information to extract
+     * starting values for the animation. For example, a AnimatorSet object will pass
+     * this call to its child objects to tell them to set up the values. A
+     * ObjectAnimator object will use the information it has about its target object
+     * and PropertyValuesHolder objects to get the start values for its properties.
+     * An ValueAnimator object will ignore the request since it does not have enough
+     * information (such as a target object) to gather these values.
+     */
+    public void setupStartValues() {
+    }
+
+    /**
+     * This method tells the object to use appropriate information to extract
+     * ending values for the animation. For example, a AnimatorSet object will pass
+     * this call to its child objects to tell them to set up the values. A
+     * ObjectAnimator object will use the information it has about its target object
+     * and PropertyValuesHolder objects to get the start values for its properties.
+     * An ValueAnimator object will ignore the request since it does not have enough
+     * information (such as a target object) to gather these values.
+     */
+    public void setupEndValues() {
+    }
+
+    /**
+     * Sets the target object whose property will be animated by this animation. Not all subclasses
+     * operate on target objects (for example, {@link ValueAnimator}, but this method
+     * is on the superclass for the convenience of dealing generically with those subclasses
+     * that do handle targets.
+     *
+     * @param target The object being animated
+     */
+    public void setTarget(Object target) {
+    }
+
+    /**
+     * <p>An animation listener receives notifications from an animation.
+     * Notifications indicate animation related events, such as the end or the
+     * repetition of the animation.</p>
+     */
+    public static interface AnimatorListener {
+        /**
+         * <p>Notifies the start of the animation.</p>
+         *
+         * @param animation The started animation.
+         */
+        void onAnimationStart(Animator animation);
+
+        /**
+         * <p>Notifies the end of the animation. This callback is not invoked
+         * for animations with repeat count set to INFINITE.</p>
+         *
+         * @param animation The animation which reached its end.
+         */
+        void onAnimationEnd(Animator animation);
+
+        /**
+         * <p>Notifies the cancellation of the animation. This callback is not invoked
+         * for animations with repeat count set to INFINITE.</p>
+         *
+         * @param animation The animation which was canceled.
+         */
+        void onAnimationCancel(Animator animation);
+
+        /**
+         * <p>Notifies the repetition of the animation.</p>
+         *
+         * @param animation The animation which was repeated.
+         */
+        void onAnimationRepeat(Animator animation);
+    }
+}
Index: app/src/main/res/drawable/login_style_facebook_selector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/login_style_facebook_selector.xml	(revision )
+++ app/src/main/res/drawable/login_style_facebook_selector.xml	(revision )
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@mipmap/login_style_facebook_select" android:state_pressed="true"/>
+    <item android:drawable="@mipmap/login_style_facebook_select" android:state_focused="true"/>
+    <item android:drawable="@mipmap/login_style_facebook_select" android:state_selected="true"/>
+    <item android:drawable="@mipmap/login_style_facebook_unselect"/>
+
+</selector>
\ No newline at end of file
Index: app/src/main/java/com/oasgames/android/oaspay/activity/ActivitySearch.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/activity/ActivitySearch.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/activity/ActivitySearch.java	(revision )
@@ -0,0 +1,312 @@
+package com.oasgames.android.oaspay.activity;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.text.TextUtils;
+import android.view.View;
+import android.view.inputmethod.InputMethodManager;
+import android.widget.AdapterView;
+import android.widget.EditText;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+import android.widget.ListView;
+import android.widget.TableLayout;
+import android.widget.TableRow;
+import android.widget.TextView;
+
+import com.base.tools.activity.BasesActivity;
+import com.base.tools.http.CallbackResultForActivity;
+import com.oasgames.android.oaspay.R;
+import com.oasgames.android.oaspay.adapter.AdapterProdcutList;
+import com.oasgames.android.oaspay.adapter.AdapterSearchHistoryList;
+import com.oasgames.android.oaspay.entity.ProductList;
+import com.oasgames.android.oaspay.entity.SearchInfo;
+import com.oasgames.android.oaspay.entity.SearchKeywordInfo;
+import com.oasgames.android.oaspay.service.HttpService;
+import com.oasgames.android.oaspay.tools.APPUtils;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * 界面 搜索
+ * Created by Administrator on 2015/10/16.
+ */
+public class ActivitySearch extends BasesActivity {
+    final int MaxHistoryCount = 10;// 历史搜索记录最多显示10条
+    final int MAXPAGESIZE = 20;// 搜索结果每页最大记录数
+
+    List<SearchKeywordInfo> keywordInfoList;
+
+    LinearLayout recommend, history;
+    ListView listViewHistory, listViewResult;
+    AdapterSearchHistoryList adapterSearchHistory;
+    List<SearchInfo> historyDatas;
+
+    AdapterProdcutList adapterSearchResult;
+
+    EditText searchEditText;
+    String keyword;
+
+    boolean isLoading = false;// 正在加载数据
+    ProductList productList;
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.page_search);
+
+        recommend = (LinearLayout)findViewById(R.id.search_recommend_layout);// 如果有推荐，在recommend添加view
+        recommend.setVisibility(View.GONE);
+
+        initHistory();
+
+        searchEditText = (EditText)findViewById(R.id.search_edittext);
+//        searchEditText.setOnEditorActionListener(new TextView.OnEditorActionListener() {
+//            @Override
+//            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
+//                if (actionId== EditorInfo.IME_ACTION_SEARCH ||(event!=null&&event.getKeyCode()== KeyEvent.KEYCODE_ENTER)) {
+//                    keyword = v.getText().toString().trim();
+//
+//                    if(TextUtils.isEmpty(keyword))
+//                        return true;
+//
+//                    InputMethodManager imm = (InputMethodManager)searchEditText.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
+//                    imm.hideSoftInputFromWindow(searchEditText.getWindowToken(), 0);
+//
+//                    APPUtils.insertToSearchHistory(keyword);
+//
+//                    loadSearchResult();
+//                    return true;
+//                }
+//                return false;
+//            }
+//        });
+        listViewResult = (ListView)findViewById(R.id.search_result_list);
+        adapterSearchResult = new AdapterProdcutList(this, null, 1, null);
+        View resultEmptyView = findViewById(R.id.search_result_list_empty);
+        listViewResult.setAdapter(adapterSearchResult);
+        listViewResult.setEmptyView(resultEmptyView);
+        listViewResult.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+                startActivity(new Intent().setClass(ActivitySearch.this, ActivityProductDetails.class).putExtra("id", adapterSearchResult.getItem(position).product_id));
+            }
+        });
+        loadDefaultKeyword();
+    }
+    public void onClickViewToSearch(View view){
+        keyword = searchEditText.getText().toString().trim();
+
+        if(!TextUtils.isEmpty(keyword)){
+            InputMethodManager imm = (InputMethodManager)searchEditText.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
+            imm.hideSoftInputFromWindow(searchEditText.getWindowToken(), 0);
+
+            APPUtils.insertToSearchHistory(keyword);
+
+            loadSearchResult("1");//每次搜索时，默认为第一页
+        }
+
+    }
+    private void loadDefaultKeyword(){
+        MyApplication application = (MyApplication)getApplication();
+        if(application.keywordInfoList == null) {
+            setWaitScreen(true);
+            HttpService.instance().getSearchKeyword(new GetDefaultKeyword());
+        }else {
+            keywordInfoList = application.keywordInfoList;
+            initKeywordView();
+        }
+    }
+    class GetDefaultKeyword implements CallbackResultForActivity{
+        @Override
+        public void success(Object data, int statusCode, String msg) {
+            setWaitScreen(false);
+            keywordInfoList = (List<SearchKeywordInfo>)data;
+            initKeywordView();
+        }
+
+        @Override
+        public void fail(int statusCode, String msg) {
+            recommend.setVisibility(View.GONE);
+            setWaitScreen(false);
+        }
+
+        @Override
+        public void exception(Exception e) {
+            recommend.setVisibility(View.GONE);
+            setWaitScreen(false);
+        }
+    }
+    private void initKeywordView(){
+        if(keywordInfoList == null || keywordInfoList.size() <= 0) {
+            recommend.setVisibility(View.GONE);
+            return;
+        }
+        recommend.setVisibility(View.VISIBLE);
+        TableLayout table = (TableLayout)recommend.getChildAt(1);
+        int rowcount = table.getChildCount();
+        for (int i = 0; i < rowcount; i++) {
+            TableRow row = (TableRow)table.getChildAt(i);
+            int unitCount = row.getChildCount();
+            if(keywordInfoList.size() <= i*unitCount ){
+                row.setVisibility(View.GONE);
+                break;
+            }
+            for (int y = 0; y < unitCount; y++) {
+                TextView tv = (TextView)row.getChildAt(y);
+                int index = i*unitCount + y;
+                if(index >= keywordInfoList.size())
+                    tv.setVisibility(View.INVISIBLE);
+                else {
+                    tv.setText(keywordInfoList.get(index).keyword);
+                    tv.setOnClickListener(new DefaultKeywordClick(index));
+                }
+            }
+        }
+    }
+    class DefaultKeywordClick implements View.OnClickListener{
+        int index ;
+        public DefaultKeywordClick(int index){
+            this.index = index;
+        }
+        @Override
+        public void onClick(View v) {
+            InputMethodManager imm = (InputMethodManager)searchEditText.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
+            imm.hideSoftInputFromWindow(searchEditText.getWindowToken(), 0);
+            keyword = keywordInfoList.get(index).keyword;
+            searchEditText.setText(keyword);
+        }
+    }
+    private void loadSearchResult(String curpage){
+        if(isLoading)
+            return;
+        isLoading = true;
+        if("1".equals(curpage))
+            productList = null; // 每次搜索第一页时，初始化
+        setWaitScreen(true);
+        HttpService.instance().getProductList("", keyword, Integer.valueOf(curpage), MAXPAGESIZE, new MySearchResultCallBack(this));
+    }
+    public void loadSearchResultMore(){
+        if(isLoading)
+            return;
+        isLoading = true;
+        setWaitScreen(true);
+        HttpService.instance().getProductList("", keyword, Integer.valueOf(productList.cur_page)+1, MAXPAGESIZE, new MySearchResultCallBack(this));
+    }
+    private void initHistory(){
+        historyDatas = new ArrayList<>();
+        historyDatas = APPUtils.getLocalSearchHistory(MaxHistoryCount);
+
+        history = (LinearLayout)findViewById(R.id.search_history_layout);
+        if(historyDatas.size() <= 0) {
+            history.setVisibility(View.GONE);
+            return;
+        }
+
+        listViewHistory = (ListView)findViewById(R.id.search_history);
+        adapterSearchHistory = new AdapterSearchHistoryList(this, historyDatas, 1, null);
+        View historyEnd = getLayoutInflater().inflate(R.layout.page_search_history_list_endview, null);
+        listViewHistory.addFooterView(historyEnd);
+        listViewHistory.setAdapter(adapterSearchHistory);
+        listViewHistory.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+                if(position >= adapterSearchHistory.data.size()){
+                    APPUtils.deleteAllSearchHistory();
+//                    BasesUtils.showMsg(ActivitySearch.this, "将清空历史记录");
+                    initHistory();
+                    return;
+                }
+                InputMethodManager imm = (InputMethodManager)searchEditText.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
+                imm.hideSoftInputFromWindow(searchEditText.getWindowToken(), 0);
+                keyword = adapterSearchHistory.getItem(position).keyword;
+//                APPUtils.insertToSearchHistory(keyword);
+                searchEditText.setText(keyword);
+//                loadSearchResult();
+            }
+        });
+    }
+
+    class MySearchResultCallBack implements CallbackResultForActivity{
+        Activity a;
+        public MySearchResultCallBack(Activity activity){
+            this.a = activity;
+        }
+        @Override
+        public void success(Object data, int statusCode, String msg) {
+            initHistory();// 刷新 搜索历史记录
+            setWaitScreen(false);
+            ProductList list = (ProductList)data;
+            if(productList == null)
+                productList = list;
+            else{
+                productList.total_page = list.total_page;
+                productList.cur_page = list.cur_page;
+                productList.list = list.list;
+                productList.every_page_count = list.every_page_count;
+            }
+            initResultView();
+            isLoading = false;
+        }
+
+        @Override
+        public void fail(int statusCode, String msg) {
+            setWaitScreen(false);
+            isLoading = false;
+        }
+
+        @Override
+        public void exception(Exception e) {
+            setWaitScreen(false);
+            isLoading = false;
+            if(productList == null)
+                showNetWrokError();
+        }
+    }
+
+    @Override
+    public void retry() {
+        super.retry();
+
+        loadSearchResult(productList==null?"1":productList.cur_page);
+    }
+
+    private void initResultView(){
+
+        FrameLayout resultLayout = (FrameLayout)findViewById(R.id.search_result_list_layout);
+        resultLayout.setVisibility(View.VISIBLE);
+
+//        List<ProductInfo> list = new ArrayList<ProductInfo>();
+//        for (int i = 0; i < 50; i++) {
+//            ProductInfo productInfo = new ProductInfo();
+//            productInfo.setProduct_id("id"+i);
+//            productInfo.setProduct_name("title"+i);
+//
+//            list.add(productInfo);
+//        }
+
+        setWaitScreen(false);
+
+        if(productList == null || productList.list == null || productList.list.size() <= 0){
+            adapterSearchResult = new AdapterProdcutList(this, null, 1, null);
+            adapterSearchResult.notifyDataSetChanged();
+            return;
+        }
+        int curpage = Integer.valueOf(productList.cur_page);
+        if(curpage > 1){
+            adapterSearchResult.data.addAll(productList.list);
+        }else{
+            adapterSearchResult.data = productList.list;
+        }
+        adapterSearchResult.pages = Integer.valueOf(productList.total_page);
+        adapterSearchResult.currentPage = curpage;
+        adapterSearchResult.notifyDataSetChanged();
+
+
+    }
+    public void onClickCancel(View view){
+        finish();
+    }
+}
Index: app/src/main/java/com/oasgames/android/oaspay/adapter/AdapterSearchHistoryList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/adapter/AdapterSearchHistoryList.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/adapter/AdapterSearchHistoryList.java	(revision )
@@ -0,0 +1,57 @@
+package com.oasgames.android.oaspay.adapter;
+
+import android.app.Activity;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.base.tools.list.BasesListAdapter;
+import com.oasgames.android.oaspay.R;
+import com.oasgames.android.oaspay.entity.SearchInfo;
+
+import java.util.List;
+
+
+/**
+ * 搜索历史记录 列表 适配器
+ * @author Administrator
+ *
+ */
+public class AdapterSearchHistoryList extends BasesListAdapter<SearchInfo> {
+	Activity c;
+	public AdapterSearchHistoryList(Activity activity, List<SearchInfo> data,
+									int count, LinearLayout footerView) {
+		super(activity, data, count, footerView);
+		this.c = activity;
+	}
+
+	@Override
+	public void loadMore() {
+		// no more
+	}
+
+	@Override
+	public View getRowView(int position, View convertView, ViewGroup parent) {
+		ViewHoder hoder = null;
+		if(null == convertView){
+			convertView = c.getLayoutInflater().inflate(R.layout.page_search_history_list_item, null);
+			hoder = new ViewHoder();
+			hoder.keyword = (TextView) convertView.findViewById(R.id.search_history_list_item_name);
+
+			convertView.setTag(hoder);
+		}else{
+			hoder = (ViewHoder) convertView.getTag();
+		}
+
+		final SearchInfo info = getItem(position);
+		hoder.keyword.setText(info.keyword);
+		return convertView;
+	}
+
+	static class ViewHoder{
+		TextView keyword;
+
+	}
+	
+}
Index: .idea/copyright/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/copyright/profiles_settings.xml	(revision )
+++ .idea/copyright/profiles_settings.xml	(revision )
@@ -0,0 +1,3 @@
+<component name="CopyrightManager">
+  <settings default="" />
+</component>
\ No newline at end of file
Index: app/src/main/java/com/google/zxing/camera/CameraManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/google/zxing/camera/CameraManager.java	(revision )
+++ app/src/main/java/com/google/zxing/camera/CameraManager.java	(revision )
@@ -0,0 +1,373 @@
+/*
+ * Copyright (C) 2008 ZXing authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.zxing.camera;
+
+import android.app.Activity;
+import android.content.Context;
+import android.graphics.PixelFormat;
+import android.graphics.Point;
+import android.graphics.Rect;
+import android.hardware.Camera;
+import android.os.Build;
+import android.os.Handler;
+import android.util.Log;
+import android.view.Surface;
+import android.view.SurfaceHolder;
+
+import java.io.IOException;
+
+/**
+ * This object wraps the Camera service object and expects to be the only one talking to it. The
+ * implementation encapsulates the steps needed to take preview-sized images, which are used for
+ * both preview and decoding.
+ *
+ */
+public final class CameraManager {
+
+  private static final String TAG = CameraManager.class.getSimpleName();
+
+  private static final int MIN_FRAME_WIDTH = 240;
+  private static final int MIN_FRAME_HEIGHT = 240;
+  private static final int MAX_FRAME_WIDTH = 420;
+  private static final int MAX_FRAME_HEIGHT = 420;
+
+  private static CameraManager cameraManager;
+
+  static final int SDK_INT; // Later we can use Build.VERSION.SDK_INT
+  static {
+    int sdkInt;
+    try {
+      sdkInt = Integer.parseInt(Build.VERSION.SDK);
+    } catch (NumberFormatException nfe) {
+      // Just to be safe
+      sdkInt = 10000;
+    }
+    SDK_INT = sdkInt;
+  }
+
+  private final Context context;
+  private final CameraConfigurationManager configManager;
+  private Camera camera;
+  private Rect framingRect;
+  private Rect framingRectInPreview;
+  private boolean initialized;
+  private boolean previewing;
+  private final boolean useOneShotPreviewCallback;
+  /**
+   * Preview frames are delivered here, which we pass on to the registered handler. Make sure to
+   * clear the handler so it will only receive one message.
+   */
+  private final PreviewCallback previewCallback;
+  /** Autofocus callbacks arrive here, and are dispatched to the Handler which requested them. */
+  private final AutoFocusCallback autoFocusCallback;
+
+  /**
+   * Initializes this static object with the Context of the calling Activity.
+   *
+   * @param context The Activity which wants to use the camera.
+   */
+  public static void init(Context context) {
+    if (cameraManager == null) {
+      cameraManager = new CameraManager(context);
+    }
+  }
+
+  /**
+   * Gets the CameraManager singleton instance.
+   *
+   * @return A reference to the CameraManager singleton.
+   */
+  public static CameraManager get() {
+    return cameraManager;
+  }
+
+  private CameraManager(Context context) {
+
+    this.context = context;
+    this.configManager = new CameraConfigurationManager(context);
+
+    // Camera.setOneShotPreviewCallback() has a race condition in Cupcake, so we use the older
+    // Camera.setPreviewCallback() on 1.5 and earlier. For Donut and later, we need to use
+    // the more efficient one shot callback, as the older one can swamp the system and cause it
+    // to run out of memory. We can't use SDK_INT because it was introduced in the Donut SDK.
+    //useOneShotPreviewCallback = Integer.parseInt(Build.VERSION.SDK) > Build.VERSION_CODES.CUPCAKE;
+    useOneShotPreviewCallback = Integer.parseInt(Build.VERSION.SDK) > 3; // 3 = Cupcake
+
+    previewCallback = new PreviewCallback(configManager, useOneShotPreviewCallback);
+    autoFocusCallback = new AutoFocusCallback();
+  }
+
+  /**
+   * Opens the camera driver and initializes the hardware parameters.
+   *
+   * @param holder The surface object which the camera will draw preview frames into.
+   * @throws IOException Indicates the camera driver failed to open.
+   */
+  public void openDriver(SurfaceHolder holder) throws IOException {
+    if (camera == null) {
+      camera = Camera.open();
+      if (camera == null) {
+        throw new IOException();
+      }
+      camera.setPreviewDisplay(holder);
+
+      if (!initialized) {
+        initialized = true;
+        configManager.initFromCameraParameters(camera);
+      }
+      configManager.setDesiredCameraParameters(camera);
+
+      //FIXME
+ //     SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
+      //是否使用前灯
+//      if (prefs.getBoolean(PreferencesActivity.KEY_FRONT_LIGHT, false)) {
+//        FlashlightManager.enableFlashlight();
+//      }
+      
+//     注释于2014-05-26，不使用闪光灯
+//      FlashlightManager.enableFlashlight();
+    }
+  }
+
+  /**
+   * Closes the camera driver if still in use.
+   */
+  public void closeDriver() {
+    if (camera != null) {
+//      FlashlightManager.disableFlashlight();
+      camera.release();
+      camera = null;
+    }
+  }
+
+  /**
+   * Asks the camera hardware to begin drawing preview frames to the screen.
+   */
+  public void startPreview() {
+    if (camera != null && !previewing) {
+      camera.startPreview();
+      previewing = true;
+    }
+  }
+
+  /**
+   * Tells the camera to stop drawing preview frames.
+   */
+  public void stopPreview() {
+    if (camera != null && previewing) {
+      if (!useOneShotPreviewCallback) {
+        camera.setPreviewCallback(null);
+      }
+      camera.stopPreview();
+      previewCallback.setHandler(null, 0);
+      autoFocusCallback.setHandler(null, 0);
+      previewing = false;
+    }
+  }
+
+  /**
+   * A single preview frame will be returned to the handler supplied. The data will arrive as byte[]
+   * in the message.obj field, with width and height encoded as message.arg1 and message.arg2,
+   * respectively.
+   *
+   * @param handler The handler to send the message to.
+   * @param message The what field of the message to be sent.
+   */
+  public void requestPreviewFrame(Handler handler, int message) {
+    if (camera != null && previewing) {
+      previewCallback.setHandler(handler, message);
+      if (useOneShotPreviewCallback) {
+        camera.setOneShotPreviewCallback(previewCallback);
+      } else {
+        camera.setPreviewCallback(previewCallback);
+      }
+    }
+  }
+
+  /**
+   * Asks the camera hardware to perform an autofocus.
+   *
+   * @param handler The Handler to notify when the autofocus completes.
+   * @param message The message to deliver.
+   */
+  public void requestAutoFocus(Handler handler, int message) {
+    if (camera != null && previewing) {
+      autoFocusCallback.setHandler(handler, message);
+      //Log.d(TAG, "Requesting auto-focus callback");
+      camera.autoFocus(autoFocusCallback);
+    }
+  }
+
+  /**
+   * Calculates the framing rect which the UI should draw to show the user where to place the
+   * barcode. This target helps with alignment as well as forces the user to hold the device
+   * far enough away to ensure the image will be in focus.
+   *
+   * @return The rectangle to draw on screen in window coordinates.
+   */
+  public Rect getFramingRect() {
+    Point screenResolution = configManager.getScreenResolution();
+    if (framingRect == null) {
+      if (camera == null) {
+        return null;
+      }
+      int width = screenResolution.x * 3 / 4;
+      int height = screenResolution.y * 3 / 4;
+      if (width < MIN_FRAME_WIDTH) {
+        width = MIN_FRAME_WIDTH;
+      } else if (width > MAX_FRAME_WIDTH) {
+        width = MAX_FRAME_WIDTH;
+      }
+
+      if (height < MIN_FRAME_HEIGHT) {
+        height = MIN_FRAME_HEIGHT;
+      } else if (height > MAX_FRAME_HEIGHT) {
+        height = MAX_FRAME_HEIGHT;
+      }
+      
+      if(width < height){
+    	  height = width;
+      }else
+    	  width = height;
+      
+      int leftOffset = (screenResolution.x - width) / 2;
+      int topOffset = (screenResolution.y) / 5;// 布局高度的五分之一出开始绘制
+      framingRect = new Rect(leftOffset, topOffset, leftOffset + width, topOffset + height);
+      Log.d(TAG, "Calculated framing rect: " + framingRect);
+    }
+    return framingRect;
+  }
+
+  /**
+   * Like {@link #getFramingRect} but coordinates are in terms of the preview frame,
+   * not UI / screen.
+   */
+  public Rect getFramingRectInPreview() {
+    if (framingRectInPreview == null) {
+      Rect rect = new Rect(getFramingRect());
+      Point cameraResolution = configManager.getCameraResolution();
+      Point screenResolution = configManager.getScreenResolution();
+      //modify here
+//      rect.left = rect.left * cameraResolution.x / screenResolution.x;
+//      rect.right = rect.right * cameraResolution.x / screenResolution.x;
+//      rect.top = rect.top * cameraResolution.y / screenResolution.y;
+//      rect.bottom = rect.bottom * cameraResolution.y / screenResolution.y;
+      rect.left = rect.left * cameraResolution.y / screenResolution.x;
+      rect.right = rect.right * cameraResolution.y / screenResolution.x;
+      rect.top = rect.top * cameraResolution.x / screenResolution.y;
+      rect.bottom = rect.bottom * cameraResolution.x / screenResolution.y;
+      
+      //以下代码 可能会解决横屏问题，未验证，需要时需重新验证
+//      rect.left = rect.left * cameraResolution.y / screenResolution.y;
+//      rect.right = rect.right * cameraResolution.y / screenResolution.y;
+//      rect.top = rect.top * cameraResolution.x / screenResolution.x;
+//      rect.bottom = rect.bottom * cameraResolution.x / screenResolution.x;
+      
+      framingRectInPreview = rect;
+    }
+    return framingRectInPreview;
+  }
+
+  /**
+   * Converts the result points from still resolution coordinates to screen coordinates.
+   *
+   * @param points The points returned by the Reader subclass through Result.getResultPoints().
+   * @return An array of Points scaled to the size of the framing rect and offset appropriately
+   *         so they can be drawn in screen coordinates.
+   */
+  /*
+  public Point[] convertResultPoints(ResultPoint[] points) {
+    Rect frame = getFramingRectInPreview();
+    int count = points.length;
+    Point[] output = new Point[count];
+    for (int x = 0; x < count; x++) {
+      output[x] = new Point();
+      output[x].x = frame.left + (int) (points[x].getX() + 0.5f);
+      output[x].y = frame.top + (int) (points[x].getY() + 0.5f);
+    }
+    return output;
+  }
+   */
+
+  /**
+   * A factory method to build the appropriate LuminanceSource object based on the format
+   * of the preview buffers, as described by Camera.Parameters.
+   *
+   * @param data A preview frame.
+   * @param width The width of the image.
+   * @param height The height of the image.
+   * @return A PlanarYUVLuminanceSource instance.
+   */
+  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data, int width, int height) {
+    Rect rect = getFramingRectInPreview();
+    int previewFormat = configManager.getPreviewFormat();
+    String previewFormatString = configManager.getPreviewFormatString();
+    switch (previewFormat) {
+      // This is the standard Android format which all devices are REQUIRED to support.
+      // In theory, it's the only one we should ever care about.
+      case PixelFormat.YCbCr_420_SP:
+      // This format has never been seen in the wild, but is compatible as we only care
+      // about the Y channel, so allow it.
+      case PixelFormat.YCbCr_422_SP:
+        return new PlanarYUVLuminanceSource(data, width, height, rect.left, rect.top,
+            rect.width(), rect.height());
+      default:
+        // The Samsung Moment incorrectly uses this variant instead of the 'sp' version.
+        // Fortunately, it too has all the Y data up front, so we can read it.
+        if ("yuv420p".equals(previewFormatString)) {
+          return new PlanarYUVLuminanceSource(data, width, height, rect.left, rect.top,
+            rect.width(), rect.height());
+        }
+    }
+    throw new IllegalArgumentException("Unsupported picture format: " +
+        previewFormat + '/' + previewFormatString);
+  }
+
+	public Context getContext() {
+		return context;
+	}
+	public void setCameraDisplayOrientation ( Activity activity) { 
+//		android.hardware.Camera.CameraInfo info = new android.hardware.Camera.CameraInfo(); 
+//		android.hardware.Camera.getCameraInfo ( camera.getNumberOfCameras() , info ); 
+		int rotation = activity.getWindowManager ().getDefaultDisplay ().getRotation (); 
+		System.out.println("activity==="+rotation);
+		int degrees = 0 ; 
+		switch ( rotation ) { 
+			case Surface.ROTATION_0 : 
+				degrees = 0 ; 
+				break ; 
+			case Surface.ROTATION_90 : 
+				degrees = 90 ; 
+				break ; 
+			case Surface.ROTATION_180 : 
+				degrees = 180 ; 
+				break ; 
+			case Surface.ROTATION_270 : 
+				degrees = 270 ; 
+				break ; 
+			}   
+		int result ; 
+//		if ( info.facing == Camera.CameraInfo.CAMERA_FACING_FRONT ) { 
+//			result = ( info.orientation + degrees ) % 360 ; 
+//			result = ( 360 - result ) % 360 ; // compensate the mirror 
+//		} else { // back-facing 
+//			result = ( info.orientation - degrees + 360 ) % 360 ; 
+//		} 
+		camera.setDisplayOrientation ( degrees + 90 ); 
+		camera.startPreview();
+	}
+}
Index: app/src/main/java/com/nineoldandroids/view/ViewPropertyAnimatorICS.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nineoldandroids/view/ViewPropertyAnimatorICS.java	(revision )
+++ app/src/main/java/com/nineoldandroids/view/ViewPropertyAnimatorICS.java	(revision )
@@ -0,0 +1,298 @@
+package com.nineoldandroids.view;
+
+import java.lang.ref.WeakReference;
+
+import android.view.View;
+import android.view.animation.Interpolator;
+import com.nineoldandroids.animation.Animator.AnimatorListener;
+
+class ViewPropertyAnimatorICS extends ViewPropertyAnimator {
+    /**
+     * A value to be returned when the WeakReference holding the native implementation
+     * returns <code>null</code>
+     */
+    private final static long RETURN_WHEN_NULL = -1L;
+
+    /**
+     * A WeakReference holding the native implementation of ViewPropertyAnimator
+     */
+    private final WeakReference<android.view.ViewPropertyAnimator> mNative;
+
+    ViewPropertyAnimatorICS(View view) {
+        mNative = new WeakReference<android.view.ViewPropertyAnimator>(view.animate());
+    }
+
+    @Override
+    public ViewPropertyAnimator setDuration(long duration) {
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.setDuration(duration);
+        }
+        return this;
+    }
+
+    @Override
+    public long getDuration() {
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            return n.getDuration();
+        }
+        return RETURN_WHEN_NULL;
+    }
+
+    @Override
+    public ViewPropertyAnimator setStartDelay(long startDelay) {
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.setStartDelay(startDelay);
+        }
+        return this;
+    }
+
+    @Override
+    public long getStartDelay() {
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            return n.getStartDelay();
+        }
+        return RETURN_WHEN_NULL;
+    }
+
+    @Override
+    public ViewPropertyAnimator setInterpolator(Interpolator interpolator) {
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.setInterpolator(interpolator);
+        }
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator setListener(final AnimatorListener listener) {
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            if (listener == null) {
+                n.setListener(null);
+            } else {
+                n.setListener(new android.animation.Animator.AnimatorListener() {
+                    @Override
+                    public void onAnimationStart(android.animation.Animator animation) {
+                        listener.onAnimationStart(null);
+                    }
+
+                    @Override
+                    public void onAnimationRepeat(android.animation.Animator animation) {
+                        listener.onAnimationRepeat(null);
+                    }
+
+                    @Override
+                    public void onAnimationEnd(android.animation.Animator animation) {
+                        listener.onAnimationEnd(null);
+                    }
+
+                    @Override
+                    public void onAnimationCancel(android.animation.Animator animation) {
+                        listener.onAnimationCancel(null);
+                    }
+                });
+            }
+        }
+        return this;
+    }
+
+    @Override
+    public void start() {
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.start();
+        }
+    }
+
+    @Override
+    public void cancel() {
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.cancel();
+        }
+    }
+
+    @Override
+    public ViewPropertyAnimator x(float value) {
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.x(value);
+        }
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator xBy(float value) {
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.xBy(value);
+        }
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator y(float value) {
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.y(value);
+        }
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator yBy(float value) {
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.yBy(value);
+        }
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator rotation(float value) {
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.rotation(value);
+        }
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator rotationBy(float value) {
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.rotationBy(value);
+        }
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator rotationX(float value) {
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.rotationX(value);
+        }
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator rotationXBy(float value) {
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.rotationXBy(value);
+        }
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator rotationY(float value) {
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.rotationY(value);
+        }
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator rotationYBy(float value) {
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.rotationYBy(value);
+        }
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator translationX(float value) {
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.translationX(value);
+        }
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator translationXBy(float value) {
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.translationXBy(value);
+        }
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator translationY(float value) {
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.translationY(value);
+        }
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator translationYBy(float value) {
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.translationYBy(value);
+        }
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator scaleX(float value) {
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.scaleX(value);
+        }
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator scaleXBy(float value) {
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.scaleXBy(value);
+        }
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator scaleY(float value) {
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.scaleY(value);
+        }
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator scaleYBy(float value) {
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.scaleYBy(value);
+        }
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator alpha(float value) {
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.alpha(value);
+        }
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator alphaBy(float value) {
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.alphaBy(value);
+        }
+        return this;
+    }
+}
Index: app/src/main/res/layout/page_pay_package_list_item.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/page_pay_package_list_item.xml	(revision )
+++ app/src/main/res/layout/page_pay_package_list_item.xml	(revision )
@@ -0,0 +1,91 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="horizontal" android:layout_width="match_parent"
+    android:layout_height="wrap_content">
+
+    <RelativeLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:layout_weight="1">
+
+        <TextView
+            android:id="@+id/pay_package_list_item_price"
+            android:layout_width="match_parent"
+            android:layout_height="@dimen/login_register_btn_height"
+            android:text="$4564.32"
+            android:textSize="@dimen/common_font_size_14"
+            android:textColor="@color/common_font_color_fb8f03"
+            android:gravity="center"/>
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="="
+            android:textSize="@dimen/common_font_size_14"
+            android:textColor="@color/common_font_color_000000"
+            android:layout_alignParentRight="true"
+            android:layout_centerVertical="true"/>
+    </RelativeLayout>
+    <RelativeLayout
+        android:id="@+id/pay_package_list_item_diamond_red_layout"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:layout_weight="1"
+        android:gravity="right|center_vertical">
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="+"
+            android:textSize="@dimen/common_font_size_14"
+            android:textColor="@color/common_font_color_000000"
+            android:layout_alignParentRight="true"
+            android:layout_centerVertical="true"/>
+        <LinearLayout
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal"
+            android:layout_centerInParent="true">
+
+            <TextView
+                android:id="@+id/pay_package_list_item_diamond_red"
+                android:layout_width="wrap_content"
+                android:layout_height="@dimen/login_register_btn_height"
+                android:text="456432"
+                android:textSize="@dimen/common_font_size_14"
+                android:textColor="@color/common_font_color_000000"
+                android:gravity="center"
+                android:layout_marginRight="@dimen/common_content_margin_5"/>
+
+            <TextView
+                android:layout_width="@dimen/fragment_shop_category_review_item_diamond_width"
+                android:layout_height="@dimen/fragment_shop_category_review_item_diamond_width"
+                android:background="@mipmap/common_diamond_red"
+                android:layout_gravity="center"/>
+        </LinearLayout>
+    </RelativeLayout>
+    <LinearLayout
+        android:id="@+id/pay_package_list_item_diamond_blue_layout"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:layout_weight="1"
+        android:gravity="center">
+        <TextView
+            android:id="@+id/pay_package_list_item_diamond_blue"
+            android:layout_width="wrap_content"
+            android:layout_height="@dimen/login_register_btn_height"
+            android:text="456432"
+            android:textSize="@dimen/common_font_size_14"
+            android:textColor="@color/common_font_color_000000"
+            android:gravity="center"
+            android:layout_marginRight="@dimen/common_content_margin_5"/>
+
+        <TextView
+            android:layout_width="@dimen/fragment_shop_category_review_item_diamond_width"
+            android:layout_height="@dimen/fragment_shop_category_review_item_diamond_width"
+            android:background="@mipmap/common_diamond_blue"
+            android:layout_gravity="center"/>
+    </LinearLayout>
+
+</LinearLayout>
\ No newline at end of file
Index: app/src/main/java/com/oasgames/android/oaspay/tools/GoogleUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/tools/GoogleUtils.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/tools/GoogleUtils.java	(revision )
@@ -0,0 +1,256 @@
+package com.oasgames.android.oaspay.tools;
+
+import android.app.Activity;
+import android.content.IntentSender.SendIntentException;
+import android.content.res.Resources.NotFoundException;
+import android.os.Bundle;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.base.tools.utils.BasesUtils;
+import com.google.android.gms.auth.GoogleAuthUtil;
+import com.google.android.gms.common.ConnectionResult;
+import com.google.android.gms.common.Scopes;
+import com.google.android.gms.common.api.GoogleApiClient;
+import com.google.android.gms.common.api.ResultCallback;
+import com.google.android.gms.common.api.Status;
+import com.google.android.gms.plus.Plus;
+import com.google.android.gms.plus.model.people.Person;
+
+public class GoogleUtils {
+
+	public static final String TAG = "TRACK_GoogleUtils";
+	public static final int REQUEST_CODE_RESOLVE_ERR = 456456;
+	public static final int REQUEST_CODE_RECOVER_FROM_PLAY_SERVICES_ERROR = 400000;
+	private Activity c;
+	private Activity useActivity;
+	private String trackID ;
+	private static GoogleUtils gutils;
+	GoogleLoginCallback callback;
+	
+//	private PlusClient mPlusClient;
+	public GoogleApiClient mGoogleApiClient;
+	public ConnectionResult mConnectionResult;
+	
+	private GoogleUtils(Activity c){
+		this.c = c;
+		try {
+			trackID = c.getResources().getString(
+					BasesUtils.getResourceValue("string", "ga_trackingId"));
+		} catch (NotFoundException e) {
+			e.printStackTrace();
+			Log.e(TAG,
+					"Please setup ga_trackingId in trackinfo.xml");
+		}
+		if(!TextUtils.isEmpty(trackID))
+			BasesUtils.logDebug(TAG, "Track:Google is running..... ga_trackingId=" + trackID);
+		
+		
+	}
+	public static GoogleUtils instance(Activity c) {
+		if(gutils == null)
+			gutils = new GoogleUtils(c);
+		return gutils;
+	}
+	public void onStart(){
+		if(!TextUtils.isEmpty(trackID)){
+
+			BasesUtils.logDebug(TAG, "GoogleUtils is onStart.");
+		}
+	}
+	public void onStop(){
+
+		if(mGoogleApiClient != null)
+			mGoogleApiClient.disconnect();
+	}
+	
+	public void login(Activity c, GoogleLoginCallback callback){
+		this.useActivity = c;
+		this.callback = callback;
+//		mPlusClient = new PlusClient.Builder(c, new MyConnectionCallbacks(), new MyOnConnectionFailedListener())
+//		.setScopes(
+////				"http://schemas.google.com/AddActivity", "http://schemas.google.com/BuyActivity",
+//				"https://www.googleapis.com/auth/userinfo.profile","https://www.googleapis.com/auth/plus.login")
+//		.build();
+//		mGoogleApiClient = new GoogleApiClient.Builder(c)
+//        .addApi(Plus.API, Plus.PlusOptions.builder()
+//                .addActivityTypes(MomentUtil.ACTIONS).build())
+//        .addScope(Plus.SCOPE_PLUS_LOGIN)
+//        .addConnectionCallbacks(new MyConnectionCallbacks())
+//        .addOnConnectionFailedListener(new MyOnConnectionFailedListener())
+//        .build();
+//		mGoogleApiClient.connect();
+		mGoogleApiClient = new GoogleApiClient.Builder(this.useActivity)
+        .addConnectionCallbacks(new MyConnectionCallbacks())
+        .addOnConnectionFailedListener(new MyOnConnectionFailedListener())
+        .addApi(Plus.API)
+        .addScope(Plus.SCOPE_PLUS_LOGIN)
+//        .addScope(new Scope("profile"))
+        .useDefaultAccount()
+        .build();
+		
+		mGoogleApiClient.connect();
+	}
+	
+	class MyConnectionCallbacks implements GoogleApiClient.ConnectionCallbacks{
+
+		@Override
+		public void onConnected(Bundle arg0) {
+			
+			if(mGoogleApiClient != null){
+				System.out.println("GoogleUtils:"+mGoogleApiClient.toString());
+//				System.out.println("GoogleUtils:"+mPlusClient.);
+//				System.out.println("GoogleUtils:"+mPlusClient.getAccountName()+"   "+mPlusClient.getCurrentPerson().getId());
+				getProfileInformation();
+			}
+		}
+
+		@Override
+		public void onConnectionSuspended(int arg0) {
+			mGoogleApiClient.connect();
+		}
+		
+	}
+	class MyOnConnectionFailedListener implements GoogleApiClient.OnConnectionFailedListener {
+
+		@Override
+		public void onConnectionFailed(ConnectionResult result) {
+//			if(ConnectionResult.SIGN_IN_REQUIRED == result.getErrorCode()){
+//				mGoogleApiClient.reconnect();
+//				return;
+//			}
+			if (result.hasResolution()) {
+	            try {
+	                result.startResolutionForResult(useActivity, REQUEST_CODE_RESOLVE_ERR);
+	            } catch (SendIntentException e) {
+	                mGoogleApiClient.connect();
+	            }
+	        }
+	        // 在用户点击时保存结果并解决连接故障。
+	        mConnectionResult = result;
+			System.out.println("GoogleUtils:onConnectionFailed"+result.toString());
+		}
+		
+	}
+	
+	/**
+	 * Fetching user's information name, email, profile pic
+	 * */
+	private void getProfileInformation() {
+	    	final Person currentPerson = Plus.PeopleApi.getCurrentPerson(mGoogleApiClient);
+	    	final String email = Plus.AccountApi.getAccountName(mGoogleApiClient);
+	    	Log.e(TAG, "email: " + email);
+	    	if(!TextUtils.isEmpty(email)){
+	    		new Thread(new Runnable() {
+					
+					@Override
+					public void run() {
+						String token;
+						try {
+							token = GoogleAuthUtil.getToken(c, email, "oauth2:"+Scopes.PROFILE+" https://www.googleapis.com/auth/userinfo.profile");
+							Log.e(TAG, "token: " + token);
+							
+							callback.success(currentPerson, email, token);
+						} catch(Exception e){
+							callback.exception(e);
+						}
+						
+					}
+				}).start();
+	    	}
+	        if (currentPerson != null) {
+	            
+	            String personName = currentPerson.getDisplayName();
+	            String personPhotoUrl = currentPerson.getImage().getUrl();
+	            String personGooglePlusProfile = currentPerson.getUrl();
+	 
+	            Log.d(TAG, "Name: " + personName + ", plusProfile: "
+	                    + personGooglePlusProfile + ", email: " + email
+	                    + ", Image: " + personPhotoUrl);
+	 
+//	            txtName.setText(personName);
+//	            txtEmail.setText(email);
+	 
+	            // by default the profile url gives 50x50 px image only
+	            // we can replace the value with whatever dimension we want by
+	            // replacing sz=X
+//	            personPhotoUrl = personPhotoUrl.substring(0,
+//	                    personPhotoUrl.length() - 2)
+//	                    + PROFILE_PIC_SIZE;
+//	 
+//	            new LoadProfileImage(imgProfilePic).execute(personPhotoUrl);
+	 
+	        } 
+	}
+	public interface GoogleLoginCallback{
+		public void success(Person p, String email, String token);
+		public void exception(Exception e);
+	}
+//	/**
+//	 * Background Async task to load user profile picture from url
+//	 * */
+//	private class LoadProfileImage extends AsyncTask<String, Void, Bitmap> {
+//	    ImageView bmImage;
+//	 
+//	    public LoadProfileImage(ImageView bmImage) {
+//	        this.bmImage = bmImage;
+//	    }
+//	 
+//	    protected Bitmap doInBackground(String... urls) {
+//	        String urldisplay = urls[0];
+//	        Bitmap mIcon11 = null;
+//	        try {
+//	            InputStream in = new java.net.URL(urldisplay).openStream();
+//	            mIcon11 = BitmapFactory.decodeStream(in);
+//	        } catch (Exception e) {
+//	            Log.e("Error", e.getMessage());
+//	            e.printStackTrace();
+//	        }
+//	        return mIcon11;
+//	    }
+//	 
+//	    protected void onPostExecute(Bitmap result) {
+//	        bmImage.setImageBitmap(result);
+//	    }
+//	}
+
+	public void clear(){
+//		try {
+//			GoogleAuthUtil.clearToken(useActivity, token);
+//		} catch (GooglePlayServicesAvailabilityException e) {
+//			Log.e(TAG, e.getMessage());
+//		} catch (GoogleAuthException e) {
+//			Log.e(TAG, e.getMessage());
+//		} catch (IOException e) {
+//			Log.e(TAG, e.getMessage());
+//		}
+		if(mGoogleApiClient != null){
+			if (mGoogleApiClient.isConnected()) {
+
+				mGoogleApiClient.clearDefaultAccountAndReconnect().setResultCallback(new ResultCallback<Status>() {
+					
+					@Override
+					public void onResult(Status arg0) {
+						Log.e(TAG, "GoogleUtils "+arg0.toString());
+						if(arg0.isSuccess()){
+							Log.e(TAG, "GoogleUtils clearDefaultAccountAndReconnect.......");
+						}
+					}
+				});
+//				Plus.AccountApi.revokeAccessAndDisconnect(mGoogleApiClient)
+//					.setResultCallback(new ResultCallback<Status>() {
+//						
+//						@Override
+//						public void onResult(Status arg0) {
+//							Log.e(TAG, "GoogleUtils "+arg0.toString());
+//							if(arg0.isSuccess()){
+//								Log.e(TAG, "GoogleUtils revode Access and Disconnect.......");
+//							}
+//						}
+//					});
+//				Plus.AccountApi.clearDefaultAccount(mGoogleApiClient);
+//				Log.e(TAG, "GoogleUtils method clear()........");
+            }
+		}
+	}
+}
Index: app/src/main/res/layout/common_head.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/common_head.xml	(revision )
+++ app/src/main/res/layout/common_head.xml	(revision )
@@ -0,0 +1,56 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+	android:id="@+id/common_head"
+    android:layout_width="match_parent"
+    android:layout_height="@dimen/common_head_height_size"
+    android:background="@color/common_button_bg_unselected">
+
+    <TextView
+        android:id="@+id/common_head_back"
+        android:layout_width="@dimen/common_head_back_height"
+    	android:layout_height="@dimen/common_head_back_height"
+    	android:layout_centerVertical="true"
+    	android:layout_alignParentLeft="true"
+    	android:gravity="center"
+		android:background="@drawable/common_head_back_selector"
+		android:layout_marginLeft="@dimen/common_content_margin_10"
+		android:clickable="true"
+		android:onClick="onClickView"
+		android:visibility="invisible"/>
+
+	<LinearLayout
+		android:orientation="horizontal"
+		android:layout_width="wrap_content"
+		android:layout_height="match_parent"
+		android:layout_centerInParent="true"
+		android:gravity="center">
+
+		<TextView
+			android:id="@+id/common_head_title"
+			android:layout_width="wrap_content"
+			android:layout_height="wrap_content"
+			android:gravity="center"
+			android:text="@string/common_head_title"
+			android:textColor="@color/common_font_color_ffffff"
+			android:textSize="@dimen/common_font_size_16"/>
+		<TextView
+			android:id="@+id/common_head_logo"
+			android:layout_width="wrap_content"
+			android:layout_height="wrap_content"/>
+	</LinearLayout>
+
+    <TextView
+        android:id="@+id/common_head_tool"
+        android:layout_width="@dimen/common_head_back_height"
+    	android:layout_height="@dimen/common_head_back_height"
+    	android:layout_centerVertical="true"
+    	android:layout_alignParentRight="true"
+    	android:gravity="center"
+		android:background="@drawable/common_head_search_selector"
+		android:layout_marginRight="@dimen/common_content_margin_10"
+		android:clickable="true"
+		android:onClick="onClickView"/>
+
+
+
+</RelativeLayout>
Index: app/src/main/java/com/nineoldandroids/util/Property.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nineoldandroids/util/Property.java	(revision )
+++ app/src/main/java/com/nineoldandroids/util/Property.java	(revision )
@@ -0,0 +1,106 @@
+/*
+ * Copyright (C) 2011 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.nineoldandroids.util;
+
+
+/**
+ * A property is an abstraction that can be used to represent a <emb>mutable</em> value that is held
+ * in a <em>host</em> object. The Property's {@link #set(Object, Object)} or {@link #get(Object)}
+ * methods can be implemented in terms of the private fields of the host object, or via "setter" and
+ * "getter" methods or by some other mechanism, as appropriate.
+ *
+ * @param <T> The class on which the property is declared.
+ * @param <V> The type that this property represents.
+ */
+public abstract class Property<T, V> {
+
+    private final String mName;
+    private final Class<V> mType;
+
+    /**
+     * This factory method creates and returns a Property given the <code>class</code> and
+     * <code>name</code> parameters, where the <code>"name"</code> parameter represents either:
+     * <ul>
+     *     <li>a public <code>getName()</code> method on the class which takes no arguments, plus an
+     *     optional public <code>setName()</code> method which takes a value of the same type
+     *     returned by <code>getName()</code>
+     *     <li>a public <code>isName()</code> method on the class which takes no arguments, plus an
+     *     optional public <code>setName()</code> method which takes a value of the same type
+     *     returned by <code>isName()</code>
+     *     <li>a public <code>name</code> field on the class
+     * </ul>
+     *
+     * <p>If either of the get/is method alternatives is found on the class, but an appropriate
+     * <code>setName()</code> method is not found, the <code>Property</code> will be
+     * {@link #isReadOnly() readOnly}. Calling the {@link #set(Object, Object)} method on such
+     * a property is allowed, but will have no effect.</p>
+     *
+     * <p>If neither the methods nor the field are found on the class a
+     * {@link NoSuchPropertyException} exception will be thrown.</p>
+     */
+    public static <T, V> Property<T, V> of(Class<T> hostType, Class<V> valueType, String name) {
+        return new ReflectiveProperty<T, V>(hostType, valueType, name);
+    }
+
+    /**
+     * A constructor that takes an identifying name and {@link #getType() type} for the property.
+     */
+    public Property(Class<V> type, String name) {
+        mName = name;
+        mType = type;
+    }
+
+    /**
+     * Returns true if the {@link #set(Object, Object)} method does not set the value on the target
+     * object (in which case the {@link #set(Object, Object) set()} method should throw a {@link
+     * NoSuchPropertyException} exception). This may happen if the Property wraps functionality that
+     * allows querying the underlying value but not setting it. For example, the {@link #of(Class,
+     * Class, String)} factory method may return a Property with name "foo" for an object that has
+     * only a <code>getFoo()</code> or <code>isFoo()</code> method, but no matching
+     * <code>setFoo()</code> method.
+     */
+    public boolean isReadOnly() {
+        return false;
+    }
+
+    /**
+     * Sets the value on <code>object</code> which this property represents. If the method is unable
+     * to set the value on the target object it will throw an {@link UnsupportedOperationException}
+     * exception.
+     */
+    public void set(T object, V value) {
+        throw new UnsupportedOperationException("Property " + getName() +" is read-only");
+    }
+
+    /**
+     * Returns the current value that this property represents on the given <code>object</code>.
+     */
+    public abstract V get(T object);
+
+    /**
+     * Returns the name for this property.
+     */
+    public String getName() {
+        return mName;
+    }
+
+    /**
+     * Returns the type for this property.
+     */
+    public Class<V> getType() {
+        return mType;
+    }
+}
Index: app/src/main/java/com/oasgames/android/oaspay/activity/ActivityNewsDetails.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/activity/ActivityNewsDetails.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/activity/ActivityNewsDetails.java	(revision )
@@ -0,0 +1,199 @@
+package com.oasgames.android.oaspay.activity;
+
+import android.graphics.Bitmap;
+import android.os.Bundle;
+import android.text.TextUtils;
+import android.view.GestureDetector;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.animation.Animation;
+import android.view.animation.OvershootInterpolator;
+import android.view.animation.TranslateAnimation;
+import android.webkit.WebSettings;
+import android.webkit.WebView;
+import android.webkit.WebViewClient;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.base.tools.activity.BasesActivity;
+import com.oasgames.android.oaspay.R;
+import com.oasgames.android.oaspay.tools.APPUtils;
+
+/**
+ * 界面 新闻详细
+ * Created by Administrator on 2015/10/16.
+ */
+public class ActivityNewsDetails extends BasesActivity implements View.OnTouchListener, GestureDetector.OnGestureListener {
+    String newslink;
+    WebView webView;
+
+    private LinearLayout layout_fuc;
+    private TextView tv_back, tv_forward;
+    Boolean isShow = true;
+    GestureDetector mGestureDetector;
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.page_news_details);
+
+        initHead(true, true, null, false, getString(R.string.fragment_news_title), false, null);
+
+        newslink = getIntent().getExtras().getString("link");
+
+        layout_fuc = (LinearLayout) findViewById(R.id.webview_fuc);
+        tv_back = (TextView) findViewById(R.id.webview_fuc_back);
+        tv_forward = (TextView) findViewById(R.id.webview_fuc_forward);
+
+        initGesture();
+
+        webView = (WebView) findViewById(R.id.news_details_webview);
+        webView.setWebViewClient(new WebViewClient() {
+            @Override
+            public boolean shouldOverrideUrlLoading(WebView view, String url) {
+                webView.loadUrl(url);
+                return true;
+            }
+
+            @Override
+            public void onPageFinished(WebView view, String url) {
+                super.onPageFinished(view, url);
+                setWaitScreen(false);
+            }
+
+            @Override
+            public void onPageStarted(WebView view, String url, Bitmap favicon) {
+                super.onPageStarted(view, url, favicon);
+                setWaitScreen(true);
+            }
+        });
+
+        //启用支持javascript
+        WebSettings settings = webView.getSettings();
+        settings.setJavaScriptEnabled(true);
+
+        if (TextUtils.isEmpty(newslink)){
+            APPUtils.showErrorMessageByErrorCode(this, "-2000");
+            finish();
+        }
+        webView.loadUrl(TextUtils.isEmpty(newslink)?"http://www.google.com":newslink);
+
+    }
+    private void initGesture() {
+        mGestureDetector = new GestureDetector((GestureDetector.OnGestureListener) this);
+    }
+
+    private void reSetup(){
+        if(webView != null && webView.canGoBack())
+            tv_back.setBackgroundResource(R.mipmap.webview_fuc_back_able);
+        else
+            tv_back.setBackgroundResource(R.mipmap.webview_fuc_back_unable);
+
+        if(webView != null && webView.canGoForward())
+            tv_forward.setBackgroundResource(R.mipmap.webview_fuc_forward_able);
+        else
+            tv_forward.setBackgroundResource(R.mipmap.webview_fuc_forward_unable);
+    }
+    public void onButtonClick_back(View v){
+        webView.goBack();
+        reSetup();// 设置按钮的状态
+    }
+    public void onButtonClick_forward(View v){
+        webView.goForward();
+        reSetup();// 设置按钮的状态
+    }
+    public void onButtonClick_refresh(View v){
+        webView.reload();
+    }
+    public void showView() {
+        if(isShow)
+            return;
+        layout_fuc.clearAnimation();
+        TranslateAnimation animation  = new TranslateAnimation(0, 0, layout_fuc.getHeight(), 0);
+        animation.setInterpolator(new OvershootInterpolator());
+        animation.setDuration(500);
+        animation.setStartOffset(0);
+        animation.setFillAfter(false);
+        animation.setAnimationListener(new Animation.AnimationListener() {
+            @Override
+            public void onAnimationStart(Animation animation) {
+            }
+
+            @Override
+            public void onAnimationRepeat(Animation animation) {
+            }
+
+            @Override
+            public void onAnimationEnd(Animation animation) {
+                layout_fuc.setVisibility(View.VISIBLE);
+                isShow = true;
+            }
+        });
+
+        layout_fuc.startAnimation(animation);
+    }
+    public void hideView() {
+        if(!isShow)
+            return;
+        layout_fuc.clearAnimation();
+        TranslateAnimation animation  = new TranslateAnimation(0, 0, 0, layout_fuc.getHeight());
+        animation.setInterpolator(new OvershootInterpolator());
+        animation.setDuration(500);
+        animation.setStartOffset(0);
+        animation.setFillAfter(false);
+        animation.setAnimationListener(new Animation.AnimationListener() {
+            @Override
+            public void onAnimationStart(Animation animation) {
+                layout_fuc.setVisibility(View.GONE);
+                isShow = false;
+            }
+
+            @Override
+            public void onAnimationRepeat(Animation animation) {
+            }
+
+            @Override
+            public void onAnimationEnd(Animation animation) {
+            }
+        });
+
+        layout_fuc.startAnimation(animation);
+    }
+    @Override
+    public boolean onTouch(View v, MotionEvent event) {
+        return mGestureDetector.onTouchEvent(event);
+    }
+    @Override
+    public boolean onDown(MotionEvent e) {
+        return false;
+    }
+    @Override
+    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX,
+                           float velocityY) {
+        return false;
+    }
+    @Override
+    public void onLongPress(MotionEvent e) {}
+    @Override
+    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX,
+                            float distanceY) {
+        if (distanceY > 0) {
+            hideView();
+        } else {
+            showView();
+        }
+        return false;
+    }
+    @Override
+    public void onShowPress(MotionEvent e) {
+
+    }
+    @Override
+    public boolean onSingleTapUp(MotionEvent e) {
+        return false;
+    }
+    @Override
+    public boolean dispatchTouchEvent(MotionEvent ev) {
+        mGestureDetector.onTouchEvent(ev);
+        return super.dispatchTouchEvent(ev);
+    }
+}
Index: app/src/main/java/com/oasgames/android/oaspay/entity/NewsInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/entity/NewsInfo.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/entity/NewsInfo.java	(revision )
@@ -0,0 +1,39 @@
+package com.oasgames.android.oaspay.entity;
+
+import java.io.Serializable;
+
+/**
+ * 新闻详细信息
+ * @author xdb
+ *
+ */
+public class NewsInfo implements Serializable{
+	private static final long serialVersionUID = 1598605839985469091L;
+
+	public String id;			//订单id
+	public String title;		//名称
+	public String summary;		//描述
+	public String start_time;		//日期
+	public String detail_url;		//链接
+
+
+	public void setId(String id) {
+		this.id = id;
+	}
+
+	public void setTitle(String title) {
+		this.title = title;
+	}
+
+	public void setSummary(String summary) {
+		this.summary = summary;
+	}
+
+	public void setStart_time(String start_time) {
+		this.start_time = start_time;
+	}
+
+	public void setDetail_url(String detail_url) {
+		this.detail_url = detail_url;
+	}
+}
Index: app/src/main/java/com/oasgames/android/oaspay/entity/PayInfoDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/entity/PayInfoDetail.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/entity/PayInfoDetail.java	(revision )
@@ -0,0 +1,95 @@
+package com.oasgames.android.oaspay.entity;
+
+import java.io.Serializable;
+
+/**
+ * 支付套餐详细信息
+ * @author xdb
+ *
+ */
+public class PayInfoDetail implements Serializable{
+	/**
+	 * 
+	 */
+	private static final long serialVersionUID = 1598605839985469091L;
+	
+	public String id;			//套餐id
+	public String orderId;		//OAS订单id
+	public String amount;		//价格
+	public String amount_show;	//显示价格
+	public String fb_credit;			//
+	public String game_coins;			//游戏币
+	public String game_coins_show;		//显示游戏币
+	public String currency;				//货币
+	public String currency_show;		//显示货币
+	public String game_code;
+	public String pay_way;				//支付渠道
+	public String country;				//国家，按照该国家获取套餐
+	public String price_original;		//原始价格
+	public String price_now;			//当前价格
+	public String price_discount;		//折扣价格
+	public String price_type;			//
+	public String price_product_id;		// Google商品ID
+	public String best;					//推荐
+	public String is_vip;				//
+
+	public void setId(String id) {
+		this.id = id;
+	}
+	public void setOrderId(String orderId) {
+		this.orderId = orderId;
+	}
+	public void setAmount(String amount) {
+		this.amount = amount;
+	}
+	public void setFb_credit(String fb_credit) {
+		this.fb_credit = fb_credit;
+	}
+	public void setGame_coins(String game_coins) {
+		this.game_coins = game_coins;
+	}
+	public void setGame_coins_show(String game_coins_show) {
+		this.game_coins_show = game_coins_show;
+	}
+	public void setCurrency(String currency) {
+		this.currency = currency;
+	}
+	public void setCurrency_show(String currency_show) {
+		this.currency_show = currency_show;
+	}
+	public void setAmount_show(String amount_show) {
+		this.amount_show = amount_show;
+	}
+	public void setGame_code(String game_code) {
+		this.game_code = game_code;
+	}
+	public void setPay_way(String pay_way) {
+		this.pay_way = pay_way;
+	}
+	public void setCountry(String country) {
+		this.country = country;
+	}
+	public void setPrice_original(String price_original) {
+		this.price_original = price_original;
+	}
+	public void setPrice_now(String price_now) {
+		this.price_now = price_now;
+	}
+	public void setPrice_discount(String price_discount) {
+		this.price_discount = price_discount;
+	}
+	public void setPrice_type(String price_type) {
+		this.price_type = price_type;
+	}
+	public void setBest(String best) {
+		this.best = best;
+	}
+	public void setPrice_product_id(String price_product_id) {
+		this.price_product_id = price_product_id;
+	}
+	public void setIs_vip(String is_vip) {
+		this.is_vip = is_vip;
+	}
+	
+	
+}
Index: app/src/main/res/drawable/common_button_1_selector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/common_button_1_selector.xml	(revision )
+++ app/src/main/res/drawable/common_button_1_selector.xml	(revision )
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@drawable/common_button_1_selected" android:state_pressed="true"/>
+    <item android:drawable="@drawable/common_button_1_selected" android:state_focused="true"/>
+    <item android:drawable="@drawable/common_button_1_selected" android:state_selected="true"/>
+    <item android:drawable="@drawable/common_button_1_unselected"/>
+
+</selector>
\ No newline at end of file
Index: app/src/main/res/drawable/common_bg_a5a4a4.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/common_bg_a5a4a4.xml	(revision )
+++ app/src/main/res/drawable/common_bg_a5a4a4.xml	(revision )
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>  
+<shape xmlns:android="http://schemas.android.com/apk/res/android">  
+<solid android:color="#A5A4A4"/>
+<corners android:radius="5dip"/>
+<padding android:left="0dp" android:top="0dp" android:right="0dp" android:bottom="0dp" />  
+</shape>
\ No newline at end of file
Index: app/src/main/java/com/google/zxing/decoding/InactivityTimer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/google/zxing/decoding/InactivityTimer.java	(revision )
+++ app/src/main/java/com/google/zxing/decoding/InactivityTimer.java	(revision )
@@ -0,0 +1,71 @@
+/*
+ * Copyright (C) 2010 ZXing authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.zxing.decoding;
+
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.ScheduledFuture;
+import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.TimeUnit;
+
+import android.app.Activity;
+
+/**
+ * Finishes an activity after a period of inactivity.
+ */
+public final class InactivityTimer {
+
+  private static final int INACTIVITY_DELAY_SECONDS = 5 * 60;
+
+  private final ScheduledExecutorService inactivityTimer =
+      Executors.newSingleThreadScheduledExecutor(new DaemonThreadFactory());
+  private final Activity activity;
+  private ScheduledFuture<?> inactivityFuture = null;
+
+  public InactivityTimer(Activity activity) {
+    this.activity = activity;
+    onActivity();
+  }
+
+  public void onActivity() {
+    cancel();
+    inactivityFuture = inactivityTimer.schedule(new FinishListener(activity),
+                                                INACTIVITY_DELAY_SECONDS,
+                                                TimeUnit.SECONDS);
+  }
+
+  private void cancel() {
+    if (inactivityFuture != null) {
+      inactivityFuture.cancel(true);
+      inactivityFuture = null;
+    }
+  }
+
+  public void shutdown() {
+    cancel();
+    inactivityTimer.shutdown();
+  }
+
+  private static final class DaemonThreadFactory implements ThreadFactory {
+    public Thread newThread(Runnable runnable) {
+      Thread thread = new Thread(runnable);
+      thread.setDaemon(true);
+      return thread;
+    }
+  }
+
+}
Index: app/src/main/java/com/oasgames/android/oaspay/tools/Constant.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/tools/Constant.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/tools/Constant.java	(revision )
@@ -0,0 +1,44 @@
+package com.oasgames.android.oaspay.tools;
+
+import com.oasgames.android.oaspay.service.SearchUtil;
+import com.base.tools.google.GoogleBillingUtils;
+
+import java.util.Hashtable;
+
+
+
+/**
+ * 常量.
+ * 
+ * @author xdb
+ * 
+ */
+public class Constant {
+	private static final String VERSION = "3.1";
+	/**
+	 * SDK 当前版本号
+	 */
+	public static final String SDKVERSION = VERSION + ".5";
+
+	public static final String BASEURL = "http://apisdk.mobile.oasgames.com/"+VERSION+"/?";
+	public static final String BASEURL_SANDBOX = "http://apisdk.mobile.oasgames.com/sandbox/?";
+
+	public static final Hashtable<Integer, String> http_statuscode_errorMsg = new Hashtable<Integer, String>();
+	static {
+		http_statuscode_errorMsg.put(0, "未知异常(可能需要设置代理)");
+		http_statuscode_errorMsg.put(400, "错误请求");
+		http_statuscode_errorMsg.put(408, "Request Timeout/请求超时");
+		http_statuscode_errorMsg.put(500, "Internal Server Error/内部服务器错误");
+		http_statuscode_errorMsg.put(503, "Service Unavailable/服务无法获得");
+		http_statuscode_errorMsg.put(504, "Gateway Timeout/网关超时");
+
+	}
+	
+	public static final String[] createTables = new String[]{
+		"create table if not exists "+ GoogleBillingUtils.TABLENAME+" ("+ GoogleBillingUtils.COLUMNS_ID+" varchar(100) primary key, "+ GoogleBillingUtils.COLUMNS_DATA+" text not null, "+ GoogleBillingUtils.COLUMNS_SIGN+" text not null, "+ GoogleBillingUtils.COLUMNS_TIME+" varchar not null, "+ GoogleBillingUtils.COLUMNS_STATUS+" varchar(10), "+ GoogleBillingUtils.COLUMNS_EXT1+" varchar(100), "+ GoogleBillingUtils.COLUMNS_EXT2+" text);",
+		"create table if not exists "+ SearchUtil.TABLENAME +" ("+SearchUtil.COLUMNS_ID+" varchar(100) primary key, "+SearchUtil.COLUMNS_KEYWORD+" text not null, "+SearchUtil.COLUMNS_TIME+" varchar not null, "+SearchUtil.COLUMNS_EXT1+" varchar(100), "+SearchUtil.COLUMNS_EXT2+" text);"
+	};
+	public static final String[] dropTables = new String[]{
+//		"drop table googleorder;"
+	};
+}
\ No newline at end of file
Index: app/src/main/java/com/oasgames/android/oaspay/activity/ActivityPayPackageList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/activity/ActivityPayPackageList.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/activity/ActivityPayPackageList.java	(revision )
@@ -0,0 +1,204 @@
+package com.oasgames.android.oaspay.activity;
+
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.os.Bundle;
+import android.text.TextUtils;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.ListView;
+import android.widget.TextView;
+
+import com.base.tools.BasesApplication;
+import com.base.tools.activity.BasesActivity;
+import com.base.tools.http.CallbackResultForActivity;
+import com.base.tools.utils.BasesUtils;
+import com.oasgames.android.oaspay.R;
+import com.oasgames.android.oaspay.adapter.AdapterPayPackageList;
+import com.oasgames.android.oaspay.entity.OrderInfo;
+import com.oasgames.android.oaspay.entity.PayInfoDetail;
+import com.oasgames.android.oaspay.entity.PayInfoList;
+import com.oasgames.android.oaspay.entity.ServerInfo;
+import com.oasgames.android.oaspay.service.HttpService;
+import com.oasgames.android.oaspay.tools.APPUtils;
+import com.oasgames.android.oaspay.tools.ReportUtils;
+
+/**
+ * 界面 支付套餐列表
+ * Created by Administrator on 2015/10/16.
+ */
+public class ActivityPayPackageList extends BasesActivity {
+
+    public PayInfoDetail selectedPayInfo;
+    String serverID, str_servername, str_roleName;
+    ListView listView;
+    AdapterPayPackageList adapter;
+
+    PayInfoList paylist;
+    TextView username, servername, rolename, price, topay;
+    String[] serverList = null;
+    int defaultCheckedIndex = -1;
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.page_pay_package_list);
+
+        initHead(true, true, null, false, getString(R.string.pay_package_list_title), false, null);
+
+        listView = (ListView)findViewById(R.id.pay_package_list);
+        loadData();
+        adapter = new AdapterPayPackageList(this, null, 1, null);
+        listView.setAdapter(adapter);
+        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+                selectedPayInfo = (PayInfoDetail) parent.getAdapter().getItem(position);
+                price.setText(selectedPayInfo.currency_show + selectedPayInfo.amount_show);
+                adapter.notifyDataSetChanged();
+                checkData();
+            }
+        });
+
+        username = (TextView)findViewById(R.id.pay_package_list_name);
+        if(TextUtils.isEmpty(BasesApplication.userInfo.username) || "null".equals(BasesApplication.userInfo.username) || BasesApplication.userInfo.username.contains("@"+BasesApplication.userInfo.platform))
+            username.setText(BasesApplication.userInfo.uid);
+        else
+            username.setText(BasesApplication.userInfo.username);
+        servername = (TextView)findViewById(R.id.pay_package_list_servername);
+        rolename = (TextView)findViewById(R.id.pay_package_list_rolename);
+        price = (TextView)findViewById(R.id.pay_package_list_sum);
+        findViewById(R.id.pay_package_list_servernamelayout).setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                BasesUtils.showSingleChoiceDialogListBySystemUI(ActivityPayPackageList.this, serverList, defaultCheckedIndex, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        dialog.cancel();
+                        updateUserInfo(which);
+                        checkData();
+                    }
+                });
+            }
+        });
+
+        ReportUtils.add(ReportUtils.DEFAULTEVENT_GAMEPAY, null, null);
+    }
+
+    private void updateUserInfo(int which){
+        ServerInfo s = paylist.servers.get(which);
+        serverID = s.serverid;
+        str_servername = s.servername;
+        str_roleName = s.rolename;
+
+        rolename.setText(TextUtils.isEmpty(s.rolename)?getString(R.string.pay_package_list_sub8):s.rolename);
+        servername.setText(s.servername);
+        defaultCheckedIndex = which;
+    }
+    private void updateLayout(Object data){
+        setWaitScreen(false);
+        paylist = (PayInfoList)data;
+
+        if(paylist.list != null && paylist.list.size()>0) {
+            selectedPayInfo = paylist.list.get(0);
+            price.setText(selectedPayInfo.currency_show + selectedPayInfo.amount_show);
+        }else{
+            selectedPayInfo = null;
+        }
+
+        adapter.data = paylist.list;
+        adapter.notifyDataSetChanged();
+
+        APPUtils.setListViewHeightBasedOnChildren(listView);
+
+        findViewById(R.id.pay_package_layout).setVisibility(View.VISIBLE);
+        findViewById(R.id.pay_package_topay).setVisibility(View.VISIBLE);
+
+        int count = paylist.servers.size();
+        serverList = new String[count];
+        for (int i = 0; i < count; i++) {
+            ServerInfo s = paylist.servers.get(i);
+            serverList[i] = s.servername;
+            if("Y".equalsIgnoreCase(s.charge_status)){
+                defaultCheckedIndex = i;
+                updateUserInfo(i);
+            }
+        }
+        checkData();
+    }
+
+    private void loadData(){
+        setWaitScreen(true);
+
+        HttpService.instance().getPayKindsInfo(new MyCallback());
+    }
+
+    class MyCallback implements CallbackResultForActivity{
+        @Override
+        public void success(Object data, int statusCode, String msg) {
+            updateLayout(data);
+        }
+
+        @Override
+        public void fail(int statusCode, String msg) {
+            setWaitScreen(false);
+            showNetWrokError();
+        }
+
+        @Override
+        public void exception(Exception e) {
+            setWaitScreen(false);
+            showNetWrokError();
+        }
+    }
+
+    @Override
+    public void retry() {
+        super.retry();
+        loadData();
+    }
+
+    /**
+     * 检查数据有效性，有效后方可支付
+     */
+    private void checkData(){
+        if(topay == null)
+            topay = (TextView)findViewById(R.id.pay_package_topay);
+        if(selectedPayInfo != null && !TextUtils.isEmpty(serverID) && str_roleName!=null && !TextUtils.isEmpty(str_roleName)){
+            topay.setBackgroundResource(R.drawable.common_button_1_selector);
+            topay.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    getOrderId();
+                }
+            });
+        }
+    }
+    private void getOrderId(){
+        setWaitScreen(true);
+        HttpService.instance().sendOrder(selectedPayInfo.id, serverID, str_servername, str_roleName, "payapp", new MyCallbackForGetOrderId());
+    }
+    class MyCallbackForGetOrderId implements CallbackResultForActivity{
+        @Override
+        public void success(Object data, int statusCode, String msg) {
+            setWaitScreen(false);
+            Intent in = new Intent().setClass(ActivityPayPackageList.this, ActivityGooglePlayBilling.class);
+//            in.putExtra("inAppProductID", selectedPayInfo.price_product_id);
+//            in.putExtra("revenue", selectedPayInfo.amount_show);
+//            in.putExtra("oasOrderid", ((OrderInfo)data).order_id);
+            in.putExtra("orderinfo", ((OrderInfo)data));
+            startActivity(in);
+        }
+
+        @Override
+        public void fail(int statusCode, String msg) {
+            setWaitScreen(false);
+            APPUtils.showErrorMessageByErrorCode(ActivityPayPackageList.this, "-2000");
+        }
+
+        @Override
+        public void exception(Exception e) {
+            setWaitScreen(false);
+            APPUtils.showErrorMessageByErrorCode(ActivityPayPackageList.this, "-2000");
+        }
+    }
+}
Index: app/src/main/res/layout/fragment_main_shop_hot.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_main_shop_hot.xml	(revision )
+++ app/src/main/res/layout/fragment_main_shop_hot.xml	(revision )
@@ -0,0 +1,58 @@
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/main_shop_hot"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:orientation="vertical">
+
+    <RelativeLayout
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/fragment_shop_category_height">
+
+        <TextView
+            android:id="@+id/fragment_shop_category_hot_img"
+            android:layout_width="@dimen/fragment_shop_category_head_img_height"
+            android:layout_height="@dimen/fragment_shop_category_head_img_height"
+            android:layout_alignParentRight="true"
+            android:layout_centerVertical="true"
+            android:layout_marginRight="@dimen/common_content_margin_10"
+            android:background="@mipmap/fragment_shop_category_hot"/>
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_toLeftOf="@id/fragment_shop_category_hot_img"
+            android:layout_centerVertical="true"
+            android:layout_marginRight="@dimen/common_content_margin_5"
+            android:gravity="right|center_vertical"
+            android:text="@string/fragment_shop_category_hot"
+            android:textSize="@dimen/common_font_size_14"
+            android:textColor="@color/common_font_color_000000"/>
+        <TextView
+            android:id="@+id/fragment_shop_category_hot_more"
+            android:layout_width="wrap_content"
+            android:layout_height="fill_parent"
+            android:layout_alignParentLeft="true"
+            android:layout_centerVertical="true"
+            android:paddingLeft="@dimen/common_content_margin_10"
+            android:gravity="right|center_vertical"
+            android:text="@string/fragment_shop_category_more"
+            android:textSize="@dimen/common_font_size_12"
+            android:textColor="@color/common_font_color_000000"
+            android:clickable="true"
+            android:onClick="onClickView"/>
+    </RelativeLayout>
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:background="@color/common_font_color_ffffff">
+
+        <GridView
+            android:id="@+id/fragment_shop_category_hot_grid"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_margin="@dimen/common_content_margin_10"
+            android:horizontalSpacing="@dimen/common_content_margin_5"
+            android:numColumns="2"/>
+    </LinearLayout>
+
+</LinearLayout>
Index: app/src/main/java/com/base/tools/google/Purchase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/google/Purchase.java	(revision )
+++ app/src/main/java/com/base/tools/google/Purchase.java	(revision )
@@ -0,0 +1,75 @@
+/* Copyright (c) 2012 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.base.tools.google;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+/**
+ * Represents an in-app billing purchase.
+ */
+public class Purchase {
+    String mItemType;  // ITEM_TYPE_INAPP or ITEM_TYPE_SUBS
+    String mOrderId;
+    String mPackageName;
+    String mSku;
+    long mPurchaseTime;
+    int mPurchaseState;
+    String mDeveloperPayload;
+    String mToken;
+    String mOriginalJson;
+    String mSignature;
+
+    public Purchase(String productID, String packName){
+    	 mItemType = "ITEM_TYPE_INAPP";
+         mOriginalJson = "";//jsonPurchaseInfo;
+         mOrderId = "";
+         mPackageName = packName;
+         mSku = productID;
+         mPurchaseTime = System.currentTimeMillis();
+         mPurchaseState = 0;
+         mDeveloperPayload = "";
+         mToken = "";
+         mSignature = "";
+    }
+    public Purchase(String itemType, String jsonPurchaseInfo, String signature) throws JSONException {
+        mItemType = itemType;
+        mOriginalJson = jsonPurchaseInfo;
+        JSONObject o = new JSONObject(mOriginalJson);
+        mOrderId = o.optString("orderId");
+        mPackageName = o.optString("packageName");
+        mSku = o.optString("productId");
+        mPurchaseTime = o.optLong("purchaseTime");
+        mPurchaseState = o.optInt("purchaseState");
+        mDeveloperPayload = o.optString("developerPayload");
+        mToken = o.optString("token", o.optString("purchaseToken"));
+        mSignature = signature;
+    }
+
+    public String getItemType() { return mItemType; }
+    public String getOrderId() { return mOrderId; }
+    public String getPackageName() { return mPackageName; }
+    public String getSku() { return mSku; }
+    public long getPurchaseTime() { return mPurchaseTime; }
+    public int getPurchaseState() { return mPurchaseState; }
+    public String getDeveloperPayload() { return mDeveloperPayload; }
+    public String getToken() { return mToken; }
+    public String getOriginalJson() { return mOriginalJson; }
+    public String getSignature() { return mSignature; }
+
+    @Override
+    public String toString() { return "PurchaseInfo(type:" + mItemType + "):" + mOriginalJson; }
+}
Index: app/src/main/java/com/base/tools/activity/BasesActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/activity/BasesActivity.java	(revision )
+++ app/src/main/java/com/base/tools/activity/BasesActivity.java	(revision )
@@ -0,0 +1,185 @@
+package com.base.tools.activity;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.ViewGroup.LayoutParams;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.base.tools.utils.BasesUtils;
+import com.oasgames.android.oaspay.R;
+
+public class BasesActivity extends Activity {
+
+	public static final int WAITDAILOG_OPEN = -1;
+	public static final int WAITDAILOG_CLOSE = -2;
+	
+	public static final int HANDLER_RESULT = 0;
+	public static final int HANDLER_SUCECCES = 1;
+	public static final int HANDLER_FAIL = 2;
+	public static final int HANDLER_EXCEPTION = 3;
+	public static final int HANDLER_ERROR = 4;
+	public static final int HANDLER_EXCEPTION_NETWORK = 5;
+	
+	private View wait_dialog;
+	private boolean isPageClose = false;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+//		String languageToLoad = "zh";
+//		String coun = "cn";
+//		Locale locale = new Locale(languageToLoad, coun);
+////		Locale.setDefault(locale);
+//		Configuration config = getResources().getConfiguration();
+//		DisplayMetrics metrics = getResources().getDisplayMetrics();
+////		config.locale = Locale.SIMPLIFIED_CHINESE;
+//		config.locale = locale;
+//		getResources().updateConfiguration(config, metrics);
+		//不显示程序的标题栏
+        requestWindowFeature( Window.FEATURE_NO_TITLE );
+       
+        //不显示系统的标题栏          
+        getWindow().setFlags( WindowManager.LayoutParams.FLAG_FULLSCREEN,
+                              WindowManager.LayoutParams.FLAG_FULLSCREEN );
+        
+//        if(TextUtils.isEmpty(SystemCache.packageName))// 如果为空，重新获取packageName
+//        	SystemCache.packageName = getApplicationContext().getPackageName();
+        
+//		if(null == wait_dialog)
+//			wait_dialog = BaseUtils.createWaitDialog(this, -1);
+	}
+
+	private void openWaitDialog(){
+		if(null == wait_dialog){
+			wait_dialog = getLayoutInflater().inflate(BasesUtils.getResourceValue("layout", "common_waiting_anim"), null);
+			wait_dialog.setOnClickListener(new OnClickListener() {
+				@Override
+				public void onClick(View v) {
+				}
+			});
+			addContentView(wait_dialog, new LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
+//			wait_dialog = BaseUtils.createWaitDialog(this, -1);
+		}
+		if(!wait_dialog.isShown())
+			wait_dialog.setVisibility(View.VISIBLE);
+		
+//		if(!isPageClose)
+//			wait_dialog.show();
+	}
+	
+	private void closeWaitDialog(){
+		if(wait_dialog != null)
+			wait_dialog.setVisibility(View.INVISIBLE);
+	}
+
+	public void setWaitScreen(boolean type){
+		if(isPageClose){
+			return;
+		}
+		if(type)
+			openWaitDialog();
+		else
+			closeWaitDialog();
+	}
+	/**
+	 * 检测当前页面是否被关闭
+	 * @return 返回true为已关闭，返回false为未关闭
+	 */
+	public boolean isPageClose(){
+		return isPageClose;
+	}
+	
+	public void initHead(boolean headIsShowView, boolean backIsShow, OnClickListener backListener, boolean isNeedLogo, String title, boolean toolIsShow, OnClickListener toolsListener){
+		View head = findViewById(BasesUtils.getResourceValue("id", "common_head"));
+		if(head == null)
+			return;
+		if(headIsShowView)
+			head.setVisibility(View.VISIBLE);
+		else
+			head.setVisibility(View.GONE);
+		View back = findViewById(BasesUtils.getResourceValue("id", "common_head_back"));
+		if(backIsShow) {
+			back.setVisibility(View.VISIBLE);
+			if (null != backListener)
+				back.setOnClickListener(backListener);
+			else
+				back.setOnClickListener(new OnClickListener() {
+
+					@Override
+					public void onClick(View arg0) {
+						finish();
+					}
+				});
+		}
+
+		TextView tv_logo = (TextView)findViewById(BasesUtils.getResourceValue("id", "common_head_logo"));
+		if(isNeedLogo){
+			tv_logo.setVisibility(View.VISIBLE);
+		}else
+			tv_logo.setVisibility(View.GONE);
+		
+		TextView tv_title = (TextView)findViewById(BasesUtils.getResourceValue("id", "common_head_title"));
+		tv_title.setText(title);
+
+		TextView tools = (TextView)findViewById(BasesUtils.getResourceValue("id", "common_head_tool"));
+		if(toolIsShow){
+			tools.setVisibility(View.VISIBLE);
+			if(toolsListener != null)
+				tools.setOnClickListener(toolsListener);
+		}else
+			tools.setVisibility(View.INVISIBLE);
+
+
+	}
+	public void setHeadTitle(String title){
+		TextView tv_title = (TextView)findViewById(BasesUtils.getResourceValue("id", "common_head_title"));
+		tv_title.setText(title);
+	}
+
+	LinearLayout networkErrorView;
+
+	/**
+	 * 网络异常时，提示
+	 */
+	public void showNetWrokError(){
+		networkErrorView = (LinearLayout)findViewById(R.id.common_network_error);
+		networkErrorView.setVisibility(View.VISIBLE);
+		TextView retry = (TextView)findViewById(R.id.common_network_retry);
+		retry.setOnClickListener(new OnClickListener() {
+			@Override
+			public void onClick(View v) {
+				retry();
+			}
+		});
+	}
+	public void closeNetWorkError(){
+		if(networkErrorView != null)
+			networkErrorView.setVisibility(View.INVISIBLE);
+	}
+
+	/**
+	 * 网络异常时，重试
+	 */
+	public void retry(){
+		closeNetWorkError();
+	}
+
+	@Override
+	protected void onResume() {
+		super.onResume();
+		isPageClose = false;
+	}
+	@Override
+	protected void onPause() {
+		super.onPause();
+	}
+	@Override
+	protected void onDestroy() {
+		isPageClose = true;
+		super.onDestroy();
+	}
+}
Index: app/src/main/java/com/oasgames/android/oaspay/activity/ActivityCapture.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/activity/ActivityCapture.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/activity/ActivityCapture.java	(revision )
@@ -0,0 +1,327 @@
+package com.oasgames.android.oaspay.activity;
+
+import android.app.Activity;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.pm.ActivityInfo;
+import android.content.res.AssetFileDescriptor;
+import android.graphics.Bitmap;
+import android.media.AudioManager;
+import android.media.MediaPlayer;
+import android.media.MediaPlayer.OnCompletionListener;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Vibrator;
+import android.text.TextUtils;
+import android.util.Base64;
+import android.view.SurfaceHolder;
+import android.view.SurfaceHolder.Callback;
+import android.view.SurfaceView;
+import android.view.View;
+
+import com.base.tools.activity.BasesActivity;
+import com.base.tools.http.CallbackResultForActivity;
+import com.base.tools.utils.BasesUtils;
+import com.google.zxing.BarcodeFormat;
+import com.google.zxing.Result;
+import com.google.zxing.camera.CameraManager;
+import com.google.zxing.decoding.CaptureActivityHandler;
+import com.google.zxing.decoding.InactivityTimer;
+import com.google.zxing.view.ViewfinderView;
+import com.oasgames.android.oaspay.R;
+import com.oasgames.android.oaspay.entity.OrderInfo;
+import com.oasgames.android.oaspay.service.HttpService;
+import com.oasgames.android.oaspay.tools.APPUtils;
+import com.oasgames.android.oaspay.tools.ReportUtils;
+
+import org.json.JSONObject;
+
+import java.io.IOException;
+import java.util.Vector;
+
+/**
+ * Initial the camera
+ * @author xdb
+ */
+public class ActivityCapture extends BasesActivity implements Callback {
+//	private static String CHARGEURL = "http://pay.oasgames.com/payment/oaspay.php?";
+
+	private static final String TAG = ActivityCapture.class.getName();
+
+	private CaptureActivityHandler handler;
+	private ViewfinderView viewfinderView;
+	private boolean hasSurface;
+	private Vector<BarcodeFormat> decodeFormats;
+	private String characterSet;
+	private InactivityTimer inactivityTimer;
+	private MediaPlayer mediaPlayer;
+	private boolean playBeep;
+	private static final float BEEP_VOLUME = 0.10f;
+	private boolean vibrate;
+
+	String resultString;// 扫描内容经处理后
+	/** Called when the activity is first created. */
+	@Override
+	public void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+		setContentView(R.layout.page_capture);
+				CameraManager.init(getApplication());
+		initHead(true, true, null, false, getString(R.string.fragment_shop_function_capture), false, null);
+		viewfinderView = (ViewfinderView) findViewById(R.id.captrue_viewfinder);
+		
+		hasSurface = false;
+		inactivityTimer = new InactivityTimer(this);
+
+		ReportUtils.add(ReportUtils.DEFAULTEVENT_SCANCODE, null, null);
+	}
+	public void onClickViewToInput(View view){
+		startActivity(new Intent().setClass(this, ActivityCaptureInput.class));
+	}
+
+	@Override
+	protected void onResume() {
+		super.onResume();
+		SurfaceView surfaceView = (SurfaceView) findViewById(BasesUtils.getResourceValue("id", "captrue_preview"));
+		SurfaceHolder surfaceHolder = surfaceView.getHolder();
+		if (hasSurface) {
+			initCamera(surfaceHolder);
+		} else {
+			surfaceHolder.addCallback(this);
+			surfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
+		}
+		decodeFormats = null;
+		characterSet = null;
+
+		playBeep = true;
+		AudioManager audioService = (AudioManager) getSystemService(AUDIO_SERVICE);
+		if (audioService.getRingerMode() != AudioManager.RINGER_MODE_NORMAL) {
+			playBeep = false;
+		}
+		initBeepSound();
+		vibrate = true;
+
+		setWaitScreen(false);
+	}
+
+	@Override
+	protected void onPause() {
+		super.onPause();
+		if (handler != null) {
+			handler.quitSynchronously();
+			handler = null;
+		}
+		CameraManager.get().closeDriver();
+	}
+
+	@Override
+	protected void onDestroy() {
+		inactivityTimer.shutdown();
+		super.onDestroy();
+	}
+	
+	/**
+	 * 处理扫描结果
+	 * @param result
+	 * @param barcode
+	 */
+	public void handleDecode(Result result, Bitmap barcode) {
+		inactivityTimer.onActivity();
+//		playBeepSoundAndVibrate();
+		resultString = result.getText();
+		resultString = checkResult(resultString);
+		ReportUtils.add(ReportUtils.DEFAULTEVENT_SCANCODENUM, null, null);
+
+		if(!TextUtils.isEmpty(resultString)){
+			if(BasesUtils.isLogin())
+				getOrderInfo(resultString);
+			else
+				startActivityForResult(new Intent().setClass(this, ActivityLogin.class), 100);
+		}else{
+			BasesUtils.showDialogBySystemUI(this, getString(R.string.capture_scan_text3), getString(R.string.search_title_sub2), new DialogInterface.OnClickListener() {
+				@Override
+				public void onClick(DialogInterface dialog, int which) {
+					dialog.cancel();
+					ReportUtils.add(ReportUtils.DEFAULTEVENT_SCANCODEFAIL, null, null);
+					handler.sendEmptyMessageDelayed(123123, 1500);// 支持继续扫描,延迟1500毫秒是为了让摄像头准备，避免摄像头还没有准备好就开始自动对焦
+				}
+			}, "", null, "", null);
+
+		}
+	}
+
+	@Override
+	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+		super.onActivityResult(requestCode, resultCode, data);
+		if(requestCode == 100 && resultCode == Activity.RESULT_OK){
+			getOrderInfo(resultString);
+		}
+	}
+
+	/**
+	 * 检查扫码结果是否正确（判断扫描内容是否来自OASIS）
+	 * @param result
+	 * @return
+	 */
+	private String checkResult(String result){
+		if(TextUtils.isEmpty(result))
+			return "";
+		String data = "";
+		try {
+			result = new String(Base64.decode(result, Base64.DEFAULT));
+			JSONObject o = new JSONObject(result);
+			if("OASPAY".equals(o.getString("Mark"))){
+				data = o.getString("data");
+			}
+		}catch (Exception e){}
+		return data;
+	}
+	private void getOrderInfo(String result){
+		setWaitScreen(true);
+		HttpService.instance().getOrderInfoByQR(result, new GetOrderInfoCallback(this));
+
+	}
+	class GetOrderInfoCallback implements CallbackResultForActivity{
+		Activity activity;
+		public GetOrderInfoCallback(Activity activity){
+			this.activity = activity;
+		}
+		@Override
+		public void success(Object data, int statusCode, String msg) {
+			setWaitScreen(false);
+			OrderInfo info = (OrderInfo)data;
+			if(!"1".equals(info.order_status)){// 订单已被删除
+				BasesUtils.showDialogBySystemUI(activity, getResources().getString(R.string.order_list_item_label9), getResources().getString(R.string.search_title_sub2), new DialogInterface.OnClickListener() {
+					@Override
+					public void onClick(DialogInterface dialog, int which) {
+						handler.sendEmptyMessageDelayed(123123, 1500);// 支持继续扫描,延迟1500毫秒是为了让摄像头准备，避免摄像头还没有准备好就开始自动对焦
+						dialog.cancel();
+					}
+				}, "", null, "", null);
+				return;
+			}
+			startActivity(new Intent().setClass(activity, ActivityOrderDetails.class).putExtra("orderinfo", info));
+		}
+
+		@Override
+		public void fail(int statusCode, String msg) {
+			setWaitScreen(false);
+			if(!TextUtils.isEmpty(msg) && "-16".equals(msg)){
+				BasesUtils.showDialogBySystemUI(activity, getResources().getString(R.string.capture_scan_text4), getString(R.string.search_title_sub1), new DialogInterface.OnClickListener() {
+					@Override
+					public void onClick(DialogInterface dialog, int which) {
+						handler.sendEmptyMessageDelayed(123123, 1500);// 支持继续扫描,延迟1500毫秒是为了让摄像头准备，避免摄像头还没有准备好就开始自动对焦
+						dialog.cancel();
+					}
+				}, getString(R.string.search_title_sub2), new DialogInterface.OnClickListener() {
+					@Override
+					public void onClick(DialogInterface dialog, int which) {
+						dialog.cancel();
+						startActivity(new Intent().setClass(activity, ActivityLogin.class));
+					}
+				}, "", null);
+				return;
+			}
+			APPUtils.showErrorMessageByErrorCode(activity, "-2000");
+			handler.sendEmptyMessageDelayed(123123, 1500);// 支持继续扫描,延迟1500毫秒是为了让摄像头准备，避免摄像头还没有准备好就开始自动对焦
+		}
+
+		@Override
+		public void exception(Exception e) {
+			setWaitScreen(false);
+			APPUtils.showErrorMessageByErrorCode(activity, "-2000");
+			handler.sendEmptyMessageDelayed(123123, 1500);// 支持继续扫描,延迟1500毫秒是为了让摄像头准备，避免摄像头还没有准备好就开始自动对焦
+		}
+	}
+
+	private void initCamera(SurfaceHolder surfaceHolder) {
+		try {
+			CameraManager.get().openDriver(surfaceHolder);
+		} catch (IOException ioe) {
+			return;
+		} catch (RuntimeException e) {
+			return;
+		}
+		if (handler == null) {
+			handler = new CaptureActivityHandler(this, decodeFormats,
+					characterSet);
+		}
+	}
+
+	@Override
+	public void surfaceChanged(SurfaceHolder holder, int format, int width,
+			int height) {
+	}
+	@Override
+	public void surfaceCreated(SurfaceHolder holder) {
+		if (!hasSurface) {
+			hasSurface = true;
+			initCamera(holder);
+		}
+	}
+
+	@Override
+	public void surfaceDestroyed(SurfaceHolder holder) {
+		hasSurface = false;
+
+	}
+
+	public ViewfinderView getViewfinderView() {
+		return viewfinderView;
+	}
+
+	public Handler getHandler() {
+		return handler;
+	}
+
+	public void drawViewfinder() {
+		viewfinderView.drawViewfinder();
+
+	}
+
+	private void initBeepSound() {
+		if (playBeep && mediaPlayer == null) {
+			// The volume on STREAM_SYSTEM is not adjustable, and users found it
+			// too loud,
+			// so we now play on the music stream.
+			setVolumeControlStream(AudioManager.STREAM_MUSIC);
+			mediaPlayer = new MediaPlayer();
+			mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
+			mediaPlayer.setOnCompletionListener(beepListener);
+
+			AssetFileDescriptor file = getResources().openRawResourceFd(BasesUtils.getResourceValue("raw", "captrue_beep"));
+			try {
+				mediaPlayer.setDataSource(file.getFileDescriptor(),
+						file.getStartOffset(), file.getLength());
+				file.close();
+				mediaPlayer.setVolume(BEEP_VOLUME, BEEP_VOLUME);
+				mediaPlayer.prepare();
+			} catch (IOException e) {
+				mediaPlayer = null;
+			}
+		}
+	}
+
+	private static final long VIBRATE_DURATION = 200L;
+
+	private void playBeepSoundAndVibrate() {
+		if (playBeep && mediaPlayer != null) {
+			mediaPlayer.start();
+		}
+		if (vibrate) {
+			Vibrator vibrator = (Vibrator) getSystemService(VIBRATOR_SERVICE);
+			vibrator.vibrate(VIBRATE_DURATION);
+		}
+	}
+
+	/**
+	 * When the beep has finished playing, rewind to queue up another one.
+	 */
+
+	private final OnCompletionListener beepListener = new OnCompletionListener() {
+		public void onCompletion(MediaPlayer mediaPlayer) {
+			mediaPlayer.seekTo(0);
+		}
+	};
+
+}
\ No newline at end of file
Index: app/src/main/java/com/nineoldandroids/animation/FloatEvaluator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nineoldandroids/animation/FloatEvaluator.java	(revision )
+++ app/src/main/java/com/nineoldandroids/animation/FloatEvaluator.java	(revision )
@@ -0,0 +1,42 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.nineoldandroids.animation;
+
+/**
+ * This evaluator can be used to perform type interpolation between <code>float</code> values.
+ */
+public class FloatEvaluator implements TypeEvaluator<Number> {
+
+    /**
+     * This function returns the result of linearly interpolating the start and end values, with
+     * <code>fraction</code> representing the proportion between the start and end values. The
+     * calculation is a simple parametric calculation: <code>result = x0 + t * (v1 - v0)</code>,
+     * where <code>x0</code> is <code>startValue</code>, <code>x1</code> is <code>endValue</code>,
+     * and <code>t</code> is <code>fraction</code>.
+     *
+     * @param fraction   The fraction from the starting to the ending values
+     * @param startValue The start value; should be of type <code>float</code> or
+     *                   <code>Float</code>
+     * @param endValue   The end value; should be of type <code>float</code> or <code>Float</code>
+     * @return A linear interpolation between the start and end values, given the
+     *         <code>fraction</code> parameter.
+     */
+    public Float evaluate(float fraction, Number startValue, Number endValue) {
+        float startFloat = startValue.floatValue();
+        return startFloat + fraction * (endValue.floatValue() - startFloat);
+    }
+}
\ No newline at end of file
Index: app/src/main/res/layout/fragment_main_shop_function.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_main_shop_function.xml	(revision )
+++ app/src/main/res/layout/fragment_main_shop_function.xml	(revision )
@@ -0,0 +1,157 @@
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:orientation="vertical">
+
+    <TextView
+        android:layout_width="fill_parent"
+        android:layout_height="2dip"
+        android:background="@color/common_list_item_divide_bg"/>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/fragment_shop_function_item_height"
+        android:orientation="horizontal">
+        <RelativeLayout
+            android:id="@+id/fragment_shop_function_order_layout"
+            android:layout_width="match_parent"
+            android:layout_height="@dimen/fragment_shop_function_item_height"
+            android:background="@drawable/common_list_item_selector"
+            android:layout_weight="1"
+            android:clickable="true"
+            android:onClick="onClickView">
+            // 我的订单
+            <TextView
+                android:id="@+id/fragment_shop_function_order"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:background="@mipmap/fragment_shop_function_order"
+                android:layout_alignParentRight="true"
+                android:layout_centerVertical="true"
+                android:layout_marginRight="@dimen/common_content_margin_20"/>
+            <TextView
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_toLeftOf="@id/fragment_shop_function_order"
+                android:layout_centerVertical="true"
+                android:layout_marginRight="@dimen/common_content_margin_10"
+                android:gravity="right|center_vertical"
+                android:text="@string/fragment_shop_function_order"
+                android:textSize="@dimen/common_font_size_14"
+                android:textColor="@color/common_font_color_000000"/>
+
+        </RelativeLayout>
+        <TextView
+            android:layout_width="2dip"
+            android:layout_height="fill_parent"
+            android:background="@color/common_list_item_divide_bg"/>
+        <RelativeLayout
+            android:id="@+id/fragment_shop_function_prop_layout"
+            android:layout_width="match_parent"
+            android:layout_height="@dimen/fragment_shop_function_item_height"
+            android:background="@drawable/common_list_item_selector"
+            android:layout_weight="1"
+            android:clickable="true"
+            android:onClick="onClickView">
+            // 道具
+            <TextView
+                android:id="@+id/fragment_shop_function_prop"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:background="@mipmap/fragment_shop_function_prop"
+                android:layout_alignParentRight="true"
+                android:layout_centerVertical="true"
+                android:layout_marginRight="@dimen/common_content_margin_20"/>
+            <TextView
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_toLeftOf="@id/fragment_shop_function_prop"
+                android:layout_centerVertical="true"
+                android:layout_marginRight="@dimen/common_content_margin_10"
+                android:gravity="right|center_vertical"
+                android:text="@string/fragment_shop_function_prop"
+                android:textSize="@dimen/common_font_size_14"
+                android:textColor="@color/common_font_color_000000"/>
+
+        </RelativeLayout>
+    </LinearLayout>
+
+    <TextView
+        android:layout_width="fill_parent"
+        android:layout_height="2dip"
+        android:background="@color/common_list_item_divide_bg"/>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/fragment_shop_function_item_height"
+        android:orientation="horizontal">
+        <RelativeLayout
+            android:id="@+id/fragment_shop_function_capture_layout"
+            android:layout_width="match_parent"
+            android:layout_height="@dimen/fragment_shop_function_item_height"
+            android:background="@drawable/common_list_item_selector"
+            android:layout_weight="1"
+            android:clickable="true"
+            android:onClick="onClickView">
+            // 扫码
+            <TextView
+                android:id="@+id/fragment_shop_function_capture"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:background="@mipmap/fragment_shop_function_capture"
+                android:layout_alignParentRight="true"
+                android:layout_centerVertical="true"
+                android:layout_marginRight="@dimen/common_content_margin_20"/>
+            <TextView
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_toLeftOf="@id/fragment_shop_function_capture"
+                android:layout_centerVertical="true"
+                android:layout_marginRight="@dimen/common_content_margin_10"
+                android:gravity="right|center_vertical"
+                android:text="@string/fragment_shop_function_capture"
+                android:textSize="@dimen/common_font_size_14"
+                android:textColor="@color/common_font_color_000000"/>
+
+        </RelativeLayout>
+        <TextView
+            android:layout_width="2dip"
+            android:layout_height="fill_parent"
+            android:background="@color/common_list_item_divide_bg"/>
+        <RelativeLayout
+            android:id="@+id/fragment_shop_function_charge_layout"
+            android:layout_width="match_parent"
+            android:layout_height="@dimen/fragment_shop_function_item_height"
+            android:background="@drawable/common_list_item_selector"
+            android:layout_weight="1"
+            android:clickable="true"
+            android:onClick="onClickView">
+            // 充值
+            <TextView
+                android:id="@+id/fragment_shop_function_charge"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:background="@mipmap/fragment_shop_function_charge"
+                android:layout_alignParentRight="true"
+                android:layout_centerVertical="true"
+                android:layout_marginRight="@dimen/common_content_margin_20"/>
+            <TextView
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_toLeftOf="@id/fragment_shop_function_charge"
+                android:layout_centerVertical="true"
+                android:layout_marginRight="@dimen/common_content_margin_10"
+                android:gravity="right|center_vertical"
+                android:text="@string/fragment_shop_function_charge"
+                android:textSize="@dimen/common_font_size_14"
+                android:textColor="@color/common_font_color_000000"/>
+
+        </RelativeLayout>
+    </LinearLayout>
+
+    <TextView
+        android:layout_width="fill_parent"
+        android:layout_height="2dip"
+        android:background="@color/common_list_item_divide_bg"/>
+</LinearLayout>
Index: app/src/main/java/com/oasgames/android/oaspay/tools/FacebookUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/tools/FacebookUtils.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/tools/FacebookUtils.java	(revision )
@@ -0,0 +1,126 @@
+package com.oasgames.android.oaspay.tools;
+
+import android.app.Activity;
+import android.content.Intent;
+
+import com.facebook.AccessToken;
+import com.facebook.CallbackManager;
+import com.facebook.FacebookCallback;
+import com.facebook.FacebookException;
+import com.facebook.FacebookSdk;
+import com.facebook.appevents.AppEventsLogger;
+import com.facebook.login.LoginManager;
+import com.facebook.login.LoginResult;
+
+import java.util.Arrays;
+
+public class FacebookUtils {
+	Activity c;
+	private static CallbackManager callbackManager;
+	
+	static FacebookCallbackInterface iterface;
+	
+	public static void onCreate(Activity c){
+		FacebookSdk.sdkInitialize(c.getApplicationContext());
+		AppEventsLogger.activateApp(c);
+	}
+	public static void onPause(Activity c){
+		AppEventsLogger.deactivateApp(c);
+	}
+	
+
+	/**
+	 * @return 返回逻辑的实例.
+	 */
+	public FacebookUtils (Activity c) {
+//			try {
+//				FacebookEntity fe = FacebookEntity.getInfoByGameCode(c);
+//				if(fe != null){
+//					
+//					BaseUtils.logDebug(TAG, "Track:Facebook is running..... AppId="+fe.appID);
+//				}
+//			} catch (Exception e) {
+//				e.printStackTrace();
+//				BaseUtils.logError(TAG, "Facebook ads track fail.");
+//			}
+			if(!FacebookSdk.isInitialized())// 如果没有初始化，执行初始化操作
+				FacebookSdk.sdkInitialize(c.getApplicationContext());
+	        callbackManager = CallbackManager.Factory.create();
+	        LoginManager.getInstance().registerCallback(callbackManager,
+	                new FacebookCallback<LoginResult>() {
+	                    @Override
+	                    public void onSuccess(final LoginResult loginResult) {
+	                        // App code
+	                    	iterface.onSuccess(loginResult);
+	                    	
+	                    }
+
+	                    @Override
+	                    public void onCancel() {
+	                         // App code
+	                    	iterface.onCancel();
+	                    }
+
+	                    @Override
+	                    public void onError(FacebookException exception) {
+	                         // App code   
+	                    	iterface.onError(exception);
+	                    }
+	        });
+	}
+	public static CallbackManager getCallbackManager(){
+		return callbackManager;
+	}
+	public void onActivityResult(int requestCode, int resultCode, Intent data) {
+		callbackManager.onActivityResult(requestCode, resultCode, data);
+	}
+
+	 public void setFacebookCallbackInterface(FacebookCallbackInterface impl){
+		 iterface = impl;
+	 }
+	 
+    public static void logout(){
+    	LoginManager.getInstance().logOut();
+    }
+   	
+    /**
+     * start facebook login
+     */
+    public void login(Activity c){
+    	login(c, 1);
+    }
+    public boolean loginCheck(Activity c){
+    	if(AccessToken.getCurrentAccessToken() == null || AccessToken.getCurrentAccessToken().isExpired())
+    		return false;
+    	if(AccessToken.getCurrentAccessToken().getPermissions() == null || 
+    			(AccessToken.getCurrentAccessToken().getPermissions() != null && !AccessToken.getCurrentAccessToken().getPermissions().containsAll(Arrays.asList("public_profile", "user_friends"))))
+    		return false;
+    	return true;
+    }
+    public void loginForPublish(Activity c){
+    	login(c, 2);
+    }
+    public boolean loginForPublishCheck(Activity c){
+    	if(AccessToken.getCurrentAccessToken() == null || AccessToken.getCurrentAccessToken().isExpired())
+    		return false;
+    	if(AccessToken.getCurrentAccessToken().getPermissions() == null || 
+    			(AccessToken.getCurrentAccessToken().getPermissions() != null && !AccessToken.getCurrentAccessToken().getPermissions().containsAll(Arrays.asList("publish_actions"))))
+    		return false;
+    	return true;
+    }
+    
+    private void login(Activity c, int type) {
+    	if(type == 1){
+    		LoginManager.getInstance().logInWithReadPermissions(c, Arrays.asList("public_profile", "user_friends"));
+    	}
+    	else if(type == 2)
+    		LoginManager.getInstance().logInWithPublishPermissions(c, Arrays.asList("publish_actions"));
+    }	
+	
+    
+    public interface FacebookCallbackInterface{
+    	public void onSuccess(LoginResult loginResult);
+    	public void onCancel();
+    	public void onError(FacebookException exception);
+    }
+}
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .gitignore	(revision )
+++ .gitignore	(revision )
@@ -0,0 +1,7 @@
+.gradle
+/local.properties
+/.idea/workspace.xml
+/.idea/libraries
+.DS_Store
+/build
+/captures
Index: app/src/main/assets/jquery_1_7_min.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/assets/jquery_1_7_min.js	(revision )
+++ app/src/main/assets/jquery_1_7_min.js	(revision )
@@ -0,0 +1,4 @@
+/*! jQuery v1.7 jquery.com | jquery.org/license */
+(function(a,b){function cA(a){return f.isWindow(a)?a:a.nodeType===9?a.defaultView||a.parentWindow:!1}function cx(a){if(!cm[a]){var b=c.body,d=f("<"+a+">").appendTo(b),e=d.css("display");d.remove();if(e==="none"||e===""){cn||(cn=c.createElement("iframe"),cn.frameBorder=cn.width=cn.height=0),b.appendChild(cn);if(!co||!cn.createElement)co=(cn.contentWindow||cn.contentDocument).document,co.write((c.compatMode==="CSS1Compat"?"<!doctype html>":"")+"<html><body>"),co.close();d=co.createElement(a),co.body.appendChild(d),e=f.css(d,"display"),b.removeChild(cn)}cm[a]=e}return cm[a]}function cw(a,b){var c={};f.each(cs.concat.apply([],cs.slice(0,b)),function(){c[this]=a});return c}function cv(){ct=b}function cu(){setTimeout(cv,0);return ct=f.now()}function cl(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}function ck(){try{return new a.XMLHttpRequest}catch(b){}}function ce(a,c){a.dataFilter&&(c=a.dataFilter(c,a.dataType));var d=a.dataTypes,e={},g,h,i=d.length,j,k=d[0],l,m,n,o,p;for(g=1;g<i;g++){if(g===1)for(h in a.converters)typeof h=="string"&&(e[h.toLowerCase()]=a.converters[h]);l=k,k=d[g];if(k==="*")k=l;else if(l!=="*"&&l!==k){m=l+" "+k,n=e[m]||e["* "+k];if(!n){p=b;for(o in e){j=o.split(" ");if(j[0]===l||j[0]==="*"){p=e[j[1]+" "+k];if(p){o=e[o],o===!0?n=p:p===!0&&(n=o);break}}}}!n&&!p&&f.error("No conversion from "+m.replace(" "," to ")),n!==!0&&(c=n?n(c):p(o(c)))}}return c}function cd(a,c,d){var e=a.contents,f=a.dataTypes,g=a.responseFields,h,i,j,k;for(i in g)i in d&&(c[g[i]]=d[i]);while(f[0]==="*")f.shift(),h===b&&(h=a.mimeType||c.getResponseHeader("content-type"));if(h)for(i in e)if(e[i]&&e[i].test(h)){f.unshift(i);break}if(f[0]in d)j=f[0];else{for(i in d){if(!f[0]||a.converters[i+" "+f[0]]){j=i;break}k||(k=i)}j=j||k}if(j){j!==f[0]&&f.unshift(j);return d[j]}}function cc(a,b,c,d){if(f.isArray(b))f.each(b,function(b,e){c||bG.test(a)?d(a,e):cc(a+"["+(typeof e=="object"||f.isArray(e)?b:"")+"]",e,c,d)});else if(!c&&b!=null&&typeof b=="object")for(var e in b)cc(a+"["+e+"]",b[e],c,d);else d(a,b)}function cb(a,c){var d,e,g=f.ajaxSettings.flatOptions||{};for(d in c)c[d]!==b&&((g[d]?a:e||(e={}))[d]=c[d]);e&&f.extend(!0,a,e)}function ca(a,c,d,e,f,g){f=f||c.dataTypes[0],g=g||{},g[f]=!0;var h=a[f],i=0,j=h?h.length:0,k=a===bV,l;for(;i<j&&(k||!l);i++)l=h[i](c,d,e),typeof l=="string"&&(!k||g[l]?l=b:(c.dataTypes.unshift(l),l=ca(a,c,d,e,l,g)));(k||!l)&&!g["*"]&&(l=ca(a,c,d,e,"*",g));return l}function b_(a){return function(b,c){typeof b!="string"&&(c=b,b="*");if(f.isFunction(c)){var d=b.toLowerCase().split(bR),e=0,g=d.length,h,i,j;for(;e<g;e++)h=d[e],j=/^\+/.test(h),j&&(h=h.substr(1)||"*"),i=a[h]=a[h]||[],i[j?"unshift":"push"](c)}}}function bE(a,b,c){var d=b==="width"?a.offsetWidth:a.offsetHeight,e=b==="width"?bz:bA;if(d>0){c!=="border"&&f.each(e,function(){c||(d-=parseFloat(f.css(a,"padding"+this))||0),c==="margin"?d+=parseFloat(f.css(a,c+this))||0:d-=parseFloat(f.css(a,"border"+this+"Width"))||0});return d+"px"}d=bB(a,b,b);if(d<0||d==null)d=a.style[b]||0;d=parseFloat(d)||0,c&&f.each(e,function(){d+=parseFloat(f.css(a,"padding"+this))||0,c!=="padding"&&(d+=parseFloat(f.css(a,"border"+this+"Width"))||0),c==="margin"&&(d+=parseFloat(f.css(a,c+this))||0)});return d+"px"}function br(a,b){b.src?f.ajax({url:b.src,async:!1,dataType:"script"}):f.globalEval((b.text||b.textContent||b.innerHTML||"").replace(bi,"/*$0*/")),b.parentNode&&b.parentNode.removeChild(b)}function bq(a){var b=(a.nodeName||"").toLowerCase();b==="input"?bp(a):b!=="script"&&typeof a.getElementsByTagName!="undefined"&&f.grep(a.getElementsByTagName("input"),bp)}function bp(a){if(a.type==="checkbox"||a.type==="radio")a.defaultChecked=a.checked}function bo(a){return typeof a.getElementsByTagName!="undefined"?a.getElementsByTagName("*"):typeof a.querySelectorAll!="undefined"?a.querySelectorAll("*"):[]}function bn(a,b){var c;if(b.nodeType===1){b.clearAttributes&&b.clearAttributes(),b.mergeAttributes&&b.mergeAttributes(a),c=b.nodeName.toLowerCase();if(c==="object")b.outerHTML=a.outerHTML;else if(c!=="input"||a.type!=="checkbox"&&a.type!=="radio"){if(c==="option")b.selected=a.defaultSelected;else if(c==="input"||c==="textarea")b.defaultValue=a.defaultValue}else a.checked&&(b.defaultChecked=b.checked=a.checked),b.value!==a.value&&(b.value=a.value);b.removeAttribute(f.expando)}}function bm(a,b){if(b.nodeType===1&&!!f.hasData(a)){var c,d,e,g=f._data(a),h=f._data(b,g),i=g.events;if(i){delete h.handle,h.events={};for(c in i)for(d=0,e=i[c].length;d<e;d++)f.event.add(b,c+(i[c][d].namespace?".":"")+i[c][d].namespace,i[c][d],i[c][d].data)}h.data&&(h.data=f.extend({},h.data))}}function bl(a,b){return f.nodeName(a,"table")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function X(a){var b=Y.split(" "),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}function W(a,b,c){b=b||0;if(f.isFunction(b))return f.grep(a,function(a,d){var e=!!b.call(a,d,a);return e===c});if(b.nodeType)return f.grep(a,function(a,d){return a===b===c});if(typeof b=="string"){var d=f.grep(a,function(a){return a.nodeType===1});if(R.test(b))return f.filter(b,d,!c);b=f.filter(b,d)}return f.grep(a,function(a,d){return f.inArray(a,b)>=0===c})}function V(a){return!a||!a.parentNode||a.parentNode.nodeType===11}function N(){return!0}function M(){return!1}function n(a,b,c){var d=b+"defer",e=b+"queue",g=b+"mark",h=f._data(a,d);h&&(c==="queue"||!f._data(a,e))&&(c==="mark"||!f._data(a,g))&&setTimeout(function(){!f._data(a,e)&&!f._data(a,g)&&(f.removeData(a,d,!0),h.fire())},0)}function m(a){for(var b in a){if(b==="data"&&f.isEmptyObject(a[b]))continue;if(b!=="toJSON")return!1}return!0}function l(a,c,d){if(d===b&&a.nodeType===1){var e="data-"+c.replace(k,"-$1").toLowerCase();d=a.getAttribute(e);if(typeof d=="string"){try{d=d==="true"?!0:d==="false"?!1:d==="null"?null:f.isNumeric(d)?parseFloat(d):j.test(d)?f.parseJSON(d):d}catch(g){}f.data(a,c,d)}else d=b}return d}function h(a){var b=g[a]={},c,d;a=a.split(/\s+/);for(c=0,d=a.length;c<d;c++)b[a[c]]=!0;return b}var c=a.document,d=a.navigator,e=a.location,f=function(){function K(){if(!e.isReady){try{c.documentElement.doScroll("left")}catch(a){setTimeout(K,1);return}e.ready()}}var e=function(a,b){return new e.fn.init(a,b,h)},f=a.jQuery,g=a.$,h,i=/^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,j=/\S/,k=/^\s+/,l=/\s+$/,m=/\d/,n=/^<(\w+)\s*\/?>(?:<\/\1>)?$/,o=/^[\],:{}\s]*$/,p=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,q=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,r=/(?:^|:|,)(?:\s*\[)+/g,s=/(webkit)[ \/]([\w.]+)/,t=/(opera)(?:.*version)?[ \/]([\w.]+)/,u=/(msie) ([\w.]+)/,v=/(mozilla)(?:.*? rv:([\w.]+))?/,w=/-([a-z]|[0-9])/ig,x=/^-ms-/,y=function(a,b){return(b+"").toUpperCase()},z=d.userAgent,A,B,C,D=Object.prototype.toString,E=Object.prototype.hasOwnProperty,F=Array.prototype.push,G=Array.prototype.slice,H=String.prototype.trim,I=Array.prototype.indexOf,J={};e.fn=e.prototype={constructor:e,init:function(a,d,f){var g,h,j,k;if(!a)return this;if(a.nodeType){this.context=this[0]=a,this.length=1;return this}if(a==="body"&&!d&&c.body){this.context=c,this[0]=c.body,this.selector=a,this.length=1;return this}if(typeof a=="string"){a.charAt(0)!=="<"||a.charAt(a.length-1)!==">"||a.length<3?g=i.exec(a):g=[null,a,null];if(g&&(g[1]||!d)){if(g[1]){d=d instanceof e?d[0]:d,k=d?d.ownerDocument||d:c,j=n.exec(a),j?e.isPlainObject(d)?(a=[c.createElement(j[1])],e.fn.attr.call(a,d,!0)):a=[k.createElement(j[1])]:(j=e.buildFragment([g[1]],[k]),a=(j.cacheable?e.clone(j.fragment):j.fragment).childNodes);return e.merge(this,a)}h=c.getElementById(g[2]);if(h&&h.parentNode){if(h.id!==g[2])return f.find(a);this.length=1,this[0]=h}this.context=c,this.selector=a;return this}return!d||d.jquery?(d||f).find(a):this.constructor(d).find(a)}if(e.isFunction(a))return f.ready(a);a.selector!==b&&(this.selector=a.selector,this.context=a.context);return e.makeArray(a,this)},selector:"",jquery:"1.7",length:0,size:function(){return this.length},toArray:function(){return G.call(this,0)},get:function(a){return a==null?this.toArray():a<0?this[this.length+a]:this[a]},pushStack:function(a,b,c){var d=this.constructor();e.isArray(a)?F.apply(d,a):e.merge(d,a),d.prevObject=this,d.context=this.context,b==="find"?d.selector=this.selector+(this.selector?" ":"")+c:b&&(d.selector=this.selector+"."+b+"("+c+")");return d},each:function(a,b){return e.each(this,a,b)},ready:function(a){e.bindReady(),B.add(a);return this},eq:function(a){return a===-1?this.slice(a):this.slice(a,+a+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(G.apply(this,arguments),"slice",G.call(arguments).join(","))},map:function(a){return this.pushStack(e.map(this,function(b,c){return a.call(b,c,b)}))},end:function(){return this.prevObject||this.constructor(null)},push:F,sort:[].sort,splice:[].splice},e.fn.init.prototype=e.fn,e.extend=e.fn.extend=function(){var a,c,d,f,g,h,i=arguments[0]||{},j=1,k=arguments.length,l=!1;typeof i=="boolean"&&(l=i,i=arguments[1]||{},j=2),typeof i!="object"&&!e.isFunction(i)&&(i={}),k===j&&(i=this,--j);for(;j<k;j++)if((a=arguments[j])!=null)for(c in a){d=i[c],f=a[c];if(i===f)continue;l&&f&&(e.isPlainObject(f)||(g=e.isArray(f)))?(g?(g=!1,h=d&&e.isArray(d)?d:[]):h=d&&e.isPlainObject(d)?d:{},i[c]=e.extend(l,h,f)):f!==b&&(i[c]=f)}return i},e.extend({noConflict:function(b){a.$===e&&(a.$=g),b&&a.jQuery===e&&(a.jQuery=f);return e},isReady:!1,readyWait:1,holdReady:function(a){a?e.readyWait++:e.ready(!0)},ready:function(a){if(a===!0&&!--e.readyWait||a!==!0&&!e.isReady){if(!c.body)return setTimeout(e.ready,1);e.isReady=!0;if(a!==!0&&--e.readyWait>0)return;B.fireWith(c,[e]),e.fn.trigger&&e(c).trigger("ready").unbind("ready")}},bindReady:function(){if(!B){B=e.Callbacks("once memory");if(c.readyState==="complete")return setTimeout(e.ready,1);if(c.addEventListener)c.addEventListener("DOMContentLoaded",C,!1),a.addEventListener("load",e.ready,!1);else if(c.attachEvent){c.attachEvent("onreadystatechange",C),a.attachEvent("onload",e.ready);var b=!1;try{b=a.frameElement==null}catch(d){}c.documentElement.doScroll&&b&&K()}}},isFunction:function(a){return e.type(a)==="function"},isArray:Array.isArray||function(a){return e.type(a)==="array"},isWindow:function(a){return a&&typeof a=="object"&&"setInterval"in a},isNumeric:function(a){return a!=null&&m.test(a)&&!isNaN(a)},type:function(a){return a==null?String(a):J[D.call(a)]||"object"},isPlainObject:function(a){if(!a||e.type(a)!=="object"||a.nodeType||e.isWindow(a))return!1;try{if(a.constructor&&!E.call(a,"constructor")&&!E.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}var d;for(d in a);return d===b||E.call(a,d)},isEmptyObject:function(a){for(var b in a)return!1;return!0},error:function(a){throw a},parseJSON:function(b){if(typeof b!="string"||!b)return null;b=e.trim(b);if(a.JSON&&a.JSON.parse)return a.JSON.parse(b);if(o.test(b.replace(p,"@").replace(q,"]").replace(r,"")))return(new Function("return "+b))();e.error("Invalid JSON: "+b)},parseXML:function(c){var d,f;try{a.DOMParser?(f=new DOMParser,d=f.parseFromString(c,"text/xml")):(d=new ActiveXObject("Microsoft.XMLDOM"),d.async="false",d.loadXML(c))}catch(g){d=b}(!d||!d.documentElement||d.getElementsByTagName("parsererror").length)&&e.error("Invalid XML: "+c);return d},noop:function(){},globalEval:function(b){b&&j.test(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(x,"ms-").replace(w,y)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toUpperCase()===b.toUpperCase()},each:function(a,c,d){var f,g=0,h=a.length,i=h===b||e.isFunction(a);if(d){if(i){for(f in a)if(c.apply(a[f],d)===!1)break}else for(;g<h;)if(c.apply(a[g++],d)===!1)break}else if(i){for(f in a)if(c.call(a[f],f,a[f])===!1)break}else for(;g<h;)if(c.call(a[g],g,a[g++])===!1)break;return a},trim:H?function(a){return a==null?"":H.call(a)}:function(a){return a==null?"":(a+"").replace(k,"").replace(l,"")},makeArray:function(a,b){var c=b||[];if(a!=null){var d=e.type(a);a.length==null||d==="string"||d==="function"||d==="regexp"||e.isWindow(a)?F.call(c,a):e.merge(c,a)}return c},inArray:function(a,b,c){var d;if(b){if(I)return I.call(b,a,c);d=b.length,c=c?c<0?Math.max(0,d+c):c:0;for(;c<d;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,c){var d=a.length,e=0;if(typeof c.length=="number")for(var f=c.length;e<f;e++)a[d++]=c[e];else while(c[e]!==b)a[d++]=c[e++];a.length=d;return a},grep:function(a,b,c){var d=[],e;c=!!c;for(var f=0,g=a.length;f<g;f++)e=!!b(a[f],f),c!==e&&d.push(a[f]);return d},map:function(a,c,d){var f,g,h=[],i=0,j=a.length,k=a instanceof e||j!==b&&typeof j=="number"&&(j>0&&a[0]&&a[j-1]||j===0||e.isArray(a));if(k)for(;i<j;i++)f=c(a[i],i,d),f!=null&&(h[h.length]=f);else for(g in a)f=c(a[g],g,d),f!=null&&(h[h.length]=f);return h.concat.apply([],h)},guid:1,proxy:function(a,c){if(typeof c=="string"){var d=a[c];c=a,a=d}if(!e.isFunction(a))return b;var f=G.call(arguments,2),g=function(){return a.apply(c,f.concat(G.call(arguments)))};g.guid=a.guid=a.guid||g.guid||e.guid++;return g},access:function(a,c,d,f,g,h){var i=a.length;if(typeof c=="object"){for(var j in c)e.access(a,j,c[j],f,g,d);return a}if(d!==b){f=!h&&f&&e.isFunction(d);for(var k=0;k<i;k++)g(a[k],c,f?d.call(a[k],k,g(a[k],c)):d,h);return a}return i?g(a[0],c):b},now:function(){return(new Date).getTime()},uaMatch:function(a){a=a.toLowerCase();var b=s.exec(a)||t.exec(a)||u.exec(a)||a.indexOf("compatible")<0&&v.exec(a)||[];return{browser:b[1]||"",version:b[2]||"0"}},sub:function(){function a(b,c){return new a.fn.init(b,c)}e.extend(!0,a,this),a.superclass=this,a.fn=a.prototype=this(),a.fn.constructor=a,a.sub=this.sub,a.fn.init=function(d,f){f&&f instanceof e&&!(f instanceof a)&&(f=a(f));return e.fn.init.call(this,d,f,b)},a.fn.init.prototype=a.fn;var b=a(c);return a},browser:{}}),e.each("Boolean Number String Function Array Date RegExp Object".split(" "),function(a,b){J["[object "+b+"]"]=b.toLowerCase()}),A=e.uaMatch(z),A.browser&&(e.browser[A.browser]=!0,e.browser.version=A.version),e.browser.webkit&&(e.browser.safari=!0),j.test("聽")&&(k=/^[\s\xA0]+/,l=/[\s\xA0]+$/),h=e(c),c.addEventListener?C=function(){c.removeEventListener("DOMContentLoaded",C,!1),e.ready()}:c.attachEvent&&(C=function(){c.readyState==="complete"&&(c.detachEvent("onreadystatechange",C),e.ready())}),typeof define=="function"&&define.amd&&define.amd.jQuery&&define("jquery",[],function(){return e});return e}(),g={};f.Callbacks=function(a){a=a?g[a]||h(a):{};var c=[],d=[],e,i,j,k,l,m=function(b){var d,e,g,h,i;for(d=0,e=b.length;d<e;d++)g=b[d],h=f.type(g),h==="array"?m(g):h==="function"&&(!a.unique||!o.has(g))&&c.push(g)},n=function(b,f){f=f||[],e=!a.memory||[b,f],i=!0,l=j||0,j=0,k=c.length;for(;c&&l<k;l++)if(c[l].apply(b,f)===!1&&a.stopOnFalse){e=!0;break}i=!1,c&&(a.once?e===!0?o.disable():c=[]:d&&d.length&&(e=d.shift(),o.fireWith(e[0],e[1])))},o={add:function(){if(c){var a=c.length;m(arguments),i?k=c.length:e&&e!==!0&&(j=a,n(e[0],e[1]))}return this},remove:function(){if(c){var b=arguments,d=0,e=b.length;for(;d<e;d++)for(var f=0;f<c.length;f++)if(b[d]===c[f]){i&&f<=k&&(k--,f<=l&&l--),c.splice(f--,1);if(a.unique)break}}return this},has:function(a){if(c){var b=0,d=c.length;for(;b<d;b++)if(a===c[b])return!0}return!1},empty:function(){c=[];return this},disable:function(){c=d=e=b;return this},disabled:function(){return!c},lock:function(){d=b,(!e||e===!0)&&o.disable();return this},locked:function(){return!d},fireWith:function(b,c){d&&(i?a.once||d.push([b,c]):(!a.once||!e)&&n(b,c));return this},fire:function(){o.fireWith(this,arguments);return this},fired:function(){return!!e}};return o};var i=[].slice;f.extend({Deferred:function(a){var b=f.Callbacks("once memory"),c=f.Callbacks("once memory"),d=f.Callbacks("memory"),e="pending",g={resolve:b,reject:c,notify:d},h={done:b.add,fail:c.add,progress:d.add,state:function(){return e},isResolved:b.fired,isRejected:c.fired,then:function(a,b,c){i.done(a).fail(b).progress(c);return this},always:function(){return i.done.apply(i,arguments).fail.apply(i,arguments)},pipe:function(a,b,c){return f.Deferred(function(d){f.each({done:[a,"resolve"],fail:[b,"reject"],progress:[c,"notify"]},function(a,b){var c=b[0],e=b[1],g;f.isFunction(c)?i[a](function(){g=c.apply(this,arguments),g&&f.isFunction(g.promise)?g.promise().then(d.resolve,d.reject,d.notify):d[e+"With"](this===i?d:this,[g])}):i[a](d[e])})}).promise()},promise:function(a){if(a==null)a=h;else for(var b in h)a[b]=h[b];return a}},i=h.promise({}),j;for(j in g)i[j]=g[j].fire,i[j+"With"]=g[j].fireWith;i.done(function(){e="resolved"},c.disable,d.lock).fail(function(){e="rejected"},b.disable,d.lock),a&&a.call(i,i);return i},when:function(a){function m(a){return function(b){e[a]=arguments.length>1?i.call(arguments,0):b,j.notifyWith(k,e)}}function l(a){return function(c){b[a]=arguments.length>1?i.call(arguments,0):c,--g||j.resolveWith(j,b)}}var b=i.call(arguments,0),c=0,d=b.length,e=Array(d),g=d,h=d,j=d<=1&&a&&f.isFunction(a.promise)?a:f.Deferred(),k=j.promise();if(d>1){for(;c<d;c++)b[c]&&b[c].promise&&f.isFunction(b[c].promise)?b[c].promise().then(l(c),j.reject,m(c)):--g;g||j.resolveWith(j,b)}else j!==a&&j.resolveWith(j,d?[a]:[]);return k}}),f.support=function(){var a=c.createElement("div"),b=c.documentElement,d,e,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u;a.setAttribute("className","t"),a.innerHTML="   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/><nav></nav>",d=a.getElementsByTagName("*"),e=a.getElementsByTagName("a")[0];if(!d||!d.length||!e)return{};g=c.createElement("select"),h=g.appendChild(c.createElement("option")),i=a.getElementsByTagName("input")[0],k={leadingWhitespace:a.firstChild.nodeType===3,tbody:!a.getElementsByTagName("tbody").length,htmlSerialize:!!a.getElementsByTagName("link").length,style:/top/.test(e.getAttribute("style")),hrefNormalized:e.getAttribute("href")==="/a",opacity:/^0.55/.test(e.style.opacity),cssFloat:!!e.style.cssFloat,unknownElems:!!a.getElementsByTagName("nav").length,checkOn:i.value==="on",optSelected:h.selected,getSetAttribute:a.className!=="t",enctype:!!c.createElement("form").enctype,submitBubbles:!0,changeBubbles:!0,focusinBubbles:!1,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0},i.checked=!0,k.noCloneChecked=i.cloneNode(!0).checked,g.disabled=!0,k.optDisabled=!h.disabled;try{delete a.test}catch(v){k.deleteExpando=!1}!a.addEventListener&&a.attachEvent&&a.fireEvent&&(a.attachEvent("onclick",function(){k.noCloneEvent=!1}),a.cloneNode(!0).fireEvent("onclick")),i=c.createElement("input"),i.value="t",i.setAttribute("type","radio"),k.radioValue=i.value==="t",i.setAttribute("checked","checked"),a.appendChild(i),l=c.createDocumentFragment(),l.appendChild(a.lastChild),k.checkClone=l.cloneNode(!0).cloneNode(!0).lastChild.checked,a.innerHTML="",a.style.width=a.style.paddingLeft="1px",m=c.getElementsByTagName("body")[0],o=c.createElement(m?"div":"body"),p={visibility:"hidden",width:0,height:0,border:0,margin:0,background:"none"},m&&f.extend(p,{position:"absolute",left:"-999px",top:"-999px"});for(t in p)o.style[t]=p[t];o.appendChild(a),n=m||b,n.insertBefore(o,n.firstChild),k.appendChecked=i.checked,k.boxModel=a.offsetWidth===2,"zoom"in a.style&&(a.style.display="inline",a.style.zoom=1,k.inlineBlockNeedsLayout=a.offsetWidth===2,a.style.display="",a.innerHTML="<div style='width:4px;'></div>",k.shrinkWrapBlocks=a.offsetWidth!==2),a.innerHTML="<table><tr><td style='padding:0;border:0;display:none'></td><td>t</td></tr></table>",q=a.getElementsByTagName("td"),u=q[0].offsetHeight===0,q[0].style.display="",q[1].style.display="none",k.reliableHiddenOffsets=u&&q[0].offsetHeight===0,a.innerHTML="",c.defaultView&&c.defaultView.getComputedStyle&&(j=c.createElement("div"),j.style.width="0",j.style.marginRight="0",a.appendChild(j),k.reliableMarginRight=(parseInt((c.defaultView.getComputedStyle(j,null)||{marginRight:0}).marginRight,10)||0)===0);if(a.attachEvent)for(t in{submit:1,change:1,focusin:1})s="on"+t,u=s in a,u||(a.setAttribute(s,"return;"),u=typeof a[s]=="function"),k[t+"Bubbles"]=u;f(function(){var a,b,d,e,g,h,i=1,j="position:absolute;top:0;left:0;width:1px;height:1px;margin:0;",l="visibility:hidden;border:0;",n="style='"+j+"border:5px solid #000;padding:0;'",p="<div "+n+"><div></div></div>"+"<table "+n+" cellpadding='0' cellspacing='0'>"+"<tr><td></td></tr></table>";m=c.getElementsByTagName("body")[0];!m||(a=c.createElement("div"),a.style.cssText=l+"width:0;height:0;position:static;top:0;margin-top:"+i+"px",m.insertBefore(a,m.firstChild),o=c.createElement("div"),o.style.cssText=j+l,o.innerHTML=p,a.appendChild(o),b=o.firstChild,d=b.firstChild,g=b.nextSibling.firstChild.firstChild,h={doesNotAddBorder:d.offsetTop!==5,doesAddBorderForTableAndCells:g.offsetTop===5},d.style.position="fixed",d.style.top="20px",h.fixedPosition=d.offsetTop===20||d.offsetTop===15,d.style.position=d.style.top="",b.style.overflow="hidden",b.style.position="relative",h.subtractsBorderForOverflowNotVisible=d.offsetTop===-5,h.doesNotIncludeMarginInBodyOffset=m.offsetTop!==i,m.removeChild(a),o=a=null,f.extend(k,h))}),o.innerHTML="",n.removeChild(o),o=l=g=h=m=j=a=i=null;return k}(),f.boxModel=f.support.boxModel;var j=/^(?:\{.*\}|\[.*\])$/,k=/([A-Z])/g;f.extend({cache:{},uuid:0,expando:"jQuery"+(f.fn.jquery+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(a){a=a.nodeType?f.cache[a[f.expando]]:a[f.expando];return!!a&&!m(a)},data:function(a,c,d,e){if(!!f.acceptData(a)){var g,h,i,j=f.expando,k=typeof c=="string",l=a.nodeType,m=l?f.cache:a,n=l?a[f.expando]:a[f.expando]&&f.expando,o=c==="events";if((!n||!m[n]||!o&&!e&&!m[n].data)&&k&&d===b)return;n||(l?a[f.expando]=n=++f.uuid:n=f.expando),m[n]||(m[n]={},l||(m[n].toJSON=f.noop));if(typeof c=="object"||typeof c=="function")e?m[n]=f.extend(m[n],c):m[n].data=f.extend(m[n].data,c);g=h=m[n],e||(h.data||(h.data={}),h=h.data),d!==b&&(h[f.camelCase(c)]=d);if(o&&!h[c])return g.events;k?(i=h[c],i==null&&(i=h[f.camelCase(c)])):i=h;return i}},removeData:function(a,b,c){if(!!f.acceptData(a)){var d,e,g,h=f.expando,i=a.nodeType,j=i?f.cache:a,k=i?a[f.expando]:f.expando;if(!j[k])return;if(b){d=c?j[k]:j[k].data;if(d){f.isArray(b)?b=b:b in d?b=[b]:(b=f.camelCase(b),b in d?b=[b]:b=b.split(" "));for(e=0,g=b.length;e<g;e++)delete d[b[e]];if(!(c?m:f.isEmptyObject)(d))return}}if(!c){delete j[k].data;if(!m(j[k]))return}f.support.deleteExpando||!j.setInterval?delete j[k]:j[k]=null,i&&(f.support.deleteExpando?delete a[f.expando]:a.removeAttribute?a.removeAttribute(f.expando):a[f.expando]=null)}},_data:function(a,b,c){return f.data(a,b,c,!0)},acceptData:function(a){if(a.nodeName){var b=f.noData[a.nodeName.toLowerCase()];if(b)return b!==!0&&a.getAttribute("classid")===b}return!0}}),f.fn.extend({data:function(a,c){var d,e,g,h=null;if(typeof a=="undefined"){if(this.length){h=f.data(this[0]);if(this[0].nodeType===1&&!f._data(this[0],"parsedAttrs")){e=this[0].attributes;for(var i=0,j=e.length;i<j;i++)g=e[i].name,g.indexOf("data-")===0&&(g=f.camelCase(g.substring(5)),l(this[0],g,h[g]));f._data(this[0],"parsedAttrs",!0)}}return h}if(typeof a=="object")return this.each(function(){f.data(this,a)});d=a.split("."),d[1]=d[1]?"."+d[1]:"";if(c===b){h=this.triggerHandler("getData"+d[1]+"!",[d[0]]),h===b&&this.length&&(h=f.data(this[0],a),h=l(this[0],a,h));return h===b&&d[1]?this.data(d[0]):h}return this.each(function(){var b=f(this),e=[d[0],c];b.triggerHandler("setData"+d[1]+"!",e),f.data(this,a,c),b.triggerHandler("changeData"+d[1]+"!",e)})},removeData:function(a){return this.each(function(){f.removeData(this,a)})}}),f.extend({_mark:function(a,b){a&&(b=(b||"fx")+"mark",f._data(a,b,(f._data(a,b)||0)+1))},_unmark:function(a,b,c){a!==!0&&(c=b,b=a,a=!1);if(b){c=c||"fx";var d=c+"mark",e=a?0:(f._data(b,d)||1)-1;e?f._data(b,d,e):(f.removeData(b,d,!0),n(b,c,"mark"))}},queue:function(a,b,c){var d;if(a){b=(b||"fx")+"queue",d=f._data(a,b),c&&(!d||f.isArray(c)?d=f._data(a,b,f.makeArray(c)):d.push(c));return d||[]}},dequeue:function(a,b){b=b||"fx";var c=f.queue(a,b),d=c.shift(),e={};d==="inprogress"&&(d=c.shift()),d&&(b==="fx"&&c.unshift("inprogress"),f._data(a,b+".run",e),d.call(a,function(){f.dequeue(a,b)},e)),c.length||(f.removeData(a,b+"queue "+b+".run",!0),n(a,b,"queue"))}}),f.fn.extend({queue:function(a,c){typeof a!="string"&&(c=a,a="fx");if(c===b)return f.queue(this[0],a);return this.each(function(){var b=f.queue(this,a,c);a==="fx"&&b[0]!=="inprogress"&&f.dequeue(this,a)})},dequeue:function(a){return this.each(function(){f.dequeue(this,a)})},delay:function(a,b){a=f.fx?f.fx.speeds[a]||a:a,b=b||"fx";return this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,c){function m(){--h||d.resolveWith(e,[e])}typeof a!="string"&&(c=a,a=b),a=a||"fx";var d=f.Deferred(),e=this,g=e.length,h=1,i=a+"defer",j=a+"queue",k=a+"mark",l;while(g--)if(l=f.data(e[g],i,b,!0)||(f.data(e[g],j,b,!0)||f.data(e[g],k,b,!0))&&f.data(e[g],i,f.Callbacks("once memory"),!0))h++,l.add(m);m();return d.promise()}});var o=/[\n\t\r]/g,p=/\s+/,q=/\r/g,r=/^(?:button|input)$/i,s=/^(?:button|input|object|select|textarea)$/i,t=/^a(?:rea)?$/i,u=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,v=f.support.getSetAttribute,w,x,y;f.fn.extend({attr:function(a,b){return f.access(this,a,b,!0,f.attr)},removeAttr:function(a){return this.each(function(){f.removeAttr(this,a)})},prop:function(a,b){return f.access(this,a,b,!0,f.prop)},removeProp:function(a){a=f.propFix[a]||a;return this.each(function(){try{this[a]=b,delete this[a]}catch(c){}})},addClass:function(a){var b,c,d,e,g,h,i;if(f.isFunction(a))return this.each(function(b){f(this).addClass(a.call(this,b,this.className))});if(a&&typeof a=="string"){b=a.split(p);for(c=0,d=this.length;c<d;c++){e=this[c];if(e.nodeType===1)if(!e.className&&b.length===1)e.className=a;else{g=" "+e.className+" ";for(h=0,i=b.length;h<i;h++)~g.indexOf(" "+b[h]+" ")||(g+=b[h]+" ");e.className=f.trim(g)}}}return this},removeClass:function(a){var c,d,e,g,h,i,j;if(f.isFunction(a))return this.each(function(b){f(this).removeClass(a.call(this,b,this.className))});if(a&&typeof a=="string"||a===b){c=(a||"").split(p);for(d=0,e=this.length;d<e;d++){g=this[d];if(g.nodeType===1&&g.className)if(a){h=(" "+g.className+" ").replace(o," ");for(i=0,j=c.length;i<j;i++)h=h.replace(" "+c[i]+" "," ");g.className=f.trim(h)}else g.className=""}}return this},toggleClass:function(a,b){var c=typeof a,d=typeof b=="boolean";if(f.isFunction(a))return this.each(function(c){f(this).toggleClass(a.call(this,c,this.className,b),b)});return this.each(function(){if(c==="string"){var e,g=0,h=f(this),i=b,j=a.split(p);while(e=j[g++])i=d?i:!h.hasClass(e),h[i?"addClass":"removeClass"](e)}else if(c==="undefined"||c==="boolean")this.className&&f._data(this,"__className__",this.className),this.className=this.className||a===!1?"":f._data(this,"__className__")||""})},hasClass:function(a){var b=" "+a+" ",c=0,d=this.length;for(;c<d;c++)if(this[c].nodeType===1&&(" "+this[c].className+" ").replace(o," ").indexOf(b)>-1)return!0;return!1},val:function(a){var c,d,e,g=this[0];if(!arguments.length){if(g){c=f.valHooks[g.nodeName.toLowerCase()]||f.valHooks[g.type];if(c&&"get"in c&&(d=c.get(g,"value"))!==b)return d;d=g.value;return typeof d=="string"?d.replace(q,""):d==null?"":d}return b}e=f.isFunction(a);return this.each(function(d){var g=f(this),h;if(this.nodeType===1){e?h=a.call(this,d,g.val()):h=a,h==null?h="":typeof h=="number"?h+="":f.isArray(h)&&(h=f.map(h,function(a){return a==null?"":a+""})),c=f.valHooks[this.nodeName.toLowerCase()]||f.valHooks[this.type];if(!c||!("set"in c)||c.set(this,h,"value")===b)this.value=h}})}}),f.extend({valHooks:{option:{get:function(a){var b=a.attributes.value;return!b||b.specified?a.value:a.text}},select:{get:function(a){var b,c,d,e,g=a.selectedIndex,h=[],i=a.options,j=a.type==="select-one";if(g<0)return null;c=j?g:0,d=j?g+1:i.length;for(;c<d;c++){e=i[c];if(e.selected&&(f.support.optDisabled?!e.disabled:e.getAttribute("disabled")===null)&&(!e.parentNode.disabled||!f.nodeName(e.parentNode,"optgroup"))){b=f(e).val();if(j)return b;h.push(b)}}if(j&&!h.length&&i.length)return f(i[g]).val();return h},set:function(a,b){var c=f.makeArray(b);f(a).find("option").each(function(){this.selected=f.inArray(f(this).val(),c)>=0}),c.length||(a.selectedIndex=-1);return c}}},attrFn:{val:!0,css:!0,html:!0,text:!0,data:!0,width:!0,height:!0,offset:!0},attr:function(a,c,d,e){var g,h,i,j=a.nodeType;if(!a||j===3||j===8||j===2)return b;if(e&&c in f.attrFn)return f(a)[c](d);if(!("getAttribute"in a))return f.prop(a,c,d);i=j!==1||!f.isXMLDoc(a),i&&(c=c.toLowerCase(),h=f.attrHooks[c]||(u.test(c)?x:w));if(d!==b){if(d===null){f.removeAttr(a,c);return b}if(h&&"set"in h&&i&&(g=h.set(a,d,c))!==b)return g;a.setAttribute(c,""+d);return d}if(h&&"get"in h&&i&&(g=h.get(a,c))!==null)return g;g=a.getAttribute(c);return g===null?b:g},removeAttr:function(a,b){var c,d,e,g,h=0;if(a.nodeType===1){d=(b||"").split(p),g=d.length;for(;h<g;h++)e=d[h].toLowerCase(),c=f.propFix[e]||e,f.attr(a,e,""),a.removeAttribute(v?e:c),u.test(e)&&c in a&&(a[c]=!1)}},attrHooks:{type:{set:function(a,b){if(r.test(a.nodeName)&&a.parentNode)f.error("type property can't be changed");else if(!f.support.radioValue&&b==="radio"&&f.nodeName(a,"input")){var c=a.value;a.setAttribute("type",b),c&&(a.value=c);return b}}},value:{get:function(a,b){if(w&&f.nodeName(a,"button"))return w.get(a,b);return b in a?a.value:null},set:function(a,b,c){if(w&&f.nodeName(a,"button"))return w.set(a,b,c);a.value=b}}},propFix:{tabindex:"tabIndex",readonly:"readOnly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},prop:function(a,c,d){var e,g,h,i=a.nodeType;if(!a||i===3||i===8||i===2)return b;h=i!==1||!f.isXMLDoc(a),h&&(c=f.propFix[c]||c,g=f.propHooks[c]);return d!==b?g&&"set"in g&&(e=g.set(a,d,c))!==b?e:a[c]=d:g&&"get"in g&&(e=g.get(a,c))!==null?e:a[c]},propHooks:{tabIndex:{get:function(a){var c=a.getAttributeNode("tabindex");return c&&c.specified?parseInt(c.value,10):s.test(a.nodeName)||t.test(a.nodeName)&&a.href?0:b}}}}),f.attrHooks.tabindex=f.propHooks.tabIndex,x={get:function(a,c){var d,e=f.prop(a,c);return e===!0||typeof e!="boolean"&&(d=a.getAttributeNode(c))&&d.nodeValue!==!1?c.toLowerCase():b},set:function(a,b,c){var d;b===!1?f.removeAttr(a,c):(d=f.propFix[c]||c,d in a&&(a[d]=!0),a.setAttribute(c,c.toLowerCase()));return c}},v||(y={name:!0,id:!0},w=f.valHooks.button={get:function(a,c){var d;d=a.getAttributeNode(c);return d&&(y[c]?d.nodeValue!=="":d.specified)?d.nodeValue:b},set:function(a,b,d){var e=a.getAttributeNode(d);e||(e=c.createAttribute(d),a.setAttributeNode(e));return e.nodeValue=b+""}},f.attrHooks.tabindex.set=w.set,f.each(["width","height"],function(a,b){f.attrHooks[b]=f.extend(f.attrHooks[b],{set:function(a,c){if(c===""){a.setAttribute(b,"auto");return c}}})}),f.attrHooks.contenteditable={get:w.get,set:function(a,b,c){b===""&&(b="false"),w.set(a,b,c)}}),f.support.hrefNormalized||f.each(["href","src","width","height"],function(a,c){f.attrHooks[c]=f.extend(f.attrHooks[c],{get:function(a){var d=a.getAttribute(c,2);return d===null?b:d}})}),f.support.style||(f.attrHooks.style={get:function(a){return a.style.cssText.toLowerCase()||b},set:function(a,b){return a.style.cssText=""+b}}),f.support.optSelected||(f.propHooks.selected=f.extend(f.propHooks.selected,{get:function(a){var b=a.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex);return null}})),f.support.enctype||(f.propFix.enctype="encoding"),f.support.checkOn||f.each(["radio","checkbox"],function(){f.valHooks[this]={get:function(a){return a.getAttribute("value")===null?"on":a.value}}}),f.each(["radio","checkbox"],function(){f.valHooks[this]=f.extend(f.valHooks[this],{set:function(a,b){if(f.isArray(b))return a.checked=f.inArray(f(a).val(),b)>=0}})});var z=/\.(.*)$/,A=/^(?:textarea|input|select)$/i,B=/\./g,C=/ /g,D=/[^\w\s.|`]/g,E=/^([^\.]*)?(?:\.(.+))?$/,F=/\bhover(\.\S+)?/,G=/^key/,H=/^(?:mouse|contextmenu)|click/,I=/^(\w*)(?:#([\w\-]+))?(?:\.([\w\-]+))?$/,J=function(a){var b=I.exec(a);b&&
+(b[1]=(b[1]||"").toLowerCase(),b[3]=b[3]&&new RegExp("(?:^|\\s)"+b[3]+"(?:\\s|$)"));return b},K=function(a,b){return(!b[1]||a.nodeName.toLowerCase()===b[1])&&(!b[2]||a.id===b[2])&&(!b[3]||b[3].test(a.className))},L=function(a){return f.event.special.hover?a:a.replace(F,"mouseenter$1 mouseleave$1")};f.event={add:function(a,c,d,e,g){var h,i,j,k,l,m,n,o,p,q,r,s;if(!(a.nodeType===3||a.nodeType===8||!c||!d||!(h=f._data(a)))){d.handler&&(p=d,d=p.handler),d.guid||(d.guid=f.guid++),j=h.events,j||(h.events=j={}),i=h.handle,i||(h.handle=i=function(a){return typeof f!="undefined"&&(!a||f.event.triggered!==a.type)?f.event.dispatch.apply(i.elem,arguments):b},i.elem=a),c=L(c).split(" ");for(k=0;k<c.length;k++){l=E.exec(c[k])||[],m=l[1],n=(l[2]||"").split(".").sort(),s=f.event.special[m]||{},m=(g?s.delegateType:s.bindType)||m,s=f.event.special[m]||{},o=f.extend({type:m,origType:l[1],data:e,handler:d,guid:d.guid,selector:g,namespace:n.join(".")},p),g&&(o.quick=J(g),!o.quick&&f.expr.match.POS.test(g)&&(o.isPositional=!0)),r=j[m];if(!r){r=j[m]=[],r.delegateCount=0;if(!s.setup||s.setup.call(a,e,n,i)===!1)a.addEventListener?a.addEventListener(m,i,!1):a.attachEvent&&a.attachEvent("on"+m,i)}s.add&&(s.add.call(a,o),o.handler.guid||(o.handler.guid=d.guid)),g?r.splice(r.delegateCount++,0,o):r.push(o),f.event.global[m]=!0}a=null}},global:{},remove:function(a,b,c,d){var e=f.hasData(a)&&f._data(a),g,h,i,j,k,l,m,n,o,p,q;if(!!e&&!!(m=e.events)){b=L(b||"").split(" ");for(g=0;g<b.length;g++){h=E.exec(b[g])||[],i=h[1],j=h[2];if(!i){j=j?"."+j:"";for(l in m)f.event.remove(a,l+j,c,d);return}n=f.event.special[i]||{},i=(d?n.delegateType:n.bindType)||i,p=m[i]||[],k=p.length,j=j?new RegExp("(^|\\.)"+j.split(".").sort().join("\\.(?:.*\\.)?")+"(\\.|$)"):null;if(c||j||d||n.remove)for(l=0;l<p.length;l++){q=p[l];if(!c||c.guid===q.guid)if(!j||j.test(q.namespace))if(!d||d===q.selector||d==="**"&&q.selector)p.splice(l--,1),q.selector&&p.delegateCount--,n.remove&&n.remove.call(a,q)}else p.length=0;p.length===0&&k!==p.length&&((!n.teardown||n.teardown.call(a,j)===!1)&&f.removeEvent(a,i,e.handle),delete m[i])}f.isEmptyObject(m)&&(o=e.handle,o&&(o.elem=null),f.removeData(a,["events","handle"],!0))}},customEvent:{getData:!0,setData:!0,changeData:!0},trigger:function(c,d,e,g){if(!e||e.nodeType!==3&&e.nodeType!==8){var h=c.type||c,i=[],j,k,l,m,n,o,p,q,r,s;h.indexOf("!")>=0&&(h=h.slice(0,-1),k=!0),h.indexOf(".")>=0&&(i=h.split("."),h=i.shift(),i.sort());if((!e||f.event.customEvent[h])&&!f.event.global[h])return;c=typeof c=="object"?c[f.expando]?c:new f.Event(h,c):new f.Event(h),c.type=h,c.isTrigger=!0,c.exclusive=k,c.namespace=i.join("."),c.namespace_re=c.namespace?new RegExp("(^|\\.)"+i.join("\\.(?:.*\\.)?")+"(\\.|$)"):null,o=h.indexOf(":")<0?"on"+h:"",(g||!e)&&c.preventDefault();if(!e){j=f.cache;for(l in j)j[l].events&&j[l].events[h]&&f.event.trigger(c,d,j[l].handle.elem,!0);return}c.result=b,c.target||(c.target=e),d=d!=null?f.makeArray(d):[],d.unshift(c),p=f.event.special[h]||{};if(p.trigger&&p.trigger.apply(e,d)===!1)return;r=[[e,p.bindType||h]];if(!g&&!p.noBubble&&!f.isWindow(e)){s=p.delegateType||h,n=null;for(m=e.parentNode;m;m=m.parentNode)r.push([m,s]),n=m;n&&n===e.ownerDocument&&r.push([n.defaultView||n.parentWindow||a,s])}for(l=0;l<r.length;l++){m=r[l][0],c.type=r[l][1],q=(f._data(m,"events")||{})[c.type]&&f._data(m,"handle"),q&&q.apply(m,d),q=o&&m[o],q&&f.acceptData(m)&&q.apply(m,d);if(c.isPropagationStopped())break}c.type=h,c.isDefaultPrevented()||(!p._default||p._default.apply(e.ownerDocument,d)===!1)&&(h!=="click"||!f.nodeName(e,"a"))&&f.acceptData(e)&&o&&e[h]&&(h!=="focus"&&h!=="blur"||c.target.offsetWidth!==0)&&!f.isWindow(e)&&(n=e[o],n&&(e[o]=null),f.event.triggered=h,e[h](),f.event.triggered=b,n&&(e[o]=n));return c.result}},dispatch:function(c){c=f.event.fix(c||a.event);var d=(f._data(this,"events")||{})[c.type]||[],e=d.delegateCount,g=[].slice.call(arguments,0),h=!c.exclusive&&!c.namespace,i=(f.event.special[c.type]||{}).handle,j=[],k,l,m,n,o,p,q,r,s,t,u;g[0]=c,c.delegateTarget=this;if(e&&!c.target.disabled&&(!c.button||c.type!=="click"))for(m=c.target;m!=this;m=m.parentNode||this){o={},q=[];for(k=0;k<e;k++)r=d[k],s=r.selector,t=o[s],r.isPositional?t=(t||(o[s]=f(s))).index(m)>=0:t===b&&(t=o[s]=r.quick?K(m,r.quick):f(m).is(s)),t&&q.push(r);q.length&&j.push({elem:m,matches:q})}d.length>e&&j.push({elem:this,matches:d.slice(e)});for(k=0;k<j.length&&!c.isPropagationStopped();k++){p=j[k],c.currentTarget=p.elem;for(l=0;l<p.matches.length&&!c.isImmediatePropagationStopped();l++){r=p.matches[l];if(h||!c.namespace&&!r.namespace||c.namespace_re&&c.namespace_re.test(r.namespace))c.data=r.data,c.handleObj=r,n=(i||r.handler).apply(p.elem,g),n!==b&&(c.result=n,n===!1&&(c.preventDefault(),c.stopPropagation()))}}return c.result},props:"attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){a.which==null&&(a.which=b.charCode!=null?b.charCode:b.keyCode);return a}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement wheelDelta".split(" "),filter:function(a,d){var e,f,g,h=d.button,i=d.fromElement;a.pageX==null&&d.clientX!=null&&(e=a.target.ownerDocument||c,f=e.documentElement,g=e.body,a.pageX=d.clientX+(f&&f.scrollLeft||g&&g.scrollLeft||0)-(f&&f.clientLeft||g&&g.clientLeft||0),a.pageY=d.clientY+(f&&f.scrollTop||g&&g.scrollTop||0)-(f&&f.clientTop||g&&g.clientTop||0)),!a.relatedTarget&&i&&(a.relatedTarget=i===a.target?d.toElement:i),!a.which&&h!==b&&(a.which=h&1?1:h&2?3:h&4?2:0);return a}},fix:function(a){if(a[f.expando])return a;var d,e,g=a,h=f.event.fixHooks[a.type]||{},i=h.props?this.props.concat(h.props):this.props;a=f.Event(g);for(d=i.length;d;)e=i[--d],a[e]=g[e];a.target||(a.target=g.srcElement||c),a.target.nodeType===3&&(a.target=a.target.parentNode),a.metaKey===b&&(a.metaKey=a.ctrlKey);return h.filter?h.filter(a,g):a},special:{ready:{setup:f.bindReady},focus:{delegateType:"focusin",noBubble:!0},blur:{delegateType:"focusout",noBubble:!0},beforeunload:{setup:function(a,b,c){f.isWindow(this)&&(this.onbeforeunload=c)},teardown:function(a,b){this.onbeforeunload===b&&(this.onbeforeunload=null)}}},simulate:function(a,b,c,d){var e=f.extend(new f.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?f.event.trigger(e,null,b):f.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},f.event.handle=f.event.dispatch,f.removeEvent=c.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){a.detachEvent&&a.detachEvent("on"+b,c)},f.Event=function(a,b){if(!(this instanceof f.Event))return new f.Event(a,b);a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||a.returnValue===!1||a.getPreventDefault&&a.getPreventDefault()?N:M):this.type=a,b&&f.extend(this,b),this.timeStamp=a&&a.timeStamp||f.now(),this[f.expando]=!0},f.Event.prototype={preventDefault:function(){this.isDefaultPrevented=N;var a=this.originalEvent;!a||(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){this.isPropagationStopped=N;var a=this.originalEvent;!a||(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=N,this.stopPropagation()},isDefaultPrevented:M,isPropagationStopped:M,isImmediatePropagationStopped:M},f.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(a,b){f.event.special[a]=f.event.special[b]={delegateType:b,bindType:b,handle:function(a){var b=this,c=a.relatedTarget,d=a.handleObj,e=d.selector,g,h;if(!c||d.origType===a.type||c!==b&&!f.contains(b,c))g=a.type,a.type=d.origType,h=d.handler.apply(this,arguments),a.type=g;return h}}}),f.support.submitBubbles||(f.event.special.submit={setup:function(){if(f.nodeName(this,"form"))return!1;f.event.add(this,"click._submit keypress._submit",function(a){var c=a.target,d=f.nodeName(c,"input")||f.nodeName(c,"button")?c.form:b;d&&!d._submit_attached&&(f.event.add(d,"submit._submit",function(a){this.parentNode&&f.event.simulate("submit",this.parentNode,a,!0)}),d._submit_attached=!0)})},teardown:function(){if(f.nodeName(this,"form"))return!1;f.event.remove(this,"._submit")}}),f.support.changeBubbles||(f.event.special.change={setup:function(){if(A.test(this.nodeName)){if(this.type==="checkbox"||this.type==="radio")f.event.add(this,"propertychange._change",function(a){a.originalEvent.propertyName==="checked"&&(this._just_changed=!0)}),f.event.add(this,"click._change",function(a){this._just_changed&&(this._just_changed=!1,f.event.simulate("change",this,a,!0))});return!1}f.event.add(this,"beforeactivate._change",function(a){var b=a.target;A.test(b.nodeName)&&!b._change_attached&&(f.event.add(b,"change._change",function(a){this.parentNode&&!a.isSimulated&&f.event.simulate("change",this.parentNode,a,!0)}),b._change_attached=!0)})},handle:function(a){var b=a.target;if(this!==b||a.isSimulated||a.isTrigger||b.type!=="radio"&&b.type!=="checkbox")return a.handleObj.handler.apply(this,arguments)},teardown:function(){f.event.remove(this,"._change");return A.test(this.nodeName)}}),f.support.focusinBubbles||f.each({focus:"focusin",blur:"focusout"},function(a,b){var d=0,e=function(a){f.event.simulate(b,a.target,f.event.fix(a),!0)};f.event.special[b]={setup:function(){d++===0&&c.addEventListener(a,e,!0)},teardown:function(){--d===0&&c.removeEventListener(a,e,!0)}}}),f.fn.extend({on:function(a,c,d,e,g){var h,i;if(typeof a=="object"){typeof c!="string"&&(d=c,c=b);for(i in a)this.on(i,c,d,a[i],g);return this}d==null&&e==null?(e=c,d=c=b):e==null&&(typeof c=="string"?(e=d,d=b):(e=d,d=c,c=b));if(e===!1)e=M;else if(!e)return this;g===1&&(h=e,e=function(a){f().off(a);return h.apply(this,arguments)},e.guid=h.guid||(h.guid=f.guid++));return this.each(function(){f.event.add(this,a,e,d,c)})},one:function(a,b,c,d){return this.on.call(this,a,b,c,d,1)},off:function(a,c,d){if(a&&a.preventDefault&&a.handleObj){var e=a.handleObj;f(a.delegateTarget).off(e.namespace?e.type+"."+e.namespace:e.type,e.selector,e.handler);return this}if(typeof a=="object"){for(var g in a)this.off(g,c,a[g]);return this}if(c===!1||typeof c=="function")d=c,c=b;d===!1&&(d=M);return this.each(function(){f.event.remove(this,a,d,c)})},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},live:function(a,b,c){f(this.context).on(a,this.selector,b,c);return this},die:function(a,b){f(this.context).off(a,this.selector||"**",b);return this},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return arguments.length==1?this.off(a,"**"):this.off(b,a,c)},trigger:function(a,b){return this.each(function(){f.event.trigger(a,b,this)})},triggerHandler:function(a,b){if(this[0])return f.event.trigger(a,b,this[0],!0)},toggle:function(a){var b=arguments,c=a.guid||f.guid++,d=0,e=function(c){var e=(f._data(this,"lastToggle"+a.guid)||0)%d;f._data(this,"lastToggle"+a.guid,e+1),c.preventDefault();return b[e].apply(this,arguments)||!1};e.guid=c;while(d<b.length)b[d++].guid=c;return this.click(e)},hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}}),f.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){f.fn[b]=function(a,c){c==null&&(c=a,a=null);return arguments.length>0?this.bind(b,a,c):this.trigger(b)},f.attrFn&&(f.attrFn[b]=!0),G.test(b)&&(f.event.fixHooks[b]=f.event.keyHooks),H.test(b)&&(f.event.fixHooks[b]=f.event.mouseHooks)}),function(){function x(a,b,c,e,f,g){for(var h=0,i=e.length;h<i;h++){var j=e[h];if(j){var k=!1;j=j[a];while(j){if(j[d]===c){k=e[j.sizset];break}if(j.nodeType===1){g||(j[d]=c,j.sizset=h);if(typeof b!="string"){if(j===b){k=!0;break}}else if(m.filter(b,[j]).length>0){k=j;break}}j=j[a]}e[h]=k}}}function w(a,b,c,e,f,g){for(var h=0,i=e.length;h<i;h++){var j=e[h];if(j){var k=!1;j=j[a];while(j){if(j[d]===c){k=e[j.sizset];break}j.nodeType===1&&!g&&(j[d]=c,j.sizset=h);if(j.nodeName.toLowerCase()===b){k=j;break}j=j[a]}e[h]=k}}}var a=/((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,d="sizcache"+(Math.random()+"").replace(".",""),e=0,g=Object.prototype.toString,h=!1,i=!0,j=/\\/g,k=/\r\n/g,l=/\W/;[0,0].sort(function(){i=!1;return 0});var m=function(b,d,e,f){e=e||[],d=d||c;var h=d;if(d.nodeType!==1&&d.nodeType!==9)return[];if(!b||typeof b!="string")return e;var i,j,k,l,n,q,r,t,u=!0,v=m.isXML(d),w=[],x=b;do{a.exec(""),i=a.exec(x);if(i){x=i[3],w.push(i[1]);if(i[2]){l=i[3];break}}}while(i);if(w.length>1&&p.exec(b))if(w.length===2&&o.relative[w[0]])j=y(w[0]+w[1],d,f);else{j=o.relative[w[0]]?[d]:m(w.shift(),d);while(w.length)b=w.shift(),o.relative[b]&&(b+=w.shift()),j=y(b,j,f)}else{!f&&w.length>1&&d.nodeType===9&&!v&&o.match.ID.test(w[0])&&!o.match.ID.test(w[w.length-1])&&(n=m.find(w.shift(),d,v),d=n.expr?m.filter(n.expr,n.set)[0]:n.set[0]);if(d){n=f?{expr:w.pop(),set:s(f)}:m.find(w.pop(),w.length===1&&(w[0]==="~"||w[0]==="+")&&d.parentNode?d.parentNode:d,v),j=n.expr?m.filter(n.expr,n.set):n.set,w.length>0?k=s(j):u=!1;while(w.length)q=w.pop(),r=q,o.relative[q]?r=w.pop():q="",r==null&&(r=d),o.relative[q](k,r,v)}else k=w=[]}k||(k=j),k||m.error(q||b);if(g.call(k)==="[object Array]")if(!u)e.push.apply(e,k);else if(d&&d.nodeType===1)for(t=0;k[t]!=null;t++)k[t]&&(k[t]===!0||k[t].nodeType===1&&m.contains(d,k[t]))&&e.push(j[t]);else for(t=0;k[t]!=null;t++)k[t]&&k[t].nodeType===1&&e.push(j[t]);else s(k,e);l&&(m(l,h,e,f),m.uniqueSort(e));return e};m.uniqueSort=function(a){if(u){h=i,a.sort(u);if(h)for(var b=1;b<a.length;b++)a[b]===a[b-1]&&a.splice(b--,1)}return a},m.matches=function(a,b){return m(a,null,null,b)},m.matchesSelector=function(a,b){return m(b,null,null,[a]).length>0},m.find=function(a,b,c){var d,e,f,g,h,i;if(!a)return[];for(e=0,f=o.order.length;e<f;e++){h=o.order[e];if(g=o.leftMatch[h].exec(a)){i=g[1],g.splice(1,1);if(i.substr(i.length-1)!=="\\"){g[1]=(g[1]||"").replace(j,""),d=o.find[h](g,b,c);if(d!=null){a=a.replace(o.match[h],"");break}}}}d||(d=typeof b.getElementsByTagName!="undefined"?b.getElementsByTagName("*"):[]);return{set:d,expr:a}},m.filter=function(a,c,d,e){var f,g,h,i,j,k,l,n,p,q=a,r=[],s=c,t=c&&c[0]&&m.isXML(c[0]);while(a&&c.length){for(h in o.filter)if((f=o.leftMatch[h].exec(a))!=null&&f[2]){k=o.filter[h],l=f[1],g=!1,f.splice(1,1);if(l.substr(l.length-1)==="\\")continue;s===r&&(r=[]);if(o.preFilter[h]){f=o.preFilter[h](f,s,d,r,e,t);if(!f)g=i=!0;else if(f===!0)continue}if(f)for(n=0;(j=s[n])!=null;n++)j&&(i=k(j,f,n,s),p=e^i,d&&i!=null?p?g=!0:s[n]=!1:p&&(r.push(j),g=!0));if(i!==b){d||(s=r),a=a.replace(o.match[h],"");if(!g)return[];break}}if(a===q)if(g==null)m.error(a);else break;q=a}return s},m.error=function(a){throw"Syntax error, unrecognized expression: "+a};var n=m.getText=function(a){var b,c,d=a.nodeType,e="";if(d){if(d===1){if(typeof a.textContent=="string")return a.textContent;if(typeof a.innerText=="string")return a.innerText.replace(k,"");for(a=a.firstChild;a;a=a.nextSibling)e+=n(a)}else if(d===3||d===4)return a.nodeValue}else for(b=0;c=a[b];b++)c.nodeType!==8&&(e+=n(c));return e},o=m.selectors={order:["ID","NAME","TAG"],match:{ID:/#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,CLASS:/\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,NAME:/\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,ATTR:/\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,TAG:/^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,CHILD:/:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,POS:/:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,PSEUDO:/:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/},leftMatch:{},attrMap:{"class":"className","for":"htmlFor"},attrHandle:{href:function(a){return a.getAttribute("href")},type:function(a){return a.getAttribute("type")}},relative:{"+":function(a,b){var c=typeof b=="string",d=c&&!l.test(b),e=c&&!d;d&&(b=b.toLowerCase());for(var f=0,g=a.length,h;f<g;f++)if(h=a[f]){while((h=h.previousSibling)&&h.nodeType!==1);a[f]=e||h&&h.nodeName.toLowerCase()===b?h||!1:h===b}e&&m.filter(b,a,!0)},">":function(a,b){var c,d=typeof b=="string",e=0,f=a.length;if(d&&!l.test(b)){b=b.toLowerCase();for(;e<f;e++){c=a[e];if(c){var g=c.parentNode;a[e]=g.nodeName.toLowerCase()===b?g:!1}}}else{for(;e<f;e++)c=a[e],c&&(a[e]=d?c.parentNode:c.parentNode===b);d&&m.filter(b,a,!0)}},"":function(a,b,c){var d,f=e++,g=x;typeof b=="string"&&!l.test(b)&&(b=b.toLowerCase(),d=b,g=w),g("parentNode",b,f,a,d,c)},"~":function(a,b,c){var d,f=e++,g=x;typeof b=="string"&&!l.test(b)&&(b=b.toLowerCase(),d=b,g=w),g("previousSibling",b,f,a,d,c)}},find:{ID:function(a,b,c){if(typeof b.getElementById!="undefined"&&!c){var d=b.getElementById(a[1]);return d&&d.parentNode?[d]:[]}},NAME:function(a,b){if(typeof b.getElementsByName!="undefined"){var c=[],d=b.getElementsByName(a[1]);for(var e=0,f=d.length;e<f;e++)d[e].getAttribute("name")===a[1]&&c.push(d[e]);return c.length===0?null:c}},TAG:function(a,b){if(typeof b.getElementsByTagName!="undefined")return b.getElementsByTagName(a[1])}},preFilter:{CLASS:function(a,b,c,d,e,f){a=" "+a[1].replace(j,"")+" ";if(f)return a;for(var g=0,h;(h=b[g])!=null;g++)h&&(e^(h.className&&(" "+h.className+" ").replace(/[\t\n\r]/g," ").indexOf(a)>=0)?c||d.push(h):c&&(b[g]=!1));return!1},ID:function(a){return a[1].replace(j,"")},TAG:function(a,b){return a[1].replace(j,"").toLowerCase()},CHILD:function(a){if(a[1]==="nth"){a[2]||m.error(a[0]),a[2]=a[2].replace(/^\+|\s*/g,"");var b=/(-?)(\d*)(?:n([+\-]?\d*))?/.exec(a[2]==="even"&&"2n"||a[2]==="odd"&&"2n+1"||!/\D/.test(a[2])&&"0n+"+a[2]||a[2]);a[2]=b[1]+(b[2]||1)-0,a[3]=b[3]-0}else a[2]&&m.error(a[0]);a[0]=e++;return a},ATTR:function(a,b,c,d,e,f){var g=a[1]=a[1].replace(j,"");!f&&o.attrMap[g]&&(a[1]=o.attrMap[g]),a[4]=(a[4]||a[5]||"").replace(j,""),a[2]==="~="&&(a[4]=" "+a[4]+" ");return a},PSEUDO:function(b,c,d,e,f){if(b[1]==="not")if((a.exec(b[3])||"").length>1||/^\w/.test(b[3]))b[3]=m(b[3],null,null,c);else{var g=m.filter(b[3],c,d,!0^f);d||e.push.apply(e,g);return!1}else if(o.match.POS.test(b[0])||o.match.CHILD.test(b[0]))return!0;return b},POS:function(a){a.unshift(!0);return a}},filters:{enabled:function(a){return a.disabled===!1&&a.type!=="hidden"},disabled:function(a){return a.disabled===!0},checked:function(a){return a.checked===!0},selected:function(a){a.parentNode&&a.parentNode.selectedIndex;return a.selected===!0},parent:function(a){return!!a.firstChild},empty:function(a){return!a.firstChild},has:function(a,b,c){return!!m(c[3],a).length},header:function(a){return/h\d/i.test(a.nodeName)},text:function(a){var b=a.getAttribute("type"),c=a.type;return a.nodeName.toLowerCase()==="input"&&"text"===c&&(b===c||b===null)},radio:function(a){return a.nodeName.toLowerCase()==="input"&&"radio"===a.type},checkbox:function(a){return a.nodeName.toLowerCase()==="input"&&"checkbox"===a.type},file:function(a){return a.nodeName.toLowerCase()==="input"&&"file"===a.type},password:function(a){return a.nodeName.toLowerCase()==="input"&&"password"===a.type},submit:function(a){var b=a.nodeName.toLowerCase();return(b==="input"||b==="button")&&"submit"===a.type},image:function(a){return a.nodeName.toLowerCase()==="input"&&"image"===a.type},reset:function(a){var b=a.nodeName.toLowerCase();return(b==="input"||b==="button")&&"reset"===a.type},button:function(a){var b=a.nodeName.toLowerCase();return b==="input"&&"button"===a.type||b==="button"},input:function(a){return/input|select|textarea|button/i.test(a.nodeName)},focus:function(a){return a===a.ownerDocument.activeElement}},setFilters:{first:function(a,b){return b===0},last:function(a,b,c,d){return b===d.length-1},even:function(a,b){return b%2===0},odd:function(a,b){return b%2===1},lt:function(a,b,c){return b<c[3]-0},gt:function(a,b,c){return b>c[3]-0},nth:function(a,b,c){return c[3]-0===b},eq:function(a,b,c){return c[3]-0===b}},filter:{PSEUDO:function(a,b,c,d){var e=b[1],f=o.filters[e];if(f)return f(a,c,b,d);if(e==="contains")return(a.textContent||a.innerText||n([a])||"").indexOf(b[3])>=0;if(e==="not"){var g=b[3];for(var h=0,i=g.length;h<i;h++)if(g[h]===a)return!1;return!0}m.error(e)},CHILD:function(a,b){var c,e,f,g,h,i,j,k=b[1],l=a;switch(k){case"only":case"first":while(l=l.previousSibling)if(l.nodeType===1)return!1;if(k==="first")return!0;l=a;case"last":while(l=l.nextSibling)if(l.nodeType===1)return!1;return!0;case"nth":c=b[2],e=b[3];if(c===1&&e===0)return!0;f=b[0],g=a.parentNode;if(g&&(g[d]!==f||!a.nodeIndex)){i=0;for(l=g.firstChild;l;l=l.nextSibling)l.nodeType===1&&(l.nodeIndex=++i);g[d]=f}j=a.nodeIndex-e;return c===0?j===0:j%c===0&&j/c>=0}},ID:function(a,b){return a.nodeType===1&&a.getAttribute("id")===b},TAG:function(a,b){return b==="*"&&a.nodeType===1||!!a.nodeName&&a.nodeName.toLowerCase()===b},CLASS:function(a,b){return(" "+(a.className||a.getAttribute("class"))+" ").indexOf(b)>-1},ATTR:function(a,b){var c=b[1],d=m.attr?m.attr(a,c):o.attrHandle[c]?o.attrHandle[c](a):a[c]!=null?a[c]:a.getAttribute(c),e=d+"",f=b[2],g=b[4];return d==null?f==="!=":!f&&m.attr?d!=null:f==="="?e===g:f==="*="?e.indexOf(g)>=0:f==="~="?(" "+e+" ").indexOf(g)>=0:g?f==="!="?e!==g:f==="^="?e.indexOf(g)===0:f==="$="?e.substr(e.length-g.length)===g:f==="|="?e===g||e.substr(0,g.length+1)===g+"-":!1:e&&d!==!1},POS:function(a,b,c,d){var e=b[2],f=o.setFilters[e];if(f)return f(a,c,b,d)}}},p=o.match.POS,q=function(a,b){return"\\"+(b-0+1)};for(var r in o.match)o.match[r]=new RegExp(o.match[r].source+/(?![^\[]*\])(?![^\(]*\))/.source),o.leftMatch[r]=new RegExp(/(^(?:.|\r|\n)*?)/.source+o.match[r].source.replace(/\\(\d+)/g,q));var s=function(a,b){a=Array.prototype.slice.call(a,0);if(b){b.push.apply(b,a);return b}return a};try{Array.prototype.slice.call(c.documentElement.childNodes,0)[0].nodeType}catch(t){s=function(a,b){var c=0,d=b||[];if(g.call(a)==="[object Array]")Array.prototype.push.apply(d,a);else if(typeof a.length=="number")for(var e=a.length;c<e;c++)d.push(a[c]);else for(;a[c];c++)d.push(a[c]);return d}}var u,v;c.documentElement.compareDocumentPosition?u=function(a,b){if(a===b){h=!0;return 0}if(!a.compareDocumentPosition||!b.compareDocumentPosition)return a.compareDocumentPosition?-1:1;return a.compareDocumentPosition(b)&4?-1:1}:(u=function(a,b){if(a===b){h=!0;return 0}if(a.sourceIndex&&b.sourceIndex)return a.sourceIndex-b.sourceIndex;var c,d,e=[],f=[],g=a.parentNode,i=b.parentNode,j=g;if(g===i)return v(a,b);if(!g)return-1;if(!i)return 1;while(j)e.unshift(j),j=j.parentNode;j=i;while(j)f.unshift(j),j=j.parentNode;c=e.length,d=f.length;for(var k=0;k<c&&k<d;k++)if(e[k]!==f[k])return v(e[k],f[k]);return k===c?v(a,f[k],-1):v(e[k],b,1)},v=function(a,b,c){if(a===b)return c;var d=a.nextSibling;while(d){if(d===b)return-1;d=d.nextSibling}return 1}),function(){var a=c.createElement("div"),d="script"+(new Date).getTime(),e=c.documentElement;a.innerHTML="<a name='"+d+"'/>",e.insertBefore(a,e.firstChild),c.getElementById(d)&&(o.find.ID=function(a,c,d){if(typeof c.getElementById!="undefined"&&!d){var e=c.getElementById(a[1]);return e?e.id===a[1]||typeof e.getAttributeNode!="undefined"&&e.getAttributeNode("id").nodeValue===a[1]?[e]:b:[]}},o.filter.ID=function(a,b){var c=typeof a.getAttributeNode!="undefined"&&a.getAttributeNode("id");return a.nodeType===1&&c&&c.nodeValue===b}),e.removeChild(a),e=a=null}(),function(){var a=c.createElement("div");a.appendChild(c.createComment("")),a.getElementsByTagName("*").length>0&&(o.find.TAG=function(a,b){var c=b.getElementsByTagName(a[1]);if(a[1]==="*"){var d=[];for(var e=0;c[e];e++)c[e].nodeType===1&&d.push(c[e]);c=d}return c}),a.innerHTML="<a href='#'></a>",a.firstChild&&typeof a.firstChild.getAttribute!="undefined"&&a.firstChild.getAttribute("href")!=="#"&&(o.attrHandle.href=function(a){return a.getAttribute("href",2)}),a=null}(),c.querySelectorAll&&function(){var a=m,b=c.createElement("div"),d="__sizzle__";b.innerHTML="<p class='TEST'></p>";if(!b.querySelectorAll||b.querySelectorAll(".TEST").length!==0){m=function(b,e,f,g){e=e||c;if(!g&&!m.isXML(e)){var h=/^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec(b);if(h&&(e.nodeType===1||e.nodeType===9)){if(h[1])return s(e.getElementsByTagName(b),f);if(h[2]&&o.find.CLASS&&e.getElementsByClassName)return s(e.getElementsByClassName(h[2]),f)}if(e.nodeType===9){if(b==="body"&&e.body)return s([e.body],f);if(h&&h[3]){var i=e.getElementById(h[3]);if(!i||!i.parentNode)return s([],f);if(i.id===h[3])return s([i],f)}try{return s(e.querySelectorAll(b),f)}catch(j){}}else if(e.nodeType===1&&e.nodeName.toLowerCase()!=="object"){var k=e,l=e.getAttribute("id"),n=l||d,p=e.parentNode,q=/^\s*[+~]/.test(b);l?n=n.replace(/'/g,"\\$&"):e.setAttribute("id",n),q&&p&&(e=e.parentNode);try{if(!q||p)return s(e.querySelectorAll("[id='"+n+"'] "+b),f)}catch(r){}finally{l||k.removeAttribute("id")}}}return a(b,e,f,g)};for(var e in a)m[e]=a[e];b=null}}(),function(){var a=c.documentElement,b=a.matchesSelector||a.mozMatchesSelector||a.webkitMatchesSelector||a.msMatchesSelector;if(b){var d=!b.call(c.createElement("div"),"div"),e=!1;try{b.call(c.documentElement,"[test!='']:sizzle")}catch(f){e=!0}m.matchesSelector=function(a,c){c=c.replace(/\=\s*([^'"\]]*)\s*\]/g,"='$1']");if(!m.isXML(a))try{if(e||!o.match.PSEUDO.test(c)&&!/!=/.test(c)){var f=b.call(a,c);if(f||!d||a.document&&a.document.nodeType!==11)return f}}catch(g){}return m(c,null,null,[a]).length>0}}}(),function(){var a=c.createElement("div");a.innerHTML="<div class='test e'></div><div class='test'></div>";if(!!a.getElementsByClassName&&a.getElementsByClassName("e").length!==0){a.lastChild.className="e";if(a.getElementsByClassName("e").length===1)return;o.order.splice(1,0,"CLASS"),o.find.CLASS=function(a,b,c){if(typeof b.getElementsByClassName!="undefined"&&!c)return b.getElementsByClassName(a[1])},a=null}}(),c.documentElement.contains?m.contains=function(a,b){return a!==b&&(a.contains?a.contains(b):!0)}:c.documentElement.compareDocumentPosition?m.contains=function(a,b){return!!(a.compareDocumentPosition(b)&16)}:m.contains=function(){return!1},m.isXML=function(a){var b=(a?a.ownerDocument||a:0).documentElement;return b?b.nodeName!=="HTML":!1};var y=function(a,b,c){var d,e=[],f="",g=b.nodeType?[b]:b;while(d=o.match.PSEUDO.exec(a))f+=d[0],a=a.replace(o.match.PSEUDO,"");a=o.relative[a]?a+"*":a;for(var h=0,i=g.length;h<i;h++)m(a,g[h],e,c);return m.filter(f,e)};m.attr=f.attr,m.selectors.attrMap={},f.find=m,f.expr=m.selectors,f.expr[":"]=f.expr.filters,f.unique=m.uniqueSort,f.text=m.getText,f.isXMLDoc=m.isXML,f.contains=m.contains}();var O=/Until$/,P=/^(?:parents|prevUntil|prevAll)/,Q=/,/,R=/^.[^:#\[\.,]*$/,S=Array.prototype.slice,T=f.expr.match.POS,U={children:!0,contents:!0,next:!0,prev:!0};f.fn.extend({find:function(a){var b=this,c,d;if(typeof a!="string")return f(a).filter(function(){for(c=0,d=b.length;c<d;c++)if(f.contains(b[c],this))return!0});var e=this.pushStack("","find",a),g,h,i;for(c=0,d=this.length;c<d;c++){g=e.length,f.find(a,this[c],e);if(c>0)for(h=g;h<e.length;h++)for(i=0;i<g;i++)if(e[i]===e[h]){e.splice(h--,1);break}}return e},has:function(a){var b=f(a);return this.filter(function(){for(var a=0,c=b.length;a<c;a++)if(f.contains(this,b[a]))return!0})},not:function(a){return this.pushStack(W(this,a,!1),"not",a)},filter:function(a){return this.pushStack(W(this,a,!0),"filter",a)},is:function(a){return!!a&&(typeof a=="string"?T.test(a)?f(a,this.context).index(this[0])>=0:f.filter(a,this).length>0:this.filter(a).length>0)},closest:function(a,b){var c=[],d,e,g=this[0];if(f.isArray(a)){var h=1;while(g&&g.ownerDocument&&g!==b){for(d=0;d<a.length;d++)f(g).is(a[d])&&c.push({selector:a[d],elem:g,level:h});g=g.parentNode,h++}return c}var i=T.test(a)||typeof a!="string"?f(a,b||this.context):0;for(d=0,e=this.length;d<e;d++){g=this[d];while(g){if(i?i.index(g)>-1:f.find.matchesSelector(g,a)){c.push(g);break}g=g.parentNode;if(!g||!g.ownerDocument||g===b||g.nodeType===11)break}}c=c.length>1?f.unique(c):c;return this.pushStack(c,"closest",a)},index:function(a){if(!a)return this[0]&&this[0].parentNode?this.prevAll().length:-1;if(typeof a=="string")return f.inArray(this[0],f(a));return f.inArray(a.jquery?a[0]:a,this)},add:function(a,b){var c=typeof a=="string"?f(a,b):f.makeArray(a&&a.nodeType?[a]:a),d=f.merge(this.get(),c);return this.pushStack(V(c[0])||V(d[0])?d:f.unique(d))},andSelf:function(){return this.add(this.prevObject)}}),f.each({parent:function(a){var b=a.parentNode;return b&&b.nodeType!==11?b:null},parents:function(a){return f.dir(a,"parentNode")},parentsUntil:function(a,b,c){return f.dir(a,"parentNode",c)},next:function(a){return f.nth(a,2,"nextSibling")},prev:function(a){return f.nth(a,2,"previousSibling")},nextAll:function(a){return f.dir(a,"nextSibling")},prevAll:function(a){return f.dir(a,"previousSibling")},nextUntil:function(a,b,c){return f.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return f.dir(a,"previousSibling",c)},siblings:function(a){return f.sibling(a.parentNode.firstChild,a)},children:function(a){return f.sibling(a.firstChild)},contents:function(a){return f.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:f.makeArray(a.childNodes)}},function(a,b){f.fn[a]=function(c,d){var e=f.map(this,b,c),g=S.call(arguments);O.test(a)||(d=c),d&&typeof d=="string"&&(e=f.filter(d,e)),e=this.length>1&&!U[a]?f.unique(e):e,(this.length>1||Q.test(d))&&P.test(a)&&(e=e.reverse());return this.pushStack(e,a,g.join(","))}}),f.extend({filter:function(a,b,c){c&&(a=":not("+a+")");return b.length===1?f.find.matchesSelector(b[0],a)?[b[0]]:[]:f.find.matches(a,b)},dir:function(a,c,d){var e=[],g=a[c];while(g&&g.nodeType!==9&&(d===b||g.nodeType!==1||!f(g).is(d)))g.nodeType===1&&e.push(g),g=g[c];return e},nth:function(a,b,c,d){b=b||1;var e=0;for(;a;a=a[c])if(a.nodeType===1&&++e===b)break;return a},sibling:function(a,b){var c=[];for(;a;a=a.nextSibling)a.nodeType===1&&a!==b&&c.push(a);return c}});var Y="abbr article aside audio canvas datalist details figcaption figure footer header hgroup mark meter nav output progress section summary time video",Z=/ jQuery\d+="(?:\d+|null)"/g,$=/^\s+/,_=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,ba=/<([\w:]+)/,bb=/<tbody/i,bc=/<|&#?\w+;/,bd=/<(?:script|style)/i,be=/<(?:script|object|embed|option|style)/i,bf=new RegExp("<(?:"+Y.replace(" ","|")+")","i"),bg=/checked\s*(?:[^=]|=\s*.checked.)/i,bh=/\/(java|ecma)script/i,bi=/^\s*<!(?:\[CDATA\[|\-\-)/,bj={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],area:[1,"<map>","</map>"],_default:[0,"",""]},bk=X(c);bj.optgroup=bj.option,bj.tbody=bj.tfoot=bj.colgroup=bj.caption=bj.thead,bj.th=bj.td,f.support.htmlSerialize||(bj._default=[1,"div<div>","</div>"]),f.fn.extend({text:function(a){if(f.isFunction(a))return this.each(function(b){var c=f(this);c.text(a.call(this,b,c.text()))});if(typeof a!="object"&&a!==b)return this.empty().append((this[0]&&this[0].ownerDocument||c).createTextNode(a));return f.text(this)},wrapAll:function(a){if(f.isFunction(a))return this.each(function(b){f(this).wrapAll(a.call(this,b))});if(this[0]){var b=f(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&a.firstChild.nodeType===1)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){if(f.isFunction(a))return this.each(function(b){f(this).wrapInner(a.call(this,b))});return this.each(function(){var b=f(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){return this.each(function(){f(this).wrapAll(a)})},unwrap:function(){return this.parent().each(function(){f.nodeName(this,"body")||f(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(a){this.nodeType===1&&this.appendChild(a)})},prepend:function(){return this.domManip(arguments,!0,function(a){this.nodeType===1&&this.insertBefore(a,this.firstChild)})},before:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this)});if(arguments.length){var a=f(arguments[0]);a.push.apply(a,this.toArray());return this.pushStack(a,"before",arguments)}},after:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this.nextSibling)});if(arguments.length){var a=this.pushStack(this,"after"
+,arguments);a.push.apply(a,f(arguments[0]).toArray());return a}},remove:function(a,b){for(var c=0,d;(d=this[c])!=null;c++)if(!a||f.filter(a,[d]).length)!b&&d.nodeType===1&&(f.cleanData(d.getElementsByTagName("*")),f.cleanData([d])),d.parentNode&&d.parentNode.removeChild(d);return this},empty:function(){for(var a=0,b;(b=this[a])!=null;a++){b.nodeType===1&&f.cleanData(b.getElementsByTagName("*"));while(b.firstChild)b.removeChild(b.firstChild)}return this},clone:function(a,b){a=a==null?!1:a,b=b==null?a:b;return this.map(function(){return f.clone(this,a,b)})},html:function(a){if(a===b)return this[0]&&this[0].nodeType===1?this[0].innerHTML.replace(Z,""):null;if(typeof a=="string"&&!bd.test(a)&&(f.support.leadingWhitespace||!$.test(a))&&!bj[(ba.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(_,"<$1></$2>");try{for(var c=0,d=this.length;c<d;c++)this[c].nodeType===1&&(f.cleanData(this[c].getElementsByTagName("*")),this[c].innerHTML=a)}catch(e){this.empty().append(a)}}else f.isFunction(a)?this.each(function(b){var c=f(this);c.html(a.call(this,b,c.html()))}):this.empty().append(a);return this},replaceWith:function(a){if(this[0]&&this[0].parentNode){if(f.isFunction(a))return this.each(function(b){var c=f(this),d=c.html();c.replaceWith(a.call(this,b,d))});typeof a!="string"&&(a=f(a).detach());return this.each(function(){var b=this.nextSibling,c=this.parentNode;f(this).remove(),b?f(b).before(a):f(c).append(a)})}return this.length?this.pushStack(f(f.isFunction(a)?a():a),"replaceWith",a):this},detach:function(a){return this.remove(a,!0)},domManip:function(a,c,d){var e,g,h,i,j=a[0],k=[];if(!f.support.checkClone&&arguments.length===3&&typeof j=="string"&&bg.test(j))return this.each(function(){f(this).domManip(a,c,d,!0)});if(f.isFunction(j))return this.each(function(e){var g=f(this);a[0]=j.call(this,e,c?g.html():b),g.domManip(a,c,d)});if(this[0]){i=j&&j.parentNode,f.support.parentNode&&i&&i.nodeType===11&&i.childNodes.length===this.length?e={fragment:i}:e=f.buildFragment(a,this,k),h=e.fragment,h.childNodes.length===1?g=h=h.firstChild:g=h.firstChild;if(g){c=c&&f.nodeName(g,"tr");for(var l=0,m=this.length,n=m-1;l<m;l++)d.call(c?bl(this[l],g):this[l],e.cacheable||m>1&&l<n?f.clone(h,!0,!0):h)}k.length&&f.each(k,br)}return this}}),f.buildFragment=function(a,b,d){var e,g,h,i,j=a[0];b&&b[0]&&(i=b[0].ownerDocument||b[0]),i.createDocumentFragment||(i=c),a.length===1&&typeof j=="string"&&j.length<512&&i===c&&j.charAt(0)==="<"&&!be.test(j)&&(f.support.checkClone||!bg.test(j))&&!f.support.unknownElems&&bf.test(j)&&(g=!0,h=f.fragments[j],h&&h!==1&&(e=h)),e||(e=i.createDocumentFragment(),f.clean(a,i,e,d)),g&&(f.fragments[j]=h?e:1);return{fragment:e,cacheable:g}},f.fragments={},f.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){f.fn[a]=function(c){var d=[],e=f(c),g=this.length===1&&this[0].parentNode;if(g&&g.nodeType===11&&g.childNodes.length===1&&e.length===1){e[b](this[0]);return this}for(var h=0,i=e.length;h<i;h++){var j=(h>0?this.clone(!0):this).get();f(e[h])[b](j),d=d.concat(j)}return this.pushStack(d,a,e.selector)}}),f.extend({clone:function(a,b,c){var d=a.cloneNode(!0),e,g,h;if((!f.support.noCloneEvent||!f.support.noCloneChecked)&&(a.nodeType===1||a.nodeType===11)&&!f.isXMLDoc(a)){bn(a,d),e=bo(a),g=bo(d);for(h=0;e[h];++h)g[h]&&bn(e[h],g[h])}if(b){bm(a,d);if(c){e=bo(a),g=bo(d);for(h=0;e[h];++h)bm(e[h],g[h])}}e=g=null;return d},clean:function(a,b,d,e){var g;b=b||c,typeof b.createElement=="undefined"&&(b=b.ownerDocument||b[0]&&b[0].ownerDocument||c);var h=[],i;for(var j=0,k;(k=a[j])!=null;j++){typeof k=="number"&&(k+="");if(!k)continue;if(typeof k=="string")if(!bc.test(k))k=b.createTextNode(k);else{k=k.replace(_,"<$1></$2>");var l=(ba.exec(k)||["",""])[1].toLowerCase(),m=bj[l]||bj._default,n=m[0],o=b.createElement("div");b===c?bk.appendChild(o):X(b).appendChild(o),o.innerHTML=m[1]+k+m[2];while(n--)o=o.lastChild;if(!f.support.tbody){var p=bb.test(k),q=l==="table"&&!p?o.firstChild&&o.firstChild.childNodes:m[1]==="<table>"&&!p?o.childNodes:[];for(i=q.length-1;i>=0;--i)f.nodeName(q[i],"tbody")&&!q[i].childNodes.length&&q[i].parentNode.removeChild(q[i])}!f.support.leadingWhitespace&&$.test(k)&&o.insertBefore(b.createTextNode($.exec(k)[0]),o.firstChild),k=o.childNodes}var r;if(!f.support.appendChecked)if(k[0]&&typeof (r=k.length)=="number")for(i=0;i<r;i++)bq(k[i]);else bq(k);k.nodeType?h.push(k):h=f.merge(h,k)}if(d){g=function(a){return!a.type||bh.test(a.type)};for(j=0;h[j];j++)if(e&&f.nodeName(h[j],"script")&&(!h[j].type||h[j].type.toLowerCase()==="text/javascript"))e.push(h[j].parentNode?h[j].parentNode.removeChild(h[j]):h[j]);else{if(h[j].nodeType===1){var s=f.grep(h[j].getElementsByTagName("script"),g);h.splice.apply(h,[j+1,0].concat(s))}d.appendChild(h[j])}}return h},cleanData:function(a){var b,c,d=f.cache,e=f.event.special,g=f.support.deleteExpando;for(var h=0,i;(i=a[h])!=null;h++){if(i.nodeName&&f.noData[i.nodeName.toLowerCase()])continue;c=i[f.expando];if(c){b=d[c];if(b&&b.events){for(var j in b.events)e[j]?f.event.remove(i,j):f.removeEvent(i,j,b.handle);b.handle&&(b.handle.elem=null)}g?delete i[f.expando]:i.removeAttribute&&i.removeAttribute(f.expando),delete d[c]}}}});var bs=/alpha\([^)]*\)/i,bt=/opacity=([^)]*)/,bu=/([A-Z]|^ms)/g,bv=/^-?\d+(?:px)?$/i,bw=/^-?\d/,bx=/^([\-+])=([\-+.\de]+)/,by={position:"absolute",visibility:"hidden",display:"block"},bz=["Left","Right"],bA=["Top","Bottom"],bB,bC,bD;f.fn.css=function(a,c){if(arguments.length===2&&c===b)return this;return f.access(this,a,c,!0,function(a,c,d){return d!==b?f.style(a,c,d):f.css(a,c)})},f.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=bB(a,"opacity","opacity");return c===""?"1":c}return a.style.opacity}}},cssNumber:{fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":f.support.cssFloat?"cssFloat":"styleFloat"},style:function(a,c,d,e){if(!!a&&a.nodeType!==3&&a.nodeType!==8&&!!a.style){var g,h,i=f.camelCase(c),j=a.style,k=f.cssHooks[i];c=f.cssProps[i]||i;if(d===b){if(k&&"get"in k&&(g=k.get(a,!1,e))!==b)return g;return j[c]}h=typeof d,h==="string"&&(g=bx.exec(d))&&(d=+(g[1]+1)*+g[2]+parseFloat(f.css(a,c)),h="number");if(d==null||h==="number"&&isNaN(d))return;h==="number"&&!f.cssNumber[i]&&(d+="px");if(!k||!("set"in k)||(d=k.set(a,d))!==b)try{j[c]=d}catch(l){}}},css:function(a,c,d){var e,g;c=f.camelCase(c),g=f.cssHooks[c],c=f.cssProps[c]||c,c==="cssFloat"&&(c="float");if(g&&"get"in g&&(e=g.get(a,!0,d))!==b)return e;if(bB)return bB(a,c)},swap:function(a,b,c){var d={};for(var e in b)d[e]=a.style[e],a.style[e]=b[e];c.call(a);for(e in b)a.style[e]=d[e]}}),f.curCSS=f.css,f.each(["height","width"],function(a,b){f.cssHooks[b]={get:function(a,c,d){var e;if(c){if(a.offsetWidth!==0)return bE(a,b,d);f.swap(a,by,function(){e=bE(a,b,d)});return e}},set:function(a,b){if(!bv.test(b))return b;b=parseFloat(b);if(b>=0)return b+"px"}}}),f.support.opacity||(f.cssHooks.opacity={get:function(a,b){return bt.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?parseFloat(RegExp.$1)/100+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle,e=f.isNumeric(b)?"alpha(opacity="+b*100+")":"",g=d&&d.filter||c.filter||"";c.zoom=1;if(b>=1&&f.trim(g.replace(bs,""))===""){c.removeAttribute("filter");if(d&&!d.filter)return}c.filter=bs.test(g)?g.replace(bs,e):g+" "+e}}),f(function(){f.support.reliableMarginRight||(f.cssHooks.marginRight={get:function(a,b){var c;f.swap(a,{display:"inline-block"},function(){b?c=bB(a,"margin-right","marginRight"):c=a.style.marginRight});return c}})}),c.defaultView&&c.defaultView.getComputedStyle&&(bC=function(a,c){var d,e,g;c=c.replace(bu,"-$1").toLowerCase();if(!(e=a.ownerDocument.defaultView))return b;if(g=e.getComputedStyle(a,null))d=g.getPropertyValue(c),d===""&&!f.contains(a.ownerDocument.documentElement,a)&&(d=f.style(a,c));return d}),c.documentElement.currentStyle&&(bD=function(a,b){var c,d,e,f=a.currentStyle&&a.currentStyle[b],g=a.style;f===null&&g&&(e=g[b])&&(f=e),!bv.test(f)&&bw.test(f)&&(c=g.left,d=a.runtimeStyle&&a.runtimeStyle.left,d&&(a.runtimeStyle.left=a.currentStyle.left),g.left=b==="fontSize"?"1em":f||0,f=g.pixelLeft+"px",g.left=c,d&&(a.runtimeStyle.left=d));return f===""?"auto":f}),bB=bC||bD,f.expr&&f.expr.filters&&(f.expr.filters.hidden=function(a){var b=a.offsetWidth,c=a.offsetHeight;return b===0&&c===0||!f.support.reliableHiddenOffsets&&(a.style&&a.style.display||f.css(a,"display"))==="none"},f.expr.filters.visible=function(a){return!f.expr.filters.hidden(a)});var bF=/%20/g,bG=/\[\]$/,bH=/\r?\n/g,bI=/#.*$/,bJ=/^(.*?):[ \t]*([^\r\n]*)\r?$/mg,bK=/^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,bL=/^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,bM=/^(?:GET|HEAD)$/,bN=/^\/\//,bO=/\?/,bP=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,bQ=/^(?:select|textarea)/i,bR=/\s+/,bS=/([?&])_=[^&]*/,bT=/^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/,bU=f.fn.load,bV={},bW={},bX,bY,bZ=["*/"]+["*"];try{bX=e.href}catch(b$){bX=c.createElement("a"),bX.href="",bX=bX.href}bY=bT.exec(bX.toLowerCase())||[],f.fn.extend({load:function(a,c,d){if(typeof a!="string"&&bU)return bU.apply(this,arguments);if(!this.length)return this;var e=a.indexOf(" ");if(e>=0){var g=a.slice(e,a.length);a=a.slice(0,e)}var h="GET";c&&(f.isFunction(c)?(d=c,c=b):typeof c=="object"&&(c=f.param(c,f.ajaxSettings.traditional),h="POST"));var i=this;f.ajax({url:a,type:h,dataType:"html",data:c,complete:function(a,b,c){c=a.responseText,a.isResolved()&&(a.done(function(a){c=a}),i.html(g?f("<div>").append(c.replace(bP,"")).find(g):c)),d&&i.each(d,[c,b,a])}});return this},serialize:function(){return f.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?f.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||bQ.test(this.nodeName)||bK.test(this.type))}).map(function(a,b){var c=f(this).val();return c==null?null:f.isArray(c)?f.map(c,function(a,c){return{name:b.name,value:a.replace(bH,"\r\n")}}):{name:b.name,value:c.replace(bH,"\r\n")}}).get()}}),f.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),function(a,b){f.fn[b]=function(a){return this.bind(b,a)}}),f.each(["get","post"],function(a,c){f[c]=function(a,d,e,g){f.isFunction(d)&&(g=g||e,e=d,d=b);return f.ajax({type:c,url:a,data:d,success:e,dataType:g})}}),f.extend({getScript:function(a,c){return f.get(a,b,c,"script")},getJSON:function(a,b,c){return f.get(a,b,c,"json")},ajaxSetup:function(a,b){b?cb(a,f.ajaxSettings):(b=a,a=f.ajaxSettings),cb(a,b);return a},ajaxSettings:{url:bX,isLocal:bL.test(bY[1]),global:!0,type:"GET",contentType:"application/x-www-form-urlencoded",processData:!0,async:!0,accepts:{xml:"application/xml, text/xml",html:"text/html",text:"text/plain",json:"application/json, text/javascript","*":bZ},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText"},converters:{"* text":a.String,"text html":!0,"text json":f.parseJSON,"text xml":f.parseXML},flatOptions:{context:!0,url:!0}},ajaxPrefilter:b_(bV),ajaxTransport:b_(bW),ajax:function(a,c){function w(a,c,l,m){if(s!==2){s=2,q&&clearTimeout(q),p=b,n=m||"",v.readyState=a>0?4:0;var o,r,u,w=c,x=l?cd(d,v,l):b,y,z;if(a>=200&&a<300||a===304){if(d.ifModified){if(y=v.getResponseHeader("Last-Modified"))f.lastModified[k]=y;if(z=v.getResponseHeader("Etag"))f.etag[k]=z}if(a===304)w="notmodified",o=!0;else try{r=ce(d,x),w="success",o=!0}catch(A){w="parsererror",u=A}}else{u=w;if(!w||a)w="error",a<0&&(a=0)}v.status=a,v.statusText=""+(c||w),o?h.resolveWith(e,[r,w,v]):h.rejectWith(e,[v,w,u]),v.statusCode(j),j=b,t&&g.trigger("ajax"+(o?"Success":"Error"),[v,d,o?r:u]),i.fireWith(e,[v,w]),t&&(g.trigger("ajaxComplete",[v,d]),--f.active||f.event.trigger("ajaxStop"))}}typeof a=="object"&&(c=a,a=b),c=c||{};var d=f.ajaxSetup({},c),e=d.context||d,g=e!==d&&(e.nodeType||e instanceof f)?f(e):f.event,h=f.Deferred(),i=f.Callbacks("once memory"),j=d.statusCode||{},k,l={},m={},n,o,p,q,r,s=0,t,u,v={readyState:0,setRequestHeader:function(a,b){if(!s){var c=a.toLowerCase();a=m[c]=m[c]||a,l[a]=b}return this},getAllResponseHeaders:function(){return s===2?n:null},getResponseHeader:function(a){var c;if(s===2){if(!o){o={};while(c=bJ.exec(n))o[c[1].toLowerCase()]=c[2]}c=o[a.toLowerCase()]}return c===b?null:c},overrideMimeType:function(a){s||(d.mimeType=a);return this},abort:function(a){a=a||"abort",p&&p.abort(a),w(0,a);return this}};h.promise(v),v.success=v.done,v.error=v.fail,v.complete=i.add,v.statusCode=function(a){if(a){var b;if(s<2)for(b in a)j[b]=[j[b],a[b]];else b=a[v.status],v.then(b,b)}return this},d.url=((a||d.url)+"").replace(bI,"").replace(bN,bY[1]+"//"),d.dataTypes=f.trim(d.dataType||"*").toLowerCase().split(bR),d.crossDomain==null&&(r=bT.exec(d.url.toLowerCase()),d.crossDomain=!(!r||r[1]==bY[1]&&r[2]==bY[2]&&(r[3]||(r[1]==="http:"?80:443))==(bY[3]||(bY[1]==="http:"?80:443)))),d.data&&d.processData&&typeof d.data!="string"&&(d.data=f.param(d.data,d.traditional)),ca(bV,d,c,v);if(s===2)return!1;t=d.global,d.type=d.type.toUpperCase(),d.hasContent=!bM.test(d.type),t&&f.active++===0&&f.event.trigger("ajaxStart");if(!d.hasContent){d.data&&(d.url+=(bO.test(d.url)?"&":"?")+d.data,delete d.data),k=d.url;if(d.cache===!1){var x=f.now(),y=d.url.replace(bS,"$1_="+x);d.url=y+(y===d.url?(bO.test(d.url)?"&":"?")+"_="+x:"")}}(d.data&&d.hasContent&&d.contentType!==!1||c.contentType)&&v.setRequestHeader("Content-Type",d.contentType),d.ifModified&&(k=k||d.url,f.lastModified[k]&&v.setRequestHeader("If-Modified-Since",f.lastModified[k]),f.etag[k]&&v.setRequestHeader("If-None-Match",f.etag[k])),v.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+(d.dataTypes[0]!=="*"?", "+bZ+"; q=0.01":""):d.accepts["*"]);for(u in d.headers)v.setRequestHeader(u,d.headers[u]);if(d.beforeSend&&(d.beforeSend.call(e,v,d)===!1||s===2)){v.abort();return!1}for(u in{success:1,error:1,complete:1})v[u](d[u]);p=ca(bW,d,c,v);if(!p)w(-1,"No Transport");else{v.readyState=1,t&&g.trigger("ajaxSend",[v,d]),d.async&&d.timeout>0&&(q=setTimeout(function(){v.abort("timeout")},d.timeout));try{s=1,p.send(l,w)}catch(z){s<2?w(-1,z):f.error(z)}}return v},param:function(a,c){var d=[],e=function(a,b){b=f.isFunction(b)?b():b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};c===b&&(c=f.ajaxSettings.traditional);if(f.isArray(a)||a.jquery&&!f.isPlainObject(a))f.each(a,function(){e(this.name,this.value)});else for(var g in a)cc(g,a[g],c,e);return d.join("&").replace(bF,"+")}}),f.extend({active:0,lastModified:{},etag:{}});var cf=f.now(),cg=/(\=)\?(&|$)|\?\?/i;f.ajaxSetup({jsonp:"callback",jsonpCallback:function(){return f.expando+"_"+cf++}}),f.ajaxPrefilter("json jsonp",function(b,c,d){var e=b.contentType==="application/x-www-form-urlencoded"&&typeof b.data=="string";if(b.dataTypes[0]==="jsonp"||b.jsonp!==!1&&(cg.test(b.url)||e&&cg.test(b.data))){var g,h=b.jsonpCallback=f.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,i=a[h],j=b.url,k=b.data,l="$1"+h+"$2";b.jsonp!==!1&&(j=j.replace(cg,l),b.url===j&&(e&&(k=k.replace(cg,l)),b.data===k&&(j+=(/\?/.test(j)?"&":"?")+b.jsonp+"="+h))),b.url=j,b.data=k,a[h]=function(a){g=[a]},d.always(function(){a[h]=i,g&&f.isFunction(i)&&a[h](g[0])}),b.converters["script json"]=function(){g||f.error(h+" was not called");return g[0]},b.dataTypes[0]="json";return"script"}}),f.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/javascript|ecmascript/},converters:{"text script":function(a){f.globalEval(a);return a}}}),f.ajaxPrefilter("script",function(a){a.cache===b&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),f.ajaxTransport("script",function(a){if(a.crossDomain){var d,e=c.head||c.getElementsByTagName("head")[0]||c.documentElement;return{send:function(f,g){d=c.createElement("script"),d.async="async",a.scriptCharset&&(d.charset=a.scriptCharset),d.src=a.url,d.onload=d.onreadystatechange=function(a,c){if(c||!d.readyState||/loaded|complete/.test(d.readyState))d.onload=d.onreadystatechange=null,e&&d.parentNode&&e.removeChild(d),d=b,c||g(200,"success")},e.insertBefore(d,e.firstChild)},abort:function(){d&&d.onload(0,1)}}}});var ch=a.ActiveXObject?function(){for(var a in cj)cj[a](0,1)}:!1,ci=0,cj;f.ajaxSettings.xhr=a.ActiveXObject?function(){return!this.isLocal&&ck()||cl()}:ck,function(a){f.extend(f.support,{ajax:!!a,cors:!!a&&"withCredentials"in a})}(f.ajaxSettings.xhr()),f.support.ajax&&f.ajaxTransport(function(c){if(!c.crossDomain||f.support.cors){var d;return{send:function(e,g){var h=c.xhr(),i,j;c.username?h.open(c.type,c.url,c.async,c.username,c.password):h.open(c.type,c.url,c.async);if(c.xhrFields)for(j in c.xhrFields)h[j]=c.xhrFields[j];c.mimeType&&h.overrideMimeType&&h.overrideMimeType(c.mimeType),!c.crossDomain&&!e["X-Requested-With"]&&(e["X-Requested-With"]="XMLHttpRequest");try{for(j in e)h.setRequestHeader(j,e[j])}catch(k){}h.send(c.hasContent&&c.data||null),d=function(a,e){var j,k,l,m,n;try{if(d&&(e||h.readyState===4)){d=b,i&&(h.onreadystatechange=f.noop,ch&&delete cj[i]);if(e)h.readyState!==4&&h.abort();else{j=h.status,l=h.getAllResponseHeaders(),m={},n=h.responseXML,n&&n.documentElement&&(m.xml=n),m.text=h.responseText;try{k=h.statusText}catch(o){k=""}!j&&c.isLocal&&!c.crossDomain?j=m.text?200:404:j===1223&&(j=204)}}}catch(p){e||g(-1,p)}m&&g(j,k,m,l)},!c.async||h.readyState===4?d():(i=++ci,ch&&(cj||(cj={},f(a).unload(ch)),cj[i]=d),h.onreadystatechange=d)},abort:function(){d&&d(0,1)}}}});var cm={},cn,co,cp=/^(?:toggle|show|hide)$/,cq=/^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i,cr,cs=[["height","marginTop","marginBottom","paddingTop","paddingBottom"],["width","marginLeft","marginRight","paddingLeft","paddingRight"],["opacity"]],ct;f.fn.extend({show:function(a,b,c){var d,e;if(a||a===0)return this.animate(cw("show",3),a,b,c);for(var g=0,h=this.length;g<h;g++)d=this[g],d.style&&(e=d.style.display,!f._data(d,"olddisplay")&&e==="none"&&(e=d.style.display=""),e===""&&f.css(d,"display")==="none"&&f._data(d,"olddisplay",cx(d.nodeName)));for(g=0;g<h;g++){d=this[g];if(d.style){e=d.style.display;if(e===""||e==="none")d.style.display=f._data(d,"olddisplay")||""}}return this},hide:function(a,b,c){if(a||a===0)return this.animate(cw("hide",3),a,b,c);var d,e,g=0,h=this.length;for(;g<h;g++)d=this[g],d.style&&(e=f.css(d,"display"),e!=="none"&&!f._data(d,"olddisplay")&&f._data(d,"olddisplay",e));for(g=0;g<h;g++)this[g].style&&(this[g].style.display="none");return this},_toggle:f.fn.toggle,toggle:function(a,b,c){var d=typeof a=="boolean";f.isFunction(a)&&f.isFunction(b)?this._toggle.apply(this,arguments):a==null||d?this.each(function(){var b=d?a:f(this).is(":hidden");f(this)[b?"show":"hide"]()}):this.animate(cw("toggle",3),a,b,c);return this},fadeTo:function(a,b,c,d){return this.filter(":hidden").css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){function g(){e.queue===!1&&f._mark(this);var b=f.extend({},e),c=this.nodeType===1,d=c&&f(this).is(":hidden"),g,h,i,j,k,l,m,n,o;b.animatedProperties={};for(i in a){g=f.camelCase(i),i!==g&&(a[g]=a[i],delete a[i]),h=a[g],f.isArray(h)?(b.animatedProperties[g]=h[1],h=a[g]=h[0]):b.animatedProperties[g]=b.specialEasing&&b.specialEasing[g]||b.easing||"swing";if(h==="hide"&&d||h==="show"&&!d)return b.complete.call(this);c&&(g==="height"||g==="width")&&(b.overflow=[this.style.overflow,this.style.overflowX,this.style.overflowY],f.css(this,"display")==="inline"&&f.css(this,"float")==="none"&&(!f.support.inlineBlockNeedsLayout||cx(this.nodeName)==="inline"?this.style.display="inline-block":this.style.zoom=1))}b.overflow!=null&&(this.style.overflow="hidden");for(i in a)j=new f.fx(this,b,i),h=a[i],cp.test(h)?(o=f._data(this,"toggle"+i)||(h==="toggle"?d?"show":"hide":0),o?(f._data(this,"toggle"+i,o==="show"?"hide":"show"),j[o]()):j[h]()):(k=cq.exec(h),l=j.cur(),k?(m=parseFloat(k[2]),n=k[3]||(f.cssNumber[i]?"":"px"),n!=="px"&&(f.style(this,i,(m||1)+n),l=(m||1)/j.cur()*l,f.style(this,i,l+n)),k[1]&&(m=(k[1]==="-="?-1:1)*m+l),j.custom(l,m,n)):j.custom(l,h,""));return!0}var e=f.speed(b,c,d);if(f.isEmptyObject(a))return this.each(e.complete,[!1]);a=f.extend({},a);return e.queue===!1?this.each(g):this.queue(e.queue,g)},stop:function(a,c,d){typeof a!="string"&&(d=c,c=a,a=b),c&&a!==!1&&this.queue(a||"fx",[]);return this.each(function(){function h(a,b,c){var e=b[c];f.removeData(a,c,!0),e.stop(d)}var b,c=!1,e=f.timers,g=f._data(this);d||f._unmark(!0,this);if(a==null)for(b in g)g[b].stop&&b.indexOf(".run")===b.length-4&&h(this,g,b);else g[b=a+".run"]&&g[b].stop&&h(this,g,b);for(b=e.length;b--;)e[b].elem===this&&(a==null||e[b].queue===a)&&(d?e[b](!0):e[b].saveState(),c=!0,e.splice(b,1));(!d||!c)&&f.dequeue(this,a)})}}),f.each({slideDown:cw("show",1),slideUp:cw("hide",1),slideToggle:cw("toggle",1),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){f.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),f.extend({speed:function(a,b,c){var d=a&&typeof a=="object"?f.extend({},a):{complete:c||!c&&b||f.isFunction(a)&&a,duration:a,easing:c&&b||b&&!f.isFunction(b)&&b};d.duration=f.fx.off?0:typeof d.duration=="number"?d.duration:d.duration in f.fx.speeds?f.fx.speeds[d.duration]:f.fx.speeds._default;if(d.queue==null||d.queue===!0)d.queue="fx";d.old=d.complete,d.complete=function(a){f.isFunction(d.old)&&d.old.call(this),d.queue?f.dequeue(this,d.queue):a!==!1&&f._unmark(this)};return d},easing:{linear:function(a,b,c,d){return c+d*a},swing:function(a,b,c,d){return(-Math.cos(a*Math.PI)/2+.5)*d+c}},timers:[],fx:function(a,b,c){this.options=b,this.elem=a,this.prop=c,b.orig=b.orig||{}}}),f.fx.prototype={update:function(){this.options.step&&this.options.step.call(this.elem,this.now,this),(f.fx.step[this.prop]||f.fx.step._default)(this)},cur:function(){if(this.elem[this.prop]!=null&&(!this.elem.style||this.elem.style[this.prop]==null))return this.elem[this.prop];var a,b=f.css(this.elem,this.prop);return isNaN(a=parseFloat(b))?!b||b==="auto"?0:b:a},custom:function(a,c,d){function h(a){return e.step(a)}var e=this,g=f.fx;this.startTime=ct||cu(),this.end=c,this.now=this.start=a,this.pos=this.state=0,this.unit=d||this.unit||(f.cssNumber[this.prop]?"":"px"),h.queue=this.options.queue,h.elem=this.elem,h.saveState=function(){e.options.hide&&f._data(e.elem,"fxshow"+e.prop)===b&&f._data(e.elem,"fxshow"+e.prop,e.start)},h()&&f.timers.push(h)&&!cr&&(cr=setInterval(g.tick,g.interval))},show:function(){var a=f._data(this.elem,"fxshow"+this.prop);this.options.orig[this.prop]=a||f.style(this.elem,this.prop),this.options.show=!0,a!==b?this.custom(this.cur(),a):this.custom(this.prop==="width"||this.prop==="height"?1:0,this.cur()),f(this.elem).show()},hide:function(){this.options.orig[this.prop]=f._data(this.elem,"fxshow"+this.prop)||f.style(this.elem,this.prop),this.options.hide=!0,this.custom(this.cur(),0)},step:function(a){var b,c,d,e=ct||cu(),g=!0,h=this.elem,i=this.options;if(a||e>=i.duration+this.startTime){this.now=this.end,this.pos=this.state=1,this.update(),i.animatedProperties[this.prop]=!0;for(b in i.animatedProperties)i.animatedProperties[b]!==!0&&(g=!1);if(g){i.overflow!=null&&!f.support.shrinkWrapBlocks&&f.each(["","X","Y"],function(a,b){h.style["overflow"+b]=i.overflow[a]}),i.hide&&f(h).hide();if(i.hide||i.show)for(b in i.animatedProperties)f.style(h,b,i.orig[b]),f.removeData(h,"fxshow"+b,!0),f.removeData(h,"toggle"+b,!0);d=i.complete,d&&(i.complete=!1,d.call(h))}return!1}i.duration==Infinity?this.now=e:(c=e-this.startTime,this.state=c/i.duration,this.pos=f.easing[i.animatedProperties[this.prop]](this.state,c,0,1,i.duration),this.now=this.start+(this.end-this.start)*this.pos),this.update();return!0}},f.extend(f.fx,{tick:function(){var a,b=f.timers,c=0;for(;c<b.length;c++)a=b[c],!a()&&b[c]===a&&b.splice(c--,1);b.length||f.fx.stop()},interval:13,stop:function(){clearInterval(cr),cr=null},speeds:{slow:600,fast:200,_default:400},step:{opacity:function(a){f.style(a.elem,"opacity",a.now)},_default:function(a){a.elem.style&&a.elem.style[a.prop]!=null?a.elem.style[a.prop]=a.now+a.unit:a.elem[a.prop]=a.now}}}),f.each(["width","height"],function(a,b){f.fx.step[b]=function(a){f.style(a.elem,b,Math.max(0,a.now))}}),f.expr&&f.expr.filters&&(f.expr.filters.animated=function(a){return f.grep(f.timers,function(b){return a===b.elem}).length});var cy=/^t(?:able|d|h)$/i,cz=/^(?:body|html)$/i;"getBoundingClientRect"in c.documentElement?f.fn.offset=function(a){var b=this[0],c;if(a)return this.each(function(b){f.offset.setOffset(this,a,b)});if(!b||!b.ownerDocument)return null;if(b===b.ownerDocument.body)return f.offset.bodyOffset(b);try{c=b.getBoundingClientRect()}catch(d){}var e=b.ownerDocument,g=e.documentElement;if(!c||!f.contains(g,b))return c?{top:c.top,left:c.left}:{top:0,left:0};var h=e.body,i=cA(e),j=g.clientTop||h.clientTop||0,k=g.clientLeft||h.clientLeft||0,l=i.pageYOffset||f.support.boxModel&&g.scrollTop||h.scrollTop,m=i.pageXOffset||f.support.boxModel&&g.scrollLeft||h.scrollLeft,n=c.top+l-j,o=c.left+m-k;return{top:n,left:o}}:f.fn.offset=function(a){var b=this[0];if(a)return this.each(function(b){f.offset.setOffset(this,a,b)});if(!b||!b.ownerDocument)return null;if(b===b.ownerDocument.body)return f.offset.bodyOffset(b);var c,d=b.offsetParent,e=b,g=b.ownerDocument,h=g.documentElement,i=g.body,j=g.defaultView,k=j?j.getComputedStyle(b,null):b.currentStyle,l=b.offsetTop,m=b.offsetLeft;while((b=b.parentNode)&&b!==i&&b!==h){if(f.support.fixedPosition&&k.position==="fixed")break;c=j?j.getComputedStyle(b,null):b.currentStyle,l-=b.scrollTop,m-=b.scrollLeft,b===d&&(l+=b.offsetTop,m+=b.offsetLeft,f.support.doesNotAddBorder&&(!f.support.doesAddBorderForTableAndCells||!cy.test(b.nodeName))&&(l+=parseFloat(c.borderTopWidth)||0,m+=parseFloat(c.borderLeftWidth)||0),e=d,d=b.offsetParent),f.support.subtractsBorderForOverflowNotVisible&&c.overflow!=="visible"&&(l+=parseFloat(c.borderTopWidth)||0,m+=parseFloat(c.borderLeftWidth)||0),k=c}if(k.position==="relative"||k.position==="static")l+=i.offsetTop,m+=i.offsetLeft;f.support.fixedPosition&&k.position==="fixed"&&(l+=Math.max(h.scrollTop,i.scrollTop),m+=Math.max(h.scrollLeft,i.scrollLeft));return{top:l,left:m}},f.offset={bodyOffset:function(a){var b=a.offsetTop,c=a.offsetLeft;f.support.doesNotIncludeMarginInBodyOffset&&(b+=parseFloat(f.css(a,"marginTop"))||0,c+=parseFloat(f.css(a,"marginLeft"))||0);return{top:b,left:c}},setOffset:function(a,b,c){var d=f.css(a,"position");d==="static"&&(a.style.position="relative");var e=f(a),g=e.offset(),h=f.css(a,"top"),i=f.css(a,"left"),j=(d==="absolute"||d==="fixed")&&f.inArray("auto",[h,i])>-1,k={},l={},m,n;j?(l=e.position(),m=l.top,n=l.left):(m=parseFloat(h)||0,n=parseFloat(i)||0),f.isFunction(b)&&(b=b.call(a,c,g)),b.top!=null&&(k.top=b.top-g.top+m),b.left!=null&&(k.left=b.left-g.left+n),"using"in b?b.using.call(a,k):e.css(k)}},f.fn.extend({position:function(){if(!this[0])return null;var a=this[0],b=this.offsetParent(),c=this.offset(),d=cz.test(b[0].nodeName)?{top:0,left:0}:b.offset();c.top-=parseFloat(f.css(a,"marginTop"))||0,c.left-=parseFloat(f.css(a,"marginLeft"))||0,d.top+=parseFloat(f.css(b[0],"borderTopWidth"))||0,d.left+=parseFloat(f.css(b[0],"borderLeftWidth"))||0;return{top:c.top-d.top,left:c.left-d.left}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||c.body;while(a&&!cz.test(a.nodeName)&&f.css(a,"position")==="static")a=a.offsetParent;return a})}}),f.each(["Left","Top"],function(a,c){var d="scroll"+c;f.fn[d]=function(c){var e,g;if(c===b){e=this[0];if(!e)return null;g=cA(e);return g?"pageXOffset"in g?g[a?"pageYOffset":"pageXOffset"]:f.support.boxModel&&g.document.documentElement[d]||g.document.body[d]:e[d]}return this.each(function(){g=cA(this),g?g.scrollTo(a?f(g).scrollLeft():c,a?c:f(g).scrollTop()):this[d]=c})}}),f.each(["Height","Width"],function(a,c){var d=c.toLowerCase();f.fn["inner"+c]=function(){var a=this[0];return a?a.style?parseFloat(f.css(a,d,"padding")):this[d]():null},f.fn["outer"+c]=function(a){var b=this[0];return b?b.style?parseFloat(f.css(b,d,a?"margin":"border")):this[d]():null},f.fn[d]=function(a){var e=this[0];if(!e)return a==null?null:this;if(f.isFunction(a))return this.each(function(b){var c=f(this);c[d](a.call(this,b,c[d]()))});if(f.isWindow(e)){var g=e.document.documentElement["client"+c],h=e.document.body;return e.document.compatMode==="CSS1Compat"&&g||h&&h["client"+c]||g}if(e.nodeType===9)return Math.max(e.documentElement["client"+c],e.body["scroll"+c],e.documentElement["scroll"+c],e.body["offset"+c],e.documentElement["offset"+c]);if(a===b){var i=f.css(e,d),j=parseFloat(i);return f.isNumeric(j)?j:i}return this.css(d,typeof a=="string"?a:a+"px")}}),a.jQuery=a.$=f})(window);
\ No newline at end of file
Index: app/src/main/res/layout/page_product_details.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/page_product_details.xml	(revision )
+++ app/src/main/res/layout/page_product_details.xml	(revision )
@@ -0,0 +1,96 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <LinearLayout
+        android:orientation="vertical" android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:background="@color/common_background_all_page">
+
+        <include layout="@layout/common_head"/>
+
+        <RelativeLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent">
+
+            <LinearLayout
+                android:id="@+id/product_details_foot"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_alignParentBottom="true"
+                android:orientation="horizontal">
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="@dimen/main_foot_height"
+                    android:orientation="horizontal"
+                    android:layout_weight="4"
+                    android:background="@color/common_background_333333"
+                    android:gravity="center">
+                    <TextView
+                        android:id="@+id/product_details_price"
+                        android:layout_width="wrap_content"
+                        android:layout_height="@dimen/main_foot_height"
+                        android:gravity="right|center_vertical"
+                        android:layout_marginRight="@dimen/common_content_margin_5"
+                        android:textColor="@color/common_font_color_ffffff"
+                        android:textSize="@dimen/common_font_size_16"/>
+                    <TextView
+                        android:layout_width="wrap_content"
+                        android:layout_height="@dimen/main_foot_height"
+                        android:gravity="right|center_vertical"
+                        android:text="@string/product_details_price"
+                        android:textColor="@color/common_font_color_ffffff"
+                        android:textSize="@dimen/common_font_size_14"/>
+                </LinearLayout>
+
+                <TextView
+                    android:layout_width="match_parent"
+                    android:layout_height="@dimen/main_foot_height"
+                    android:layout_weight="6"
+                    android:gravity="center"
+                    android:background="@drawable/common_bg_1_selector"
+                    android:text="@string/fragment_shop_category_review_charge"
+                    android:textColor="@color/common_font_color_ffffff"
+                    android:textSize="@dimen/common_font_size_16"
+                    android:clickable="true"
+                    android:onClick="onClickViewTopay"/>
+            </LinearLayout>
+
+            <ScrollView
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:layout_above="@id/product_details_foot">
+                <LinearLayout
+                    android:id="@+id/product_details_layout"
+                    android:layout_width="match_parent"
+                    android:layout_height="match_parent"
+                    android:orientation="vertical"
+                    android:visibility="invisible">
+
+                    <LinearLayout
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:background="@color/common_font_color_ffffff">
+
+                        <include layout="@layout/fragment_main_shop_review_item" />
+                        <include layout="@layout/fragment_main_shop_review_item" />
+                    </LinearLayout>
+
+                    <TextView
+                        android:layout_width="match_parent"
+                        android:layout_height="2dip"
+                        android:background="@color/common_list_item_divide_bg"/>
+
+                    <LinearLayout
+                        android:id="@+id/product_details_notice"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:orientation="vertical"/>
+
+                </LinearLayout>
+            </ScrollView>
+        </RelativeLayout>
+    </LinearLayout>
+    <include layout="@layout/common_network_error"/>
+</FrameLayout>
Index: app/src/main/java/com/base/tools/exception/BasesNetworkErrorException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/exception/BasesNetworkErrorException.java	(revision )
+++ app/src/main/java/com/base/tools/exception/BasesNetworkErrorException.java	(revision )
@@ -0,0 +1,10 @@
+package com.base.tools.exception;
+
+public class BasesNetworkErrorException extends Exception {
+
+	private static final long serialVersionUID = 5587741930897557887L;
+
+	public BasesNetworkErrorException(String error) {
+		super(error);
+	}
+}
Index: app/src/main/java/com/oasgames/android/oaspay/entity/PayInfoList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/entity/PayInfoList.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/entity/PayInfoList.java	(revision )
@@ -0,0 +1,21 @@
+package com.oasgames.android.oaspay.entity;
+
+import java.util.List;
+
+/**
+ * 支付套餐集合 (含套餐、服信息)
+ * @author Administrator
+ *
+ */
+public class PayInfoList {
+	public List<PayInfoDetail> list;
+	public List<ServerInfo> servers;
+	
+	public void setList(List list) {
+		this.list = list;
+	}
+
+	public void setServers(List servers) {
+		this.servers = servers;
+	}
+}
Index: app/src/main/java/com/base/tools/slide/SlideItemWrapLayout.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/slide/SlideItemWrapLayout.java	(revision )
+++ app/src/main/java/com/base/tools/slide/SlideItemWrapLayout.java	(revision )
@@ -0,0 +1,257 @@
+package com.base.tools.slide;
+
+import android.content.Context;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.RelativeLayout;
+
+import com.base.tools.slide.SlideListView.SlideAction;
+import com.oasgames.android.oaspay.R;
+
+
+/**
+ * wrap the listview item,It may have three directly sub view(front view ,left back view,right back view).<br/>
+ * front view must be not null.The other is not necessarily
+ * 
+ * @author Dean Tao
+ * 
+ */
+public class SlideItemWrapLayout extends RelativeLayout {
+
+	private View mLeftBackView;
+	private View mRightBackView;
+	private FrontViewWrapLayout mFrontView;
+
+	private SlideAction mSlideLeftAction;
+	private SlideAction mSlideRightAction;
+
+	/**
+	 * 
+	 * @param context
+	 * @param slideLeftAction
+	 *            Decided where the left view placed.<br/>
+	 *            if slideLeftAction==SCROLL,will placed to left of front view<br/>
+	 *            if slideLeftAction==REVEAL,will placed below of front view<br/>
+	 * @param slideRightAction
+	 *            Decided where the right view placed.<br/>
+	 *            if slideRightAction==SCROLL,will placed to right of front view<br/>
+	 *            if slideRightAction==REVEAL,will placed below of front view<br/>
+	 * @param frontViewId
+	 *            front view layout id. Must be an effective
+	 * @param leftBackViewId
+	 *            left back view layout id.if leftBackViewId ==0,there is no left back view,and the slideLeftAction will be ignored
+	 * @param rightBackViewId
+	 *            right back view layout id.if rightBackViewId ==0,there is no right back view,and the slideRightAction will be ignored
+	 */
+	public SlideItemWrapLayout(Context context, SlideAction slideLeftAction, SlideAction slideRightAction, int frontViewId, int leftBackViewId,
+			int rightBackViewId) {
+		super(context);
+		mSlideLeftAction = slideLeftAction;
+		mSlideRightAction = slideRightAction;
+		init(frontViewId, leftBackViewId, rightBackViewId);
+	}
+
+	private void init(int frontViewId, int leftBackViewId, int rightBackViewId) {
+		setDescendantFocusability(ViewGroup.FOCUS_BLOCK_DESCENDANTS);
+		View frontView = null;
+		if (frontViewId != 0) {
+			frontView = LayoutInflater.from(getContext()).inflate(frontViewId, this, false);
+		}
+		if (frontView == null) {
+			throw new NullPointerException("frontView can not be null");
+		}
+		View leftBackView = null;
+		View rightBackView = null;
+		if (leftBackViewId != 0) {
+			leftBackView = LayoutInflater.from(getContext()).inflate(leftBackViewId, this, false);
+		}
+
+		if (rightBackViewId != 0) {
+			rightBackView = LayoutInflater.from(getContext()).inflate(rightBackViewId, this, false);
+		}
+
+		addLeftBackView(leftBackView);
+		addRightBackView(rightBackView);
+		addFrontView(frontView);
+	}
+
+	private void addFrontView(View frontView) {
+		LayoutParams params = (LayoutParams) frontView.getLayoutParams();
+		if (params == null) {
+			params = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
+			params.addRule(RelativeLayout.CENTER_IN_PARENT, RelativeLayout.TRUE);
+		}
+
+		FrontViewWrapLayout wrapLayout = new FrontViewWrapLayout(getContext());
+		wrapLayout.addView(frontView, params);
+		wrapLayout.setId(R.id.slide_id_front_view);
+
+		addView(wrapLayout, params);
+		mFrontView = wrapLayout;
+	}
+
+	private void addLeftBackView(View leftBackView) {
+		if (leftBackView == null) {
+			return;
+		}
+		LayoutParams params = (LayoutParams) leftBackView.getLayoutParams();
+		if (params == null) {// default LayoutParams
+			params = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT);
+		}
+		switch (mSlideLeftAction) {
+		case SCROLL:
+			params.addRule(RelativeLayout.LEFT_OF, R.id.slide_id_front_view);
+			break;
+		case REVEAL:
+			params.addRule(RelativeLayout.ALIGN_PARENT_LEFT, RelativeLayout.TRUE);
+			break;
+		default:
+			break;
+		}
+		leftBackView.setLayoutParams(params);
+		leftBackView.setId(R.id.slide_id_left_back_view);
+		addView(leftBackView);
+		mLeftBackView = leftBackView;
+		/**
+		 * must set INVISIBLE.<br/>
+		 * When the slide item is not opend,The motion event could not be dispatch to left/right back view.<br/>
+		 * So set left/right back view INVISIBLE,then we can response the OnItemClickListener.<br/>
+		 * (Should not be GONE,because if it is GONE,the measure width and height will be 0)
+		 */
+		setLeftBackViewShow(false);
+	}
+
+	private void addRightBackView(View rightBackView) {
+		if (rightBackView == null) {
+			return;
+		}
+		LayoutParams params = (LayoutParams) rightBackView.getLayoutParams();
+		if (params == null) {// default LayoutParams
+			params = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT);
+		}
+		switch (mSlideRightAction) {
+		case SCROLL:
+			params.addRule(RelativeLayout.RIGHT_OF, R.id.slide_id_front_view);
+			break;
+		case REVEAL:
+			params.addRule(RelativeLayout.ALIGN_PARENT_RIGHT, RelativeLayout.TRUE);
+			break;
+		default:
+			break;
+		}
+		rightBackView.setLayoutParams(params);
+		rightBackView.setId(R.id.slide_id_right_back_view);
+		addView(rightBackView);
+		mRightBackView = rightBackView;
+		/**
+		 * must set INVISIBLE.<br/>
+		 * When the slide item is not opend,The motion event could not be dispatch to left/right back view.<br/>
+		 * So set left/right back view INVISIBLE,then we can response the OnItemClickListener.<br/>
+		 * (Should not be GONE,because if it is GONE,the measure width and height will be 0)
+		 */
+		setRightBackViewShow(false);
+	}
+
+	@Override
+	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+		super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+		int parentWidthSpec = MeasureSpec.makeMeasureSpec(getMeasuredWidth(), MeasureSpec.EXACTLY);
+		int parentHeightSpec = MeasureSpec.makeMeasureSpec(getMeasuredHeight(), MeasureSpec.EXACTLY);
+		if (mLeftBackView != null ) {
+			LayoutParams params = (LayoutParams) mLeftBackView.getLayoutParams();
+			int widthSpec = ViewGroup.getChildMeasureSpec(parentWidthSpec, getPaddingLeft() + getPaddingRight() + params.leftMargin
+					+ params.rightMargin, params.width);
+			int heightSpec = ViewGroup.getChildMeasureSpec(parentHeightSpec, getPaddingTop() + getPaddingBottom() + params.topMargin
+					+ params.bottomMargin, params.height);
+			mLeftBackView.measure(widthSpec, heightSpec);
+		}
+		if (mRightBackView != null ) {
+			LayoutParams params = (LayoutParams) mRightBackView.getLayoutParams();
+			int widthSpec = ViewGroup.getChildMeasureSpec(parentWidthSpec, getPaddingLeft() + getPaddingRight() + params.leftMargin
+					+ params.rightMargin, params.width);
+			int heightSpec = ViewGroup.getChildMeasureSpec(parentHeightSpec, getPaddingTop() + getPaddingBottom() + params.topMargin
+					+ params.bottomMargin, params.height);
+			mRightBackView.measure(widthSpec, heightSpec);
+		}
+	}
+
+	@Override
+	protected void onLayout(boolean changed, int l, int t, int r, int b) {
+		super.onLayout(changed, l, t, r, b);
+		if (mLeftBackView != null) {
+			// Always let backView in center of the item
+			int top = (b - t - mLeftBackView.getMeasuredHeight()) / 2;
+			if (mSlideLeftAction == SlideAction.SCROLL) {
+				mLeftBackView.layout(mFrontView.getLeft() - mLeftBackView.getMeasuredWidth(), top, mLeftBackView.getRight(),
+						top + mLeftBackView.getMeasuredHeight());
+			} else {
+				mLeftBackView.layout(mLeftBackView.getLeft(), top, mLeftBackView.getRight(), top + mLeftBackView.getMeasuredHeight());
+			}
+
+		}
+
+		if (mRightBackView != null) {
+			// Always let backView in center of the item
+			int top = (b - t - mRightBackView.getMeasuredHeight()) / 2;
+			if (mSlideRightAction == SlideAction.SCROLL) {
+				mRightBackView.layout(mFrontView.getRight(), top, mFrontView.getRight() + mRightBackView.getMeasuredWidth(),
+						top + mRightBackView.getMeasuredHeight());
+			} else {
+				mRightBackView.layout(mRightBackView.getLeft(), top, mRightBackView.getRight(), top + mRightBackView.getMeasuredHeight());
+			}
+
+		}
+	}
+
+	/**
+	 * front view must not be null
+	 * 
+	 * @return
+	 */
+	public FrontViewWrapLayout getFrontView() {
+		return mFrontView;
+	}
+
+	/**
+	 * left back view could be null
+	 * 
+	 * @return
+	 */
+	public View getLeftBackView() {
+		return mLeftBackView;
+	}
+
+	/**
+	 * right back view could be null
+	 * 
+	 * @return
+	 */
+	public View getRightBackView() {
+		return mRightBackView;
+	}
+
+	public void setLeftBackViewShow(boolean show) {
+		setViewShow(mLeftBackView, show);
+	}
+
+	public void setRightBackViewShow(boolean show) {
+		setViewShow(mRightBackView, show);
+	}
+
+	private void setViewShow(View view, boolean show) {
+		if (view == null) {
+			return;
+		}
+		if (show) {
+			if (view.getVisibility() != View.VISIBLE) {
+				view.setVisibility(View.VISIBLE);
+			}
+		} else {
+			if (view.getVisibility() != View.INVISIBLE) {
+				view.setVisibility(View.INVISIBLE);
+			}
+		}
+	}
+
+}
Index: app/src/main/res/layout/page_order_details.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/page_order_details.xml	(revision )
+++ app/src/main/res/layout/page_order_details.xml	(revision )
@@ -0,0 +1,273 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/common_background_all_page">
+
+    <include layout="@layout/common_head"/>
+
+    <ScrollView
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:orientation="vertical">
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="@dimen/order_list_item_head_height"
+                android:paddingRight="@dimen/common_content_margin_20"
+                android:gravity="center_vertical|right"
+                android:background="@color/common_font_color_ffffff">
+                <TextView
+                    android:id="@+id/order_details_id"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="@string/order_details_id"
+                    android:textSize="@dimen/common_font_size_12"
+                    android:textColor="@color/common_font_color_868585"
+                    android:layout_marginRight="@dimen/common_content_margin_5"/>
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="@string/order_details_id"
+                    android:textSize="@dimen/common_font_size_12"
+                    android:textColor="@color/common_font_color_868585"/>
+
+            </LinearLayout>
+
+            <TextView
+                android:layout_width="match_parent"
+                android:layout_height="2dip"
+                android:background="@color/common_list_item_divide_bg"/>
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="vertical"
+                android:background="@color/common_font_color_ffffff">
+
+                <include layout="@layout/fragment_main_shop_review_item"/>
+                <TextView
+                    android:layout_width="match_parent"
+                    android:layout_height="2dip"
+                    android:background="@color/common_list_item_divide_bg"/>
+            </LinearLayout>
+
+            <LinearLayout
+                android:id="@+id/order_details_code_layout"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="vertical"
+                android:background="@color/common_font_color_ffffff">
+                <TextView
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:paddingTop="@dimen/common_content_margin_10"
+                    android:paddingRight="@dimen/common_content_margin_20"
+                    android:gravity="center_vertical|right"
+                    android:text="@string/order_details_label_1"
+                    android:textSize="@dimen/common_font_size_12"
+                    android:textColor="@color/common_font_color_000000"/>
+                <TextView
+                    android:id="@+id/order_details_code"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginTop="@dimen/common_content_margin_10"
+                    android:gravity="center_horizontal"
+                    android:text="@string/order_details_label_1"
+                    android:textSize="@dimen/common_font_size_16"
+                    android:textColor="@color/common_font_color_fb8f03"
+                    android:textIsSelectable="true"/>
+                <TextView
+                    android:id="@+id/order_details_code_copy"
+                    android:layout_width="@dimen/order_list_item_center_topay_width"
+                    android:layout_height="@dimen/order_list_item_center_topay_height"
+                    android:layout_marginTop="@dimen/common_content_margin_10"
+                    android:layout_marginBottom="@dimen/common_content_margin_10"
+                    android:background="@drawable/common_button_1_selector"
+                    android:layout_gravity="center_horizontal"
+                    android:gravity="center"
+                    android:text="@string/order_details_label_2"
+                    android:textSize="@dimen/common_font_size_12"
+                    android:textColor="@color/common_font_color_ffffff"
+                    android:clickable="true"
+                    android:onClick="onClickViewCodeCopy"/>
+                <TextView
+                    android:layout_width="match_parent"
+                    android:layout_height="2dip"
+                    android:background="@color/common_list_item_divide_bg"/>
+            </LinearLayout>
+
+            <LinearLayout
+                android:id="@+id/order_details_notice"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="vertical"
+                android:background="@color/common_font_color_ffffff"/>
+
+            <RelativeLayout
+                android:id="@+id/order_details_game"
+                android:layout_width="match_parent"
+                android:layout_height="72dip"
+                android:layout_marginTop="@dimen/common_content_margin_10"
+                android:background="@color/common_font_color_ffffff">
+                <ImageView
+                    android:id="@+id/order_details_game_img"
+                    android:layout_width="87dip"
+                    android:layout_height="52dip"
+                    android:layout_marginRight="@dimen/common_content_margin_15"
+                    android:layout_alignParentRight="true"
+                    android:layout_centerVertical="true"
+                    android:background="@mipmap/common_game_logo"/>
+                <TextView
+                    android:id="@+id/order_details_game_servername"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_marginTop="@dimen/common_content_margin_10"
+                    android:layout_toLeftOf="@id/order_details_game_img"
+                    android:layout_alignBaseline="@id/order_details_game_img"
+                    android:layout_marginRight="@dimen/common_content_margin_10"
+                    android:gravity="right|center_vertical"
+                    android:textSize="@dimen/common_font_size_12"
+                    android:textColor="@color/common_font_color_000000"
+                    android:text="@string/order_details_label_3"/>
+                <TextView
+                    android:id="@+id/order_details_game_rolename"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_toLeftOf="@id/order_details_game_img"
+                    android:layout_below="@id/order_details_game_servername"
+                    android:layout_alignBaseline="@id/order_details_game_img"
+                    android:layout_marginTop="@dimen/common_content_margin_5"
+                    android:layout_marginRight="@dimen/common_content_margin_10"
+                    android:gravity="right|center_vertical"
+                    android:textSize="@dimen/common_font_size_12"
+                    android:textColor="@color/common_font_color_000000"
+                    android:text="@string/order_details_label_3"/>
+                <TextView
+                    android:layout_width="match_parent"
+                    android:layout_height="2dip"
+                    android:background="@color/common_list_item_divide_bg"
+                    android:layout_alignParentBottom="true"/>
+                <TextView
+                    android:layout_width="match_parent"
+                    android:layout_height="2dip"
+                    android:background="@color/common_list_item_divide_bg"
+                    android:layout_alignParentTop="true"/>
+
+            </RelativeLayout>
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="vertical"
+                android:background="@color/common_font_color_ffffff">
+                <TextView
+                    android:id="@+id/order_details_status"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginTop="@dimen/common_content_margin_10"
+                    android:paddingRight="@dimen/common_content_margin_20"
+                    android:gravity="right|center_vertical"
+                    android:textSize="@dimen/common_font_size_12"
+                    android:textColor="@color/common_font_color_868585"
+                    android:text="@string/order_details_label_3"/>
+                <TextView
+                    android:id="@+id/order_details_downtime"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginTop="@dimen/common_content_margin_10"
+                    android:paddingRight="@dimen/common_content_margin_20"
+                    android:gravity="right|center_vertical"
+                    android:textSize="@dimen/common_font_size_12"
+                    android:textColor="@color/common_font_color_868585"
+                    android:text="@string/order_details_label_4"/>
+                <TextView
+                    android:id="@+id/order_details_paytime"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginTop="@dimen/common_content_margin_10"
+                    android:paddingRight="@dimen/common_content_margin_20"
+                    android:gravity="right|center_vertical"
+                    android:textSize="@dimen/common_font_size_12"
+                    android:textColor="@color/common_font_color_868585"
+                    android:text="@string/order_details_label_5"/>
+                <TextView
+                    android:id="@+id/order_details_paystyle"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginTop="@dimen/common_content_margin_10"
+                    android:layout_marginBottom="@dimen/common_content_margin_10"
+                    android:paddingRight="@dimen/common_content_margin_20"
+                    android:gravity="right|center_vertical"
+                    android:textSize="@dimen/common_font_size_12"
+                    android:textColor="@color/common_font_color_868585"
+                    android:text="@string/order_details_label_6"/>
+
+                <TextView
+                    android:layout_width="match_parent"
+                    android:layout_height="2dip"
+                    android:background="@color/common_list_item_divide_bg"/>
+            </LinearLayout>
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="vertical"
+                android:layout_marginTop="@dimen/common_content_margin_10"
+                android:background="@color/common_font_color_ffffff">
+                <TextView
+                    android:layout_width="match_parent"
+                    android:layout_height="2dip"
+                    android:background="@color/common_list_item_divide_bg"/>
+                <RelativeLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginTop="@dimen/common_content_margin_10"
+                    android:layout_marginBottom="@dimen/common_content_margin_10">
+                    <TextView
+                        android:id="@+id/order_details_price"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_marginLeft="@dimen/common_content_margin_20"
+                        android:layout_alignParentLeft="true"
+                        android:gravity="right|center_vertical"
+                        android:textSize="@dimen/common_font_size_16"
+                        android:textColor="@color/common_font_color_fb8f03"/>
+                    <TextView
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_marginRight="@dimen/common_content_margin_20"
+                        android:layout_alignParentRight="true"
+                        android:gravity="right|center_vertical"
+                        android:textSize="@dimen/common_font_size_14"
+                        android:textColor="@color/common_font_color_000000"
+                        android:text="@string/order_details_label_10"/>
+                </RelativeLayout>
+                <TextView
+                    android:layout_width="match_parent"
+                    android:layout_height="2dip"
+                    android:background="@color/common_list_item_divide_bg"/>
+            </LinearLayout>
+
+            <TextView
+                android:id="@+id/order_details_topay"
+                android:layout_width="match_parent"
+                android:layout_height="@dimen/login_style_btn_height"
+                android:layout_marginTop="@dimen/common_content_margin_30"
+                android:layout_marginRight="@dimen/common_content_margin_50"
+                android:layout_marginLeft="@dimen/common_content_margin_50"
+                android:layout_marginBottom="@dimen/common_content_margin_50"
+                android:layout_alignParentRight="true"
+                android:background="@drawable/common_button_1_selector"
+                android:gravity="center"
+                android:textSize="@dimen/common_font_size_14"
+                android:textColor="@color/common_font_color_ffffff"
+                android:text="@string/order_details_label_9"
+                android:clickable="true"
+                android:onClick="onClickViewTopay"/>
+        </LinearLayout>
+    </ScrollView>
+
+</LinearLayout>
\ No newline at end of file
Index: app/src/main/java/com/base/tools/slide/SlideItemListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/slide/SlideItemListener.java	(revision )
+++ app/src/main/java/com/base/tools/slide/SlideItemListener.java	(revision )
@@ -0,0 +1,24 @@
+package com.base.tools.slide;
+
+/**
+ * Listener to get callback notifications for the SlideListView
+ */
+public interface SlideItemListener {
+	/**
+	 * 
+	 * @param position
+	 * @param left
+	 *            opend left back view or right back view.if true,opend left
+	 *            back view,else right
+	 */
+	void onOpend(int position, boolean left);
+
+	/**
+	 * 
+	 * @param position
+	 * @param left
+	 *            opend left back view or right back view.if true,opend left
+	 *            back view,else right
+	 */
+	void onClosed(int position, boolean left);
+}
Index: app/src/main/res/drawable/common_bg_ffffff.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/common_bg_ffffff.xml	(revision )
+++ app/src/main/res/drawable/common_bg_ffffff.xml	(revision )
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>  
+<shape xmlns:android="http://schemas.android.com/apk/res/android">  
+<solid android:color="#FFFFFF"/>  
+<corners android:radius="5dip"/>
+<padding android:left="0dp" android:top="0dp" android:right="0dp" android:bottom="0dp" />  
+</shape>
\ No newline at end of file
Index: gradlew
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- gradlew	(revision )
+++ gradlew	(revision )
@@ -0,0 +1,164 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# For Cygwin, ensure paths are in UNIX format before anything is touched.
+if $cygwin ; then
+    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
+fi
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >&-
+APP_HOME="`pwd -P`"
+cd "$SAVED" >&-
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
Index: app/src/main/res/layout/fragment_main_shop_newest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_main_shop_newest.xml	(revision )
+++ app/src/main/res/layout/fragment_main_shop_newest.xml	(revision )
@@ -0,0 +1,59 @@
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/main_shop_newest"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:orientation="vertical">
+
+    <RelativeLayout
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/fragment_shop_category_height">
+
+        <TextView
+            android:id="@+id/fragment_shop_category_newest_img"
+            android:layout_width="@dimen/fragment_shop_category_head_img_height"
+            android:layout_height="@dimen/fragment_shop_category_head_img_height"
+            android:layout_alignParentRight="true"
+            android:layout_centerVertical="true"
+            android:layout_marginRight="@dimen/common_content_margin_10"
+            android:background="@mipmap/fragment_shop_category_newest"/>
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_toLeftOf="@id/fragment_shop_category_newest_img"
+            android:layout_centerVertical="true"
+            android:layout_marginRight="@dimen/common_content_margin_5"
+            android:gravity="right|center_vertical"
+            android:text="@string/fragment_shop_category_newest"
+            android:textSize="@dimen/common_font_size_14"
+            android:textColor="@color/common_font_color_000000"/>
+        <TextView
+            android:id="@+id/fragment_shop_category_newest_more"
+            android:layout_width="wrap_content"
+            android:layout_height="fill_parent"
+            android:layout_alignParentLeft="true"
+            android:layout_centerVertical="true"
+            android:paddingLeft="@dimen/common_content_margin_10"
+            android:gravity="right|center_vertical"
+            android:text="@string/fragment_shop_category_more"
+            android:textSize="@dimen/common_font_size_12"
+            android:textColor="@color/common_font_color_000000"
+            android:clickable="true"
+            android:onClick="onClickView"/>
+    </RelativeLayout>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:background="@color/common_font_color_ffffff">
+
+        <GridView
+            android:id="@+id/fragment_shop_category_newest_grid"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_margin="@dimen/common_content_margin_10"
+            android:horizontalSpacing="@dimen/common_content_margin_5"
+            android:numColumns="2"/>
+    </LinearLayout>
+
+</LinearLayout>
Index: app/src/main/java/com/base/tools/slide/SlideListView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/slide/SlideListView.java	(revision )
+++ app/src/main/java/com/base/tools/slide/SlideListView.java	(revision )
@@ -0,0 +1,420 @@
+package com.base.tools.slide;
+
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.database.DataSetObserver;
+import android.support.v4.view.MotionEventCompat;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.MotionEvent;
+import android.view.View;
+import android.widget.AbsListView;
+import android.widget.AdapterView;
+import android.widget.ListAdapter;
+import android.widget.ListView;
+
+import com.oasgames.android.oaspay.R;
+
+import java.lang.reflect.Field;
+
+public class SlideListView extends ListView {
+	public static final boolean DEUBG = false;
+	public static final String TAG = SlideListView.class.getSimpleName();
+	// extern Listener
+	private OnItemClickListener mOnItemClickListener;
+	private OnScrollListener mOnScrollListener;
+	private SlideItemListener mSlideItemListener;
+	// inner listener
+	private SlideTouchListener mTouchListener;
+	// Slide value
+	private long mAnimationTime;
+	private SlideMode mSlideMode;
+	private SlideAction mSlideLeftAction;
+	private SlideAction mSlideRightAction;
+
+	private SlideBaseAdapter mAdapter;
+
+	private boolean isInScrolling = false;
+
+	public SlideListView(Context context) {
+		super(context);
+		init(null);
+	}
+
+	public SlideListView(Context context, AttributeSet attrs) {
+		super(context, attrs);
+		init(attrs);
+	}
+
+	public SlideListView(Context context, AttributeSet attrs, int defStyle) {
+		super(context, attrs, defStyle);
+		init(attrs);
+	}
+
+	/**
+	 * Init ListView
+	 * 
+	 * @param attrs
+	 *            AttributeSet
+	 */
+	private void init(AttributeSet attrs) {
+		if (attrs != null) {
+			TypedArray styled = getContext().obtainStyledAttributes(attrs, R.styleable.SlideListView);
+			mAnimationTime = styled.getInteger(R.styleable.SlideListView_slideAnimationTime, 0);
+			mSlideMode = SlideMode.mapIntToValue(styled.getInteger(R.styleable.SlideListView_slideMode, 0));
+			mSlideLeftAction = SlideAction.mapIntToValue(styled.getInteger(R.styleable.SlideListView_slideLeftAction, 0));
+			mSlideRightAction = SlideAction.mapIntToValue(styled.getInteger(R.styleable.SlideListView_slideRightAction, 0));
+			styled.recycle();
+		}
+		mTouchListener = new SlideTouchListener(this);
+		// You can't use setOnTouchListener() in your own code
+		setOnTouchListener(mTouchListener);
+		// You can use setOnScrollListener() in your own code
+		setOnScrollListener(mInnerOnScrollListener);
+		// You can use setOnItemClickListener() in your own code
+		setOnItemClickListener(mInnerOnItemClickListener);
+	}
+
+	@Override
+	public void setOnItemClickListener(OnItemClickListener listener) {
+		if (listener != mInnerOnItemClickListener) {
+			mOnItemClickListener = listener;
+		} else {
+			super.setOnItemClickListener(listener);
+		}
+	}
+
+	@Override
+	public void setOnScrollListener(OnScrollListener listener) {
+		if (listener != mInnerOnScrollListener) {
+			mOnScrollListener = listener;
+		} else {
+			super.setOnScrollListener(listener);
+		}
+	}
+
+	private OnScrollListener mInnerOnScrollListener = new OnScrollListener() {
+		@Override
+		public void onScrollStateChanged(AbsListView view, int scrollState) {
+			if (scrollState == SCROLL_STATE_IDLE) {
+				isInScrolling = false;
+			} else {
+				isInScrolling = true;
+			}
+			if (mOnScrollListener != null) {
+				mOnScrollListener.onScrollStateChanged(view, scrollState);
+			}
+		}
+
+		@Override
+		public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+			if (mOnScrollListener != null) {
+				mOnScrollListener.onScroll(view, firstVisibleItem, visibleItemCount, totalItemCount);
+			}
+		}
+	};
+
+	private OnItemClickListener mInnerOnItemClickListener = new OnItemClickListener() {
+
+		@Override
+		public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+			if (mTouchListener.isOpend()) {
+				mTouchListener.closeOpenedItem();
+				return;
+			}
+			if (mOnItemClickListener != null) {
+				mOnItemClickListener.onItemClick(parent, view, position, id);
+			}
+		}
+	};
+
+	public void setSlideItemListener(SlideItemListener listener) {
+		mSlideItemListener = listener;
+	}
+
+	// notify opend
+	void onOpend(int position, boolean left) {
+		if (DEUBG) {
+			Log.d(TAG, (left ? "left" : "right") + " back view " + "is opend at position " + position);
+		}
+		if (mSlideItemListener != null) {
+			mSlideItemListener.onOpend(position, left);
+		}
+	}
+
+	// notify closed
+	void onClosed(int position, boolean left) {
+		if (DEUBG) {
+			Log.d(TAG, (left ? "left" : "right") + " back view " + "is closed at position " + position);
+		}
+		if (mSlideItemListener != null) {
+			mSlideItemListener.onClosed(position, left);
+		}
+	}
+
+	boolean isInScrolling() {
+		return isInScrolling;
+	}
+
+	boolean isSlideAdapter() {
+		return mAdapter != null;
+	}
+
+	SlideBaseAdapter getSlideAdapter() {
+		return mAdapter;
+	}
+
+	boolean isSlideEnable() {
+		return isSlideAdapter() && mSlideMode != SlideMode.NONE;
+	}
+
+	public void setSlideMode(SlideMode slideMode) {
+		if (mSlideMode != slideMode) {
+			if (isSlideAdapter()) {
+				if (mTouchListener.isOpend()) {
+					mTouchListener.closeOpenedItem();
+				}
+				mAdapter.setSlideMode(slideMode);
+				mAdapter.notifyDataSetInvalidated();
+			}
+			mSlideMode = slideMode;
+		}
+	}
+
+	public SlideMode getSlideMode() {
+		return mSlideMode;
+	}
+
+	public void setSlideLeftAction(SlideAction slideAction) {
+		if (mSlideLeftAction != slideAction) {
+			if (isSlideAdapter()) {
+				if (mTouchListener.isOpend()) {
+					mTouchListener.closeOpenedItem();
+				}
+			}
+			mSlideLeftAction = slideAction;
+			if (isSlideAdapter()) {
+				SlideBaseAdapter adapter = mAdapter;
+				setAdapter(null);
+				setAdapter(adapter);
+			}
+		}
+	}
+
+	public SlideAction getSlideLeftAction() {
+		return mSlideLeftAction;
+	}
+
+	public void setSlideRightAction(SlideAction slideAction) {
+		if (mSlideRightAction != slideAction) {
+			if (isSlideAdapter()) {
+				if (mTouchListener.isOpend()) {
+					mTouchListener.closeOpenedItem();
+				}
+			}
+			mSlideRightAction = slideAction;
+			if (isSlideAdapter()) {
+				SlideBaseAdapter adapter = mAdapter;
+				setAdapter(null);
+				setAdapter(adapter);
+			}
+		}
+	}
+
+	public SlideAction getSlideRightAction() {
+		return mSlideRightAction;
+	}
+
+	public long getAnimationTime() {
+		return mAnimationTime;
+	}
+
+	public void setAnimationTime(long animationTime) {
+		this.mAnimationTime = animationTime;
+	}
+
+	@Override
+	public void setAdapter(ListAdapter adapter) {
+		mAdapter = null;
+		if (adapter != null && adapter instanceof SlideBaseAdapter) {
+			mAdapter = (SlideBaseAdapter) adapter;
+			mAdapter.setSlideMode(mSlideMode);
+			mAdapter.setSlideLeftAction(mSlideLeftAction);
+			mAdapter.setSlideRightAction(mSlideRightAction);
+		}
+		super.setAdapter(adapter);
+
+		if (mTouchListener.isOpend()) {
+		   mTouchListener.closeOpenedItem();
+	   } else {
+		   mTouchListener.reset();
+	   }
+
+		if (adapter != null) {
+			adapter.registerDataSetObserver(new DataSetObserver() {
+				@Override
+				public void onChanged() {
+					super.onChanged();
+					if (DEUBG) {
+						Log.e(TAG, "Adapter data has changed");
+					}
+					if (mTouchListener.isOpend()) {
+						mTouchListener.closeOpenedItem();
+					}else
+						mTouchListener.reset();
+				}
+			});
+		}
+	}
+
+	public boolean dispatchTouchEvent(MotionEvent ev) {
+		if (isEnabled() && isSlideEnable()) {
+			int action = MotionEventCompat.getActionMasked(ev);
+			if (action == MotionEvent.ACTION_DOWN) {
+				int downPosition = pointToPosition((int) ev.getX(), (int) ev.getY());
+				int opendPosition = mTouchListener.getOpendPosition();
+				// There is a item in opend or half opend(exception occured in
+				// previous slideing event) status
+				if (opendPosition != INVALID_POSITION) {
+					// if slideing or auto
+					// slideing(SlideTouchListener.autoScroll()) has not
+					// finished,drop this motion event(avoid
+					// NullPointerException)
+					if (mTouchListener.isInSliding()) {
+						return false;
+					}
+					// if down position not equals the opend position,drop this
+					// motion event and close the opend item
+					if (downPosition != opendPosition) {
+						mTouchListener.closeOpenedItem();
+						return false;
+					}
+				}
+			}
+		}
+		return super.dispatchTouchEvent(ev);
+	}
+
+	@Override
+	public boolean onInterceptTouchEvent(MotionEvent ev) {
+		if (isEnabled() && isSlideEnable()) {
+			if (mTouchListener.onInterceptTouchEvent(ev)) {
+				return true;
+			}
+		}
+		return super.onInterceptTouchEvent(ev);
+	}
+
+	public static enum SlideMode {
+		NONE(0x0), LEFT(0x1), RIGHT(0x2), BOTH(0x3);
+		/**
+		 * Maps an int to a specific mode. This is needed when saving state, or
+		 * inflating the view from XML where the mode is given through a attr
+		 * int.
+		 * 
+		 * @param modeInt
+		 *            - int to map a Mode to
+		 * @return Mode that modeInt maps to, or PULL_FROM_START by default.
+		 */
+		static SlideMode mapIntToValue(final int modeInt) {
+			for (SlideMode value : SlideMode.values()) {
+				if (modeInt == value.getIntValue()) {
+					return value;
+				}
+			}
+			// If not, return default
+			return getDefault();
+		}
+
+		static SlideMode getDefault() {
+			return NONE;
+		}
+
+		private int mIntValue;
+
+		// The modeInt values need to match those from attrs.xml
+		SlideMode(int modeInt) {
+			mIntValue = modeInt;
+		}
+
+		int getIntValue() {
+			return mIntValue;
+		}
+
+	}
+
+	public static enum SlideAction {
+		SCROLL(0x0), REVEAL(0x1);
+		/**
+		 * Maps an int to a specific mode. This is needed when saving state, or
+		 * inflating the view from XML where the mode is given through a attr
+		 * int.
+		 * 
+		 * @param actionInt
+		 *            - int to map a Mode to
+		 * @return Mode that modeInt maps to, or PULL_FROM_START by default.
+		 */
+		static SlideAction mapIntToValue(final int actionInt) {
+			for (SlideAction value : SlideAction.values()) {
+				if (actionInt == value.getIntValue()) {
+					return value;
+				}
+			}
+
+			// If not, return default
+			return getDefault();
+		}
+
+		static SlideAction getDefault() {
+			return SCROLL;
+		}
+
+		private int mIntValue;
+
+		// The modeInt values need to match those from attrs.xml
+		SlideAction(int actionInt) {
+			mIntValue = actionInt;
+		}
+
+		int getIntValue() {
+			return mIntValue;
+		}
+
+	}
+
+	private static Field sTouch_Mode_Field;
+	static {
+		try {
+			sTouch_Mode_Field = AbsListView.class
+					.getDeclaredField("mTouchMode");
+			sTouch_Mode_Field.setAccessible(true);
+
+
+		} catch (NoSuchFieldException e) {
+			e.printStackTrace();
+		}
+	}
+	void checkScrolling() {
+		if (!isInScrolling) {
+			return;
+		}
+		if(sTouch_Mode_Field == null){
+			return;
+		}
+		int touchMode = 0;
+		try {
+			touchMode = sTouch_Mode_Field.getInt(this);
+		} catch (IllegalAccessException e1) {
+			e1.printStackTrace();
+		} catch (IllegalArgumentException e1) {
+			e1.printStackTrace();
+		}
+		if (DEUBG) {
+			Log.d(TAG, "mTouchMode:" + touchMode);
+		}
+		if (touchMode == -1) {// touchMode==TOUCH_MODE_REST
+			isInScrolling = false;
+		}
+	}
+
+}
Index: app/src/main/java/com/nineoldandroids/animation/KeyframeSet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nineoldandroids/animation/KeyframeSet.java	(revision )
+++ app/src/main/java/com/nineoldandroids/animation/KeyframeSet.java	(revision )
@@ -0,0 +1,227 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.nineoldandroids.animation;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+
+import android.view.animation.Interpolator;
+
+import com.nineoldandroids.animation.Keyframe.FloatKeyframe;
+import com.nineoldandroids.animation.Keyframe.IntKeyframe;
+import com.nineoldandroids.animation.Keyframe.ObjectKeyframe;
+
+/**
+ * This class holds a collection of Keyframe objects and is called by ValueAnimator to calculate
+ * values between those keyframes for a given animation. The class internal to the animation
+ * package because it is an implementation detail of how Keyframes are stored and used.
+ */
+class KeyframeSet {
+
+    int mNumKeyframes;
+
+    Keyframe mFirstKeyframe;
+    Keyframe mLastKeyframe;
+    /*Time*/Interpolator mInterpolator; // only used in the 2-keyframe case
+    ArrayList<Keyframe> mKeyframes; // only used when there are not 2 keyframes
+    TypeEvaluator mEvaluator;
+
+
+    public KeyframeSet(Keyframe... keyframes) {
+        mNumKeyframes = keyframes.length;
+        mKeyframes = new ArrayList<Keyframe>();
+        mKeyframes.addAll(Arrays.asList(keyframes));
+        mFirstKeyframe = mKeyframes.get(0);
+        mLastKeyframe = mKeyframes.get(mNumKeyframes - 1);
+        mInterpolator = mLastKeyframe.getInterpolator();
+    }
+
+    public static KeyframeSet ofInt(int... values) {
+        int numKeyframes = values.length;
+        IntKeyframe keyframes[] = new IntKeyframe[Math.max(numKeyframes,2)];
+        if (numKeyframes == 1) {
+            keyframes[0] = (IntKeyframe) Keyframe.ofInt(0f);
+            keyframes[1] = (IntKeyframe) Keyframe.ofInt(1f, values[0]);
+        } else {
+            keyframes[0] = (IntKeyframe) Keyframe.ofInt(0f, values[0]);
+            for (int i = 1; i < numKeyframes; ++i) {
+                keyframes[i] = (IntKeyframe) Keyframe.ofInt((float) i / (numKeyframes - 1), values[i]);
+            }
+        }
+        return new IntKeyframeSet(keyframes);
+    }
+
+    public static KeyframeSet ofFloat(float... values) {
+        int numKeyframes = values.length;
+        FloatKeyframe keyframes[] = new FloatKeyframe[Math.max(numKeyframes,2)];
+        if (numKeyframes == 1) {
+            keyframes[0] = (FloatKeyframe) Keyframe.ofFloat(0f);
+            keyframes[1] = (FloatKeyframe) Keyframe.ofFloat(1f, values[0]);
+        } else {
+            keyframes[0] = (FloatKeyframe) Keyframe.ofFloat(0f, values[0]);
+            for (int i = 1; i < numKeyframes; ++i) {
+                keyframes[i] = (FloatKeyframe) Keyframe.ofFloat((float) i / (numKeyframes - 1), values[i]);
+            }
+        }
+        return new FloatKeyframeSet(keyframes);
+    }
+
+    public static KeyframeSet ofKeyframe(Keyframe... keyframes) {
+        // if all keyframes of same primitive type, create the appropriate KeyframeSet
+        int numKeyframes = keyframes.length;
+        boolean hasFloat = false;
+        boolean hasInt = false;
+        boolean hasOther = false;
+        for (int i = 0; i < numKeyframes; ++i) {
+            if (keyframes[i] instanceof FloatKeyframe) {
+                hasFloat = true;
+            } else if (keyframes[i] instanceof IntKeyframe) {
+                hasInt = true;
+            } else {
+                hasOther = true;
+            }
+        }
+        if (hasFloat && !hasInt && !hasOther) {
+            FloatKeyframe floatKeyframes[] = new FloatKeyframe[numKeyframes];
+            for (int i = 0; i < numKeyframes; ++i) {
+                floatKeyframes[i] = (FloatKeyframe) keyframes[i];
+            }
+            return new FloatKeyframeSet(floatKeyframes);
+        } else if (hasInt && !hasFloat && !hasOther) {
+            IntKeyframe intKeyframes[] = new IntKeyframe[numKeyframes];
+            for (int i = 0; i < numKeyframes; ++i) {
+                intKeyframes[i] = (IntKeyframe) keyframes[i];
+            }
+            return new IntKeyframeSet(intKeyframes);
+        } else {
+            return new KeyframeSet(keyframes);
+        }
+    }
+
+    public static KeyframeSet ofObject(Object... values) {
+        int numKeyframes = values.length;
+        ObjectKeyframe keyframes[] = new ObjectKeyframe[Math.max(numKeyframes,2)];
+        if (numKeyframes == 1) {
+            keyframes[0] = (ObjectKeyframe) Keyframe.ofObject(0f);
+            keyframes[1] = (ObjectKeyframe) Keyframe.ofObject(1f, values[0]);
+        } else {
+            keyframes[0] = (ObjectKeyframe) Keyframe.ofObject(0f, values[0]);
+            for (int i = 1; i < numKeyframes; ++i) {
+                keyframes[i] = (ObjectKeyframe) Keyframe.ofObject((float) i / (numKeyframes - 1), values[i]);
+            }
+        }
+        return new KeyframeSet(keyframes);
+    }
+
+    /**
+     * Sets the TypeEvaluator to be used when calculating animated values. This object
+     * is required only for KeyframeSets that are not either IntKeyframeSet or FloatKeyframeSet,
+     * both of which assume their own evaluator to speed up calculations with those primitive
+     * types.
+     *
+     * @param evaluator The TypeEvaluator to be used to calculate animated values.
+     */
+    public void setEvaluator(TypeEvaluator evaluator) {
+        mEvaluator = evaluator;
+    }
+
+    @Override
+    public KeyframeSet clone() {
+        ArrayList<Keyframe> keyframes = mKeyframes;
+        int numKeyframes = mKeyframes.size();
+        Keyframe[] newKeyframes = new Keyframe[numKeyframes];
+        for (int i = 0; i < numKeyframes; ++i) {
+            newKeyframes[i] = keyframes.get(i).clone();
+        }
+        KeyframeSet newSet = new KeyframeSet(newKeyframes);
+        return newSet;
+    }
+
+    /**
+     * Gets the animated value, given the elapsed fraction of the animation (interpolated by the
+     * animation's interpolator) and the evaluator used to calculate in-between values. This
+     * function maps the input fraction to the appropriate keyframe interval and a fraction
+     * between them and returns the interpolated value. Note that the input fraction may fall
+     * outside the [0-1] bounds, if the animation's interpolator made that happen (e.g., a
+     * spring interpolation that might send the fraction past 1.0). We handle this situation by
+     * just using the two keyframes at the appropriate end when the value is outside those bounds.
+     *
+     * @param fraction The elapsed fraction of the animation
+     * @return The animated value.
+     */
+    public Object getValue(float fraction) {
+
+        // Special-case optimization for the common case of only two keyframes
+        if (mNumKeyframes == 2) {
+            if (mInterpolator != null) {
+                fraction = mInterpolator.getInterpolation(fraction);
+            }
+            return mEvaluator.evaluate(fraction, mFirstKeyframe.getValue(),
+                    mLastKeyframe.getValue());
+        }
+        if (fraction <= 0f) {
+            final Keyframe nextKeyframe = mKeyframes.get(1);
+            final /*Time*/Interpolator interpolator = nextKeyframe.getInterpolator();
+            if (interpolator != null) {
+                fraction = interpolator.getInterpolation(fraction);
+            }
+            final float prevFraction = mFirstKeyframe.getFraction();
+            float intervalFraction = (fraction - prevFraction) /
+                (nextKeyframe.getFraction() - prevFraction);
+            return mEvaluator.evaluate(intervalFraction, mFirstKeyframe.getValue(),
+                    nextKeyframe.getValue());
+        } else if (fraction >= 1f) {
+            final Keyframe prevKeyframe = mKeyframes.get(mNumKeyframes - 2);
+            final /*Time*/Interpolator interpolator = mLastKeyframe.getInterpolator();
+            if (interpolator != null) {
+                fraction = interpolator.getInterpolation(fraction);
+            }
+            final float prevFraction = prevKeyframe.getFraction();
+            float intervalFraction = (fraction - prevFraction) /
+                (mLastKeyframe.getFraction() - prevFraction);
+            return mEvaluator.evaluate(intervalFraction, prevKeyframe.getValue(),
+                    mLastKeyframe.getValue());
+        }
+        Keyframe prevKeyframe = mFirstKeyframe;
+        for (int i = 1; i < mNumKeyframes; ++i) {
+            Keyframe nextKeyframe = mKeyframes.get(i);
+            if (fraction < nextKeyframe.getFraction()) {
+                final /*Time*/Interpolator interpolator = nextKeyframe.getInterpolator();
+                if (interpolator != null) {
+                    fraction = interpolator.getInterpolation(fraction);
+                }
+                final float prevFraction = prevKeyframe.getFraction();
+                float intervalFraction = (fraction - prevFraction) /
+                    (nextKeyframe.getFraction() - prevFraction);
+                return mEvaluator.evaluate(intervalFraction, prevKeyframe.getValue(),
+                        nextKeyframe.getValue());
+            }
+            prevKeyframe = nextKeyframe;
+        }
+        // shouldn't reach here
+        return mLastKeyframe.getValue();
+    }
+
+    @Override
+    public String toString() {
+        String returnVal = " ";
+        for (int i = 0; i < mNumKeyframes; ++i) {
+            returnVal += mKeyframes.get(i).getValue() + "  ";
+        }
+        return returnVal;
+    }
+}
Index: app/src/main/java/com/oasgames/android/oaspay/entity/PayHistoryList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/entity/PayHistoryList.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/entity/PayHistoryList.java	(revision )
@@ -0,0 +1,33 @@
+package com.oasgames.android.oaspay.entity;
+
+import java.util.List;
+
+/**
+ * 支付历史记录集合
+ * @author Administrator
+ *
+ */
+public class PayHistoryList {
+	public int page;
+	public int page_size;
+	public String game_code;
+	public String uid;
+	public List<PayHistoryInfoDetail> msg;
+	public void setPage(int page) {
+		this.page = page;
+	}
+	public void setPage_size(int page_size) {
+		this.page_size = page_size;
+	}
+	public void setGame_code(String game_code) {
+		this.game_code = game_code;
+	}
+	public void setUid(String uid) {
+		this.uid = uid;
+	}
+	public void setMsg(List<PayHistoryInfoDetail> msg) {
+		this.msg = msg;
+	}
+	
+	
+}
Index: app/src/main/java/com/base/tools/utils/BasesConstant.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/utils/BasesConstant.java	(revision )
+++ app/src/main/java/com/base/tools/utils/BasesConstant.java	(revision )
@@ -0,0 +1,44 @@
+package com.base.tools.utils;
+
+/**
+ * 基础 常量
+ * Created by Administrator on 2015/10/15.
+ */
+public class BasesConstant {
+
+    public static String ENVIRONMENT_SANDBOX = "sandbox";
+    public static String ENVIRONMENT_PRODUCTION = "production";
+
+    public static String MODE_ONLINE = "online";
+    public static String MODE_OFFLINE = "offline";
+
+
+    /**
+     * 数据格式异常
+     */
+    public static final int RESULT_FAIL_DATAERROR = -2;
+    /**
+     * 成功
+     */
+    public static final int RESULT_SUCCESS = -1;
+    /**
+     * 失败
+     */
+    public static final int RESULT_FAIL = 0;
+    /**
+     * 异常
+     */
+    public static final int RESULT_EXCEPTION = 1;
+    /**
+     * 取消
+     */
+    public static final int RESULT_CANCEL = 2;
+    /**
+     * 操作结果未知（此code一般由server to server通知）
+     */
+    public static final int RESULT_PENDING = 3;
+    /**
+     * 支付成功，但发钻失败，用户不愿意重试的情况下得结果码
+     */
+    public static final int RESULT_EXCEPTION_GOOGLEPAY_EXCEPTION = 11;
+}
Index: app/src/main/java/com/nineoldandroids/util/IntProperty.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nineoldandroids/util/IntProperty.java	(revision )
+++ app/src/main/java/com/nineoldandroids/util/IntProperty.java	(revision )
@@ -0,0 +1,46 @@
+/*
+ * Copyright (C) 2011 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.nineoldandroids.util;
+
+/**
+ * An implementation of {@link android.util.Property} to be used specifically with fields of type
+ * <code>int</code>. This type-specific subclass enables performance benefit by allowing
+ * calls to a {@link #set(Object, Integer) set()} function that takes the primitive
+ * <code>int</code> type and avoids autoboxing and other overhead associated with the
+ * <code>Integer</code> class.
+ *
+ * @param <T> The class on which the Property is declared.
+ *
+ * @hide
+ */
+public abstract class IntProperty<T> extends Property<T, Integer> {
+
+    public IntProperty(String name) {
+        super(Integer.class, name);
+    }
+
+    /**
+     * A type-specific override of the {@link #set(Object, Integer)} that is faster when dealing
+     * with fields of type <code>int</code>.
+     */
+    public abstract void setValue(T object, int value);
+
+    @Override
+    final public void set(T object, Integer value) {
+        set(object, value.intValue());
+    }
+
+}
\ No newline at end of file
Index: app/src/main/res/drawable/order_list_head_left_selector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/order_list_head_left_selector.xml	(revision )
+++ app/src/main/res/drawable/order_list_head_left_selector.xml	(revision )
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <!--<item android:drawable="@mipmap/main_foot_shop_checked" android:state_pressed="true"/>
+    <item android:drawable="@mipmap/main_foot_shop_checked" android:state_focused="true"/>
+    <item android:drawable="@mipmap/main_foot_shop_checked" android:state_selected="true"/>-->
+    <item android:drawable="@drawable/order_list_head_left_select" android:state_checked="true"/>
+    <item android:drawable="@drawable/order_list_head_left_unselect"/>
+
+</selector>
\ No newline at end of file
Index: app/src/main/java/com/nineoldandroids/view/animation/AnimatorProxy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nineoldandroids/view/animation/AnimatorProxy.java	(revision )
+++ app/src/main/java/com/nineoldandroids/view/animation/AnimatorProxy.java	(revision )
@@ -0,0 +1,322 @@
+package com.nineoldandroids.view.animation;
+
+import android.graphics.Camera;
+import android.graphics.Matrix;
+import android.graphics.RectF;
+import android.os.Build;
+import android.view.View;
+import android.view.animation.Animation;
+import android.view.animation.Transformation;
+
+import java.lang.ref.WeakReference;
+import java.util.WeakHashMap;
+
+/**
+ * A proxy class to allow for modifying post-3.0 view properties on all pre-3.0
+ * platforms. <strong>DO NOT</strong> wrap your views with this class if you
+ * are using {@code ObjectAnimator} as it will handle that itself.
+ */
+public final class AnimatorProxy extends Animation {
+    /** Whether or not the current running platform needs to be proxied. */
+    public static final boolean NEEDS_PROXY = Integer.valueOf(Build.VERSION.SDK).intValue() < Build.VERSION_CODES.HONEYCOMB;
+
+    private static final WeakHashMap<View, AnimatorProxy> PROXIES =
+            new WeakHashMap<View, AnimatorProxy>();
+
+    /**
+     * Create a proxy to allow for modifying post-3.0 view properties on all
+     * pre-3.0 platforms. <strong>DO NOT</strong> wrap your views if you are
+     * using {@code ObjectAnimator} as it will handle that itself.
+     *
+     * @param view View to wrap.
+     * @return Proxy to post-3.0 properties.
+     */
+    public static AnimatorProxy wrap(View view) {
+        AnimatorProxy proxy = PROXIES.get(view);
+        // This checks if the proxy already exists and whether it still is the animation of the given view
+        if (proxy == null || proxy != view.getAnimation()) {
+            proxy = new AnimatorProxy(view);
+            PROXIES.put(view, proxy);
+        }
+        return proxy;
+    }
+
+    private final WeakReference<View> mView;
+    private final Camera mCamera = new Camera();
+    private boolean mHasPivot;
+
+    private float mAlpha = 1;
+    private float mPivotX;
+    private float mPivotY;
+    private float mRotationX;
+    private float mRotationY;
+    private float mRotationZ;
+    private float mScaleX = 1;
+    private float mScaleY = 1;
+    private float mTranslationX;
+    private float mTranslationY;
+
+    private final RectF mBefore = new RectF();
+    private final RectF mAfter = new RectF();
+    private final Matrix mTempMatrix = new Matrix();
+
+    private AnimatorProxy(View view) {
+        setDuration(0); //perform transformation immediately
+        setFillAfter(true); //persist transformation beyond duration
+        view.setAnimation(this);
+        mView = new WeakReference<View>(view);
+    }
+
+    public float getAlpha() {
+        return mAlpha;
+    }
+    public void setAlpha(float alpha) {
+        if (mAlpha != alpha) {
+            mAlpha = alpha;
+            View view = mView.get();
+            if (view != null) {
+                view.invalidate();
+            }
+        }
+    }
+    public float getPivotX() {
+        return mPivotX;
+    }
+    public void setPivotX(float pivotX) {
+        if (!mHasPivot || mPivotX != pivotX) {
+            prepareForUpdate();
+            mHasPivot = true;
+            mPivotX = pivotX;
+            invalidateAfterUpdate();
+        }
+    }
+    public float getPivotY() {
+        return mPivotY;
+    }
+    public void setPivotY(float pivotY) {
+        if (!mHasPivot || mPivotY != pivotY) {
+            prepareForUpdate();
+            mHasPivot = true;
+            mPivotY = pivotY;
+            invalidateAfterUpdate();
+        }
+    }
+    public float getRotation() {
+        return mRotationZ;
+    }
+    public void setRotation(float rotation) {
+        if (mRotationZ != rotation) {
+            prepareForUpdate();
+            mRotationZ = rotation;
+            invalidateAfterUpdate();
+        }
+    }
+    public float getRotationX() {
+        return mRotationX;
+    }
+    public void setRotationX(float rotationX) {
+        if (mRotationX != rotationX) {
+            prepareForUpdate();
+            mRotationX = rotationX;
+            invalidateAfterUpdate();
+        }
+    }
+    public float getRotationY() {
+        return mRotationY;
+    }
+
+    public void setRotationY(float rotationY) {
+        if (mRotationY != rotationY) {
+            prepareForUpdate();
+            mRotationY = rotationY;
+            invalidateAfterUpdate();
+        }
+    }
+    public float getScaleX() {
+        return mScaleX;
+    }
+    public void setScaleX(float scaleX) {
+        if (mScaleX != scaleX) {
+            prepareForUpdate();
+            mScaleX = scaleX;
+            invalidateAfterUpdate();
+        }
+    }
+    public float getScaleY() {
+        return mScaleY;
+    }
+    public void setScaleY(float scaleY) {
+        if (mScaleY != scaleY) {
+            prepareForUpdate();
+            mScaleY = scaleY;
+            invalidateAfterUpdate();
+        }
+    }
+    public int getScrollX() {
+        View view = mView.get();
+        if (view == null) {
+            return 0;
+        }
+        return view.getScrollX();
+    }
+    public void setScrollX(int value) {
+        View view = mView.get();
+        if (view != null) {
+            view.scrollTo(value, view.getScrollY());
+        }
+    }
+    public int getScrollY() {
+        View view = mView.get();
+        if (view == null) {
+            return 0;
+        }
+        return view.getScrollY();
+    }
+    public void setScrollY(int value) {
+        View view = mView.get();
+        if (view != null) {
+            view.scrollTo(view.getScrollX(), value);
+        }
+    }
+
+    public float getTranslationX() {
+        return mTranslationX;
+    }
+    public void setTranslationX(float translationX) {
+        if (mTranslationX != translationX) {
+            prepareForUpdate();
+            mTranslationX = translationX;
+            invalidateAfterUpdate();
+        }
+    }
+    public float getTranslationY() {
+        return mTranslationY;
+    }
+    public void setTranslationY(float translationY) {
+        if (mTranslationY != translationY) {
+            prepareForUpdate();
+            mTranslationY = translationY;
+            invalidateAfterUpdate();
+        }
+    }
+    public float getX() {
+        View view = mView.get();
+        if (view == null) {
+            return 0;
+        }
+        return view.getLeft() + mTranslationX;
+    }
+    public void setX(float x) {
+        View view = mView.get();
+        if (view != null) {
+            setTranslationX(x - view.getLeft());
+        }
+    }
+    public float getY() {
+        View view = mView.get();
+        if (view == null) {
+            return 0;
+        }
+        return view.getTop() + mTranslationY;
+    }
+    public void setY(float y) {
+        View view = mView.get();
+        if (view != null) {
+            setTranslationY(y - view.getTop());
+        }
+    }
+
+    private void prepareForUpdate() {
+        View view = mView.get();
+        if (view != null) {
+            computeRect(mBefore, view);
+        }
+    }
+    private void invalidateAfterUpdate() {
+        View view = mView.get();
+        if (view == null || view.getParent() == null) {
+            return;
+        }
+
+        final RectF after = mAfter;
+        computeRect(after, view);
+        after.union(mBefore);
+
+        ((View)view.getParent()).invalidate(
+                (int) Math.floor(after.left),
+                (int) Math.floor(after.top),
+                (int) Math.ceil(after.right),
+                (int) Math.ceil(after.bottom));
+    }
+
+    private void computeRect(final RectF r, View view) {
+        // compute current rectangle according to matrix transformation
+        final float w = view.getWidth();
+        final float h = view.getHeight();
+
+        // use a rectangle at 0,0 to make sure we don't run into issues with scaling
+        r.set(0, 0, w, h);
+
+        final Matrix m = mTempMatrix;
+        m.reset();
+        transformMatrix(m, view);
+        mTempMatrix.mapRect(r);
+
+        r.offset(view.getLeft(), view.getTop());
+
+        // Straighten coords if rotations flipped them
+        if (r.right < r.left) {
+            final float f = r.right;
+            r.right = r.left;
+            r.left = f;
+        }
+        if (r.bottom < r.top) {
+            final float f = r.top;
+            r.top = r.bottom;
+            r.bottom = f;
+        }
+    }
+
+    private void transformMatrix(Matrix m, View view) {
+        final float w = view.getWidth();
+        final float h = view.getHeight();
+        final boolean hasPivot = mHasPivot;
+        final float pX = hasPivot ? mPivotX : w / 2f;
+        final float pY = hasPivot ? mPivotY : h / 2f;
+
+        final float rX = mRotationX;
+        final float rY = mRotationY;
+        final float rZ = mRotationZ;
+        if ((rX != 0) || (rY != 0) || (rZ != 0)) {
+            final Camera camera = mCamera;
+            camera.save();
+            camera.rotateX(rX);
+            camera.rotateY(rY);
+            camera.rotateZ(-rZ);
+            camera.getMatrix(m);
+            camera.restore();
+            m.preTranslate(-pX, -pY);
+            m.postTranslate(pX, pY);
+        }
+
+        final float sX = mScaleX;
+        final float sY = mScaleY;
+        if ((sX != 1.0f) || (sY != 1.0f)) {
+            m.postScale(sX, sY);
+            final float sPX = -(pX / w) * ((sX * w) - w);
+            final float sPY = -(pY / h) * ((sY * h) - h);
+            m.postTranslate(sPX, sPY);
+        }
+
+        m.postTranslate(mTranslationX, mTranslationY);
+    }
+
+    @Override
+    protected void applyTransformation(float interpolatedTime, Transformation t) {
+        View view = mView.get();
+        if (view != null) {
+            t.setAlpha(mAlpha);
+            transformMatrix(t.getMatrix(), view);
+        }
+    }
+}
Index: app/src/main/res/layout/page_order_list_slide_item.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/page_order_list_slide_item.xml	(revision )
+++ app/src/main/res/layout/page_order_list_slide_item.xml	(revision )
@@ -0,0 +1,174 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:id="@+id/order_list_item"
+    android:orientation="vertical">
+    <TextView
+        android:layout_width="match_parent"
+        android:layout_height="2dip"
+        android:background="@color/common_list_item_divide_bg"/>
+
+        <LinearLayout
+            android:orientation="vertical" android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:background="@color/common_font_color_ffffff">
+
+            <RelativeLayout
+                android:layout_width="match_parent"
+                android:layout_height="@dimen/order_list_item_head_height">
+                <TextView
+                    android:id="@+id/order_list_item_orderstate"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_centerVertical="true"
+                    android:layout_alignParentLeft="true"
+                    android:layout_marginLeft="@dimen/common_content_margin_20"
+                    android:textSize="@dimen/common_font_size_12"/>
+                <TextView
+                    android:id="@+id/order_list_item_orderid"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_centerVertical="true"
+                    android:layout_alignParentRight="true"
+                    android:layout_marginRight="@dimen/common_content_margin_20"
+                    android:gravity="right"
+                    android:textSize="@dimen/common_font_size_12"/>
+            </RelativeLayout>
+
+            <TextView
+                android:layout_width="match_parent"
+                android:layout_height="2dip"
+                android:background="@color/common_list_item_divide_bg"/>
+
+            <RelativeLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:paddingTop="@dimen/common_content_margin_10"
+                android:paddingBottom="@dimen/common_content_margin_10">
+                <ImageView
+                    android:id="@+id/order_list_item_image"
+                    android:layout_width="@dimen/order_list_item_center_image_width"
+                    android:layout_height="@dimen/order_list_item_center_image_height"
+                    android:layout_centerVertical="true"
+                    android:layout_alignParentRight="true"
+                    android:layout_marginRight="@dimen/common_content_margin_15"
+                    android:gravity="right"
+                    android:background="@mipmap/common_default_bg"/>
+                <TextView
+                    android:id="@+id/order_list_item_title"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_alignTop="@id/order_list_item_image"
+                    android:layout_toLeftOf="@id/order_list_item_image"
+                    android:layout_marginRight="@dimen/common_content_margin_10"
+                    android:textSize="@dimen/common_font_size_12"
+                    android:textColor="@color/common_font_color_000000"
+                    android:text="skf;skf;sljslfj"
+                    android:singleLine="true"
+                    android:ellipsize="end"
+                    android:gravity="right"/>
+                <TextView
+                    android:id="@+id/order_list_item_diamondbg"
+                    android:layout_width="@dimen/common_content_margin_10"
+                    android:layout_height="@dimen/common_content_margin_10"
+                    android:layout_alignBottom="@id/order_list_item_image"
+                    android:layout_toLeftOf="@id/order_list_item_image"
+                    android:layout_marginRight="@dimen/common_content_margin_10"
+                    android:background="@mipmap/common_diamond_blue"/>
+                <TextView
+                    android:id="@+id/order_list_item_diamondcount"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_alignBottom="@id/order_list_item_image"
+                    android:layout_toLeftOf="@id/order_list_item_diamondbg"
+                    android:layout_marginRight="@dimen/common_content_margin_10"
+                    android:textColor="@color/common_font_color_ff5a00"
+                    android:textSize="@dimen/common_font_size_12"
+                    android:text="skf;skf;sljslfj"/>
+            </RelativeLayout>
+
+            <TextView
+                android:layout_width="match_parent"
+                android:layout_height="2dip"
+                android:background="@color/common_list_item_divide_bg"/>
+
+            <RelativeLayout
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:paddingTop="@dimen/common_content_margin_10"
+                android:paddingBottom="@dimen/common_content_margin_10">
+                <RelativeLayout
+                    android:id="@+id/order_list_item_layout1"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:orientation="horizontal"
+                    android:layout_centerVertical="true"
+                    android:layout_alignParentRight="true"
+                    android:layout_marginRight="@dimen/common_content_margin_20">
+                    <TextView
+                        android:id="@+id/order_list_item_sum"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_centerVertical="true"
+                        android:layout_alignParentRight="true"
+                        android:gravity="right"
+                        android:text="@string/order_details_label_10"
+                        android:textSize="@dimen/common_font_size_12"
+                        android:textColor="@color/common_font_color_868585"/>
+                    <TextView
+                        android:id="@+id/order_list_item_money"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:layout_centerVertical="true"
+                        android:layout_toLeftOf="@id/order_list_item_sum"
+                        android:layout_marginRight="@dimen/common_content_margin_10"
+                        android:textSize="@dimen/common_font_size_12"
+                        android:textColor="@color/common_font_color_000000"
+                        android:gravity="right"
+                        android:text="skf;skf;sljslfj"/>
+                </RelativeLayout>
+
+                <RelativeLayout
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_centerVertical="true"
+                    android:layout_alignParentLeft="true"
+                    android:layout_marginLeft="@dimen/common_content_margin_20">
+                    <TextView
+                        android:id="@+id/order_list_item_topay"
+                        android:layout_width="@dimen/order_list_item_center_topay_width"
+                        android:layout_height="@dimen/order_list_item_center_topay_height"
+                        android:layout_centerVertical="true"
+                        android:layout_alignParentLeft="true"
+                        android:layout_marginRight="@dimen/common_content_margin_10"
+                        android:background="@drawable/common_button_1_selector"
+                        android:text="@string/order_list_item_label2"
+                        android:textSize="@dimen/common_font_size_12"
+                        android:textColor="@color/common_font_color_ffffff"
+                        android:gravity="center"/>
+                    <TextView
+                        android:id="@+id/order_list_item_cancel"
+                        android:layout_width="@dimen/order_list_item_center_topay_width"
+                        android:layout_height="@dimen/order_list_item_center_topay_height"
+                        android:layout_centerVertical="true"
+                        android:layout_toRightOf="@id/order_list_item_topay"
+                        android:background="@drawable/common_button_2_selector"
+                        android:text="@string/order_list_item_label3"
+                        android:textSize="@dimen/common_font_size_12"
+                        android:textColor="@color/common_button_bg_unselected"
+                        android:gravity="center"/>
+                </RelativeLayout>
+            </RelativeLayout>
+        </LinearLayout>
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:paddingBottom="@dimen/common_content_margin_10">
+
+        <TextView
+            android:layout_width="match_parent"
+            android:layout_height="2dip"
+            android:background="@color/common_list_item_divide_bg"/>
+    </LinearLayout>
+</LinearLayout>
Index: app/src/main/java/com/base/tools/google/GoogleBillingTimer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/google/GoogleBillingTimer.java	(revision )
+++ app/src/main/java/com/base/tools/google/GoogleBillingTimer.java	(revision )
@@ -0,0 +1,101 @@
+package com.base.tools.google;
+
+import com.base.tools.http.CallbackResultForActivity;
+import com.base.tools.utils.BasesUtils;
+import com.oasgames.android.oaspay.entity.OrderInfo;
+import com.oasgames.android.oaspay.service.HttpService;
+import com.oasgames.android.oaspay.tools.ReportUtils;
+
+import org.json.JSONException;
+
+import java.lang.reflect.Field;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.TimerTask;
+
+
+public class GoogleBillingTimer extends TimerTask {
+
+	private static final String TAG = GoogleBillingTimer.class.getName();
+	int period = 1;
+	public void setPeriod() {  
+        //缩短周期，执行频率就提高  
+        setDeclaredField(TimerTask.class, this, "period", (long)(Math.pow(2, period)*1000));  
+        if(period == 8){
+        	period = 1;
+        }else{
+        	period++;
+        }
+    }  
+      
+    //通过反射修改字段的值  
+    static boolean setDeclaredField(Class<?> clazz, Object obj,  
+            String name, Object value) {  
+        try {  
+            Field field = clazz.getDeclaredField(name);  
+            field.setAccessible(true);  
+            field.set(obj, value);  
+            return true;  
+        } catch (Exception ex) {  
+            ex.printStackTrace();  
+            return false;  
+        }  
+    }  
+    
+	@Override
+	public void run() {
+		BasesUtils.logDebug(TAG, "There are currently no outstanding orders.");
+		setPeriod();
+		List<Purchase> orderList = null;
+		try {
+			orderList = GoogleBillingUtils.getPurchasedListByStatus(GoogleBillingUtils.ORDER_STATUS_UNFINISHED);
+		} catch (JSONException e) {
+			e.printStackTrace();
+			return;
+		}
+		
+		if(orderList == null || orderList.size() <= 0){
+			BasesUtils.logDebug(TAG, "There are currently no outstanding orders.");
+			return;
+		}
+		
+		int size = orderList.size();
+		for (int i = 0; i < size; i++) {
+			Purchase purchase = orderList.get(i);
+			HttpService.instance().checkPurchaseForGoogle(purchase, GoogleBillingUtils.SEPARATE, new MyCallback(purchase));
+
+		}//end for
+	}
+
+	class MyCallback implements CallbackResultForActivity{
+		Purchase purchase;
+		public MyCallback(Purchase purchase){
+			this.purchase = purchase;
+		}
+		@Override
+		public void success(Object data, int statusCode, String msg) {
+			OrderInfo order = (OrderInfo)data;
+			if(null != order && "3".equals(order.pay_status)){
+				String[] info = purchase.getDeveloperPayload().split(GoogleBillingUtils.SEPARATE);
+
+				Map<String, String> paras = new HashMap<>();
+				if(info.length >= 7)
+					paras.put("orderid", info[6]);
+				paras.put("uid", info[0]);
+				ReportUtils.add(ReportUtils.DEFAULTEVENT_SDIAMONDFAIL, paras, null);
+			}
+			GoogleBillingUtils.updatePurchase(purchase);
+		}
+
+		@Override
+		public void fail(int statusCode, String msg) {
+
+		}
+
+		@Override
+		public void exception(Exception e) {
+
+		}
+	}
+}
Index: app/src/main/java/com/base/tools/utils/MD5Encrypt.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/utils/MD5Encrypt.java	(revision )
+++ app/src/main/java/com/base/tools/utils/MD5Encrypt.java	(revision )
@@ -0,0 +1,310 @@
+package com.base.tools.utils;
+
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+
+public class MD5Encrypt {
+
+	static final int S11 = 7;
+	static final int S12 = 12;
+	static final int S13 = 17;
+	static final int S14 = 22;
+	static final int S21 = 5;
+	static final int S22 = 9;
+	static final int S23 = 14;
+	static final int S24 = 20;
+	static final int S31 = 4;
+	static final int S32 = 11;
+	static final int S33 = 16;
+	static final int S34 = 23;
+	static final int S41 = 6;
+	static final int S42 = 10;
+	static final int S43 = 15;
+	static final int S44 = 21;
+	static final char Hex[] = null;
+	static final byte PADDING[] = { -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
+	private long state[];
+	private long count[];
+	private byte buffer[];
+	public String digestHexStr;
+	private byte digest[];
+
+	public String getMD5ofStr(String s) {// 返回MD5串；
+		int i;
+		md5Init();
+		md5Update(s.getBytes(), s.length());
+		md5Final();
+		digestHexStr = "";
+		for (i = 0; i < 16; i++)
+			digestHexStr = digestHexStr + byteHEX(digest[i]);
+		return digestHexStr;
+	}
+
+	public MD5Encrypt() {
+		state = new long[4];
+		count = new long[2];
+		buffer = new byte[64];
+		digest = new byte[16];
+		md5Init();
+	}
+
+	private void md5Init() {// 初始化部分变量；
+		count[0] = 0L;
+		count[1] = 0L;
+		state[0] = 0x67452301L;
+		state[1] = 0xefcdab89L;
+		state[2] = 0x98badcfeL;
+		state[3] = 0x10325476L;
+	}
+
+	private long F(long l, long l1, long l2) {
+		return l & l1 | ~l & l2;
+	}
+
+	private long G(long l, long l1, long l2) {
+		return l & l2 | l1 & ~l2;
+	}
+
+	private long H(long l, long l1, long l2) {
+		return l ^ l1 ^ l2;
+	}
+
+	private long I(long l, long l1, long l2) {
+		return l1 ^ (l | ~l2);
+	}
+
+	private long FF(long l, long l1, long l2, long l3, long l4, long l5, long l6) {
+		l += F(l1, l2, l3) + l4 + l6;
+		l = (int) l << (int) l5 | (int) l >>> (int) (32L - l5);
+		l += l1;
+		return l;
+	}
+
+	private long GG(long l, long l1, long l2, long l3, long l4, long l5, long l6) {
+		l += G(l1, l2, l3) + l4 + l6;
+		l = (int) l << (int) l5 | (int) l >>> (int) (32L - l5);
+		l += l1;
+		return l;
+	}
+
+	private long HH(long l, long l1, long l2, long l3, long l4, long l5, long l6) {
+		l += H(l1, l2, l3) + l4 + l6;
+		l = (int) l << (int) l5 | (int) l >>> (int) (32L - l5);
+		l += l1;
+		return l;
+	}
+
+	private long II(long l, long l1, long l2, long l3, long l4, long l5, long l6) {
+		l += I(l1, l2, l3) + l4 + l6;
+		l = (int) l << (int) l5 | (int) l >>> (int) (32L - l5);
+		l += l1;
+		return l;
+	}
+
+	private void md5Update(byte abyte0[], int i) {// 补位操作，abyte0为需要进行MD5加密的字符串，i为字符串长度；
+		byte abyte1[] = new byte[64];
+		int k = (int) (count[0] >>> 3) & 0x3f;
+		if ((count[0] += i << 3) < (long) (i << 3))
+			count[1]++;
+		count[1] += i >>> 29;
+		int l = 64 - k;
+		int j;
+		if (i >= l) {
+
+			md5Memcpy(buffer, abyte0, k, 0, l);
+			md5Transform(buffer);
+			for (j = l; j + 63 < i; j += 64) {
+				md5Memcpy(abyte1, abyte0, 0, j, 64);
+				md5Transform(abyte1);
+			}
+			k = 0;
+		} else {
+			j = 0;
+		}
+		md5Memcpy(buffer, abyte0, k, j, i - j);
+	}
+
+	private void md5Final() {
+		// 最终处理，将得到的128位（16字节）MD5码存放在digest数组中
+		byte abyte0[] = new byte[8];
+		Encode(abyte0, count, 8);
+		int i = (int) (count[0] >>> 3) & 0x3f;
+		int j = i >= 56 ? 120 - i : 56 - i;
+		md5Update(PADDING, j);
+		md5Update(abyte0, 8);
+		Encode(digest, state, 16);
+	}
+
+	private void md5Memcpy(byte abyte0[], byte abyte1[], int i, int j, int k) {
+		for (int l = 0; l < k; l++)
+			abyte0[i + l] = abyte1[j + l];
+	}
+
+	private void md5Transform(byte abyte0[]) {
+		long l = state[0];
+		long l1 = state[1];
+		long l2 = state[2];
+		long l3 = state[3];
+		long al[] = new long[16];
+		Decode(al, abyte0, 64);
+		l = FF(l, l1, l2, l3, al[0], 7L, 0xd76aa478L);
+		l3 = FF(l3, l, l1, l2, al[1], 12L, 0xe8c7b756L);
+		l2 = FF(l2, l3, l, l1, al[2], 17L, 0x242070dbL);
+		l1 = FF(l1, l2, l3, l, al[3], 22L, 0xc1bdceeeL);
+		l = FF(l, l1, l2, l3, al[4], 7L, 0xf57c0fafL);
+		l3 = FF(l3, l, l1, l2, al[5], 12L, 0x4787c62aL);
+		l2 = FF(l2, l3, l, l1, al[6], 17L, 0xa8304613L);
+		l1 = FF(l1, l2, l3, l, al[7], 22L, 0xfd469501L);
+		l = FF(l, l1, l2, l3, al[8], 7L, 0x698098d8L);
+		l3 = FF(l3, l, l1, l2, al[9], 12L, 0x8b44f7afL);
+		l2 = FF(l2, l3, l, l1, al[10], 17L, 0xffff5bb1L);
+		l1 = FF(l1, l2, l3, l, al[11], 22L, 0x895cd7beL);
+		l = FF(l, l1, l2, l3, al[12], 7L, 0x6b901122L);
+		l3 = FF(l3, l, l1, l2, al[13], 12L, 0xfd987193L);
+		l2 = FF(l2, l3, l, l1, al[14], 17L, 0xa679438eL);
+		l1 = FF(l1, l2, l3, l, al[15], 22L, 0x49b40821L);
+		l = GG(l, l1, l2, l3, al[1], 5L, 0xf61e2562L);
+		l3 = GG(l3, l, l1, l2, al[6], 9L, 0xc040b340L);
+		l2 = GG(l2, l3, l, l1, al[11], 14L, 0x265e5a51L);
+		l1 = GG(l1, l2, l3, l, al[0], 20L, 0xe9b6c7aaL);
+		l = GG(l, l1, l2, l3, al[5], 5L, 0xd62f105dL);
+		l3 = GG(l3, l, l1, l2, al[10], 9L, 0x2441453L);
+		l2 = GG(l2, l3, l, l1, al[15], 14L, 0xd8a1e681L);
+		l1 = GG(l1, l2, l3, l, al[4], 20L, 0xe7d3fbc8L);
+		l = GG(l, l1, l2, l3, al[9], 5L, 0x21e1cde6L);
+		l3 = GG(l3, l, l1, l2, al[14], 9L, 0xc33707d6L);
+		l2 = GG(l2, l3, l, l1, al[3], 14L, 0xf4d50d87L);
+		l1 = GG(l1, l2, l3, l, al[8], 20L, 0x455a14edL);
+		l = GG(l, l1, l2, l3, al[13], 5L, 0xa9e3e905L);
+		l3 = GG(l3, l, l1, l2, al[2], 9L, 0xfcefa3f8L);
+		l2 = GG(l2, l3, l, l1, al[7], 14L, 0x676f02d9L);
+		l1 = GG(l1, l2, l3, l, al[12], 20L, 0x8d2a4c8aL);
+		l = HH(l, l1, l2, l3, al[5], 4L, 0xfffa3942L);
+		l3 = HH(l3, l, l1, l2, al[8], 11L, 0x8771f681L);
+		l2 = HH(l2, l3, l, l1, al[11], 16L, 0x6d9d6122L);
+		l1 = HH(l1, l2, l3, l, al[14], 23L, 0xfde5380cL);
+		l = HH(l, l1, l2, l3, al[1], 4L, 0xa4beea44L);
+		l3 = HH(l3, l, l1, l2, al[4], 11L, 0x4bdecfa9L);
+		l2 = HH(l2, l3, l, l1, al[7], 16L, 0xf6bb4b60L);
+		l1 = HH(l1, l2, l3, l, al[10], 23L, 0xbebfbc70L);
+		l = HH(l, l1, l2, l3, al[13], 4L, 0x289b7ec6L);
+		l3 = HH(l3, l, l1, l2, al[0], 11L, 0xeaa127faL);
+		l2 = HH(l2, l3, l, l1, al[3], 16L, 0xd4ef3085L);
+		l1 = HH(l1, l2, l3, l, al[6], 23L, 0x4881d05L);
+		l = HH(l, l1, l2, l3, al[9], 4L, 0xd9d4d039L);
+		l3 = HH(l3, l, l1, l2, al[12], 11L, 0xe6db99e5L);
+		l2 = HH(l2, l3, l, l1, al[15], 16L, 0x1fa27cf8L);
+		l1 = HH(l1, l2, l3, l, al[2], 23L, 0xc4ac5665L);
+		l = II(l, l1, l2, l3, al[0], 6L, 0xf4292244L);
+		l3 = II(l3, l, l1, l2, al[7], 10L, 0x432aff97L);
+		l2 = II(l2, l3, l, l1, al[14], 15L, 0xab9423a7L);
+		l1 = II(l1, l2, l3, l, al[5], 21L, 0xfc93a039L);
+		l = II(l, l1, l2, l3, al[12], 6L, 0x655b59c3L);
+		l3 = II(l3, l, l1, l2, al[3], 10L, 0x8f0ccc92L);
+		l2 = II(l2, l3, l, l1, al[10], 15L, 0xffeff47dL);
+		l1 = II(l1, l2, l3, l, al[1], 21L, 0x85845dd1L);
+		l = II(l, l1, l2, l3, al[8], 6L, 0x6fa87e4fL);
+		l3 = II(l3, l, l1, l2, al[15], 10L, 0xfe2ce6e0L);
+		l2 = II(l2, l3, l, l1, al[6], 15L, 0xa3014314L);
+		l1 = II(l1, l2, l3, l, al[13], 21L, 0x4e0811a1L);
+		l = II(l, l1, l2, l3, al[4], 6L, 0xf7537e82L);
+		l3 = II(l3, l, l1, l2, al[11], 10L, 0xbd3af235L);
+		l2 = II(l2, l3, l, l1, al[2], 15L, 0x2ad7d2bbL);
+		l1 = II(l1, l2, l3, l, al[9], 21L, 0xeb86d391L);
+		state[0] += l;
+		state[1] += l1;
+		state[2] += l2;
+		state[3] += l3;
+	}
+
+	private void Encode(byte abyte0[], long al[], int i) {
+		// 转换函数，将al中long型的变量输出到byte型的数组abyte0中，
+		// 低位字节在前，高位字节在后；
+		int j = 0;
+		for (int k = 0; k < i; k += 4) {
+
+			abyte0[k] = (byte) (int) (al[j] & 255L);
+			abyte0[k + 1] = (byte) (int) (al[j] >>> 8 & 255L);
+			abyte0[k + 2] = (byte) (int) (al[j] >>> 16 & 255L);
+			abyte0[k + 3] = (byte) (int) (al[j] >>> 24 & 255L);
+			j++;
+		}
+	}
+
+	private void Decode(long al[], byte abyte0[], int i) {
+		int j = 0;
+		for (int k = 0; k < i; k += 4) {
+			al[j] = b2iu(abyte0[k]) | b2iu(abyte0[k + 1]) << 8 | b2iu(abyte0[k + 2]) << 16 | b2iu(abyte0[k + 3]) << 24;
+			j++;
+		}
+	}
+
+	public static long b2iu(byte byte0) {
+		return byte0 >= 0 ? byte0 : byte0 & 0xff;
+	}
+
+	public static String byteHEX(byte byte0) {
+		// 字节到十六进制的ASCII码转换
+		char ac[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
+		char ac1[] = new char[2];
+		ac1[0] = ac[byte0 >>> 4 & 0xf];
+		ac1[1] = ac[byte0 & 0xf];
+		String s = new String(ac1);
+		return s;
+	}
+
+	public static String toMD5(String s) {
+		if ("".equals(s)) {
+			return "";
+		}
+		MD5Encrypt md5 = new MD5Encrypt();
+		return md5.getMD5ofStr(s);
+	}
+
+	public static String toMD5Lower(String s) {
+		String highs = toMD5(s);
+		return highs.toLowerCase();
+	}
+	/**
+	 * 将字符串md5加密
+	 */
+	public static String StringToMD5(String plainText) {
+		String returnValue = "";
+		try {
+			MessageDigest md = MessageDigest.getInstance("MD5");
+			md.update(plainText.getBytes());
+			byte b[] = md.digest();
+
+			int i;
+
+			StringBuffer buf = new StringBuffer("");
+			for (int offset = 0; offset < b.length; offset++) {
+				i = b[offset];
+				if (i < 0)
+					i += 256;
+				if (i < 16)
+					buf.append("0");
+				buf.append(Integer.toHexString(i));
+			}
+			returnValue = buf.toString();
+		} catch (NoSuchAlgorithmException e) {
+			e.printStackTrace();
+
+		}
+		return returnValue;
+	}
+
+	/**
+	 * 生成MD5加密的token.
+	 * @param token
+	 * @return token
+	 */
+	public static String createToken(String token) {
+		long time = System.currentTimeMillis();
+		time = time / 1000 * 1000 + 2;
+		token = token + time;
+		token = StringToMD5(token);
+		return token;
+	}
+}
Index: .idea/.name
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/.name	(revision )
+++ .idea/.name	(revision )
@@ -0,0 +1,1 @@
+MobilePay
\ No newline at end of file
Index: app/app.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/app.iml	(revision )
+++ app/app.iml	(revision )
@@ -0,0 +1,147 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module external.linked.project.id=":app" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/.." external.system.id="GRADLE" external.system.module.group="MobilePay" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">
+  <component name="FacetManager">
+    <facet type="android-gradle" name="Android-Gradle">
+      <configuration>
+        <option name="GRADLE_PROJECT_PATH" value=":app" />
+      </configuration>
+    </facet>
+    <facet type="android" name="Android">
+      <configuration>
+        <option name="SELECTED_BUILD_VARIANT" value="debug" />
+        <option name="SELECTED_TEST_ARTIFACT" value="_android_test_" />
+        <option name="ASSEMBLE_TASK_NAME" value="assembleDebug" />
+        <option name="COMPILE_JAVA_TASK_NAME" value="compileDebugSources" />
+        <option name="ASSEMBLE_TEST_TASK_NAME" value="assembleDebugAndroidTest" />
+        <option name="COMPILE_JAVA_TEST_TASK_NAME" value="compileDebugAndroidTestSources" />
+        <afterSyncTasks>
+          <task>generateDebugAndroidTestSources</task>
+          <task>generateDebugSources</task>
+        </afterSyncTasks>
+        <option name="ALLOW_USER_CONFIGURATION" value="false" />
+        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/src/main/AndroidManifest.xml" />
+        <option name="RES_FOLDER_RELATIVE_PATH" value="/src/main/res" />
+        <option name="RES_FOLDERS_RELATIVE_PATH" value="file://$MODULE_DIR$/src/main/res" />
+        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/src/main/assets" />
+      </configuration>
+    </facet>
+  </component>
+  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_7" inherit-compiler-output="false">
+    <output url="file://$MODULE_DIR$/build/intermediates/classes/debug" />
+    <output-test url="file://$MODULE_DIR$/build/intermediates/classes/androidTest/debug" />
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/debug" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/resValues/debug" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/androidTest/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/androidTest/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/androidTest/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/androidTest/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/androidTest/debug" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/resValues/androidTest/debug" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/res" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/resources" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/assets" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/aidl" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/jni" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/rs" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/res" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/assets" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/aidl" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/jni" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/rs" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/res" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/resources" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/assets" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/aidl" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/java" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/jni" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/rs" isTestSource="true" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/assets" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/classes" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/debug" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dependency-cache" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dex" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.android.support/appcompat-v7/22.2.0/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.android.support/mediarouter-v7/22.2.0/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.android.support/support-v4/22.2.1/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.facebook.android/facebook-android-sdk/4.4.0/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.google.android.gms/play-services-ads/8.1.0/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.google.android.gms/play-services-analytics/8.1.0/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.google.android.gms/play-services-appindexing/8.1.0/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.google.android.gms/play-services-appinvite/8.1.0/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.google.android.gms/play-services-appstate/8.1.0/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.google.android.gms/play-services-base/8.1.0/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.google.android.gms/play-services-basement/8.1.0/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.google.android.gms/play-services-cast/8.1.0/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.google.android.gms/play-services-drive/8.1.0/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.google.android.gms/play-services-fitness/8.1.0/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.google.android.gms/play-services-games/8.1.0/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.google.android.gms/play-services-gcm/8.1.0/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.google.android.gms/play-services-identity/8.1.0/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.google.android.gms/play-services-location/8.1.0/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.google.android.gms/play-services-maps/8.1.0/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.google.android.gms/play-services-measurement/8.1.0/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.google.android.gms/play-services-nearby/8.1.0/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.google.android.gms/play-services-panorama/8.1.0/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.google.android.gms/play-services-plus/8.1.0/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.google.android.gms/play-services-safetynet/8.1.0/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.google.android.gms/play-services-vision/8.1.0/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.google.android.gms/play-services-wallet/8.1.0/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.google.android.gms/play-services-wearable/8.1.0/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.google.android.gms/play-services/8.1.0/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/manifests" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/pre-dexed" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/release" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/res" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/rs" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/symbols" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/tmp" />
+      <excludeFolder url="file://$MODULE_DIR$/build/outputs" />
+      <excludeFolder url="file://$MODULE_DIR$/build/tmp" />
+    </content>
+    <orderEntry type="jdk" jdkName="Android API 21 Platform" jdkType="Android SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="library" exported="" name="mediarouter-v7-22.2.0" level="project" />
+    <orderEntry type="library" exported="" name="play-services-measurement-8.1.0" level="project" />
+    <orderEntry type="library" exported="" name="play-services-appindexing-8.1.0" level="project" />
+    <orderEntry type="library" exported="" name="play-services-base-8.1.0" level="project" />
+    <orderEntry type="library" exported="" name="play-services-location-8.1.0" level="project" />
+    <orderEntry type="library" exported="" name="play-services-identity-8.1.0" level="project" />
+    <orderEntry type="library" exported="" name="support-annotations-22.2.1" level="project" />
+    <orderEntry type="library" exported="" name="zxing" level="project" />
+    <orderEntry type="library" exported="" name="appcompat-v7-22.2.0" level="project" />
+    <orderEntry type="library" exported="" name="play-services-vision-8.1.0" level="project" />
+    <orderEntry type="library" exported="" name="play-services-drive-8.1.0" level="project" />
+    <orderEntry type="library" exported="" name="play-services-analytics-8.1.0" level="project" />
+    <orderEntry type="library" exported="" name="play-services-8.1.0" level="project" />
+    <orderEntry type="library" exported="" name="bolts-android-1.2.0" level="project" />
+    <orderEntry type="library" exported="" name="play-services-cast-8.1.0" level="project" />
+    <orderEntry type="library" exported="" name="play-services-appinvite-8.1.0" level="project" />
+    <orderEntry type="library" exported="" name="mopub-volley-1.1.0" level="project" />
+    <orderEntry type="library" exported="" name="support-v4-22.2.1" level="project" />
+    <orderEntry type="library" exported="" name="play-services-ads-8.1.0" level="project" />
+    <orderEntry type="library" exported="" name="play-services-appstate-8.1.0" level="project" />
+    <orderEntry type="library" exported="" name="play-services-gcm-8.1.0" level="project" />
+    <orderEntry type="library" exported="" name="play-services-safetynet-8.1.0" level="project" />
+    <orderEntry type="library" exported="" name="play-services-games-8.1.0" level="project" />
+    <orderEntry type="library" exported="" name="play-services-wallet-8.1.0" level="project" />
+    <orderEntry type="library" exported="" name="android-support-v7-recyclerview" level="project" />
+    <orderEntry type="library" exported="" name="play-services-basement-8.1.0" level="project" />
+    <orderEntry type="library" exported="" name="play-services-maps-8.1.0" level="project" />
+    <orderEntry type="library" exported="" name="facebook-android-sdk-4.4.0" level="project" />
+    <orderEntry type="library" exported="" name="play-services-nearby-8.1.0" level="project" />
+    <orderEntry type="library" exported="" name="play-services-panorama-8.1.0" level="project" />
+    <orderEntry type="library" exported="" name="play-services-fitness-8.1.0" level="project" />
+    <orderEntry type="library" exported="" name="play-services-wearable-8.1.0" level="project" />
+    <orderEntry type="library" exported="" name="play-services-plus-8.1.0" level="project" />
+  </component>
+</module>
\ No newline at end of file
Index: app/src/main/java/com/base/tools/http/CallbackResultForActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/http/CallbackResultForActivity.java	(revision )
+++ app/src/main/java/com/base/tools/http/CallbackResultForActivity.java	(revision )
@@ -0,0 +1,22 @@
+package com.base.tools.http;
+
+
+
+public interface CallbackResultForActivity {
+
+	/**
+	 * 处理正确结果
+	 */
+	abstract void success(Object data, int statusCode, String msg);
+	
+	/**
+	 * 异常
+	 * @param e
+	 */
+	abstract void exception(Exception e);
+	
+	/**
+	 * 处理错误结果
+	 */
+	abstract void fail(int statusCode, String msg);
+}
\ No newline at end of file
Index: app/src/main/res/layout/fragment_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_main.xml	(revision )
+++ app/src/main/res/layout/fragment_main.xml	(revision )
@@ -0,0 +1,18 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:paddingBottom="@dimen/activity_vertical_margin"
+    android:paddingLeft="@dimen/activity_horizontal_margin"
+    android:paddingRight="@dimen/activity_horizontal_margin"
+    android:paddingTop="@dimen/activity_vertical_margin"
+    tools:context="com.oasgames.android.oaspay.activity.ActivityMain$PlaceholderFragment" >
+
+    <TextView
+        android:id="@+id/section_label"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content" 
+        android:text="sljflsjfldsj"
+        android:textColor="#FFFFFF"/>
+
+</RelativeLayout>
Index: app/src/main/java/com/base/tools/utils/BaseRadioGroup.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/utils/BaseRadioGroup.java	(revision )
+++ app/src/main/java/com/base/tools/utils/BaseRadioGroup.java	(revision )
@@ -0,0 +1,27 @@
+package com.base.tools.utils;
+
+import android.content.Context;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+/**
+ * Created by Administrator on 2015/10/16.
+ */
+public class BaseRadioGroup extends LinearLayout {
+
+    public BaseRadioGroup(Context context) {
+        super(context);
+    }
+    public BaseRadioGroup(Context context, String[] texts) {
+        super(context);
+        TextView tv = new TextView(context);
+
+    }
+
+    public void addView(){
+        this.addView();
+    }
+
+
+
+}
Index: app/src/main/java/com/oasgames/android/oaspay/adapter/AdapterProdcutList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/adapter/AdapterProdcutList.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/adapter/AdapterProdcutList.java	(revision )
@@ -0,0 +1,92 @@
+package com.oasgames.android.oaspay.adapter;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.base.tools.list.BasesListAdapter;
+import com.oasgames.android.oaspay.R;
+import com.oasgames.android.oaspay.activity.ActivityMain;
+import com.oasgames.android.oaspay.activity.ActivityProductDetails;
+import com.oasgames.android.oaspay.activity.ActivityProductList;
+import com.oasgames.android.oaspay.activity.ActivitySearch;
+import com.oasgames.android.oaspay.entity.ProductInfo;
+
+import java.util.List;
+
+
+/**
+ * 商品 礼包 列表 适配器
+ * @author Administrator
+ *
+ */
+public class AdapterProdcutList extends BasesListAdapter<ProductInfo> {
+	Activity c;
+	public AdapterProdcutList(Activity activity, List<ProductInfo> data,
+							  int count, LinearLayout footerView) {
+		super(activity, data, count, footerView);
+		this.c = activity;
+	}
+
+	@Override
+	public void loadMore() {
+		// no more
+		if(c instanceof ActivityProductList){
+			((ActivityProductList)c).loadDataForNextPage();
+		}else if( c instanceof ActivitySearch){
+			((ActivitySearch)c).loadSearchResultMore();
+
+		}
+	}
+
+	@Override
+	public View getRowView(int position, View convertView, ViewGroup parent) {
+		ViewHolder holder = null;
+
+		if(null == convertView){
+			convertView = c.getLayoutInflater().inflate(R.layout.fragment_main_shop_review_item, null);
+			holder = new ViewHolder();
+			holder.title = (TextView) convertView.findViewById(R.id.product_item_title);
+			holder.img = (ImageView) convertView.findViewById(R.id.product_item_img);
+			holder.diamond = (TextView) convertView.findViewById(R.id.product_item_diamond_count);
+			holder.diamondBg = (TextView) convertView.findViewById(R.id.product_item_diamond_bg);
+			holder.pay = (View) convertView.findViewById(R.id.product_item_charge);
+			
+			convertView.setTag(holder);
+		}else{
+			holder = (ViewHolder) convertView.getTag();
+		}
+
+		final ProductInfo info = getItem(position);
+		holder.title.setText(info.product_name);
+		holder.diamond.setText(info.game_coins_show);
+		loadImg(holder.img, info.product_img_url);
+
+		if(c instanceof ActivityProductList || c instanceof ActivitySearch){
+			holder.pay.setVisibility(View.INVISIBLE);
+		}else if(c instanceof ActivityMain){
+			holder.pay.setVisibility(View.VISIBLE);
+			holder.pay.setOnClickListener(new View.OnClickListener() {
+				@Override
+				public void onClick(View v) {
+					c.startActivity(new Intent().setClass(c, ActivityProductDetails.class).putExtra("id", info.product_id));
+				}
+			});
+		}
+		return convertView;
+	}
+
+	static class ViewHolder {
+		TextView title;
+		ImageView img;
+		TextView diamond;
+		TextView diamondBg;
+		View pay;
+
+	}
+	
+}
Index: app/src/main/java/com/google/zxing/camera/PlanarYUVLuminanceSource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/google/zxing/camera/PlanarYUVLuminanceSource.java	(revision )
+++ app/src/main/java/com/google/zxing/camera/PlanarYUVLuminanceSource.java	(revision )
@@ -0,0 +1,133 @@
+/*
+ * Copyright 2009 ZXing authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.zxing.camera;
+
+import com.google.zxing.LuminanceSource;
+
+import android.graphics.Bitmap;
+
+/**
+ * This object extends LuminanceSource around an array of YUV data returned from the camera driver,
+ * with the option to crop to a rectangle within the full data. This can be used to exclude
+ * superfluous pixels around the perimeter and speed up decoding.
+ *
+ * It works for any pixel format where the Y channel is planar and appears first, including
+ * YCbCr_420_SP and YCbCr_422_SP.
+ *
+ * @author dswitkin@google.com (Daniel Switkin)
+ */
+public final class PlanarYUVLuminanceSource extends LuminanceSource {
+  private final byte[] yuvData;
+  private final int dataWidth;
+  private final int dataHeight;
+  private final int left;
+  private final int top;
+
+  public PlanarYUVLuminanceSource(byte[] yuvData, int dataWidth, int dataHeight, int left, int top,
+      int width, int height) {
+    super(width, height);
+
+    if (left + width > dataWidth || top + height > dataHeight) {
+      throw new IllegalArgumentException("Crop rectangle does not fit within image data.");
+    }
+
+    this.yuvData = yuvData;
+    this.dataWidth = dataWidth;
+    this.dataHeight = dataHeight;
+    this.left = left;
+    this.top = top;
+  }
+
+  @Override
+  public byte[] getRow(int y, byte[] row) {
+    if (y < 0 || y >= getHeight()) {
+      throw new IllegalArgumentException("Requested row is outside the image: " + y);
+    }
+    int width = getWidth();
+    if (row == null || row.length < width) {
+      row = new byte[width];
+    }
+    int offset = (y + top) * dataWidth + left;
+    System.arraycopy(yuvData, offset, row, 0, width);
+    return row;
+  }
+
+  @Override
+  public byte[] getMatrix() {
+    int width = getWidth();
+    int height = getHeight();
+
+    // If the caller asks for the entire underlying image, save the copy and give them the
+    // original data. The docs specifically warn that result.length must be ignored.
+    if (width == dataWidth && height == dataHeight) {
+      return yuvData;
+    }
+
+    int area = width * height;
+    byte[] matrix = new byte[area];
+    int inputOffset = top * dataWidth + left;
+
+    // If the width matches the full width of the underlying data, perform a single copy.
+    if (width == dataWidth) {
+      System.arraycopy(yuvData, inputOffset, matrix, 0, area);
+      return matrix;
+    }
+
+    // Otherwise copy one cropped row at a time.
+    byte[] yuv = yuvData;
+    for (int y = 0; y < height; y++) {
+      int outputOffset = y * width;
+      System.arraycopy(yuv, inputOffset, matrix, outputOffset, width);
+      inputOffset += dataWidth;
+    }
+    return matrix;
+  }
+
+  @Override
+  public boolean isCropSupported() {
+    return true;
+  }
+
+  public int getDataWidth() {
+    return dataWidth;
+  }
+
+  public int getDataHeight() {
+    return dataHeight;
+  }
+
+  public Bitmap renderCroppedGreyscaleBitmap() {
+    int width = getWidth();
+    int height = getHeight();
+    int[] pixels = new int[width * height];
+    byte[] yuv = yuvData;
+    int inputOffset = top * dataWidth + left;
+
+    for (int y = 0; y < height; y++) {
+      int outputOffset = y * width;
+      for (int x = 0; x < width; x++) {
+        int grey = yuv[inputOffset + x] & 0xff;
+        pixels[outputOffset + x] = 0xFF000000 | (grey * 0x00010101);
+      }
+      inputOffset += dataWidth;
+    }
+
+    Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
+    bitmap.setPixels(pixels, 0, width, 0, 0, width, height);
+    return bitmap;
+  }
+}
Index: app/src/main/res/values/colors.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/colors.xml	(revision )
+++ app/src/main/res/values/colors.xml	(revision )
@@ -0,0 +1,33 @@
+<resources>
+
+    <color name="black_overlay">#66000000</color>
+    <color name="transparent_background">#00000000</color>
+
+    <color name="common_font_color_ffffff">#FFFFFF</color>
+    <color name="common_font_color_000000">#000000</color>
+    <color name="common_font_color_868585">#868585</color>
+    <color name="common_font_color_398903">#398903</color>
+    <color name="common_font_color_ff5a00">#FF5A00</color>
+    <color name="common_font_color_49a81a">#49a81a</color>
+    <color name="common_font_color_fb8f03">#fb8f03</color>
+    <color name="common_background_all_page">#F2F2F2</color>
+    <color name="common_list_item_bg_selected">#EDEDED</color>
+    <color name="common_list_item_bg_unselected">#FFFFFF</color>
+    <color name="common_list_item_divide_bg">#E2E2E2</color>
+
+    <color name="common_background_333333">#333333</color>
+
+    <color name="common_button_bg_selected">#57a034</color>
+    <color name="common_button_bg_unselected">#74bb51</color>
+
+    <color name="common_button_delete_bg_unselect">#F77A15</color>
+    <color name="common_button_delete_bg_selected">#F76A15</color>
+
+    <color name="main_foot_bg">#e9e9e9</color>
+
+    <color name="capture_result_view">#FF000000</color>
+    <color name="capture_viewfinder_mask">#FF666666</color>
+    <color name="capture_possible_result_points">#c0ffff00</color>
+
+
+</resources>
Index: app/src/main/aidl/com/android/vending/billing/IInAppBillingService.aidl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/aidl/com/android/vending/billing/IInAppBillingService.aidl	(revision )
+++ app/src/main/aidl/com/android/vending/billing/IInAppBillingService.aidl	(revision )
@@ -0,0 +1,144 @@
+/*
+ * Copyright (C) 2012 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.vending.billing;
+
+import android.os.Bundle;
+
+/**
+ * InAppBillingService is the service that provides in-app billing version 3 and beyond.
+ * This service provides the following features:
+ * 1. Provides a new API to get details of in-app items published for the app including
+ *    price, type, title and description.
+ * 2. The purchase flow is synchronous and purchase information is available immediately
+ *    after it completes.
+ * 3. Purchase information of in-app purchases is maintained within the Google Play system
+ *    till the purchase is consumed.
+ * 4. An API to consume a purchase of an inapp item. All purchases of one-time
+ *    in-app items are consumable and thereafter can be purchased again.
+ * 5. An API to get current purchases of the user immediately. This will not contain any
+ *    consumed purchases.
+ *
+ * All calls will give a response code with the following possible values
+ * RESULT_OK = 0 - success
+ * RESULT_USER_CANCELED = 1 - user pressed back or canceled a dialog
+ * RESULT_BILLING_UNAVAILABLE = 3 - this billing API version is not supported for the type requested
+ * RESULT_ITEM_UNAVAILABLE = 4 - requested SKU is not available for purchase
+ * RESULT_DEVELOPER_ERROR = 5 - invalid arguments provided to the API
+ * RESULT_ERROR = 6 - Fatal error during the API action
+ * RESULT_ITEM_ALREADY_OWNED = 7 - Failure to purchase since item is already owned
+ * RESULT_ITEM_NOT_OWNED = 8 - Failure to consume since item is not owned
+ */
+interface IInAppBillingService {
+    /**
+     * Checks support for the requested billing API version, package and in-app type.
+     * Minimum API version supported by this interface is 3.
+     * @param apiVersion the billing version which the app is using
+     * @param packageName the package name of the calling app
+     * @param type type of the in-app item being purchased "inapp" for one-time purchases
+     *        and "subs" for subscription.
+     * @return RESULT_OK(0) on success, corresponding result code on failures
+     */
+    int isBillingSupported(int apiVersion, String packageName, String type);
+
+    /**
+     * Provides details of a list of SKUs
+     * Given a list of SKUs of a valid type in the skusBundle, this returns a bundle
+     * with a list JSON strings containing the productId, price, title and description.
+     * This API can be called with a maximum of 20 SKUs.
+     * @param apiVersion billing API version that the Third-party is using
+     * @param packageName the package name of the calling app
+     * @param skusBundle bundle containing a StringArrayList of SKUs with key "ITEM_ID_LIST"
+     * @return Bundle containing the following key-value pairs
+     *         "RESPONSE_CODE" with int value, RESULT_OK(0) if success, other response codes on
+     *              failure as listed above.
+     *         "DETAILS_LIST" with a StringArrayList containing purchase information
+     *              in JSON format similar to:
+     *              '{ "productId" : "exampleSku", "type" : "inapp", "price" : "$5.00",
+     *                 "title : "Example Title", "description" : "This is an example description" }'
+     */
+    Bundle getSkuDetails(int apiVersion, String packageName, String type, in Bundle skusBundle);
+
+    /**
+     * Returns a pending intent to launch the purchase flow for an in-app item by providing a SKU,
+     * the type, a unique purchase token and an optional developer payload.
+     * @param apiVersion billing API version that the app is using
+     * @param packageName package name of the calling app
+     * @param sku the SKU of the in-app item as published in the developer console
+     * @param type the type of the in-app item ("inapp" for one-time purchases
+     *        and "subs" for subscription).
+     * @param developerPayload optional argument to be sent back with the purchase information
+     * @return Bundle containing the following key-value pairs
+     *         "RESPONSE_CODE" with int value, RESULT_OK(0) if success, other response codes on
+     *              failure as listed above.
+     *         "BUY_INTENT" - PendingIntent to start the purchase flow
+     *
+     * The Pending intent should be launched with startIntentSenderForResult. When purchase flow
+     * has completed, the onActivityResult() will give a resultCode of OK or CANCELED.
+     * If the purchase is successful, the result data will contain the following key-value pairs
+     *         "RESPONSE_CODE" with int value, RESULT_OK(0) if success, other response codes on
+     *              failure as listed above.
+     *         "INAPP_PURCHASE_DATA" - String in JSON format similar to
+     *              '{"orderId":"12999763169054705758.1371079406387615",
+     *                "packageName":"com.example.app",
+     *                "productId":"exampleSku",
+     *                "purchaseTime":1345678900000,
+     *                "purchaseToken" : "122333444455555",
+     *                "developerPayload":"example developer payload" }'
+     *         "INAPP_DATA_SIGNATURE" - String containing the signature of the purchase data that
+     *                                  was signed with the private key of the developer
+     *                                  TODO: change this to app-specific keys.
+     */
+    Bundle getBuyIntent(int apiVersion, String packageName, String sku, String type,
+        String developerPayload);
+
+    /**
+     * Returns the current SKUs owned by the user of the type and package name specified along with
+     * purchase information and a signature of the data to be validated.
+     * This will return all SKUs that have been purchased in V3 and managed items purchased using
+     * V1 and V2 that have not been consumed.
+     * @param apiVersion billing API version that the app is using
+     * @param packageName package name of the calling app
+     * @param type the type of the in-app items being requested
+     *        ("inapp" for one-time purchases and "subs" for subscription).
+     * @param continuationToken to be set as null for the first call, if the number of owned
+     *        skus are too many, a continuationToken is returned in the response bundle.
+     *        This method can be called again with the continuation token to get the next set of
+     *        owned skus.
+     * @return Bundle containing the following key-value pairs
+     *         "RESPONSE_CODE" with int value, RESULT_OK(0) if success, other response codes on
+     *              failure as listed above.
+     *         "INAPP_PURCHASE_ITEM_LIST" - StringArrayList containing the list of SKUs
+     *         "INAPP_PURCHASE_DATA_LIST" - StringArrayList containing the purchase information
+     *         "INAPP_DATA_SIGNATURE_LIST"- StringArrayList containing the signatures
+     *                                      of the purchase information
+     *         "INAPP_CONTINUATION_TOKEN" - String containing a continuation token for the
+     *                                      next set of in-app purchases. Only set if the
+     *                                      user has more owned skus than the current list.
+     */
+    Bundle getPurchases(int apiVersion, String packageName, String type, String continuationToken);
+
+    /**
+     * Consume the last purchase of the given SKU. This will result in this item being removed
+     * from all subsequent responses to getPurchases() and allow re-purchase of this item.
+     * @param apiVersion billing API version that the app is using
+     * @param packageName package name of the calling app
+     * @param purchaseToken token in the purchase information JSON that identifies the purchase
+     *        to be consumed
+     * @return 0 if consumption succeeded. Appropriate error values for failures.
+     */
+    int consumePurchase(int apiVersion, String packageName, String purchaseToken);
+}
Index: app/src/main/java/com/nineoldandroids/animation/PreHoneycombCompat.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nineoldandroids/animation/PreHoneycombCompat.java	(revision )
+++ app/src/main/java/com/nineoldandroids/animation/PreHoneycombCompat.java	(revision )
@@ -0,0 +1,168 @@
+package com.nineoldandroids.animation;
+
+import android.view.View;
+import com.nineoldandroids.util.FloatProperty;
+import com.nineoldandroids.util.IntProperty;
+import com.nineoldandroids.util.Property;
+import com.nineoldandroids.view.animation.AnimatorProxy;
+
+final class PreHoneycombCompat {
+    static Property<View, Float> ALPHA = new FloatProperty<View>("alpha") {
+        @Override
+        public void setValue(View object, float value) {
+            AnimatorProxy.wrap(object).setAlpha(value);
+        }
+
+        @Override
+        public Float get(View object) {
+            return AnimatorProxy.wrap(object).getAlpha();
+        }
+    };
+    static Property<View, Float> PIVOT_X = new FloatProperty<View>("pivotX") {
+        @Override
+        public void setValue(View object, float value) {
+            AnimatorProxy.wrap(object).setPivotX(value);
+        }
+
+        @Override
+        public Float get(View object) {
+            return AnimatorProxy.wrap(object).getPivotX();
+        }
+    };
+    static Property<View, Float> PIVOT_Y = new FloatProperty<View>("pivotY") {
+        @Override
+        public void setValue(View object, float value) {
+            AnimatorProxy.wrap(object).setPivotY(value);
+        }
+
+        @Override
+        public Float get(View object) {
+            return AnimatorProxy.wrap(object).getPivotY();
+        }
+    };
+    static Property<View, Float> TRANSLATION_X = new FloatProperty<View>("translationX") {
+        @Override
+        public void setValue(View object, float value) {
+            AnimatorProxy.wrap(object).setTranslationX(value);
+        }
+
+        @Override
+        public Float get(View object) {
+            return AnimatorProxy.wrap(object).getTranslationX();
+        }
+    };
+    static Property<View, Float> TRANSLATION_Y = new FloatProperty<View>("translationY") {
+        @Override
+        public void setValue(View object, float value) {
+            AnimatorProxy.wrap(object).setTranslationY(value);
+        }
+
+        @Override
+        public Float get(View object) {
+            return AnimatorProxy.wrap(object).getTranslationY();
+        }
+    };
+    static Property<View, Float> ROTATION = new FloatProperty<View>("rotation") {
+        @Override
+        public void setValue(View object, float value) {
+            AnimatorProxy.wrap(object).setRotation(value);
+        }
+
+        @Override
+        public Float get(View object) {
+            return AnimatorProxy.wrap(object).getRotation();
+        }
+    };
+    static Property<View, Float> ROTATION_X = new FloatProperty<View>("rotationX") {
+        @Override
+        public void setValue(View object, float value) {
+            AnimatorProxy.wrap(object).setRotationX(value);
+        }
+
+        @Override
+        public Float get(View object) {
+            return AnimatorProxy.wrap(object).getRotationX();
+        }
+    };
+    static Property<View, Float> ROTATION_Y = new FloatProperty<View>("rotationY") {
+        @Override
+        public void setValue(View object, float value) {
+            AnimatorProxy.wrap(object).setRotationY(value);
+        }
+
+        @Override
+        public Float get(View object) {
+            return AnimatorProxy.wrap(object).getRotationY();
+        }
+    };
+    static Property<View, Float> SCALE_X = new FloatProperty<View>("scaleX") {
+        @Override
+        public void setValue(View object, float value) {
+            AnimatorProxy.wrap(object).setScaleX(value);
+        }
+
+        @Override
+        public Float get(View object) {
+            return AnimatorProxy.wrap(object).getScaleX();
+        }
+    };
+    static Property<View, Float> SCALE_Y = new FloatProperty<View>("scaleY") {
+        @Override
+        public void setValue(View object, float value) {
+            AnimatorProxy.wrap(object).setScaleY(value);
+        }
+
+        @Override
+        public Float get(View object) {
+            return AnimatorProxy.wrap(object).getScaleY();
+        }
+    };
+    static Property<View, Integer> SCROLL_X = new IntProperty<View>("scrollX") {
+        @Override
+        public void setValue(View object, int value) {
+            AnimatorProxy.wrap(object).setScrollX(value);
+        }
+
+        @Override
+        public Integer get(View object) {
+            return AnimatorProxy.wrap(object).getScrollX();
+        }
+    };
+    static Property<View, Integer> SCROLL_Y = new IntProperty<View>("scrollY") {
+        @Override
+        public void setValue(View object, int value) {
+            AnimatorProxy.wrap(object).setScrollY(value);
+        }
+
+        @Override
+        public Integer get(View object) {
+            return AnimatorProxy.wrap(object).getScrollY();
+        }
+    };
+    static Property<View, Float> X = new FloatProperty<View>("x") {
+        @Override
+        public void setValue(View object, float value) {
+            AnimatorProxy.wrap(object).setX(value);
+        }
+
+        @Override
+        public Float get(View object) {
+            return AnimatorProxy.wrap(object).getX();
+        }
+    };
+    static Property<View, Float> Y = new FloatProperty<View>("y") {
+        @Override
+        public void setValue(View object, float value) {
+            AnimatorProxy.wrap(object).setY(value);
+        }
+
+        @Override
+        public Float get(View object) {
+            return AnimatorProxy.wrap(object).getY();
+        }
+    };
+
+
+    //No instances
+    private PreHoneycombCompat() {}
+}
Index: app/src/main/java/com/base/tools/google/GoogleBillingUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/google/GoogleBillingUtils.java	(revision )
+++ app/src/main/java/com/base/tools/google/GoogleBillingUtils.java	(revision )
@@ -0,0 +1,189 @@
+package com.base.tools.google;
+
+import android.content.ContentValues;
+import android.content.Context;
+import android.database.Cursor;
+import android.text.TextUtils;
+
+import com.base.tools.BasesApplication;
+import com.base.tools.entity.PhoneInfo;
+import com.google.android.gms.ads.identifier.AdvertisingIdClient;
+import com.google.android.gms.ads.identifier.AdvertisingIdClient.Info;
+import com.google.android.gms.common.GooglePlayServicesNotAvailableException;
+import com.google.android.gms.common.GooglePlayServicesRepairableException;
+
+import org.json.JSONException;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Timer;
+
+public class GoogleBillingUtils {
+//	private static final String TAG = GoogleBillingUtils.class.getName();
+    public static final String SEPARATE = "oasis";// 验证字符串的分隔符，使用单个字符担心有冲突，所以自定义
+    public static final String ORDER_STATUS_FINISHED = "1";
+    public static final String ORDER_STATUS_UNFINISHED = "0";
+	
+	public static final String TABLENAME = "googleorder";
+	public static final String COLUMNS_ID = "orderid";
+	public static final String COLUMNS_DATA = "orderdata";
+	public static final String COLUMNS_SIGN = "ordersign";
+	public static final String COLUMNS_TIME = "createtime";
+	public static final String COLUMNS_STATUS = "status";
+	public static final String COLUMNS_EXT1 = "ext1";
+	public static final String COLUMNS_EXT2 = "ext2";
+	private static final String[] COLUMNS = new String[]{"orderid", "orderdata", "ordersign", "createtime", "status", "ext1", "ext2"};
+	
+	public static Timer GoogleBillingTimer = new Timer();
+	
+	public static Purchase getPurchaseByOrderid(String orderid) throws JSONException{
+		Cursor cur = BasesApplication.dbHelper.loadByWhere(TABLENAME, COLUMNS, COLUMNS_ID+"=?", new String[]{orderid});
+		if(cur.getCount()<=0){
+			cur.close();
+			return null;
+		}
+		int nameColumn = cur.getColumnIndex(GoogleBillingUtils.COLUMNS_DATA);
+	    int phoneColumn = cur.getColumnIndex(GoogleBillingUtils.COLUMNS_SIGN);
+	    String data = cur.getString(nameColumn);
+	    String sign = cur.getString(phoneColumn);
+	    Purchase p = new Purchase("inapp", data, sign);
+	    cur.close();
+	    return p;
+	}
+	/**
+	 * 根据状态，获取支付成功但未处理的订单
+	 * @return
+	 * @throws JSONException
+	 */
+	public static List<Purchase> getPurchasedListByStatus(String status) throws JSONException{
+		List<Purchase> list = new ArrayList<Purchase>();
+		Cursor cur = BasesApplication.dbHelper.loadByWhere(TABLENAME, COLUMNS, "status=?", new String[]{status});
+		if(cur.getCount()<=0){
+			cur.close();
+			return list;
+		}
+		for(cur.moveToFirst();!cur.isAfterLast();cur.moveToNext())
+		{
+			int nameColumn = cur.getColumnIndex(GoogleBillingUtils.COLUMNS_DATA);
+			int phoneColumn = cur.getColumnIndex(GoogleBillingUtils.COLUMNS_SIGN);
+			String data = cur.getString(nameColumn);
+			String sign = cur.getString(phoneColumn);
+			Purchase p = new Purchase("inapp", data, sign);
+			list.add(p);
+		}
+		cur.close();
+		return list;
+	}
+	/**
+	 * 获取所有支付成功但未处理的订单
+	 * @return
+	 * @throws JSONException
+	 */
+	public static List<Purchase> getPurchasedList() throws JSONException{
+		List<Purchase> list = new ArrayList<Purchase>();
+		Cursor cur = BasesApplication.dbHelper.loadByWhere(TABLENAME, COLUMNS, "", null);
+		if(cur.getCount()<=0){
+			cur.close();
+			return list;
+		}
+		for(cur.moveToFirst();!cur.isAfterLast();cur.moveToNext())
+		{
+		    int nameColumn = cur.getColumnIndex(GoogleBillingUtils.COLUMNS_DATA);
+		    int phoneColumn = cur.getColumnIndex(GoogleBillingUtils.COLUMNS_SIGN);
+		    String data = cur.getString(nameColumn);
+		    String sign = cur.getString(phoneColumn);
+		    Purchase p = new Purchase("inapp", data, sign);
+		    list.add(p);
+		}
+		cur.close();
+		return list;
+	}
+	/**
+	 * 检查当前订单是否已入库
+	 * @param p	订单信息
+	 * @return 订单存在 true
+	 */
+	public static boolean checkPurchaseIsExist(Purchase p){
+		Cursor cur = BasesApplication.dbHelper.loadByWhere(TABLENAME, new String[]{COLUMNS_ID}, COLUMNS_ID+"=?", new String[]{p.mOrderId});
+		if(cur.getCount()<=0){
+			cur.close();
+			return false;
+		}else{
+			int index = cur.getColumnIndex(GoogleBillingUtils.COLUMNS_ID);
+			String orderid = cur.getString(index);
+			if(!TextUtils.isEmpty(orderid) && orderid.equals(p.mOrderId)){
+				cur.close();
+				return true;
+			}
+
+			return false;
+		}
+	}
+	/**
+	 * 添加支付成功但未处理的订单
+	 * @return
+	 * @throws JSONException
+	 */
+	public static long addPurchase(Purchase p) {
+		ContentValues c = new ContentValues();
+		c.put(COLUMNS_ID, p.mOrderId);
+		c.put(COLUMNS_SIGN, p.mSignature);
+		c.put(COLUMNS_DATA, p.mOriginalJson);
+		c.put(COLUMNS_TIME, System.nanoTime());
+		c.put(COLUMNS_STATUS, GoogleBillingUtils.ORDER_STATUS_UNFINISHED);
+		c.put(COLUMNS_EXT1, "");
+		c.put(COLUMNS_EXT2, "");
+		return BasesApplication.dbHelper.insert(TABLENAME, c);
+	}
+	public static boolean updatePurchase(Purchase p ){
+		ContentValues c = new ContentValues();
+		c.put(COLUMNS_STATUS, GoogleBillingUtils.ORDER_STATUS_FINISHED);
+		
+		return BasesApplication.dbHelper.update(TABLENAME, c, COLUMNS_ID +"=?", new String[]{p.getOrderId()});
+	}
+	/**
+	 * 删除支付成功但未处理的订单
+	 * @return
+	 * @throws JSONException
+	 */
+	public static int deletePurchase(String orderid) {
+		
+		return BasesApplication.dbHelper.delete(TABLENAME, COLUMNS_ID+"=?", new String[]{orderid});
+	}
+	
+	public static void getADIDThread(final Context c) {
+		 new Thread(new Runnable() {
+			
+			@Override
+			public void run() {
+				Info adInfo = null;
+				  try {
+				    adInfo = AdvertisingIdClient.getAdvertisingIdInfo(c);
+				 
+				  } catch (IOException e) {
+				    // Unrecoverable error connecting to Google Play services (e.g.,
+				    // the old version of the service doesn't support getting AdvertisingId).
+				  
+				  } catch (GooglePlayServicesNotAvailableException e) {
+				    // Google Play services is not available entirely.
+				  } catch (IllegalStateException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				} catch (GooglePlayServicesRepairableException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				}
+				if(adInfo != null){
+					String id = adInfo.getId();
+					if(!TextUtils.isEmpty(id))
+						PhoneInfo.instance().setGoogleAdid(id);
+//					final boolean isLAT = adInfo.isLimitAdTrackingEnabled();
+					
+				}
+			}
+		}).start();
+		  
+	}
+
+}
Index: app/src/main/java/com/oasgames/android/oaspay/entity/ServerInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/entity/ServerInfo.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/entity/ServerInfo.java	(revision )
@@ -0,0 +1,34 @@
+package com.oasgames.android.oaspay.entity;
+
+import java.io.Serializable;
+
+/**
+ * 服列表 详细信息
+ * @author xdb
+ *
+ */
+public class ServerInfo implements Serializable{
+	private static final long serialVersionUID = 1598605839985469091L;
+
+	public String serverid;			//服id
+	public String servername;		//服名称
+	public String charge_status;	//充值状态
+	public String rolename;			//角色名
+
+
+	public void setServerid(String serverid) {
+		this.serverid = serverid;
+	}
+
+	public void setServername(String servername) {
+		this.servername = servername;
+	}
+
+	public void setCharge_status(String charge_status) {
+		this.charge_status = charge_status;
+	}
+
+	public void setRolename(String rolename) {
+		this.rolename = rolename;
+	}
+}
Index: MobilePay.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- MobilePay.iml	(revision )
+++ MobilePay.iml	(revision )
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module external.linked.project.id="MobilePay" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$" external.system.id="GRADLE" external.system.module.group="" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">
+  <component name="FacetManager">
+    <facet type="java-gradle" name="Java-Gradle">
+      <configuration>
+        <option name="BUILD_FOLDER_PATH" value="$MODULE_DIR$/build" />
+        <option name="BUILDABLE" value="false" />
+      </configuration>
+    </facet>
+  </component>
+  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_7" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/.gradle" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: gradle.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- gradle.properties	(revision )
+++ gradle.properties	(revision )
@@ -0,0 +1,18 @@
+# Project-wide Gradle settings.
+
+# IDE (e.g. Android Studio) users:
+# Gradle settings configured through the IDE *will override*
+# any settings specified in this file.
+
+# For more details on how to configure your build environment visit
+# http://www.gradle.org/docs/current/userguide/build_environment.html
+
+# Specifies the JVM arguments used for the daemon process.
+# The setting is particularly useful for tweaking memory settings.
+# Default value: -Xmx10248m -XX:MaxPermSize=256m
+# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
+
+# When configured, Gradle will run in incubating parallel mode.
+# This option should only be used with decoupled projects. More details, visit
+# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
+# org.gradle.parallel=true
\ No newline at end of file
Index: app/src/main/res/layout/fragment_main_mine.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_main_mine.xml	(revision )
+++ app/src/main/res/layout/fragment_main_mine.xml	(revision )
@@ -0,0 +1,83 @@
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical">
+
+    <RelativeLayout
+        android:layout_width="fill_parent"
+        android:layout_height="@dimen/fragment_mine_head_bg_height"
+        android:background="@mipmap/fragment_mine_head_bg"
+        android:orientation="vertical">
+        <TextView
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:text="@string/fragment_mine_head_title"
+            android:textColor="@color/common_font_color_ffffff"
+            android:textSize="@dimen/common_font_size_16"
+            android:gravity="center_horizontal"
+            android:layout_marginTop="@dimen/common_content_margin_15"/>
+        <TextView
+            android:id="@+id/fragment_mine_head_username"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:textColor="@color/common_font_color_ffffff"
+            android:textSize="@dimen/common_font_size_12"
+            android:gravity="center_horizontal"
+            android:layout_alignParentBottom="true"
+            android:layout_marginBottom="@dimen/common_content_margin_10"/>
+
+        <LinearLayout
+            android:id="@+id/fragment_mine_head_touxiang"
+            android:layout_width="@dimen/fragment_mine_head_bg_touxiang_height"
+            android:layout_height="@dimen/fragment_mine_head_bg_touxiang_height"
+            android:layout_above="@id/fragment_mine_head_username"
+            android:layout_centerHorizontal="true"
+            android:layout_marginBottom="@dimen/common_content_margin_10"
+            android:clickable="true"
+            android:onClick="onClickView">
+            <ImageView
+                android:layout_width="@dimen/fragment_mine_head_bg_touxiang_height"
+                android:layout_height="@dimen/fragment_mine_head_bg_touxiang_height"
+                android:visibility="gone"/>
+            <TextView
+                android:layout_width="@dimen/fragment_mine_head_bg_touxiang_height"
+                android:layout_height="@dimen/fragment_mine_head_bg_touxiang_height"
+                android:background="@mipmap/fragment_mine_head_bg_touxiang"
+                android:gravity="center"
+                android:text="@string/fragment_mine_head_login"
+                android:textSize="@dimen/common_font_size_14"
+                android:textColor="@color/common_font_color_398903"/>
+        </LinearLayout>
+
+    </RelativeLayout>
+    <ScrollView
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:orientation="vertical">
+            <LinearLayout
+                android:id="@+id/fragment_mine_list"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="vertical"/>
+
+            <TextView
+                android:id="@+id/fragment_mine_exit"
+                android:layout_width="fill_parent"
+                android:layout_height="@dimen/fragment_mine_exit_height"
+                android:background="@drawable/common_button_1_selector"
+                android:layout_marginTop="@dimen/common_content_margin_20"
+                android:layout_marginRight="@dimen/main_foot_height"
+                android:layout_marginLeft="@dimen/main_foot_height"
+                android:text="@string/fragment_mine_head_exit"
+                android:textSize="@dimen/common_font_size_16"
+                android:textColor="@color/common_font_color_ffffff"
+                android:gravity="center"
+                android:clickable="true"
+                android:onClick="onClickView"/>
+        </LinearLayout>
+    </ScrollView>
+
+</LinearLayout>
Index: app/src/main/java/com/oasgames/android/oaspay/activity/MyApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/activity/MyApplication.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/activity/MyApplication.java	(revision )
@@ -0,0 +1,83 @@
+package com.oasgames.android.oaspay.activity;
+
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.base.tools.BasesApplication;
+import com.base.tools.entity.PhoneInfo;
+import com.base.tools.service.BasesServiceLogin;
+import com.base.tools.utils.BasesConstant;
+import com.base.tools.utils.BasesUtils;
+import com.facebook.FacebookSdk;
+import com.facebook.appevents.AppEventsLogger;
+import com.oasgames.android.oaspay.entity.SearchKeywordInfo;
+
+import java.util.List;
+
+/**
+ * Created by Administrator on 2015/10/29.
+ */
+public class MyApplication extends BasesApplication {
+    final String TAG = MyApplication.class.getSimpleName();
+
+    boolean isReLoadOderList = true;// 默认为true，加载过一次后为false，当某订单有变化时为true
+    List<SearchKeywordInfo> keywordInfoList;// 搜索关键词集合，每次应用生命周期内，只取一次
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        init();
+    }
+    private void init(){
+    // 从meta中获取 gamecode,publickey, paykey,这些值由游戏端在清单中配置。
+        String str = null;
+        try {
+            PhoneInfo.instance().setMobilecode(BasesUtils.getMobileCode());
+            str = getResources().getString(BasesUtils.getResourceValue("string", "app_code"));
+            if(str != null && !TextUtils.isEmpty(str)){
+                PhoneInfo.instance().setGamecode(str);
+            }else
+                Log.e(TAG, "app_code don't setup!");
+
+            str = getResources().getString(BasesUtils.getResourceValue("string", "app_mdata_appid"));
+            if(str != null && !TextUtils.isEmpty(str)){
+                PhoneInfo.instance().setMdataAppID(str);
+            }else
+                Log.e(TAG, "app_code don't setup!");
+
+            str = getResources().getString(BasesUtils.getResourceValue("string", "app_publickey"));
+            if(str != null && !TextUtils.isEmpty(str)){
+                PUBLICKEY = str;
+            }else
+                Log.e(TAG, "PublicKey don't setup!");
+
+            str = getResources().getString(BasesUtils.getResourceValue("string", "app_environment"));
+            if(str != null && !TextUtils.isEmpty(str)){
+                if(!TextUtils.isEmpty(str) && BasesConstant.ENVIRONMENT_SANDBOX.equals(str))
+                    OASISSDK_ENVIRONMENT_SANDBOX = true;
+                else
+                    OASISSDK_ENVIRONMENT_SANDBOX = false;
+            }else
+                Log.e(TAG, "Environment don't setup!");
+
+            str = getResources().getString(BasesUtils.getResourceValue("string", "app_mode"));
+            if(str != null && !TextUtils.isEmpty(str)){
+                if(!TextUtils.isEmpty(str) && BasesConstant.MODE_OFFLINE.equals(str))
+                    MODE = BasesConstant.MODE_OFFLINE;
+                else
+                    MODE = BasesConstant.MODE_ONLINE;
+            }else
+                Log.e(TAG, "Environment don't setup!");
+
+        } catch (Exception e1) {
+            Log.e(TAG, "Init is fail");
+        }
+
+        FacebookSdk.sdkInitialize(getApplicationContext());
+        AppEventsLogger.activateApp(getApplicationContext());
+    }
+    public void clearUserInfo(){
+        userInfo = null;
+        new BasesServiceLogin().deleteCacheUserInfo();
+    }
+}
+
Index: app/src/main/java/com/oasgames/android/oaspay/entity/ProductList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/entity/ProductList.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/entity/ProductList.java	(revision )
@@ -0,0 +1,32 @@
+package com.oasgames.android.oaspay.entity;
+
+import java.util.List;
+
+/**
+ * 商品（礼包）列表集合
+ * @author Administrator
+ *
+ */
+public class ProductList {
+	public String cur_page;			//当前页号
+	public String total_page;		//总页数
+	public String every_page_count;			//每页记录数
+	public List list;
+
+
+	public void setCur_page(String cur_page) {
+		this.cur_page = cur_page;
+	}
+
+	public void setTotal_page(String total_page) {
+		this.total_page = total_page;
+	}
+
+	public void setEvery_page_count(String every_page_count) {
+		this.every_page_count = every_page_count;
+	}
+
+	public void setList(List list) {
+		this.list = list;
+	}
+}
Index: app/src/main/res/drawable/main_foot_mine_selector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/main_foot_mine_selector.xml	(revision )
+++ app/src/main/res/drawable/main_foot_mine_selector.xml	(revision )
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@mipmap/main_foot_mine_checked" android:state_pressed="true"/>
+    <item android:drawable="@mipmap/main_foot_mine_checked" android:state_focused="true"/>
+    <item android:drawable="@mipmap/main_foot_mine_checked" android:state_selected="true"/>
+    <item android:drawable="@mipmap/main_foot_mine_checked" android:state_checked="true"/>
+    <item android:drawable="@mipmap/main_foot_mine_uncheck"/>
+
+</selector>
\ No newline at end of file
Index: app/src/main/java/com/base/tools/google/IabHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/google/IabHelper.java	(revision )
+++ app/src/main/java/com/base/tools/google/IabHelper.java	(revision )
@@ -0,0 +1,993 @@
+/* Copyright (c) 2012 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.base.tools.google;
+
+import android.app.Activity;
+import android.app.PendingIntent;
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentSender.SendIntentException;
+import android.content.ServiceConnection;
+import android.content.pm.ResolveInfo;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.IBinder;
+import android.os.RemoteException;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.android.vending.billing.IInAppBillingService;
+
+import org.json.JSONException;
+
+import java.util.ArrayList;
+import java.util.List;
+
+
+/**
+ * Provides convenience methods for in-app billing. You can create one instance of this
+ * class for your application and use it to process in-app billing operations.
+ * It provides synchronous (blocking) and asynchronous (non-blocking) methods for
+ * many common in-app billing operations, as well as automatic signature
+ * verification.
+ *
+ * After instantiating, you must perform setup in order to start using the object.
+ * To perform setup, call the {@link #startSetup} method and provide a listener;
+ * that listener will be notified when setup is complete, after which (and not before)
+ * you may call other methods.
+ *
+ * After setup is complete, you will typically want to request an inventory of owned
+ * items and subscriptions. See {@link #queryInventory}, {@link #queryInventoryAsync}
+ * and related methods.
+ *
+ * When you are done with this object, don't forget to call {@link #dispose}
+ * to ensure proper cleanup. This object holds a binding to the in-app billing
+ * service, which will leak unless you dispose of it correctly. If you created
+ * the object on an Activity's onCreate method, then the recommended
+ * place to dispose of it is the Activity's onDestroy method.
+ *
+ * A note about threading: When using this object from a background thread, you may
+ * call the blocking versions of methods; when using from a UI thread, call
+ * only the asynchronous versions and handle the results via callbacks.
+ * Also, notice that you can only call one asynchronous operation at a time;
+ * attempting to start a second asynchronous operation while the first one
+ * has not yet completed will result in an exception being thrown.
+ *
+ * @author Bruno Oliveira (Google)
+ *
+ */
+public class IabHelper {
+    // Is debug logging enabled?
+    boolean mDebugLog = false;
+    String mDebugTag = "IabHelper";
+
+    // Is setup done?
+    boolean mSetupDone = false;
+
+    // Has this object been disposed of? (If so, we should ignore callbacks, etc)
+    boolean mDisposed = false;
+
+    // Are subscriptions supported?
+    boolean mSubscriptionsSupported = false;
+
+    // Is an asynchronous operation in progress?
+    // (only one at a time can be in progress)
+    boolean mAsyncInProgress = false;
+
+    // (for logging/debugging)
+    // if mAsyncInProgress == true, what asynchronous operation is in progress?
+    String mAsyncOperation = "";
+
+    // Context we were passed during initialization
+    Context mContext;
+
+    // Connection to the service
+    IInAppBillingService mService;
+    ServiceConnection mServiceConn;
+
+    // The request code used to launch purchase flow
+    int mRequestCode;
+
+    // The item type of the current purchase flow
+    String mPurchasingItemType;
+
+    // Public key for verifying signature, in base64 encoding
+    String mSignatureBase64 = null;
+
+    // Billing response codes
+    public static final int BILLING_RESPONSE_RESULT_OK = 0;
+    public static final int BILLING_RESPONSE_RESULT_USER_CANCELED = 1;
+    public static final int BILLING_RESPONSE_RESULT_BILLING_UNAVAILABLE = 3;
+    public static final int BILLING_RESPONSE_RESULT_ITEM_UNAVAILABLE = 4;
+    public static final int BILLING_RESPONSE_RESULT_DEVELOPER_ERROR = 5;
+    public static final int BILLING_RESPONSE_RESULT_ERROR = 6;
+    public static final int BILLING_RESPONSE_RESULT_ITEM_ALREADY_OWNED = 7;
+    public static final int BILLING_RESPONSE_RESULT_ITEM_NOT_OWNED = 8;
+
+    // IAB Helper error codes
+    public static final int IABHELPER_ERROR_BASE = -1000;
+    public static final int IABHELPER_REMOTE_EXCEPTION = -1001;
+    public static final int IABHELPER_BAD_RESPONSE = -1002;
+    public static final int IABHELPER_VERIFICATION_FAILED = -1003;
+    public static final int IABHELPER_SEND_INTENT_FAILED = -1004;
+    public static final int IABHELPER_USER_CANCELLED = -1005;
+    public static final int IABHELPER_UNKNOWN_PURCHASE_RESPONSE = -1006;
+    public static final int IABHELPER_MISSING_TOKEN = -1007;
+    public static final int IABHELPER_UNKNOWN_ERROR = -1008;
+    public static final int IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE = -1009;
+    public static final int IABHELPER_INVALID_CONSUMPTION = -1010;
+
+    // Keys for the responses from InAppBillingService
+    public static final String RESPONSE_CODE = "RESPONSE_CODE";
+    public static final String RESPONSE_GET_SKU_DETAILS_LIST = "DETAILS_LIST";
+    public static final String RESPONSE_BUY_INTENT = "BUY_INTENT";
+    public static final String RESPONSE_INAPP_PURCHASE_DATA = "INAPP_PURCHASE_DATA";
+    public static final String RESPONSE_INAPP_SIGNATURE = "INAPP_DATA_SIGNATURE";
+    public static final String RESPONSE_INAPP_ITEM_LIST = "INAPP_PURCHASE_ITEM_LIST";
+    public static final String RESPONSE_INAPP_PURCHASE_DATA_LIST = "INAPP_PURCHASE_DATA_LIST";
+    public static final String RESPONSE_INAPP_SIGNATURE_LIST = "INAPP_DATA_SIGNATURE_LIST";
+    public static final String INAPP_CONTINUATION_TOKEN = "INAPP_CONTINUATION_TOKEN";
+
+    // Item types
+    public static final String ITEM_TYPE_INAPP = "inapp";
+    public static final String ITEM_TYPE_SUBS = "subs";
+
+    // some fields on the getSkuDetails response bundle
+    public static final String GET_SKU_DETAILS_ITEM_LIST = "ITEM_ID_LIST";
+    public static final String GET_SKU_DETAILS_ITEM_TYPE_LIST = "ITEM_TYPE_LIST";
+
+    /**
+     * Creates an instance. After creation, it will not yet be ready to use. You must perform
+     * setup by calling {@link #startSetup} and wait for setup to complete. This constructor does not
+     * block and is safe to call from a UI thread.
+     *
+     * @param ctx Your application or Activity context. Needed to bind to the in-app billing service.
+     * @param base64PublicKey Your application's public key, encoded in base64.
+     *     This is used for verification of purchase signatures. You can find your app's base64-encoded
+     *     public key in your application's page on Google Play Developer Console. Note that this
+     *     is NOT your "developer public key".
+     */
+    public IabHelper(Context ctx, String base64PublicKey) {
+        mContext = ctx.getApplicationContext();
+        mSignatureBase64 = base64PublicKey;
+        logDebug("IAB helper created.");
+    }
+
+    /**
+     * Enables or disable debug logging through LogCat.
+     */
+    public void enableDebugLogging(boolean enable, String tag) {
+        checkNotDisposed();
+        mDebugLog = enable;
+        mDebugTag = tag;
+    }
+
+    public void enableDebugLogging(boolean enable) {
+        checkNotDisposed();
+        mDebugLog = enable;
+    }
+
+    /**
+     * Callback for setup process. This listener's {@link #onIabSetupFinished} method is called
+     * when the setup process is complete.
+     */
+    public interface OnIabSetupFinishedListener {
+        /**
+         * Called to notify that setup is complete.
+         *
+         * @param result The result of the setup process.
+         */
+        public void onIabSetupFinished(IabResult result);
+    }
+
+    /**
+     * Starts the setup process. This will start up the setup process asynchronously.
+     * You will be notified through the listener when the setup process is complete.
+     * This method is safe to call from a UI thread.
+     *
+     * @param listener The listener to notify when the setup process is complete.
+     */
+    public void startSetup(final OnIabSetupFinishedListener listener) {
+        // If already set up, can't do it again.
+        checkNotDisposed();
+        if (mSetupDone) throw new IllegalStateException("IAB helper is already set up.");
+
+        // Connection to IAB service
+        logDebug("Starting in-app billing setup.");
+        mServiceConn = new ServiceConnection() {
+            @Override
+            public void onServiceDisconnected(ComponentName name) {
+                logDebug("Billing service disconnected.");
+                mService = null;
+            }
+
+            @Override
+            public void onServiceConnected(ComponentName name, IBinder service) {
+                if (mDisposed) return;
+                logDebug("Billing service connected.");
+                mService = IInAppBillingService.Stub.asInterface(service);
+                String packageName = mContext.getPackageName();
+                try {
+                    logDebug("Checking for in-app billing 3 support.");
+
+                    // check for in-app billing v3 support
+                    int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);
+                    if (response != BILLING_RESPONSE_RESULT_OK) {
+                        if (listener != null) listener.onIabSetupFinished(new IabResult(response,
+                                "Error checking for billing v3 support."));
+
+                        // if in-app purchases aren't supported, neither are subscriptions.
+                        mSubscriptionsSupported = false;
+                        return;
+                    }
+                    logDebug("In-app billing version 3 supported for " + packageName);
+
+                    // check for v3 subscriptions support
+                    response = mService.isBillingSupported(3, packageName, ITEM_TYPE_SUBS);
+                    if (response == BILLING_RESPONSE_RESULT_OK) {
+                        logDebug("Subscriptions AVAILABLE.");
+                        mSubscriptionsSupported = true;
+                    }
+                    else {
+                        logDebug("Subscriptions NOT AVAILABLE. Response: " + response);
+                    }
+
+                    mSetupDone = true;
+                }
+                catch (RemoteException e) {
+                    if (listener != null) {
+                        listener.onIabSetupFinished(new IabResult(IABHELPER_REMOTE_EXCEPTION,
+                                                    "RemoteException while setting up in-app billing."));
+                    }
+                    e.printStackTrace();
+                    return;
+                }
+
+                if (listener != null) {
+                    listener.onIabSetupFinished(new IabResult(BILLING_RESPONSE_RESULT_OK, "Setup successful."));
+                }
+            }
+        };
+
+        Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
+        serviceIntent.setPackage("com.android.vending");
+        List<ResolveInfo> list = mContext.getPackageManager().queryIntentServices(serviceIntent, 0);
+        if (list != null && !list.isEmpty()) {// 2014-06-16 增加对 null的判断
+            // service available to handle that Intent
+            mContext.bindService(serviceIntent, mServiceConn, Context.BIND_AUTO_CREATE);
+        }
+        else {
+            // no service available to handle that Intent
+            if (listener != null) {
+                listener.onIabSetupFinished(
+                        new IabResult(BILLING_RESPONSE_RESULT_BILLING_UNAVAILABLE,
+                        "Billing service unavailable on device."));
+            }
+        }
+    }
+
+    /**
+     * Dispose of object, releasing resources. It's very important to call this
+     * method when you are done with this object. It will release any resources
+     * used by it such as service connections. Naturally, once the object is
+     * disposed of, it can't be used again.
+     */
+    public void dispose() {
+        logDebug("Disposing.");
+        mSetupDone = false;
+        if (mServiceConn != null) {
+            logDebug("Unbinding from service.");
+            if (mContext != null) mContext.unbindService(mServiceConn);
+        }
+        mDisposed = true;
+        mContext = null;
+        mServiceConn = null;
+        mService = null;
+        mPurchaseListener = null;
+    }
+
+    private void checkNotDisposed() {
+        if (mDisposed) throw new IllegalStateException("IabHelper was disposed of, so it cannot be used.");
+    }
+
+    /** Returns whether subscriptions are supported. */
+    public boolean subscriptionsSupported() {
+        checkNotDisposed();
+        return mSubscriptionsSupported;
+    }
+
+
+    /**
+     * Callback that notifies when a purchase is finished.
+     */
+    public interface OnIabPurchaseFinishedListener {
+        /**
+         * Called to notify that an in-app purchase finished. If the purchase was successful,
+         * then the sku parameter specifies which item was purchased. If the purchase failed,
+         * the sku and extraData parameters may or may not be null, depending on how far the purchase
+         * process went.
+         *
+         * @param result The result of the purchase.
+         * @param info The purchase information (null if purchase failed)
+         */
+        public void onIabPurchaseFinished(IabResult result, Purchase info);
+    }
+
+    // The listener registered on launchPurchaseFlow, which we have to call back when
+    // the purchase finishes
+    OnIabPurchaseFinishedListener mPurchaseListener;
+
+    public void launchPurchaseFlow(Activity act, String sku, int requestCode, OnIabPurchaseFinishedListener listener) {
+        launchPurchaseFlow(act, sku, requestCode, listener, "");
+    }
+
+    public void launchPurchaseFlow(Activity act, String sku, int requestCode,
+            OnIabPurchaseFinishedListener listener, String extraData) {
+        launchPurchaseFlow(act, sku, ITEM_TYPE_INAPP, requestCode, listener, extraData);
+    }
+
+    public void launchSubscriptionPurchaseFlow(Activity act, String sku, int requestCode,
+            OnIabPurchaseFinishedListener listener) {
+        launchSubscriptionPurchaseFlow(act, sku, requestCode, listener, "");
+    }
+
+    public void launchSubscriptionPurchaseFlow(Activity act, String sku, int requestCode,
+            OnIabPurchaseFinishedListener listener, String extraData) {
+        launchPurchaseFlow(act, sku, ITEM_TYPE_SUBS, requestCode, listener, extraData);
+    }
+
+    /**
+     * Initiate the UI flow for an in-app purchase. Call this method to initiate an in-app purchase,
+     * which will involve bringing up the Google Play screen. The calling activity will be paused while
+     * the user interacts with Google Play, and the result will be delivered via the activity's
+     * {@link Activity#onActivityResult} method, at which point you must call
+     * this object's {@link #handleActivityResult} method to continue the purchase flow. This method
+     * MUST be called from the UI thread of the Activity.
+     *
+     * @param act The calling activity.
+     * @param sku The sku of the item to purchase.
+     * @param itemType indicates if it's a product or a subscription (ITEM_TYPE_INAPP or ITEM_TYPE_SUBS)
+     * @param requestCode A request code (to differentiate from other responses --
+     *     as in {@link Activity#startActivityForResult}).
+     * @param listener The listener to notify when the purchase process finishes
+     * @param extraData Extra data (developer payload), which will be returned with the purchase data
+     *     when the purchase completes. This extra data will be permanently bound to that purchase
+     *     and will always be returned when the purchase is queried.
+     */
+    public void launchPurchaseFlow(Activity act, String sku, String itemType, int requestCode,
+                        OnIabPurchaseFinishedListener listener, String extraData) {
+        checkNotDisposed();
+        checkSetupDone("launchPurchaseFlow");
+        flagStartAsync("launchPurchaseFlow");
+        IabResult result;
+
+        if (itemType.equals(ITEM_TYPE_SUBS) && !mSubscriptionsSupported) {
+            IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,
+                    "Subscriptions are not available.");
+            flagEndAsync();
+            if (listener != null) listener.onIabPurchaseFinished(r, null);
+            return;
+        }
+
+        try {
+            logDebug("Constructing buy intent for " + sku + ", item type: " + itemType);
+            Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
+            int response = getResponseCodeFromBundle(buyIntentBundle);
+            if (response != BILLING_RESPONSE_RESULT_OK) {
+                logError("Unable to buy item, Error response: " + getResponseDesc(response));
+                flagEndAsync();
+                result = new IabResult(response, "Unable to buy item");
+                if (listener != null) listener.onIabPurchaseFinished(result, null);
+                return;
+            }
+
+            PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
+            logDebug("Launching buy intent for " + sku + ". Request code: " + requestCode);
+            mRequestCode = requestCode;
+            mPurchaseListener = listener;
+            mPurchasingItemType = itemType;
+            act.startIntentSenderForResult(pendingIntent.getIntentSender(),
+                                           requestCode, new Intent(),
+                                           Integer.valueOf(0), Integer.valueOf(0),
+                                           Integer.valueOf(0));
+        }
+        catch (SendIntentException e) {
+            logError("SendIntentException while launching purchase flow for sku " + sku);
+            e.printStackTrace();
+            flagEndAsync();
+
+            result = new IabResult(IABHELPER_SEND_INTENT_FAILED, "Failed to send intent.");
+            if (listener != null) listener.onIabPurchaseFinished(result, null);
+        }
+        catch (RemoteException e) {
+            logError("RemoteException while launching purchase flow for sku " + sku);
+            e.printStackTrace();
+            flagEndAsync();
+
+            result = new IabResult(IABHELPER_REMOTE_EXCEPTION, "Remote exception while starting purchase flow");
+            if (listener != null) listener.onIabPurchaseFinished(result, null);
+        }
+    }
+
+    /**
+     * Handles an activity result that's part of the purchase flow in in-app billing. If you
+     * are calling {@link #launchPurchaseFlow}, then you must call this method from your
+     * Activity's {@link Activity@onActivityResult} method. This method
+     * MUST be called from the UI thread of the Activity.
+     *
+     * @param requestCode The requestCode as you received it.
+     * @param resultCode The resultCode as you received it.
+     * @param data The data (Intent) as you received it.
+     * @return Returns true if the result was related to a purchase flow and was handled;
+     *     false if the result was not related to a purchase, in which case you should
+     *     handle it normally.
+     */
+    public boolean handleActivityResult(int requestCode, int resultCode, Intent data) {
+        IabResult result;
+        if (requestCode != mRequestCode) return false;
+
+        checkNotDisposed();
+        checkSetupDone("handleActivityResult");
+
+        // end of async purchase operation that started on launchPurchaseFlow
+        flagEndAsync();
+
+        if (data == null) {
+            logError("Null data in IAB activity result.");
+            result = new IabResult(IABHELPER_BAD_RESPONSE, "Null data in IAB result");
+            if (mPurchaseListener != null) mPurchaseListener.onIabPurchaseFinished(result, null);
+            return true;
+        }
+
+        int responseCode = getResponseCodeFromIntent(data);
+        String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
+        String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
+
+        if (resultCode == Activity.RESULT_OK && responseCode == BILLING_RESPONSE_RESULT_OK) {
+            logDebug("Successful resultcode from purchase activity.");
+            logDebug("Purchase data: " + purchaseData);
+            logDebug("Data signature: " + dataSignature);
+            logDebug("Extras: " + data.getExtras());
+            logDebug("Expected item type: " + mPurchasingItemType);
+
+            if (purchaseData == null || dataSignature == null) {
+                logError("BUG: either purchaseData or dataSignature is null.");
+                logDebug("Extras: " + data.getExtras().toString());
+                result = new IabResult(IABHELPER_UNKNOWN_ERROR, "IAB returned null purchaseData or dataSignature");
+                if (mPurchaseListener != null) mPurchaseListener.onIabPurchaseFinished(result, null);
+                return true;
+            }
+
+            Purchase purchase = null;
+            try {
+                purchase = new Purchase(mPurchasingItemType, purchaseData, dataSignature);
+                String sku = purchase.getSku();
+
+                // Verify signature
+                if (!Security.verifyPurchase(mSignatureBase64, purchaseData, dataSignature)) {
+                    logError("Purchase signature verification FAILED for sku " + sku);
+                    result = new IabResult(IABHELPER_VERIFICATION_FAILED, "Signature verification failed for sku " + sku);
+                    if (mPurchaseListener != null) mPurchaseListener.onIabPurchaseFinished(result, purchase);
+                    return true;
+                }
+                logDebug("Purchase signature successfully verified.");
+            }
+            catch (JSONException e) {
+                logError("Failed to parse purchase data.");
+                e.printStackTrace();
+                result = new IabResult(IABHELPER_BAD_RESPONSE, "Failed to parse purchase data.");
+                if (mPurchaseListener != null) mPurchaseListener.onIabPurchaseFinished(result, null);
+                return true;
+            }
+
+            if (mPurchaseListener != null) {
+                mPurchaseListener.onIabPurchaseFinished(new IabResult(BILLING_RESPONSE_RESULT_OK, "Success"), purchase);
+            }
+        }
+        else if (resultCode == Activity.RESULT_OK) {
+            // result code was OK, but in-app billing response was not OK.
+            logDebug("Result code was OK but in-app billing response was not OK: " + getResponseDesc(responseCode));
+            if (mPurchaseListener != null) {
+                result = new IabResult(responseCode, "Problem purchashing item.");
+                mPurchaseListener.onIabPurchaseFinished(result, null);
+            }
+        }
+        else if (resultCode == Activity.RESULT_CANCELED) {
+            logDebug("Purchase canceled - Response: " + getResponseDesc(responseCode));
+            result = new IabResult(IABHELPER_USER_CANCELLED, "User canceled.");
+            if (mPurchaseListener != null) mPurchaseListener.onIabPurchaseFinished(result, null);
+        }
+        else {
+            logError("Purchase failed. Result code: " + Integer.toString(resultCode)
+                    + ". Response: " + getResponseDesc(responseCode));
+            result = new IabResult(IABHELPER_UNKNOWN_PURCHASE_RESPONSE, "Unknown purchase response.");
+            if (mPurchaseListener != null) mPurchaseListener.onIabPurchaseFinished(result, null);
+        }
+        return true;
+    }
+
+    public Inventory queryInventory(boolean querySkuDetails, List<String> moreSkus) throws IabException {
+        return queryInventory(querySkuDetails, moreSkus, null);
+    }
+
+    /**
+     * Queries the inventory. This will query all owned items from the server, as well as
+     * information on additional skus, if specified. This method may block or take long to execute.
+     * Do not call from a UI thread. For that, use the non-blocking version .
+     *
+     * @param querySkuDetails if true, SKU details (price, description, etc) will be queried as well
+     *     as purchase information.
+     * @param moreItemSkus additional PRODUCT skus to query information on, regardless of ownership.
+     *     Ignored if null or if querySkuDetails is false.
+     * @param moreSubsSkus additional SUBSCRIPTIONS skus to query information on, regardless of ownership.
+     *     Ignored if null or if querySkuDetails is false.
+     * @throws IabException if a problem occurs while refreshing the inventory.
+     */
+    public Inventory queryInventory(boolean querySkuDetails, List<String> moreItemSkus,
+                                        List<String> moreSubsSkus) throws IabException {
+        checkNotDisposed();
+        checkSetupDone("queryInventory");
+        try {
+            Inventory inv = new Inventory();
+            int r = queryPurchases(inv, ITEM_TYPE_INAPP);
+            if (r != BILLING_RESPONSE_RESULT_OK) {
+                throw new IabException(r, "Error refreshing inventory (querying owned items).");
+            }
+
+            if (querySkuDetails) {
+                r = querySkuDetails(ITEM_TYPE_INAPP, inv, moreItemSkus);
+                if (r != BILLING_RESPONSE_RESULT_OK) {
+                    throw new IabException(r, "Error refreshing inventory (querying prices of items).");
+                }
+            }
+
+            // if subscriptions are supported, then also query for subscriptions
+            if (mSubscriptionsSupported) {
+                r = queryPurchases(inv, ITEM_TYPE_SUBS);
+                if (r != BILLING_RESPONSE_RESULT_OK) {
+                    throw new IabException(r, "Error refreshing inventory (querying owned subscriptions).");
+                }
+
+                if (querySkuDetails) {
+                    r = querySkuDetails(ITEM_TYPE_SUBS, inv, moreItemSkus);
+                    if (r != BILLING_RESPONSE_RESULT_OK) {
+                        throw new IabException(r, "Error refreshing inventory (querying prices of subscriptions).");
+                    }
+                }
+            }
+
+            return inv;
+        }
+        catch (RemoteException e) {
+            throw new IabException(IABHELPER_REMOTE_EXCEPTION, "Remote exception while refreshing inventory.", e);
+        }
+        catch (JSONException e) {
+            throw new IabException(IABHELPER_BAD_RESPONSE, "Error parsing JSON response while refreshing inventory.", e);
+        }
+    }
+
+    /**
+     * Listener that notifies when an inventory query operation completes.
+     */
+    public interface QueryInventoryFinishedListener {
+        /**
+         * Called to notify that an inventory query operation completed.
+         *
+         * @param result The result of the operation.
+         * @param inv The inventory.
+         */
+        public void onQueryInventoryFinished(IabResult result, Inventory inv);
+    }
+
+
+    /**
+     * Asynchronous wrapper for inventory query. This will perform an inventory
+     * query as described in {@link #queryInventory}, but will do so asynchronously
+     * and call back the specified listener upon completion. This method is safe to
+     * call from a UI thread.
+     *
+     * @param querySkuDetails as in {@link #queryInventory}
+     * @param moreSkus as in {@link #queryInventory}
+     * @param listener The listener to notify when the refresh operation completes.
+     */
+    public void queryInventoryAsync(final boolean querySkuDetails,
+                               final List<String> moreSkus,
+                               final QueryInventoryFinishedListener listener) {
+        final Handler handler = new Handler();
+        checkNotDisposed();
+        checkSetupDone("queryInventory");
+        flagStartAsync("refresh inventory");
+        (new Thread(new Runnable() {
+            public void run() {
+                IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
+                Inventory inv = null;
+                try {
+                    inv = queryInventory(querySkuDetails, moreSkus);
+                }
+                catch (IabException ex) {
+                    result = ex.getResult();
+                }
+
+                flagEndAsync();
+
+                final IabResult result_f = result;
+                final Inventory inv_f = inv;
+                if (!mDisposed && listener != null) {
+                    handler.post(new Runnable() {
+                        public void run() {
+                            listener.onQueryInventoryFinished(result_f, inv_f);
+                        }
+                    });
+                }
+            }
+        })).start();
+    }
+
+    public void queryInventoryAsync(QueryInventoryFinishedListener listener) {
+        queryInventoryAsync(true, null, listener);
+    }
+
+    public void queryInventoryAsync(boolean querySkuDetails, QueryInventoryFinishedListener listener) {
+        queryInventoryAsync(querySkuDetails, null, listener);
+    }
+
+
+    /**
+     * Consumes a given in-app product. Consuming can only be done on an item
+     * that's owned, and as a result of consumption, the user will no longer own it.
+     * This method may block or take long to return. Do not call from the UI thread.
+     * For that, see {@link #consumeAsync}.
+     *
+     * @param itemInfo The PurchaseInfo that represents the item to consume.
+     * @throws IabException if there is a problem during consumption.
+     */
+    void consume(Purchase itemInfo) throws IabException {
+        checkNotDisposed();
+        checkSetupDone("consume");
+
+        if (!itemInfo.mItemType.equals(ITEM_TYPE_INAPP)) {
+            throw new IabException(IABHELPER_INVALID_CONSUMPTION,
+                    "Items of type '" + itemInfo.mItemType + "' can't be consumed.");
+        }
+
+        try {
+            String token = itemInfo.getToken();
+            String sku = itemInfo.getSku();
+            if (token == null || token.equals("")) {
+               logError("Can't consume "+ sku + ". No token.");
+               throw new IabException(IABHELPER_MISSING_TOKEN, "PurchaseInfo is missing token for sku: "
+                   + sku + " " + itemInfo);
+            }
+
+            logDebug("Consuming sku: " + sku + ", token: " + token);
+            int response = mService.consumePurchase(3, mContext.getPackageName(), token);
+            if (response == BILLING_RESPONSE_RESULT_OK) {
+               logDebug("Successfully consumed sku: " + sku);
+            }
+            else {
+               logDebug("Error consuming consuming sku " + sku + ". " + getResponseDesc(response));
+               throw new IabException(response, "Error consuming sku " + sku);
+            }
+        }
+        catch (RemoteException e) {
+            throw new IabException(IABHELPER_REMOTE_EXCEPTION, "Remote exception while consuming. PurchaseInfo: " + itemInfo, e);
+        }
+    }
+
+    /**
+     * Callback that notifies when a consumption operation finishes.
+     */
+    public interface OnConsumeFinishedListener {
+        /**
+         * Called to notify that a consumption has finished.
+         *
+         * @param purchase The purchase that was (or was to be) consumed.
+         * @param result The result of the consumption operation.
+         */
+        public void onConsumeFinished(Purchase purchase, IabResult result);
+    }
+
+    /**
+     * Callback that notifies when a multi-item consumption operation finishes.
+     */
+    public interface OnConsumeMultiFinishedListener {
+        /**
+         * Called to notify that a consumption of multiple items has finished.
+         *
+         * @param purchases The purchases that were (or were to be) consumed.
+         * @param results The results of each consumption operation, corresponding to each
+         *     sku.
+         */
+        public void onConsumeMultiFinished(List<Purchase> purchases, List<IabResult> results);
+    }
+
+    /**
+     * Asynchronous wrapper to item consumption. Works like {@link #consume}, but
+     * performs the consumption in the background and notifies completion through
+     * the provided listener. This method is safe to call from a UI thread.
+     *
+     * @param purchase The purchase to be consumed.
+     * @param listener The listener to notify when the consumption operation finishes.
+     */
+    public void consumeAsync(Purchase purchase, OnConsumeFinishedListener listener) {
+        checkNotDisposed();
+        checkSetupDone("consume");
+        List<Purchase> purchases = new ArrayList<Purchase>();
+        purchases.add(purchase);
+        consumeAsyncInternal(purchases, listener, null);
+    }
+
+    /**
+     * Same as consumeAsync, but for multiple items at once.
+     * @param purchases The list of PurchaseInfo objects representing the purchases to consume.
+     * @param listener The listener to notify when the consumption operation finishes.
+     */
+    public void consumeAsync(List<Purchase> purchases, OnConsumeMultiFinishedListener listener) {
+        checkNotDisposed();
+        checkSetupDone("consume");
+        consumeAsyncInternal(purchases, null, listener);
+    }
+
+    /**
+     * Returns a human-readable description for the given response code.
+     *
+     * @param code The response code
+     * @return A human-readable string explaining the result code.
+     *     It also includes the result code numerically.
+     */
+    public static String getResponseDesc(int code) {
+        String[] iab_msgs = ("0:OK/1:User Canceled/2:Unknown/" +
+                "3:Billing Unavailable/4:Item unavailable/" +
+                "5:Developer Error/6:Error/7:Item Already Owned/" +
+                "8:Item not owned").split("/");
+        String[] iabhelper_msgs = ("0:OK/-1001:Remote exception during initialization/" +
+                                   "-1002:Bad response received/" +
+                                   "-1003:Purchase signature verification failed/" +
+                                   "-1004:Send intent failed/" +
+                                   "-1005:User cancelled/" +
+                                   "-1006:Unknown purchase response/" +
+                                   "-1007:Missing token/" +
+                                   "-1008:Unknown error/" +
+                                   "-1009:Subscriptions not available/" +
+                                   "-1010:Invalid consumption attempt").split("/");
+
+        if (code <= IABHELPER_ERROR_BASE) {
+            int index = IABHELPER_ERROR_BASE - code;
+            if (index >= 0 && index < iabhelper_msgs.length) return iabhelper_msgs[index];
+            else return String.valueOf(code) + ":Unknown IAB Helper Error";
+        }
+        else if (code < 0 || code >= iab_msgs.length)
+            return String.valueOf(code) + ":Unknown";
+        else
+            return iab_msgs[code];
+    }
+
+
+    // Checks that setup was done; if not, throws an exception.
+    void checkSetupDone(String operation) {
+        if (!mSetupDone) {
+            logError("Illegal state for operation (" + operation + "): IAB helper is not set up.");
+            throw new IllegalStateException("IAB helper is not set up. Can't perform operation: " + operation);
+        }
+    }
+
+    // Workaround to bug where sometimes response codes come as Long instead of Integer
+    int getResponseCodeFromBundle(Bundle b) {
+        Object o = b.get(RESPONSE_CODE);
+        if (o == null) {
+            logDebug("Bundle with null response code, assuming OK (known issue)");
+            return BILLING_RESPONSE_RESULT_OK;
+        }
+        else if (o instanceof Integer) return ((Integer)o).intValue();
+        else if (o instanceof Long) return (int)((Long)o).longValue();
+        else {
+            logError("Unexpected type for bundle response code.");
+            logError(o.getClass().getName());
+            throw new RuntimeException("Unexpected type for bundle response code: " + o.getClass().getName());
+        }
+    }
+
+    // Workaround to bug where sometimes response codes come as Long instead of Integer
+    int getResponseCodeFromIntent(Intent i) {
+        Object o = i.getExtras().get(RESPONSE_CODE);
+        if (o == null) {
+            logError("Intent with no response code, assuming OK (known issue)");
+            return BILLING_RESPONSE_RESULT_OK;
+        }
+        else if (o instanceof Integer) return ((Integer)o).intValue();
+        else if (o instanceof Long) return (int)((Long)o).longValue();
+        else {
+            logError("Unexpected type for intent response code.");
+            logError(o.getClass().getName());
+            throw new RuntimeException("Unexpected type for intent response code: " + o.getClass().getName());
+        }
+    }
+
+    void flagStartAsync(String operation) {
+        if (mAsyncInProgress) throw new IllegalStateException("Can't start async operation (" +
+                operation + ") because another async operation(" + mAsyncOperation + ") is in progress.");
+        mAsyncOperation = operation;
+        mAsyncInProgress = true;
+        logDebug("Starting async operation: " + operation);
+    }
+
+    void flagEndAsync() {
+        logDebug("Ending async operation: " + mAsyncOperation);
+        mAsyncOperation = "";
+        mAsyncInProgress = false;
+    }
+
+
+    int queryPurchases(Inventory inv, String itemType) throws JSONException, RemoteException {
+        // Query purchases
+        logDebug("Querying owned items, item type: " + itemType);
+        logDebug("Package name: " + mContext.getPackageName());
+        boolean verificationFailed = false;
+        String continueToken = null;
+
+        do {
+            logDebug("Calling getPurchases with continuation token: " + continueToken);
+            Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),
+                    itemType, continueToken);
+
+            int response = getResponseCodeFromBundle(ownedItems);
+            logDebug("Owned items response: " + String.valueOf(response));
+            if (response != BILLING_RESPONSE_RESULT_OK) {
+                logDebug("getPurchases() failed: " + getResponseDesc(response));
+                return response;
+            }
+            if (!ownedItems.containsKey(RESPONSE_INAPP_ITEM_LIST)
+                    || !ownedItems.containsKey(RESPONSE_INAPP_PURCHASE_DATA_LIST)
+                    || !ownedItems.containsKey(RESPONSE_INAPP_SIGNATURE_LIST)) {
+                logError("Bundle returned from getPurchases() doesn't contain required fields.");
+                return IABHELPER_BAD_RESPONSE;
+            }
+
+            ArrayList<String> ownedSkus = ownedItems.getStringArrayList(
+                        RESPONSE_INAPP_ITEM_LIST);
+            ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(
+                        RESPONSE_INAPP_PURCHASE_DATA_LIST);
+            ArrayList<String> signatureList = ownedItems.getStringArrayList(
+                        RESPONSE_INAPP_SIGNATURE_LIST);
+
+            for (int i = 0; i < purchaseDataList.size(); ++i) {
+                String purchaseData = purchaseDataList.get(i);
+                String signature = signatureList.get(i);
+                String sku = ownedSkus.get(i);
+                if (Security.verifyPurchase(mSignatureBase64, purchaseData, signature)) {
+                    logDebug("Sku is owned: " + sku);
+                    Purchase purchase = new Purchase(itemType, purchaseData, signature);
+
+                    if (TextUtils.isEmpty(purchase.getToken())) {
+                        logWarn("BUG: empty/null token!");
+                        logDebug("Purchase data: " + purchaseData);
+                    }
+
+                    // Record ownership and token
+                    inv.addPurchase(purchase);
+                }
+                else {
+                    logWarn("Purchase signature verification **FAILED**. Not adding item.");
+                    logDebug("   Purchase data: " + purchaseData);
+                    logDebug("   Signature: " + signature);
+                    verificationFailed = true;
+                }
+            }
+
+            continueToken = ownedItems.getString(INAPP_CONTINUATION_TOKEN);
+            logDebug("Continuation token: " + continueToken);
+        } while (!TextUtils.isEmpty(continueToken));
+
+        return verificationFailed ? IABHELPER_VERIFICATION_FAILED : BILLING_RESPONSE_RESULT_OK;
+    }
+
+    int querySkuDetails(String itemType, Inventory inv, List<String> moreSkus)
+                                throws RemoteException, JSONException {
+        logDebug("Querying SKU details.");
+        ArrayList<String> skuList = new ArrayList<String>();
+        skuList.addAll(inv.getAllOwnedSkus(itemType));
+        if (moreSkus != null) {
+            for (String sku : moreSkus) {
+                if (!skuList.contains(sku)) {
+                    skuList.add(sku);
+                }
+            }
+        }
+
+        if (skuList.size() == 0) {
+            logDebug("queryPrices: nothing to do because there are no SKUs.");
+            return BILLING_RESPONSE_RESULT_OK;
+        }
+
+        Bundle querySkus = new Bundle();
+        querySkus.putStringArrayList(GET_SKU_DETAILS_ITEM_LIST, skuList);
+        Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),
+                itemType, querySkus);
+
+        if (!skuDetails.containsKey(RESPONSE_GET_SKU_DETAILS_LIST)) {
+            int response = getResponseCodeFromBundle(skuDetails);
+            if (response != BILLING_RESPONSE_RESULT_OK) {
+                logDebug("getSkuDetails() failed: " + getResponseDesc(response));
+                return response;
+            }
+            else {
+                logError("getSkuDetails() returned a bundle with neither an error nor a detail list.");
+                return IABHELPER_BAD_RESPONSE;
+            }
+        }
+
+        ArrayList<String> responseList = skuDetails.getStringArrayList(
+                RESPONSE_GET_SKU_DETAILS_LIST);
+
+        for (String thisResponse : responseList) {
+            SkuDetails d = new SkuDetails(itemType, thisResponse);
+            logDebug("Got sku details: " + d);
+            inv.addSkuDetails(d);
+        }
+        return BILLING_RESPONSE_RESULT_OK;
+    }
+
+
+    void consumeAsyncInternal(final List<Purchase> purchases,
+                              final OnConsumeFinishedListener singleListener,
+                              final OnConsumeMultiFinishedListener multiListener) {
+        final Handler handler = new Handler();
+        flagStartAsync("consume");
+        (new Thread(new Runnable() {
+            public void run() {
+                final List<IabResult> results = new ArrayList<IabResult>();
+                for (Purchase purchase : purchases) {
+                    try {
+                        consume(purchase);
+                        results.add(new IabResult(BILLING_RESPONSE_RESULT_OK, "Successful consume of sku " + purchase.getSku()));
+                    }
+                    catch (IabException ex) {
+                        results.add(ex.getResult());
+                    }
+                }
+
+                flagEndAsync();
+                if (!mDisposed && singleListener != null) {
+                    handler.post(new Runnable() {
+                        public void run() {
+                            singleListener.onConsumeFinished(purchases.get(0), results.get(0));
+                        }
+                    });
+                }
+                if (!mDisposed && multiListener != null) {
+                    handler.post(new Runnable() {
+                        public void run() {
+                            multiListener.onConsumeMultiFinished(purchases, results);
+                        }
+                    });
+                }
+            }
+        })).start();
+    }
+
+    void logDebug(String msg) {
+        if (mDebugLog) Log.d(mDebugTag, msg);
+    }
+
+    void logError(String msg) {
+        Log.e(mDebugTag, "In-app billing error: " + msg);
+    }
+
+    void logWarn(String msg) {
+        Log.w(mDebugTag, "In-app billing warning: " + msg);
+    }
+}
Index: app/src/main/res/menu/main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/menu/main.xml	(revision )
+++ app/src/main/res/menu/main.xml	(revision )
@@ -0,0 +1,26 @@
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    tools:context="com.example.slidelistviewsample.MainActivity" >
+
+    <item
+        android:id="@+id/menu_slide_mode"
+        android:orderInCategory="100"
+        android:title="切换SlideMode(BOTH)"/>
+    <item
+        android:id="@+id/menu_slide_left_action"
+        android:orderInCategory="100"
+        android:title="切换SlideLeftAction(Scroll)"/>
+    <item
+        android:id="@+id/menu_slide_right_action"
+        android:orderInCategory="100"
+        android:title="切换SlideRightAction(Scroll)"/>
+    <item
+        android:id="@+id/menu_data_change"
+        android:orderInCategory="100"
+        android:title="改变Data"/>
+    <item
+        android:id="@+id/menu_adapter_change"
+        android:orderInCategory="100"
+        android:title="改变Adapter"/>
+
+</menu>
\ No newline at end of file
Index: app/src/main/res/layout/fragment_main_news_item.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_main_news_item.xml	(revision )
+++ app/src/main/res/layout/fragment_main_news_item.xml	(revision )
@@ -0,0 +1,46 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+    android:paddingTop="@dimen/common_content_margin_10"
+    android:paddingBottom="@dimen/common_content_margin_10"
+    android:paddingLeft="@dimen/common_content_margin_20"
+    android:paddingRight="@dimen/common_content_margin_20">
+
+    <TextView
+        android:id="@+id/fragment_news_item_title"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        android:layout_alignParentRight="true"
+        android:singleLine="true"
+        android:ellipsize="end"
+        android:gravity="right"
+        android:textSize="@dimen/common_font_size_12"
+        android:textColor="@color/common_font_color_000000"
+        android:text="sfsdfs;kfsdkfjfljsfweruiwourwwpirpwei"/>
+    <TextView
+        android:id="@+id/fragment_news_item_discrip"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_below="@id/fragment_news_item_title"
+        android:layout_marginTop="@dimen/common_content_margin_10"
+        android:maxLines="2"
+        android:ellipsize="end"
+        android:gravity="right"
+        android:textSize="@dimen/common_font_size_12"
+        android:textColor="@color/common_font_color_868585"
+        android:text="kfsdkfjfljsfweruiwourww"/>
+    <TextView
+        android:id="@+id/fragment_news_item_date"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_below="@id/fragment_news_item_discrip"
+        android:layout_marginTop="@dimen/common_content_margin_10"
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentLeft="true"
+        android:gravity="right"
+        android:textSize="@dimen/common_font_size_12"
+        android:textColor="@color/common_font_color_868585"
+        android:text="kfsdkfjfljsfweruiwourww"/>
+</RelativeLayout>
+
Index: app/src/main/res/layout/page_product_details_item.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/page_product_details_item.xml	(revision )
+++ app/src/main/res/layout/page_product_details_item.xml	(revision )
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:background="@color/common_font_color_ffffff">
+
+    <TextView
+        android:id="@+id/product_details_item_notice"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:gravity="right|center_vertical"
+        android:textColor="@color/common_font_color_000000"
+        android:textSize="@dimen/common_font_size_12"
+        android:layout_marginTop="@dimen/common_content_margin_10"
+        android:layout_marginBottom="@dimen/common_content_margin_10"
+        android:layout_marginLeft="@dimen/common_content_margin_20"
+        android:layout_marginRight="@dimen/common_content_margin_20"/>
+
+    <TextView
+        android:layout_width="match_parent"
+        android:layout_height="2dip"
+        android:background="@color/common_list_item_divide_bg"/>
+
+</LinearLayout>
\ No newline at end of file
Index: app/src/main/java/com/google/zxing/decoding/DecodeFormatManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/google/zxing/decoding/DecodeFormatManager.java	(revision )
+++ app/src/main/java/com/google/zxing/decoding/DecodeFormatManager.java	(revision )
@@ -0,0 +1,104 @@
+/*
+ * Copyright (C) 2010 ZXing authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.zxing.decoding;
+
+import java.util.Arrays;
+import java.util.List;
+import java.util.Vector;
+import java.util.regex.Pattern;
+
+import android.content.Intent;
+import android.net.Uri;
+import com.google.zxing.BarcodeFormat;
+
+final class DecodeFormatManager {
+
+  private static final Pattern COMMA_PATTERN = Pattern.compile(",");
+
+  static final Vector<BarcodeFormat> PRODUCT_FORMATS;
+  static final Vector<BarcodeFormat> ONE_D_FORMATS;
+  static final Vector<BarcodeFormat> QR_CODE_FORMATS;
+  static final Vector<BarcodeFormat> DATA_MATRIX_FORMATS;
+  static {
+    PRODUCT_FORMATS = new Vector<BarcodeFormat>(5);
+    PRODUCT_FORMATS.add(BarcodeFormat.UPC_A);
+    PRODUCT_FORMATS.add(BarcodeFormat.UPC_E);
+    PRODUCT_FORMATS.add(BarcodeFormat.EAN_13);
+    PRODUCT_FORMATS.add(BarcodeFormat.EAN_8);
+    PRODUCT_FORMATS.add(BarcodeFormat.RSS14);
+    ONE_D_FORMATS = new Vector<BarcodeFormat>(PRODUCT_FORMATS.size() + 4);
+    ONE_D_FORMATS.addAll(PRODUCT_FORMATS);
+    ONE_D_FORMATS.add(BarcodeFormat.CODE_39);
+    ONE_D_FORMATS.add(BarcodeFormat.CODE_93);
+    ONE_D_FORMATS.add(BarcodeFormat.CODE_128);
+    ONE_D_FORMATS.add(BarcodeFormat.ITF);
+    QR_CODE_FORMATS = new Vector<BarcodeFormat>(1);
+    QR_CODE_FORMATS.add(BarcodeFormat.QR_CODE);
+    DATA_MATRIX_FORMATS = new Vector<BarcodeFormat>(1);
+    DATA_MATRIX_FORMATS.add(BarcodeFormat.DATA_MATRIX);
+  }
+
+  private DecodeFormatManager() {}
+
+  static Vector<BarcodeFormat> parseDecodeFormats(Intent intent) {
+    List<String> scanFormats = null;
+    String scanFormatsString = intent.getStringExtra(Intents.Scan.SCAN_FORMATS);
+    if (scanFormatsString != null) {
+      scanFormats = Arrays.asList(COMMA_PATTERN.split(scanFormatsString));
+    }
+    return parseDecodeFormats(scanFormats, intent.getStringExtra(Intents.Scan.MODE));
+  }
+
+  static Vector<BarcodeFormat> parseDecodeFormats(Uri inputUri) {
+    List<String> formats = inputUri.getQueryParameters(Intents.Scan.SCAN_FORMATS);
+    if (formats != null && formats.size() == 1 && formats.get(0) != null){
+      formats = Arrays.asList(COMMA_PATTERN.split(formats.get(0)));
+    }
+    return parseDecodeFormats(formats, inputUri.getQueryParameter(Intents.Scan.MODE));
+  }
+
+  private static Vector<BarcodeFormat> parseDecodeFormats(Iterable<String> scanFormats,
+                                                          String decodeMode) {
+    if (scanFormats != null) {
+      Vector<BarcodeFormat> formats = new Vector<BarcodeFormat>();
+      try {
+        for (String format : scanFormats) {
+          formats.add(BarcodeFormat.valueOf(format));
+        }
+        return formats;
+      } catch (IllegalArgumentException iae) {
+        // ignore it then
+      }
+    }
+    if (decodeMode != null) {
+      if (Intents.Scan.PRODUCT_MODE.equals(decodeMode)) {
+        return PRODUCT_FORMATS;
+      }
+      if (Intents.Scan.QR_CODE_MODE.equals(decodeMode)) {
+        return QR_CODE_FORMATS;
+      }
+      if (Intents.Scan.DATA_MATRIX_MODE.equals(decodeMode)) {
+        return DATA_MATRIX_FORMATS;
+      }
+      if (Intents.Scan.ONE_D_MODE.equals(decodeMode)) {
+        return ONE_D_FORMATS;
+      }
+    }
+    return null;
+  }
+
+}
Index: app/src/main/java/com/oasgames/android/oaspay/entity/AppVersionInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/entity/AppVersionInfo.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/entity/AppVersionInfo.java	(revision )
@@ -0,0 +1,44 @@
+package com.oasgames.android.oaspay.entity;
+
+import java.io.Serializable;
+
+/**
+ * 应用版本信息
+ * @author xdb
+ *
+ */
+public class AppVersionInfo implements Serializable{
+	private static final long serialVersionUID = 1598605839985469091L;
+
+	public String title;		//名称
+	public String version_intro;		//版本更新信息
+	public String version_url;		//更新地址
+	public String bundleversioncode;		//当前版本号
+	public String force_update;		//是否强更
+
+
+	public void setTitle(String title) {
+		this.title = title;
+	}
+
+	public void setVersion_intro(String version_intro) {
+		this.version_intro = version_intro;
+	}
+
+	public void setVersion_url(String version_url) {
+		this.version_url = version_url;
+	}
+
+	public void setBundleversioncode(String bundleversioncode) {
+		this.bundleversioncode = bundleversioncode;
+	}
+
+	public void setForce_update(String force_update) {
+		this.force_update = force_update;
+	}
+	public boolean isForceUpdate(){
+		if("Y".equalsIgnoreCase(force_update))
+			return true;
+		return false;
+	}
+}
Index: app/src/main/java/com/base/tools/slide/SlideBaseAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/slide/SlideBaseAdapter.java	(revision )
+++ app/src/main/java/com/base/tools/slide/SlideBaseAdapter.java	(revision )
@@ -0,0 +1,93 @@
+package com.base.tools.slide;
+
+import android.content.Context;
+import android.view.View;
+import android.widget.BaseAdapter;
+
+public abstract class SlideBaseAdapter extends BaseAdapter {
+	protected Context mContext;
+
+	private SlideListView.SlideMode mSlideMode;// from SlideListView
+	private SlideListView.SlideAction mSlideLeftActon;// from SlideListView
+	private SlideListView.SlideAction mSlideRightActon;// from SlideListView
+
+	public SlideBaseAdapter(Context context) {
+		mContext = context;
+		mSlideMode = SlideListView.SlideMode.getDefault();
+		mSlideLeftActon = SlideListView.SlideAction.getDefault();
+		mSlideRightActon = SlideListView.SlideAction.getDefault();
+	}
+
+	// package access method,you should not change the implement
+	void setSlideMode(SlideListView.SlideMode slideMode) {
+		mSlideMode = slideMode;
+	}
+
+	void setSlideLeftAction(SlideListView.SlideAction slideAction) {
+		mSlideLeftActon = slideAction;
+	}
+
+	void setSlideRightAction(SlideListView.SlideAction slideAction) {
+		mSlideRightActon = slideAction;
+	}
+
+	/**
+	 * At first,your whole item slide mode is base on the SlideListView's
+	 * SlideMode.<br/>
+	 * but your can change the slide mode at one or more position in this
+	 * adapter by override this method
+	 * 
+	 * @param position
+	 * @return
+	 */
+	public SlideListView.SlideMode getSlideModeInPosition(int position) {
+		return mSlideMode;
+	}
+
+	/**
+	 * Provide your front view layout id.Must be effective(cann't be 0)
+	 * 
+	 * @return
+	 */
+	public abstract int getFrontViewId(int position);
+
+	/**
+	 * Provide your left back view layout id.If you don't need left back
+	 * view,return 0
+	 * 
+	 * @return
+	 */
+	public abstract int getLeftBackViewId(int position);
+
+	/**
+	 * Provide your right back view layout id.If you don't need right back
+	 * view,return 0
+	 * 
+	 * @return
+	 */
+	public abstract int getRightBackViewId(int position);
+
+	/**
+	 * In your getView() method,when you want to create convertView,you must
+	 * call this method rather than create yourself<br/>
+	 * example: <br/>
+	 * <code>
+	 * ViewHolder holder=null;
+	 * if(convertView==null){
+	 *    convertView=createConvertView(position);
+	 *    holder=new ViewHolder();
+	 *    convertView.setTag(holder);
+	 * }else{
+	 *    holder=(ViewHolder)convertView.getTag();
+	 * }
+	 * </code>
+	 * 
+	 * @return
+	 */
+	protected View createConvertView(int position) {
+		SlideItemWrapLayout item = new SlideItemWrapLayout(mContext, mSlideLeftActon, mSlideRightActon, getFrontViewId(position),
+				getLeftBackViewId(position), getRightBackViewId(position));
+		return item;
+	}
+
+}
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision )
+++ app/build.gradle	(revision )
@@ -0,0 +1,33 @@
+apply plugin: 'com.android.application'
+
+android {
+    compileSdkVersion 21
+    buildToolsVersion '21.1.2'
+    defaultConfig {
+        applicationId "com.oasgames.android.oaspay"
+        minSdkVersion 11
+        targetSdkVersion 21
+        versionCode 3
+        versionName "1.0.0"
+    }
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+    productFlavors {
+    }
+}
+
+dependencies {
+    compile fileTree(include: ['*.jar'], dir: 'libs')
+    testCompile 'junit:junit:4.12'
+    compile 'com.android.support:support-v4:21.+'
+    compile 'com.android.support:appcompat-v7:21.+'
+    compile 'com.google.android.gms:play-services:8.1.0'
+    compile 'com.facebook.android:facebook-android-sdk:4.4.0'
+    compile files('libs/mopub-volley-1.1.0.jar')
+    compile files('libs/android-support-v7-recyclerview.jar')
+    compile files('libs/zxing.jar')
+}
Index: app/src/main/java/com/base/tools/google/Security.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/google/Security.java	(revision )
+++ app/src/main/java/com/base/tools/google/Security.java	(revision )
@@ -0,0 +1,119 @@
+/* Copyright (c) 2012 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.base.tools.google;
+
+import java.security.InvalidKeyException;
+import java.security.KeyFactory;
+import java.security.NoSuchAlgorithmException;
+import java.security.PublicKey;
+import java.security.Signature;
+import java.security.SignatureException;
+import java.security.spec.InvalidKeySpecException;
+import java.security.spec.X509EncodedKeySpec;
+
+import android.text.TextUtils;
+import android.util.Log;
+
+/**
+ * Security-related methods. For a secure implementation, all of this code
+ * should be implemented on a server that communicates with the
+ * application on the device. For the sake of simplicity and clarity of this
+ * example, this code is included here and is executed on the device. If you
+ * must verify the purchases on the phone, you should obfuscate this code to
+ * make it harder for an attacker to replace the code with stubs that treat all
+ * purchases as verified.
+ */
+public class Security {
+    private static final String TAG = "IABUtil/Security";
+
+    private static final String KEY_FACTORY_ALGORITHM = "RSA";
+    private static final String SIGNATURE_ALGORITHM = "SHA1withRSA";
+
+    /**
+     * Verifies that the data was signed with the given signature, and returns
+     * the verified purchase. The data is in JSON format and signed
+     * with a private key. The data also contains the {@link PurchaseState}
+     * and product ID of the purchase.
+     * @param base64PublicKey the base64-encoded public key to use for verifying.
+     * @param signedData the signed JSON string (signed, not encrypted)
+     * @param signature the signature for the data, signed with the private key
+     */
+    public static boolean verifyPurchase(String base64PublicKey, String signedData, String signature) {
+        if (TextUtils.isEmpty(signedData) || TextUtils.isEmpty(base64PublicKey) ||
+                TextUtils.isEmpty(signature)) {
+            Log.e(TAG, "Purchase verification failed: missing data.");
+            return false;
+        }
+
+        PublicKey key = Security.generatePublicKey(base64PublicKey);
+        return Security.verify(key, signedData, signature);
+    }
+
+    /**
+     * Generates a PublicKey instance from a string containing the
+     * Base64-encoded public key.
+     *
+     * @param encodedPublicKey Base64-encoded public key
+     * @throws IllegalArgumentException if encodedPublicKey is invalid
+     */
+    public static PublicKey generatePublicKey(String encodedPublicKey) {
+        try {
+            byte[] decodedKey = Base64.decode(encodedPublicKey);
+            KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
+            return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));
+        } catch (NoSuchAlgorithmException e) {
+            throw new RuntimeException(e);
+        } catch (InvalidKeySpecException e) {
+            Log.e(TAG, "Invalid key specification.");
+            throw new IllegalArgumentException(e);
+        } catch (Base64DecoderException e) {
+            Log.e(TAG, "Base64 decoding failed.");
+            throw new IllegalArgumentException(e);
+        }
+    }
+
+    /**
+     * Verifies that the signature from the server matches the computed
+     * signature on the data.  Returns true if the data is correctly signed.
+     *
+     * @param publicKey public key associated with the developer account
+     * @param signedData signed data from server
+     * @param signature server signature
+     * @return true if the data and signature match
+     */
+    public static boolean verify(PublicKey publicKey, String signedData, String signature) {
+        Signature sig;
+        try {
+            sig = Signature.getInstance(SIGNATURE_ALGORITHM);
+            sig.initVerify(publicKey);
+            sig.update(signedData.getBytes());
+            if (!sig.verify(Base64.decode(signature))) {
+                Log.e(TAG, "Signature verification failed.");
+                return false;
+            }
+            return true;
+        } catch (NoSuchAlgorithmException e) {
+            Log.e(TAG, "NoSuchAlgorithmException.");
+        } catch (InvalidKeyException e) {
+            Log.e(TAG, "Invalid key specification.");
+        } catch (SignatureException e) {
+            Log.e(TAG, "Signature exception.");
+        } catch (Base64DecoderException e) {
+            Log.e(TAG, "Base64 decoding failed.");
+        }
+        return false;
+    }
+}
Index: app/src/main/res/layout/page_order_list_slide.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/page_order_list_slide.xml	(revision )
+++ app/src/main/res/layout/page_order_list_slide.xml	(revision )
@@ -0,0 +1,101 @@
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+    android:background="@color/common_background_all_page">
+
+    <include layout="@layout/common_head"/>
+
+    <FrameLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:orientation="vertical">
+
+
+            <RadioGroup
+                android:id="@+id/order_list_radiogroup"
+                android:layout_width="match_parent"
+                android:layout_height="@dimen/main_foot_height"
+                android:background="@color/common_font_color_ffffff"
+                android:paddingTop="@dimen/common_content_margin_10"
+                android:paddingBottom="@dimen/common_content_margin_10"
+                android:paddingRight="@dimen/common_content_margin_20"
+                android:paddingLeft="@dimen/common_content_margin_20"
+                android:orientation="horizontal">
+                <RadioButton
+                    android:id="@+id/order_list_radiogroup_history"
+                    android:layout_width="match_parent"
+                    android:layout_height="match_parent"
+                    android:text="@string/order_list_title_sub1"
+                    android:layout_weight="1"
+                    android:gravity="center"
+                    android:button="@null"
+                    android:background="@drawable/order_list_head_left_selector"
+                    android:textSize="@dimen/common_font_size_14"
+                    android:textColor="@color/common_button_bg_unselected"/>
+                <RadioButton
+                    android:id="@+id/order_list_radiogroup_month"
+                    android:layout_width="match_parent"
+                    android:layout_height="match_parent"
+                    android:text="@string/order_list_title_sub2"
+                    android:layout_weight="1"
+                    android:gravity="center"
+                    android:button="@null"
+                    android:background="@drawable/order_list_head_right_selector"
+                    android:textSize="@dimen/common_font_size_14"
+                    android:textColor="@color/common_font_color_ffffff"
+                    android:checked="true"/>
+
+            </RadioGroup>
+
+            <TextView
+                android:layout_width="match_parent"
+                android:layout_height="2dip"
+                android:background="@color/common_list_item_divide_bg"/>
+            <FrameLayout
+                android:layout_width="match_parent"
+                android:layout_height="match_parent">
+
+                <com.base.tools.slide.SlideListView
+                    xmlns:slide="http://schemas.android.com/apk/res-auto"
+                    android:id="@+id/list_view"
+                    android:layout_width="match_parent"
+                    android:layout_height="match_parent"
+                    slide:slideAnimationTime="200"
+                    slide:slideLeftAction="scroll"
+                    slide:slideMode="right"
+                    slide:slideRightAction="scroll"
+                    android:background="@color/transparent_background"
+                    android:listSelector="@color/transparent_background"
+                    android:layout_marginTop="@dimen/common_content_margin_10"
+                    android:dividerHeight="0dip"
+                    android:divider="@color/transparent_background"
+                    android:visibility="invisible"/>
+                <com.base.tools.slide.SlideListView
+                    xmlns:slide="http://schemas.android.com/apk/res-auto"
+                    android:id="@+id/list_view_month"
+                    android:layout_width="match_parent"
+                    android:layout_height="match_parent"
+                    slide:slideAnimationTime="200"
+                    slide:slideLeftAction="scroll"
+                    slide:slideMode="right"
+                    slide:slideRightAction="scroll"
+                    android:background="@color/transparent_background"
+                    android:listSelector="@color/transparent_background"
+                    android:layout_marginTop="@dimen/common_content_margin_10"
+                    android:dividerHeight="0dip"
+                    android:divider="@color/transparent_background"/>
+
+                <include layout="@layout/page_order_list_slide_empty"/>
+
+            </FrameLayout>
+        </LinearLayout>
+
+        <include layout="@layout/common_network_error"/>
+    </FrameLayout>
+
+</LinearLayout>
\ No newline at end of file
Index: app/src/main/res/drawable/common_button_2_selector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/common_button_2_selector.xml	(revision )
+++ app/src/main/res/drawable/common_button_2_selector.xml	(revision )
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@drawable/common_button_2_select" android:state_pressed="true"/>
+    <item android:drawable="@drawable/common_button_2_select" android:state_focused="true"/>
+    <item android:drawable="@drawable/common_button_2_select" android:state_selected="true"/>
+    <item android:drawable="@drawable/common_button_2_unselect"/>
+
+</selector>
\ No newline at end of file
Index: app/src/main/res/anim/slide_in_right.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/anim/slide_in_right.xml	(revision )
+++ app/src/main/res/anim/slide_in_right.xml	(revision )
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+/* //device/apps/common/res/anim/slide_in_right.xml
+**
+** Copyright 2007, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License"); 
+** you may not use this file except in compliance with the License. 
+** You may obtain a copy of the License at 
+**
+**     http://www.apache.org/licenses/LICENSE-2.0 
+**
+** Unless required by applicable law or agreed to in writing, software 
+** distributed under the License is distributed on an "AS IS" BASIS, 
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+** See the License for the specific language governing permissions and 
+** limitations under the License.
+*/
+-->
+
+<set xmlns:android="http://schemas.android.com/apk/res/android">
+	<translate android:fromXDelta="100%p" android:toXDelta="0"
+            android:duration="@android:integer/config_shortAnimTime"
+        android:interpolator="@android:anim/decelerate_interpolator"  />
+	<!--<alpha android:fromAlpha="0.0" android:toAlpha="1.0"
+            android:duration="@android:integer/config_mediumAnimTime" />-->
+</set>
Index: app/src/main/java/com/base/tools/utils/FileUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/utils/FileUtils.java	(revision )
+++ app/src/main/java/com/base/tools/utils/FileUtils.java	(revision )
@@ -0,0 +1,68 @@
+package com.base.tools.utils;
+
+import android.os.Environment;
+import android.text.TextUtils;
+import android.text.format.DateFormat;
+
+import com.base.tools.entity.PhoneInfo;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.util.Date;
+
+
+/**
+ * 读写文件
+ * 
+ * @author xdb
+ * 
+ */
+public class FileUtils {
+	static long MAXLENGTH = 1024*1024;// 1M *1024
+	public static void writeLogToStore(String logs){
+		try {
+			File logFile = Environment.getExternalStoragePublicDirectory(
+		            Environment.DIRECTORY_DOWNLOADS);
+			logFile.mkdirs();
+			
+//			if(logFile.getUsableSpace() > MAXLENGTH){
+//				logFile.delete();
+//				logFile.mkdirs();
+//			}
+			
+			logs = logs.replace("<br>", "\r\n");
+			
+			logFile = new File(logFile.getAbsolutePath(), TextUtils.isEmpty(PhoneInfo.instance().gamecode)?"log.log":(PhoneInfo.instance().gamecode+".log"));
+
+			FileOutputStream fos = new FileOutputStream(logFile, true);
+			if(logFile.exists() && fos.getChannel().size() > MAXLENGTH){
+				logFile.delete();
+			}
+			fos.close();
+
+			fos = new FileOutputStream(logFile, true);
+			BasesUtils.logDebug("OASISSDK", "log 创建完成"+fos.getChannel().position()+"   "+fos.getChannel().size());
+			fos.write("\r\n".getBytes());
+			fos.write(DateFormat.format("yyyy-MM-dd hh:mm:ss", new Date().getTime()).toString().getBytes());
+			fos.write("\r\n".getBytes());
+			fos.write(PhoneInfo.instance().toString().getBytes());
+			fos.write("\r\n".getBytes());
+			fos.write(logs.getBytes());
+			fos.flush();
+			fos.close();
+		} catch (Exception e) {
+//			e.printStackTrace();
+			// 写文件失败
+		}
+	}
+	/**
+	 * 当应用退出时，删除该文件
+	 */
+	public static void deleteFileOnAppStartOrDestory(){
+		File logFile = Environment.getExternalStoragePublicDirectory(
+	            Environment.DIRECTORY_DOWNLOADS);
+		logFile = new File(logFile.getAbsolutePath(), "log.log");
+		if(logFile.exists())
+			logFile.delete();
+	}
+}
\ No newline at end of file
Index: app/src/main/java/com/oasgames/android/oaspay/activity/ActivityWebview.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/activity/ActivityWebview.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/activity/ActivityWebview.java	(revision )
@@ -0,0 +1,95 @@
+package com.oasgames.android.oaspay.activity;
+
+import android.graphics.Bitmap;
+import android.os.Bundle;
+import android.text.TextUtils;
+import android.webkit.WebSettings;
+import android.webkit.WebView;
+import android.webkit.WebViewClient;
+
+import com.base.tools.activity.BasesActivity;
+import com.oasgames.android.oaspay.R;
+
+/**
+ * 界面 公共界面  （使用协议、忘记密码、注册）
+ * Created by Administrator on 2015/10/16.
+ */
+public class ActivityWebview extends BasesActivity {
+    final int TYPE_DEFAULT = -1;
+    final int TYPE_USERULE = 0;
+    final int TYPE_FORGETPW = 1;
+    final int TYPE_USERREGIST = 2;
+    WebView webView;
+    int type = TYPE_DEFAULT;
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.page_common_webview);
+
+        webView = (WebView)findViewById(R.id.common_webview);
+        //启用支持javascript
+        WebSettings settings = webView.getSettings();
+        settings.setJavaScriptEnabled(true);
+        webView.setWebViewClient(new WebViewClient() {
+            @Override
+            public boolean shouldOverrideUrlLoading(WebView view, String url) {
+                webView.loadUrl(url);
+                return true;
+            }
+
+            @Override
+            public void onPageStarted(WebView view, String url, Bitmap favicon) {
+                super.onPageStarted(view, url, favicon);
+                setWaitScreen(true);
+            }
+
+            @Override
+            public void onPageFinished(WebView view, String url) {
+                super.onPageFinished(view, url);
+                setWaitScreen(false);
+            }
+        });
+//        webView.setOnKeyListener(new View.OnKeyListener() {
+//            @Override
+//            public boolean onKey(View v, int keyCode, KeyEvent event) {
+//                if(keyCode == KeyEvent.KEYCODE_BACK){
+//                    if(webView.canGoBack())
+//                        webView.goBack();
+//                    else
+//                        finish();
+//                    return true;
+//                }
+//                return false;
+//            }
+//        });
+
+        String title = "";
+        String url = "";
+        type = getIntent().getIntExtra("type", -1);
+        switch (type){
+            case TYPE_USERULE:
+                title = getString(R.string.login_other_rule);
+                url = "http://www.baidu.com/";
+                break;
+            case TYPE_FORGETPW:
+                title = getString(R.string.login_other_findpwd);
+                url = "http://www.sohu.com/";
+                break;
+            case TYPE_USERREGIST:
+                title = getString(R.string.login_register);
+                url = "http://www.sina.com.cn/";
+                break;
+            case 3:
+                break;
+            case TYPE_DEFAULT:
+            default:
+                break;
+        }
+
+        initHead(true, true, null, false, title, false, null);
+
+        if(!TextUtils.isEmpty(url))
+            webView.loadUrl(url);
+
+    }
+}
Index: app/src/main/java/com/base/tools/BasesApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/BasesApplication.java	(revision )
+++ app/src/main/java/com/base/tools/BasesApplication.java	(revision )
@@ -0,0 +1,123 @@
+package com.base.tools;
+
+import android.app.Application;
+import android.content.Context;
+import android.content.SharedPreferences;
+
+import com.base.tools.db.BasesDBHelper;
+import com.base.tools.entity.UserInfo;
+import com.base.tools.exception.CrashHandler;
+import com.base.tools.google.GoogleBillingUtils;
+import com.base.tools.utils.BasesUtils;
+import com.mopub.volley.RequestQueue;
+import com.mopub.volley.toolbox.Volley;
+import com.oasgames.android.oaspay.service.HttpService;
+import com.oasgames.android.oaspay.tools.Constant;
+
+import java.util.List;
+
+/**
+ * Created by Administrator on 2015/10/15.
+ */
+public class BasesApplication extends Application {
+    final String TAG = BasesApplication.class.getSimpleName();
+    /**
+     * 登录用户信息，游戏端调用个体UserInfo获取该对象
+     */
+    public static UserInfo userInfo;
+    /**
+     * 请求消息队列
+     */
+    public static RequestQueue volleyRequestQueue;
+
+    /**
+     * 数据库操作类
+     */
+    public static BasesDBHelper dbHelper;
+    public static SharedPreferences setting;
+    public static SharedPreferences.Editor settingEditor;
+
+    /**
+     * 应用包名，用于读取R文件
+     */
+    public static String packageName;
+    /**
+     * SDK request response 信息打印
+     */
+    public static boolean SDKMODE_SANDBOX_REQEUST_RESPONSE = false;
+    /**
+     * SDK 沙盒模式
+     */
+    public static boolean OASISSDK_ENVIRONMENT_SANDBOX = true;
+
+    /**
+     * 游戏模式
+     */
+    public static String MODE = "online";
+
+    /**
+     * 公共key
+     */
+    public static String PUBLICKEY;
+
+    /**
+     * 离线模式下，本地登录用户信息
+     * 该信息将在用户正式登录成功后，清空该对象
+     */
+    public static UserInfo localInfo;
+
+    public static boolean NetworkisAvailable = true;
+
+    public static String NetworkExtraInfo = "";
+
+    /**
+     * 退出应用的标志
+     */
+    public static boolean isExit = false;
+
+    /**
+     * 运行日志信息-缓存
+     */
+    public static List<String> logLists = null;
+    /**
+     * 游戏调用SDK的日志信息-将存入SD卡
+     */
+    public static List<String> logListsSD = null;
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        packageName = getPackageName();
+
+        volleyRequestQueue = Volley.newRequestQueue(this);
+
+        dbHelper = new BasesDBHelper(this, Constant.createTables, Constant.dropTables);
+        dbHelper.open();
+
+        setting = getSharedPreferences(packageName.replace(".", "_"), Context.MODE_PRIVATE);
+        settingEditor = setting.edit();
+
+        BasesUtils.getPhoneInfo(this);// 初始化设备相关信息
+        GoogleBillingUtils.getADIDThread(this);// 初始化Google 广告ＩＤ
+        new Thread(new Runnable() {
+            @Override
+            public void run() {
+                HttpService.instance().getConutryCodeByIP();
+            }
+        }).start();
+
+        CrashHandler handler = CrashHandler.getInstance();
+        handler.init(this);
+    }
+
+    @Override
+    public void onLowMemory() {
+        super.onLowMemory();
+    }
+
+    @Override
+    public void onTerminate() {
+        super.onTerminate();
+    }
+
+
+}
Index: app/src/main/res/drawable/common_button_2_text_selector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/common_button_2_text_selector.xml	(revision )
+++ app/src/main/res/drawable/common_button_2_text_selector.xml	(revision )
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:color="#57a034" android:state_pressed="true"/>
+    <item android:color="#57a034" android:state_focused="true"/>
+    <item android:color="#57a034" android:state_selected="true"/>
+    <item android:color="#74bb51"/>
+
+</selector>
\ No newline at end of file
Index: app/src/main/java/com/nineoldandroids/view/ViewPropertyAnimatorHC.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nineoldandroids/view/ViewPropertyAnimatorHC.java	(revision )
+++ app/src/main/java/com/nineoldandroids/view/ViewPropertyAnimatorHC.java	(revision )
@@ -0,0 +1,723 @@
+/*
+ * Copyright (C) 2011 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.nineoldandroids.view;
+
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Set;
+import android.view.View;
+import android.view.animation.Interpolator;
+import com.nineoldandroids.animation.Animator;
+import com.nineoldandroids.animation.ValueAnimator;
+
+class ViewPropertyAnimatorHC extends ViewPropertyAnimator {
+
+    /**
+     * A WeakReference holding the View whose properties are being animated by this class.
+     * This is set at construction time.
+     */
+    private final WeakReference<View> mView;
+
+    /**
+     * The duration of the underlying Animator object. By default, we don't set the duration
+     * on the Animator and just use its default duration. If the duration is ever set on this
+     * Animator, then we use the duration that it was set to.
+     */
+    private long mDuration;
+
+    /**
+     * A flag indicating whether the duration has been set on this object. If not, we don't set
+     * the duration on the underlying Animator, but instead just use its default duration.
+     */
+    private boolean mDurationSet = false;
+
+    /**
+     * The startDelay of the underlying Animator object. By default, we don't set the startDelay
+     * on the Animator and just use its default startDelay. If the startDelay is ever set on this
+     * Animator, then we use the startDelay that it was set to.
+     */
+    private long mStartDelay = 0;
+
+    /**
+     * A flag indicating whether the startDelay has been set on this object. If not, we don't set
+     * the startDelay on the underlying Animator, but instead just use its default startDelay.
+     */
+    private boolean mStartDelaySet = false;
+
+    /**
+     * The interpolator of the underlying Animator object. By default, we don't set the interpolator
+     * on the Animator and just use its default interpolator. If the interpolator is ever set on
+     * this Animator, then we use the interpolator that it was set to.
+     */
+    private /*Time*/Interpolator mInterpolator;
+
+    /**
+     * A flag indicating whether the interpolator has been set on this object. If not, we don't set
+     * the interpolator on the underlying Animator, but instead just use its default interpolator.
+     */
+    private boolean mInterpolatorSet = false;
+
+    /**
+     * Listener for the lifecycle events of the underlying
+     */
+    private Animator.AnimatorListener mListener = null;
+
+    /**
+     * This listener is the mechanism by which the underlying Animator causes changes to the
+     * properties currently being animated, as well as the cleanup after an animation is
+     * complete.
+     */
+    private AnimatorEventListener mAnimatorEventListener = new AnimatorEventListener();
+
+    /**
+     * This list holds the properties that have been asked to animate. We allow the caller to
+     * request several animations prior to actually starting the underlying animator. This
+     * enables us to run one single animator to handle several properties in parallel. Each
+     * property is tossed onto the pending list until the animation actually starts (which is
+     * done by posting it onto mView), at which time the pending list is cleared and the properties
+     * on that list are added to the list of properties associated with that animator.
+     */
+    ArrayList<NameValuesHolder> mPendingAnimations = new ArrayList<NameValuesHolder>();
+
+    /**
+     * Constants used to associate a property being requested and the mechanism used to set
+     * the property (this class calls directly into View to set the properties in question).
+     */
+    private static final int NONE           = 0x0000;
+    private static final int TRANSLATION_X  = 0x0001;
+    private static final int TRANSLATION_Y  = 0x0002;
+    private static final int SCALE_X        = 0x0004;
+    private static final int SCALE_Y        = 0x0008;
+    private static final int ROTATION       = 0x0010;
+    private static final int ROTATION_X     = 0x0020;
+    private static final int ROTATION_Y     = 0x0040;
+    private static final int X              = 0x0080;
+    private static final int Y              = 0x0100;
+    private static final int ALPHA          = 0x0200;
+
+    private static final int TRANSFORM_MASK = TRANSLATION_X | TRANSLATION_Y | SCALE_X | SCALE_Y |
+            ROTATION | ROTATION_X | ROTATION_Y | X | Y;
+
+    /**
+     * The mechanism by which the user can request several properties that are then animated
+     * together works by posting this Runnable to start the underlying Animator. Every time
+     * a property animation is requested, we cancel any previous postings of the Runnable
+     * and re-post it. This means that we will only ever run the Runnable (and thus start the
+     * underlying animator) after the caller is done setting the properties that should be
+     * animated together.
+     */
+    private Runnable mAnimationStarter = new Runnable() {
+        @Override
+        public void run() {
+            startAnimation();
+        }
+    };
+
+    /**
+     * This class holds information about the overall animation being run on the set of
+     * properties. The mask describes which properties are being animated and the
+     * values holder is the list of all property/value objects.
+     */
+    private static class PropertyBundle {
+        int mPropertyMask;
+        ArrayList<NameValuesHolder> mNameValuesHolder;
+
+        PropertyBundle(int propertyMask, ArrayList<NameValuesHolder> nameValuesHolder) {
+            mPropertyMask = propertyMask;
+            mNameValuesHolder = nameValuesHolder;
+        }
+
+        /**
+         * Removes the given property from being animated as a part of this
+         * PropertyBundle. If the property was a part of this bundle, it returns
+         * true to indicate that it was, in fact, canceled. This is an indication
+         * to the caller that a cancellation actually occurred.
+         *
+         * @param propertyConstant The property whose cancellation is requested.
+         * @return true if the given property is a part of this bundle and if it
+         * has therefore been canceled.
+         */
+        boolean cancel(int propertyConstant) {
+            if ((mPropertyMask & propertyConstant) != 0 && mNameValuesHolder != null) {
+                int count = mNameValuesHolder.size();
+                for (int i = 0; i < count; ++i) {
+                    NameValuesHolder nameValuesHolder = mNameValuesHolder.get(i);
+                    if (nameValuesHolder.mNameConstant == propertyConstant) {
+                        mNameValuesHolder.remove(i);
+                        mPropertyMask &= ~propertyConstant;
+                        return true;
+                    }
+                }
+            }
+            return false;
+        }
+    }
+
+    /**
+     * This list tracks the list of properties being animated by any particular animator.
+     * In most situations, there would only ever be one animator running at a time. But it is
+     * possible to request some properties to animate together, then while those properties
+     * are animating, to request some other properties to animate together. The way that
+     * works is by having this map associate the group of properties being animated with the
+     * animator handling the animation. On every update event for an Animator, we ask the
+     * map for the associated properties and set them accordingly.
+     */
+    private HashMap<Animator, PropertyBundle> mAnimatorMap =
+            new HashMap<Animator, PropertyBundle>();
+
+    /**
+     * This is the information we need to set each property during the animation.
+     * mNameConstant is used to set the appropriate field in View, and the from/delta
+     * values are used to calculate the animated value for a given animation fraction
+     * during the animation.
+     */
+    private static class NameValuesHolder {
+        int mNameConstant;
+        float mFromValue;
+        float mDeltaValue;
+        NameValuesHolder(int nameConstant, float fromValue, float deltaValue) {
+            mNameConstant = nameConstant;
+            mFromValue = fromValue;
+            mDeltaValue = deltaValue;
+        }
+    }
+
+    /**
+     * Constructor, called by View. This is private by design, as the user should only
+     * get a ViewPropertyAnimator by calling View.animate().
+     *
+     * @param view The View associated with this ViewPropertyAnimator
+     */
+    ViewPropertyAnimatorHC(View view) {
+        mView = new WeakReference<View>(view);
+    }
+
+    /**
+     * Sets the duration for the underlying animator that animates the requested properties.
+     * By default, the animator uses the default value for ValueAnimator. Calling this method
+     * will cause the declared value to be used instead.
+     * @param duration The length of ensuing property animations, in milliseconds. The value
+     * cannot be negative.
+     * @return This object, allowing calls to methods in this class to be chained.
+     */
+    public ViewPropertyAnimator setDuration(long duration) {
+        if (duration < 0) {
+            throw new IllegalArgumentException("Animators cannot have negative duration: " +
+                    duration);
+        }
+        mDurationSet = true;
+        mDuration = duration;
+        return this;
+    }
+
+    /**
+     * Returns the current duration of property animations. If the duration was set on this
+     * object, that value is returned. Otherwise, the default value of the underlying Animator
+     * is returned.
+     *
+     * @see #setDuration(long)
+     * @return The duration of animations, in milliseconds.
+     */
+    public long getDuration() {
+        if (mDurationSet) {
+            return mDuration;
+        } else {
+            // Just return the default from ValueAnimator, since that's what we'd get if
+            // the value has not been set otherwise
+            return new ValueAnimator().getDuration();
+        }
+    }
+
+    @Override
+    public long getStartDelay() {
+        if (mStartDelaySet) {
+            return mStartDelay;
+        } else {
+            // Just return the default from ValueAnimator (0), since that's what we'd get if
+            // the value has not been set otherwise
+            return 0;
+        }
+    }
+
+    @Override
+    public ViewPropertyAnimator setStartDelay(long startDelay) {
+        if (startDelay < 0) {
+            throw new IllegalArgumentException("Animators cannot have negative duration: " +
+                    startDelay);
+        }
+        mStartDelaySet = true;
+        mStartDelay = startDelay;
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator setInterpolator(/*Time*/Interpolator interpolator) {
+        mInterpolatorSet = true;
+        mInterpolator = interpolator;
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator setListener(Animator.AnimatorListener listener) {
+        mListener = listener;
+        return this;
+    }
+
+    @Override
+    public void start() {
+        startAnimation();
+    }
+
+    @Override
+    public void cancel() {
+        if (mAnimatorMap.size() > 0) {
+            HashMap<Animator, PropertyBundle> mAnimatorMapCopy =
+                    (HashMap<Animator, PropertyBundle>)mAnimatorMap.clone();
+            Set<Animator> animatorSet = mAnimatorMapCopy.keySet();
+            for (Animator runningAnim : animatorSet) {
+                runningAnim.cancel();
+            }
+        }
+        mPendingAnimations.clear();
+        View v = mView.get();
+        if (v != null) {
+            v.removeCallbacks(mAnimationStarter);
+        }
+    }
+
+    @Override
+    public ViewPropertyAnimator x(float value) {
+        animateProperty(X, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator xBy(float value) {
+        animatePropertyBy(X, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator y(float value) {
+        animateProperty(Y, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator yBy(float value) {
+        animatePropertyBy(Y, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator rotation(float value) {
+        animateProperty(ROTATION, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator rotationBy(float value) {
+        animatePropertyBy(ROTATION, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator rotationX(float value) {
+        animateProperty(ROTATION_X, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator rotationXBy(float value) {
+        animatePropertyBy(ROTATION_X, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator rotationY(float value) {
+        animateProperty(ROTATION_Y, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator rotationYBy(float value) {
+        animatePropertyBy(ROTATION_Y, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator translationX(float value) {
+        animateProperty(TRANSLATION_X, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator translationXBy(float value) {
+        animatePropertyBy(TRANSLATION_X, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator translationY(float value) {
+        animateProperty(TRANSLATION_Y, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator translationYBy(float value) {
+        animatePropertyBy(TRANSLATION_Y, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator scaleX(float value) {
+        animateProperty(SCALE_X, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator scaleXBy(float value) {
+        animatePropertyBy(SCALE_X, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator scaleY(float value) {
+        animateProperty(SCALE_Y, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator scaleYBy(float value) {
+        animatePropertyBy(SCALE_Y, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator alpha(float value) {
+        animateProperty(ALPHA, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator alphaBy(float value) {
+        animatePropertyBy(ALPHA, value);
+        return this;
+    }
+
+    /**
+     * Starts the underlying Animator for a set of properties. We use a single animator that
+     * simply runs from 0 to 1, and then use that fractional value to set each property
+     * value accordingly.
+     */
+    private void startAnimation() {
+        ValueAnimator animator = ValueAnimator.ofFloat(1.0f);
+        ArrayList<NameValuesHolder> nameValueList =
+                (ArrayList<NameValuesHolder>) mPendingAnimations.clone();
+        mPendingAnimations.clear();
+        int propertyMask = 0;
+        int propertyCount = nameValueList.size();
+        for (int i = 0; i < propertyCount; ++i) {
+            NameValuesHolder nameValuesHolder = nameValueList.get(i);
+            propertyMask |= nameValuesHolder.mNameConstant;
+        }
+        mAnimatorMap.put(animator, new PropertyBundle(propertyMask, nameValueList));
+        animator.addUpdateListener(mAnimatorEventListener);
+        animator.addListener(mAnimatorEventListener);
+        if (mStartDelaySet) {
+            animator.setStartDelay(mStartDelay);
+        }
+        if (mDurationSet) {
+            animator.setDuration(mDuration);
+        }
+        if (mInterpolatorSet) {
+            animator.setInterpolator(mInterpolator);
+        }
+        animator.start();
+    }
+
+    /**
+     * Utility function, called by the various x(), y(), etc. methods. This stores the
+     * constant name for the property along with the from/delta values that will be used to
+     * calculate and set the property during the animation. This structure is added to the
+     * pending animations, awaiting the eventual start() of the underlying animator. A
+     * Runnable is posted to start the animation, and any pending such Runnable is canceled
+     * (which enables us to end up starting just one animator for all of the properties
+     * specified at one time).
+     *
+     * @param constantName The specifier for the property being animated
+     * @param toValue The value to which the property will animate
+     */
+    private void animateProperty(int constantName, float toValue) {
+        float fromValue = getValue(constantName);
+        float deltaValue = toValue - fromValue;
+        animatePropertyBy(constantName, fromValue, deltaValue);
+    }
+
+    /**
+     * Utility function, called by the various xBy(), yBy(), etc. methods. This method is
+     * just like animateProperty(), except the value is an offset from the property's
+     * current value, instead of an absolute "to" value.
+     *
+     * @param constantName The specifier for the property being animated
+     * @param byValue The amount by which the property will change
+     */
+    private void animatePropertyBy(int constantName, float byValue) {
+        float fromValue = getValue(constantName);
+        animatePropertyBy(constantName, fromValue, byValue);
+    }
+
+    /**
+     * Utility function, called by animateProperty() and animatePropertyBy(), which handles the
+     * details of adding a pending animation and posting the request to start the animation.
+     *
+     * @param constantName The specifier for the property being animated
+     * @param startValue The starting value of the property
+     * @param byValue The amount by which the property will change
+     */
+    private void animatePropertyBy(int constantName, float startValue, float byValue) {
+        // First, cancel any existing animations on this property
+        if (mAnimatorMap.size() > 0) {
+            Animator animatorToCancel = null;
+            Set<Animator> animatorSet = mAnimatorMap.keySet();
+            for (Animator runningAnim : animatorSet) {
+                PropertyBundle bundle = mAnimatorMap.get(runningAnim);
+                if (bundle.cancel(constantName)) {
+                    // property was canceled - cancel the animation if it's now empty
+                    // Note that it's safe to break out here because every new animation
+                    // on a property will cancel a previous animation on that property, so
+                    // there can only ever be one such animation running.
+                    if (bundle.mPropertyMask == NONE) {
+                        // the animation is no longer changing anything - cancel it
+                        animatorToCancel = runningAnim;
+                        break;
+                    }
+                }
+            }
+            if (animatorToCancel != null) {
+                animatorToCancel.cancel();
+            }
+        }
+
+        NameValuesHolder nameValuePair = new NameValuesHolder(constantName, startValue, byValue);
+        mPendingAnimations.add(nameValuePair);
+        View v = mView.get();
+        if (v != null) {
+            v.removeCallbacks(mAnimationStarter);
+            v.post(mAnimationStarter);
+        }
+    }
+
+    /**
+     * This method handles setting the property values directly in the View object's fields.
+     * propertyConstant tells it which property should be set, value is the value to set
+     * the property to.
+     *
+     * @param propertyConstant The property to be set
+     * @param value The value to set the property to
+     */
+    private void setValue(int propertyConstant, float value) {
+        //final View.TransformationInfo info = mView.mTransformationInfo;
+        View v = mView.get();
+        if (v != null) {
+            switch (propertyConstant) {
+                case TRANSLATION_X:
+                    //info.mTranslationX = value;
+                    v.setTranslationX(value);
+                    break;
+                case TRANSLATION_Y:
+                    //info.mTranslationY = value;
+                    v.setTranslationY(value);
+                    break;
+                case ROTATION:
+                    //info.mRotation = value;
+                    v.setRotation(value);
+                    break;
+                case ROTATION_X:
+                    //info.mRotationX = value;
+                    v.setRotationX(value);
+                    break;
+                case ROTATION_Y:
+                    //info.mRotationY = value;
+                    v.setRotationY(value);
+                    break;
+                case SCALE_X:
+                    //info.mScaleX = value;
+                    v.setScaleX(value);
+                    break;
+                case SCALE_Y:
+                    //info.mScaleY = value;
+                    v.setScaleY(value);
+                    break;
+                case X:
+                    //info.mTranslationX = value - v.mLeft;
+                    v.setX(value);
+                    break;
+                case Y:
+                    //info.mTranslationY = value - v.mTop;
+                    v.setY(value);
+                    break;
+                case ALPHA:
+                    //info.mAlpha = value;
+                    v.setAlpha(value);
+                    break;
+            }
+        }
+    }
+
+    /**
+     * This method gets the value of the named property from the View object.
+     *
+     * @param propertyConstant The property whose value should be returned
+     * @return float The value of the named property
+     */
+    private float getValue(int propertyConstant) {
+        //final View.TransformationInfo info = mView.mTransformationInfo;
+        View v = mView.get();
+        if (v != null) {
+            switch (propertyConstant) {
+                case TRANSLATION_X:
+                    //return info.mTranslationX;
+                    return v.getTranslationX();
+                case TRANSLATION_Y:
+                    //return info.mTranslationY;
+                    return v.getTranslationY();
+                case ROTATION:
+                    //return info.mRotation;
+                    return v.getRotation();
+                case ROTATION_X:
+                    //return info.mRotationX;
+                    return v.getRotationX();
+                case ROTATION_Y:
+                    //return info.mRotationY;
+                    return v.getRotationY();
+                case SCALE_X:
+                    //return info.mScaleX;
+                    return v.getScaleX();
+                case SCALE_Y:
+                    //return info.mScaleY;
+                    return v.getScaleY();
+                case X:
+                    //return v.mLeft + info.mTranslationX;
+                    return v.getX();
+                case Y:
+                    //return v.mTop + info.mTranslationY;
+                    return v.getY();
+                case ALPHA:
+                    //return info.mAlpha;
+                    return v.getAlpha();
+            }
+        }
+        return 0;
+    }
+
+    /**
+     * Utility class that handles the various Animator events. The only ones we care
+     * about are the end event (which we use to clean up the animator map when an animator
+     * finishes) and the update event (which we use to calculate the current value of each
+     * property and then set it on the view object).
+     */
+    private class AnimatorEventListener
+            implements Animator.AnimatorListener, ValueAnimator.AnimatorUpdateListener {
+        @Override
+        public void onAnimationStart(Animator animation) {
+            if (mListener != null) {
+                mListener.onAnimationStart(animation);
+            }
+        }
+
+        @Override
+        public void onAnimationCancel(Animator animation) {
+            if (mListener != null) {
+                mListener.onAnimationCancel(animation);
+            }
+        }
+
+        @Override
+        public void onAnimationRepeat(Animator animation) {
+            if (mListener != null) {
+                mListener.onAnimationRepeat(animation);
+            }
+        }
+
+        @Override
+        public void onAnimationEnd(Animator animation) {
+            if (mListener != null) {
+                mListener.onAnimationEnd(animation);
+            }
+            mAnimatorMap.remove(animation);
+            // If the map is empty, it means all animation are done or canceled, so the listener
+            // isn't needed anymore. Not nulling it would cause it to leak any objects used in
+            // its implementation
+            if (mAnimatorMap.isEmpty()) {
+                mListener = null;
+            }
+        }
+
+        /**
+         * Calculate the current value for each property and set it on the view. Invalidate
+         * the view object appropriately, depending on which properties are being animated.
+         *
+         * @param animation The animator associated with the properties that need to be
+         * set. This animator holds the animation fraction which we will use to calculate
+         * the current value of each property.
+         */
+        @Override
+        public void onAnimationUpdate(ValueAnimator animation) {
+            // alpha requires slightly different treatment than the other (transform) properties.
+            // The logic in setAlpha() is not simply setting mAlpha, plus the invalidation
+            // logic is dependent on how the view handles an internal call to onSetAlpha().
+            // We track what kinds of properties are set, and how alpha is handled when it is
+            // set, and perform the invalidation steps appropriately.
+            //boolean alphaHandled = false;
+            //mView.invalidateParentCaches();
+            float fraction = animation.getAnimatedFraction();
+            PropertyBundle propertyBundle = mAnimatorMap.get(animation);
+            int propertyMask = propertyBundle.mPropertyMask;
+            if ((propertyMask & TRANSFORM_MASK) != 0) {
+                View v = mView.get();
+                if (v != null) {
+                    v.invalidate(/*false*/);
+                }
+            }
+            ArrayList<NameValuesHolder> valueList = propertyBundle.mNameValuesHolder;
+            if (valueList != null) {
+                int count = valueList.size();
+                for (int i = 0; i < count; ++i) {
+                    NameValuesHolder values = valueList.get(i);
+                    float value = values.mFromValue + fraction * values.mDeltaValue;
+                    //if (values.mNameConstant == ALPHA) {
+                    //    alphaHandled = mView.setAlphaNoInvalidation(value);
+                    //} else {
+                        setValue(values.mNameConstant, value);
+                    //}
+                }
+            }
+            /*if ((propertyMask & TRANSFORM_MASK) != 0) {
+                mView.mTransformationInfo.mMatrixDirty = true;
+                mView.mPrivateFlags |= View.DRAWN; // force another invalidation
+            }*/
+            // invalidate(false) in all cases except if alphaHandled gets set to true
+            // via the call to setAlphaNoInvalidation(), above
+            View v = mView.get();
+            if (v != null) {
+                v.invalidate(/*alphaHandled*/);
+            }
+        }
+    }
+}
Index: app/src/main/res/values/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/styles.xml	(revision )
+++ app/src/main/res/values/styles.xml	(revision )
@@ -0,0 +1,27 @@
+<resources>
+
+    <!-- Base application theme. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
+        <!-- Customize your theme here. -->
+        <item name="android:windowAnimationStyle">@style/AnimationActivity</item>
+        <item name="android:windowNoTitle">true</item>
+    </style>
+    <style name="AnimationActivity" parent="@android:style/Animation.Activity">
+        <item name="android:activityOpenEnterAnimation">@anim/slide_in_right</item>
+        <item name="android:activityOpenExitAnimation">@anim/slide_out_left</item>
+        <item name="android:activityCloseEnterAnimation">@anim/slide_in_left</item>
+        <item name="android:activityCloseExitAnimation">@anim/slide_out_right</item>
+    </style>
+    <style name="MMTabButton">
+        <item name="android:textSize">@dimen/common_font_size_14</item>
+        <item name="android:gravity">center</item>
+        <!-- <item name="android:background">@drawable/bg_checkbox_menus</item> -->
+        <item name="android:layout_width">fill_parent</item>
+        <item name="android:layout_height">wrap_content</item>
+        <item name="android:button">@null</item>
+        <item name="android:textColor">@color/common_font_color_000000</item>
+        <item name="android:layout_weight">1.0</item>
+        <item name="android:paddingBottom">2.0dip</item>
+        <item name="android:paddingTop">2.0dip</item>
+    </style>
+</resources>
Index: app/src/main/java/com/oasgames/android/oaspay/adapter/AdapterOrderListSlide.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/adapter/AdapterOrderListSlide.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/adapter/AdapterOrderListSlide.java	(revision )
@@ -0,0 +1,185 @@
+package com.oasgames.android.oaspay.adapter;
+
+import android.content.Context;
+import android.text.TextUtils;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import com.base.tools.slide.SlideBaseAdapter;
+import com.base.tools.slide.SlideListView.SlideMode;
+import com.base.tools.utils.BasesUtils;
+import com.oasgames.android.oaspay.R;
+import com.oasgames.android.oaspay.activity.ActivityOrderListSlide;
+import com.oasgames.android.oaspay.entity.OrderInfo;
+import com.oasgames.android.oaspay.entity.OrderList;
+
+public class AdapterOrderListSlide extends SlideBaseAdapter {
+	public OrderList mData;
+	private ActivityOrderListSlide activity;
+
+	public AdapterOrderListSlide(Context context, OrderList data) {
+		super(context);
+		activity = (ActivityOrderListSlide)context;
+		mData = data;
+	}
+
+	
+	@Override
+	public SlideMode getSlideModeInPosition(int position) {
+//		if (position == 1) {
+//			return SlideMode.LEFT;
+//		}
+//		if (position == 2) {
+//			return SlideMode.NONE;
+//		}
+		return super.getSlideModeInPosition(position);
+	}
+
+	@Override
+	public int getFrontViewId(int position) {
+		return R.layout.page_order_list_slide_item;
+	}
+
+	@Override
+	public int getLeftBackViewId(int position) {
+//		if (position % 2 == 0) {
+			return R.layout.row_left_back_view;
+//		}
+//		return R.layout.row_right_back_view;
+	}
+
+	@Override
+	public int getRightBackViewId(int position) {
+		return R.layout.page_order_list_slide_item_back_right;
+	}
+
+	@Override
+	public int getItemViewType(int position) {
+//		if (position % 2 == 0) {
+//			return 0;
+//		}
+		return 1;
+	}
+
+	@Override
+	public int getViewTypeCount() {
+		return 2;
+	}
+
+	@Override
+	public int getCount() {
+		return mData.list.size();
+	}
+
+	@Override
+	public Object getItem(int position) {
+		return mData.list.get(position);
+	}
+
+	@Override
+	public long getItemId(int position) {
+		return position;
+	}
+
+	@Override
+	public View getView(final int position, View convertView, ViewGroup parent) {
+		if(position == getCount()-1 && Integer.valueOf(mData.total_page) > Integer.valueOf(mData.cur_page)){
+			activity.loadMore();
+		}
+		ViewHolder holder = null;
+		if (convertView == null) {
+			convertView = createConvertView(position);
+			holder = new ViewHolder();
+			holder.orderid = (TextView) convertView.findViewById(R.id.order_list_item_orderid);
+			holder.orderstatus = (TextView) convertView.findViewById(R.id.order_list_item_orderstate);
+			holder.title = (TextView) convertView.findViewById(R.id.order_list_item_title);
+			holder.money = (TextView) convertView.findViewById(R.id.order_list_item_money);
+			holder.diamond = (TextView) convertView.findViewById(R.id.order_list_item_diamondcount);
+			holder.diamondBg = (TextView) convertView.findViewById(R.id.order_list_item_diamondbg);
+			holder.image = (ImageView) convertView.findViewById(R.id.order_list_item_image);
+			holder.topay = (TextView) convertView.findViewById(R.id.order_list_item_topay);
+			holder.cancel = (TextView) convertView.findViewById(R.id.order_list_item_cancel);
+			holder.delete = (TextView) convertView.findViewById(R.id.order_list_item_delete);
+			convertView.setTag(holder);
+		} else {
+			holder = (ViewHolder) convertView.getTag();
+		}
+
+		final OrderInfo info = (OrderInfo)getItem(position);
+		holder.orderid.setText(activity.getString(R.string.order_details_id) + "  "+info.order_id);
+		if("1".equals(info.pay_status) || "3".equals(info.pay_status)) {//等待支付
+			holder.orderstatus.setText(activity.getString(R.string.order_details_label_8));
+			holder.orderstatus.setTextColor(activity.getResources().getColor(R.color.common_font_color_fb8f03));
+		}else if("2".equals(info.pay_status)) {//已完成
+			holder.orderstatus.setText(activity.getString(R.string.order_details_label_7));
+			holder.orderstatus.setTextColor(activity.getResources().getColor(R.color.common_font_color_000000));
+		}
+
+		holder.title.setText(info.product_name);
+		holder.money.setText(info.currency_show + info.amount_show);
+		holder.diamond.setText(info.game_coins_show);
+		if("payapp".equals(info.order_type)) {
+			String disconunt = info.price_discount;
+			if(disconunt != null && !"null".equals(disconunt) && !TextUtils.isEmpty(disconunt))
+				holder.title.setText(info.price_discount + " + " + info.game_coins_show);
+			else
+				holder.title.setText(info.game_coins_show);
+			holder.diamond.setVisibility(View.INVISIBLE);
+			holder.diamondBg.setVisibility(View.INVISIBLE);
+
+			holder.image.setImageResource(R.mipmap.common_diamond_bg);
+		}else {
+			BasesUtils.loadImg(activity, holder.image, info.product_img_url);
+			holder.diamond.setVisibility(View.VISIBLE);
+			holder.diamondBg.setVisibility(View.VISIBLE);
+		}
+
+		if("1".equals(info.pay_status))
+			holder.topay.setVisibility(View.VISIBLE);
+		else
+			holder.topay.setVisibility(View.GONE);
+		if (holder.topay != null) {
+			holder.topay.setOnClickListener(new View.OnClickListener() {
+				@Override
+				public void onClick(View v) {
+					activity.topay(info, position, 0);
+				}
+			});
+		}
+
+		if (holder.cancel != null) {
+			holder.cancel.setOnClickListener(new View.OnClickListener() {
+				@Override
+				public void onClick(View v) {
+					activity.showCancelDialog(position);
+				}
+			});
+		}
+		if (holder.delete != null) {
+			holder.delete.setOnClickListener(new View.OnClickListener() {
+				@Override
+				public void onClick(View v) {
+					activity.showDeleteDialog(position);
+				}
+			});
+		}
+
+		return convertView;
+	}
+
+	class ViewHolder {
+		TextView orderid;
+		TextView orderstatus;
+		TextView title;
+		TextView money;
+		TextView diamond;
+		TextView diamondBg;
+		ImageView image;
+		TextView topay;
+		TextView cancel;
+		TextView delete;
+	}
+
+}
\ No newline at end of file
Index: app/src/main/java/com/nineoldandroids/animation/ObjectAnimator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nineoldandroids/animation/ObjectAnimator.java	(revision )
+++ app/src/main/java/com/nineoldandroids/animation/ObjectAnimator.java	(revision )
@@ -0,0 +1,515 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.nineoldandroids.animation;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Map;
+
+import android.util.Log;
+import android.view.View;
+
+import com.nineoldandroids.util.Property;
+import com.nineoldandroids.view.animation.AnimatorProxy;
+
+/**
+ * This subclass of {@link ValueAnimator} provides support for animating properties on target objects.
+ * The constructors of this class take parameters to define the target object that will be animated
+ * as well as the name of the property that will be animated. Appropriate set/get functions
+ * are then determined internally and the animation will call these functions as necessary to
+ * animate the property.
+ *
+ * @see #setPropertyName(String)
+ *
+ */
+public final class ObjectAnimator extends ValueAnimator {
+    private static final boolean DBG = false;
+    private static final Map<String, Property> PROXY_PROPERTIES = new HashMap<String, Property>();
+
+    static {
+        PROXY_PROPERTIES.put("alpha", PreHoneycombCompat.ALPHA);
+        PROXY_PROPERTIES.put("pivotX", PreHoneycombCompat.PIVOT_X);
+        PROXY_PROPERTIES.put("pivotY", PreHoneycombCompat.PIVOT_Y);
+        PROXY_PROPERTIES.put("translationX", PreHoneycombCompat.TRANSLATION_X);
+        PROXY_PROPERTIES.put("translationY", PreHoneycombCompat.TRANSLATION_Y);
+        PROXY_PROPERTIES.put("rotation", PreHoneycombCompat.ROTATION);
+        PROXY_PROPERTIES.put("rotationX", PreHoneycombCompat.ROTATION_X);
+        PROXY_PROPERTIES.put("rotationY", PreHoneycombCompat.ROTATION_Y);
+        PROXY_PROPERTIES.put("scaleX", PreHoneycombCompat.SCALE_X);
+        PROXY_PROPERTIES.put("scaleY", PreHoneycombCompat.SCALE_Y);
+        PROXY_PROPERTIES.put("scrollX", PreHoneycombCompat.SCROLL_X);
+        PROXY_PROPERTIES.put("scrollY", PreHoneycombCompat.SCROLL_Y);
+        PROXY_PROPERTIES.put("x", PreHoneycombCompat.X);
+        PROXY_PROPERTIES.put("y", PreHoneycombCompat.Y);
+    }
+
+    // The target object on which the property exists, set in the constructor
+    private Object mTarget;
+
+    private String mPropertyName;
+
+    private Property mProperty;
+
+    /**
+     * Sets the name of the property that will be animated. This name is used to derive
+     * a setter function that will be called to set animated values.
+     * For example, a property name of <code>foo</code> will result
+     * in a call to the function <code>setFoo()</code> on the target object. If either
+     * <code>valueFrom</code> or <code>valueTo</code> is null, then a getter function will
+     * also be derived and called.
+     *
+     * <p>For best performance of the mechanism that calls the setter function determined by the
+     * name of the property being animated, use <code>float</code> or <code>int</code> typed values,
+     * and make the setter function for those properties have a <code>void</code> return value. This
+     * will cause the code to take an optimized path for these constrained circumstances. Other
+     * property types and return types will work, but will have more overhead in processing
+     * the requests due to normal reflection mechanisms.</p>
+     *
+     * <p>Note that the setter function derived from this property name
+     * must take the same parameter type as the
+     * <code>valueFrom</code> and <code>valueTo</code> properties, otherwise the call to
+     * the setter function will fail.</p>
+     *
+     * <p>If this ObjectAnimator has been set up to animate several properties together,
+     * using more than one PropertyValuesHolder objects, then setting the propertyName simply
+     * sets the propertyName in the first of those PropertyValuesHolder objects.</p>
+     *
+     * @param propertyName The name of the property being animated. Should not be null.
+     */
+    public void setPropertyName(String propertyName) {
+        // mValues could be null if this is being constructed piecemeal. Just record the
+        // propertyName to be used later when setValues() is called if so.
+        if (mValues != null) {
+            PropertyValuesHolder valuesHolder = mValues[0];
+            String oldName = valuesHolder.getPropertyName();
+            valuesHolder.setPropertyName(propertyName);
+            mValuesMap.remove(oldName);
+            mValuesMap.put(propertyName, valuesHolder);
+        }
+        mPropertyName = propertyName;
+        // New property/values/target should cause re-initialization prior to starting
+        mInitialized = false;
+    }
+
+    /**
+     * Sets the property that will be animated. Property objects will take precedence over
+     * properties specified by the {@link #setPropertyName(String)} method. Animations should
+     * be set up to use one or the other, not both.
+     *
+     * @param property The property being animated. Should not be null.
+     */
+    public void setProperty(Property property) {
+        // mValues could be null if this is being constructed piecemeal. Just record the
+        // propertyName to be used later when setValues() is called if so.
+        if (mValues != null) {
+            PropertyValuesHolder valuesHolder = mValues[0];
+            String oldName = valuesHolder.getPropertyName();
+            valuesHolder.setProperty(property);
+            mValuesMap.remove(oldName);
+            mValuesMap.put(mPropertyName, valuesHolder);
+        }
+        if (mProperty != null) {
+            mPropertyName = property.getName();
+        }
+        mProperty = property;
+        // New property/values/target should cause re-initialization prior to starting
+        mInitialized = false;
+    }
+
+    /**
+     * Gets the name of the property that will be animated. This name will be used to derive
+     * a setter function that will be called to set animated values.
+     * For example, a property name of <code>foo</code> will result
+     * in a call to the function <code>setFoo()</code> on the target object. If either
+     * <code>valueFrom</code> or <code>valueTo</code> is null, then a getter function will
+     * also be derived and called.
+     */
+    public String getPropertyName() {
+        return mPropertyName;
+    }
+
+    /**
+     * Creates a new ObjectAnimator object. This default constructor is primarily for
+     * use internally; the other constructors which take parameters are more generally
+     * useful.
+     */
+    public ObjectAnimator() {
+    }
+
+    /**
+     * Private utility constructor that initializes the target object and name of the
+     * property being animated.
+     *
+     * @param target The object whose property is to be animated. This object should
+     * have a public method on it called <code>setName()</code>, where <code>name</code> is
+     * the value of the <code>propertyName</code> parameter.
+     * @param propertyName The name of the property being animated.
+     */
+    private ObjectAnimator(Object target, String propertyName) {
+        mTarget = target;
+        setPropertyName(propertyName);
+    }
+
+    /**
+     * Private utility constructor that initializes the target object and property being animated.
+     *
+     * @param target The object whose property is to be animated.
+     * @param property The property being animated.
+     */
+    private <T> ObjectAnimator(T target, Property<T, ?> property) {
+        mTarget = target;
+        setProperty(property);
+    }
+
+    /**
+     * Constructs and returns an ObjectAnimator that animates between int values. A single
+     * value implies that that value is the one being animated to. Two values imply a starting
+     * and ending values. More than two values imply a starting value, values to animate through
+     * along the way, and an ending value (these values will be distributed evenly across
+     * the duration of the animation).
+     *
+     * @param target The object whose property is to be animated. This object should
+     * have a public method on it called <code>setName()</code>, where <code>name</code> is
+     * the value of the <code>propertyName</code> parameter.
+     * @param propertyName The name of the property being animated.
+     * @param values A set of values that the animation will animate between over time.
+     * @return An ObjectAnimator object that is set up to animate between the given values.
+     */
+    public static ObjectAnimator ofInt(Object target, String propertyName, int... values) {
+        ObjectAnimator anim = new ObjectAnimator(target, propertyName);
+        anim.setIntValues(values);
+        return anim;
+    }
+
+    /**
+     * Constructs and returns an ObjectAnimator that animates between int values. A single
+     * value implies that that value is the one being animated to. Two values imply a starting
+     * and ending values. More than two values imply a starting value, values to animate through
+     * along the way, and an ending value (these values will be distributed evenly across
+     * the duration of the animation).
+     *
+     * @param target The object whose property is to be animated.
+     * @param property The property being animated.
+     * @param values A set of values that the animation will animate between over time.
+     * @return An ObjectAnimator object that is set up to animate between the given values.
+     */
+    public static <T> ObjectAnimator ofInt(T target, Property<T, Integer> property, int... values) {
+        ObjectAnimator anim = new ObjectAnimator(target, property);
+        anim.setIntValues(values);
+        return anim;
+    }
+
+    /**
+     * Constructs and returns an ObjectAnimator that animates between float values. A single
+     * value implies that that value is the one being animated to. Two values imply a starting
+     * and ending values. More than two values imply a starting value, values to animate through
+     * along the way, and an ending value (these values will be distributed evenly across
+     * the duration of the animation).
+     *
+     * @param target The object whose property is to be animated. This object should
+     * have a public method on it called <code>setName()</code>, where <code>name</code> is
+     * the value of the <code>propertyName</code> parameter.
+     * @param propertyName The name of the property being animated.
+     * @param values A set of values that the animation will animate between over time.
+     * @return An ObjectAnimator object that is set up to animate between the given values.
+     */
+    public static ObjectAnimator ofFloat(Object target, String propertyName, float... values) {
+        ObjectAnimator anim = new ObjectAnimator(target, propertyName);
+        anim.setFloatValues(values);
+        return anim;
+    }
+
+    /**
+     * Constructs and returns an ObjectAnimator that animates between float values. A single
+     * value implies that that value is the one being animated to. Two values imply a starting
+     * and ending values. More than two values imply a starting value, values to animate through
+     * along the way, and an ending value (these values will be distributed evenly across
+     * the duration of the animation).
+     *
+     * @param target The object whose property is to be animated.
+     * @param property The property being animated.
+     * @param values A set of values that the animation will animate between over time.
+     * @return An ObjectAnimator object that is set up to animate between the given values.
+     */
+    public static <T> ObjectAnimator ofFloat(T target, Property<T, Float> property,
+            float... values) {
+        ObjectAnimator anim = new ObjectAnimator(target, property);
+        anim.setFloatValues(values);
+        return anim;
+    }
+
+    /**
+     * Constructs and returns an ObjectAnimator that animates between Object values. A single
+     * value implies that that value is the one being animated to. Two values imply a starting
+     * and ending values. More than two values imply a starting value, values to animate through
+     * along the way, and an ending value (these values will be distributed evenly across
+     * the duration of the animation).
+     *
+     * @param target The object whose property is to be animated. This object should
+     * have a public method on it called <code>setName()</code>, where <code>name</code> is
+     * the value of the <code>propertyName</code> parameter.
+     * @param propertyName The name of the property being animated.
+     * @param evaluator A TypeEvaluator that will be called on each animation frame to
+     * provide the necessary interpolation between the Object values to derive the animated
+     * value.
+     * @param values A set of values that the animation will animate between over time.
+     * @return An ObjectAnimator object that is set up to animate between the given values.
+     */
+    public static ObjectAnimator ofObject(Object target, String propertyName,
+            TypeEvaluator evaluator, Object... values) {
+        ObjectAnimator anim = new ObjectAnimator(target, propertyName);
+        anim.setObjectValues(values);
+        anim.setEvaluator(evaluator);
+        return anim;
+    }
+
+    /**
+     * Constructs and returns an ObjectAnimator that animates between Object values. A single
+     * value implies that that value is the one being animated to. Two values imply a starting
+     * and ending values. More than two values imply a starting value, values to animate through
+     * along the way, and an ending value (these values will be distributed evenly across
+     * the duration of the animation).
+     *
+     * @param target The object whose property is to be animated.
+     * @param property The property being animated.
+     * @param evaluator A TypeEvaluator that will be called on each animation frame to
+     * provide the necessary interpolation between the Object values to derive the animated
+     * value.
+     * @param values A set of values that the animation will animate between over time.
+     * @return An ObjectAnimator object that is set up to animate between the given values.
+     */
+    public static <T, V> ObjectAnimator ofObject(T target, Property<T, V> property,
+            TypeEvaluator<V> evaluator, V... values) {
+        ObjectAnimator anim = new ObjectAnimator(target, property);
+        anim.setObjectValues(values);
+        anim.setEvaluator(evaluator);
+        return anim;
+    }
+
+    /**
+     * Constructs and returns an ObjectAnimator that animates between the sets of values specified
+     * in <code>PropertyValueHolder</code> objects. This variant should be used when animating
+     * several properties at once with the same ObjectAnimator, since PropertyValuesHolder allows
+     * you to associate a set of animation values with a property name.
+     *
+     * @param target The object whose property is to be animated. Depending on how the
+     * PropertyValuesObjects were constructed, the target object should either have the {@link
+     * android.util.Property} objects used to construct the PropertyValuesHolder objects or (if the
+     * PropertyValuesHOlder objects were created with property names) the target object should have
+     * public methods on it called <code>setName()</code>, where <code>name</code> is the name of
+     * the property passed in as the <code>propertyName</code> parameter for each of the
+     * PropertyValuesHolder objects.
+     * @param values A set of PropertyValuesHolder objects whose values will be animated between
+     * over time.
+     * @return An ObjectAnimator object that is set up to animate between the given values.
+     */
+    public static ObjectAnimator ofPropertyValuesHolder(Object target,
+            PropertyValuesHolder... values) {
+        ObjectAnimator anim = new ObjectAnimator();
+        anim.mTarget = target;
+        anim.setValues(values);
+        return anim;
+    }
+
+    @Override
+    public void setIntValues(int... values) {
+        if (mValues == null || mValues.length == 0) {
+            // No values yet - this animator is being constructed piecemeal. Init the values with
+            // whatever the current propertyName is
+            if (mProperty != null) {
+                setValues(PropertyValuesHolder.ofInt(mProperty, values));
+            } else {
+                setValues(PropertyValuesHolder.ofInt(mPropertyName, values));
+            }
+        } else {
+            super.setIntValues(values);
+        }
+    }
+
+    @Override
+    public void setFloatValues(float... values) {
+        if (mValues == null || mValues.length == 0) {
+            // No values yet - this animator is being constructed piecemeal. Init the values with
+            // whatever the current propertyName is
+            if (mProperty != null) {
+                setValues(PropertyValuesHolder.ofFloat(mProperty, values));
+            } else {
+                setValues(PropertyValuesHolder.ofFloat(mPropertyName, values));
+            }
+        } else {
+            super.setFloatValues(values);
+        }
+    }
+
+    @Override
+    public void setObjectValues(Object... values) {
+        if (mValues == null || mValues.length == 0) {
+            // No values yet - this animator is being constructed piecemeal. Init the values with
+            // whatever the current propertyName is
+            if (mProperty != null) {
+                setValues(PropertyValuesHolder.ofObject(mProperty, (TypeEvaluator)null, values));
+            } else {
+                setValues(PropertyValuesHolder.ofObject(mPropertyName, (TypeEvaluator)null, values));
+            }
+        } else {
+            super.setObjectValues(values);
+        }
+    }
+
+    @Override
+    public void start() {
+        if (DBG) {
+            Log.d("ObjectAnimator", "Anim target, duration: " + mTarget + ", " + getDuration());
+            for (int i = 0; i < mValues.length; ++i) {
+                PropertyValuesHolder pvh = mValues[i];
+                ArrayList<Keyframe> keyframes = pvh.mKeyframeSet.mKeyframes;
+                Log.d("ObjectAnimator", "   Values[" + i + "]: " +
+                    pvh.getPropertyName() + ", " + keyframes.get(0).getValue() + ", " +
+                    keyframes.get(pvh.mKeyframeSet.mNumKeyframes - 1).getValue());
+            }
+        }
+        super.start();
+    }
+
+    /**
+     * This function is called immediately before processing the first animation
+     * frame of an animation. If there is a nonzero <code>startDelay</code>, the
+     * function is called after that delay ends.
+     * It takes care of the final initialization steps for the
+     * animation. This includes setting mEvaluator, if the user has not yet
+     * set it up, and the setter/getter methods, if the user did not supply
+     * them.
+     *
+     *  <p>Overriders of this method should call the superclass method to cause
+     *  internal mechanisms to be set up correctly.</p>
+     */
+    @Override
+    void initAnimation() {
+        if (!mInitialized) {
+            // mValueType may change due to setter/getter setup; do this before calling super.init(),
+            // which uses mValueType to set up the default type evaluator.
+            if ((mProperty == null) && AnimatorProxy.NEEDS_PROXY && (mTarget instanceof View) && PROXY_PROPERTIES.containsKey(mPropertyName)) {
+                setProperty(PROXY_PROPERTIES.get(mPropertyName));
+            }
+            int numValues = mValues.length;
+            for (int i = 0; i < numValues; ++i) {
+                mValues[i].setupSetterAndGetter(mTarget);
+            }
+            super.initAnimation();
+        }
+    }
+
+    /**
+     * Sets the length of the animation. The default duration is 300 milliseconds.
+     *
+     * @param duration The length of the animation, in milliseconds.
+     * @return ObjectAnimator The object called with setDuration(). This return
+     * value makes it easier to compose statements together that construct and then set the
+     * duration, as in
+     * <code>ObjectAnimator.ofInt(target, propertyName, 0, 10).setDuration(500).start()</code>.
+     */
+    @Override
+    public ObjectAnimator setDuration(long duration) {
+        super.setDuration(duration);
+        return this;
+    }
+
+
+    /**
+     * The target object whose property will be animated by this animation
+     *
+     * @return The object being animated
+     */
+    public Object getTarget() {
+        return mTarget;
+    }
+
+    /**
+     * Sets the target object whose property will be animated by this animation
+     *
+     * @param target The object being animated
+     */
+    @Override
+    public void setTarget(Object target) {
+        if (mTarget != target) {
+            final Object oldTarget = mTarget;
+            mTarget = target;
+            if (oldTarget != null && target != null && oldTarget.getClass() == target.getClass()) {
+                return;
+            }
+            // New target type should cause re-initialization prior to starting
+            mInitialized = false;
+        }
+    }
+
+    @Override
+    public void setupStartValues() {
+        initAnimation();
+        int numValues = mValues.length;
+        for (int i = 0; i < numValues; ++i) {
+            mValues[i].setupStartValue(mTarget);
+        }
+    }
+
+    @Override
+    public void setupEndValues() {
+        initAnimation();
+        int numValues = mValues.length;
+        for (int i = 0; i < numValues; ++i) {
+            mValues[i].setupEndValue(mTarget);
+        }
+    }
+
+    /**
+     * This method is called with the elapsed fraction of the animation during every
+     * animation frame. This function turns the elapsed fraction into an interpolated fraction
+     * and then into an animated value (from the evaluator. The function is called mostly during
+     * animation updates, but it is also called when the <code>end()</code>
+     * function is called, to set the final value on the property.
+     *
+     * <p>Overrides of this method must call the superclass to perform the calculation
+     * of the animated value.</p>
+     *
+     * @param fraction The elapsed fraction of the animation.
+     */
+    @Override
+    void animateValue(float fraction) {
+        super.animateValue(fraction);
+        int numValues = mValues.length;
+        for (int i = 0; i < numValues; ++i) {
+            mValues[i].setAnimatedValue(mTarget);
+        }
+    }
+
+    @Override
+    public ObjectAnimator clone() {
+        final ObjectAnimator anim = (ObjectAnimator) super.clone();
+        return anim;
+    }
+
+    @Override
+    public String toString() {
+        String returnVal = "ObjectAnimator@" + Integer.toHexString(hashCode()) + ", target " +
+            mTarget;
+        if (mValues != null) {
+            for (int i = 0; i < mValues.length; ++i) {
+                returnVal += "\n    " + mValues[i].toString();
+            }
+        }
+        return returnVal;
+    }
+}
Index: app/src/main/java/com/nineoldandroids/view/ViewPropertyAnimatorPreHC.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nineoldandroids/view/ViewPropertyAnimatorPreHC.java	(revision )
+++ app/src/main/java/com/nineoldandroids/view/ViewPropertyAnimatorPreHC.java	(revision )
@@ -0,0 +1,724 @@
+/*
+ * Copyright (C) 2011 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.nineoldandroids.view;
+
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Set;
+import android.view.View;
+import android.view.animation.Interpolator;
+import com.nineoldandroids.animation.Animator;
+import com.nineoldandroids.animation.ValueAnimator;
+import com.nineoldandroids.view.animation.AnimatorProxy;
+
+class ViewPropertyAnimatorPreHC extends ViewPropertyAnimator {
+    /**
+     * Proxy animation class which will allow us access to post-Honeycomb properties that were not
+     * otherwise available.
+     */
+    private final AnimatorProxy mProxy;
+
+    /**
+     * A WeakReference holding the View whose properties are being animated by this class. This is
+     * set at construction time.
+     */
+    private final WeakReference<View> mView;
+
+    /**
+     * The duration of the underlying Animator object. By default, we don't set the duration
+     * on the Animator and just use its default duration. If the duration is ever set on this
+     * Animator, then we use the duration that it was set to.
+     */
+    private long mDuration;
+
+    /**
+     * A flag indicating whether the duration has been set on this object. If not, we don't set
+     * the duration on the underlying Animator, but instead just use its default duration.
+     */
+    private boolean mDurationSet = false;
+
+    /**
+     * The startDelay of the underlying Animator object. By default, we don't set the startDelay
+     * on the Animator and just use its default startDelay. If the startDelay is ever set on this
+     * Animator, then we use the startDelay that it was set to.
+     */
+    private long mStartDelay = 0;
+
+    /**
+     * A flag indicating whether the startDelay has been set on this object. If not, we don't set
+     * the startDelay on the underlying Animator, but instead just use its default startDelay.
+     */
+    private boolean mStartDelaySet = false;
+
+    /**
+     * The interpolator of the underlying Animator object. By default, we don't set the interpolator
+     * on the Animator and just use its default interpolator. If the interpolator is ever set on
+     * this Animator, then we use the interpolator that it was set to.
+     */
+    private /*Time*/Interpolator mInterpolator;
+
+    /**
+     * A flag indicating whether the interpolator has been set on this object. If not, we don't set
+     * the interpolator on the underlying Animator, but instead just use its default interpolator.
+     */
+    private boolean mInterpolatorSet = false;
+
+    /**
+     * Listener for the lifecycle events of the underlying
+     */
+    private Animator.AnimatorListener mListener = null;
+
+    /**
+     * This listener is the mechanism by which the underlying Animator causes changes to the
+     * properties currently being animated, as well as the cleanup after an animation is
+     * complete.
+     */
+    private AnimatorEventListener mAnimatorEventListener = new AnimatorEventListener();
+
+    /**
+     * This list holds the properties that have been asked to animate. We allow the caller to
+     * request several animations prior to actually starting the underlying animator. This
+     * enables us to run one single animator to handle several properties in parallel. Each
+     * property is tossed onto the pending list until the animation actually starts (which is
+     * done by posting it onto mView), at which time the pending list is cleared and the properties
+     * on that list are added to the list of properties associated with that animator.
+     */
+    ArrayList<NameValuesHolder> mPendingAnimations = new ArrayList<NameValuesHolder>();
+
+    /**
+     * Constants used to associate a property being requested and the mechanism used to set
+     * the property (this class calls directly into View to set the properties in question).
+     */
+    private static final int NONE           = 0x0000;
+    private static final int TRANSLATION_X  = 0x0001;
+    private static final int TRANSLATION_Y  = 0x0002;
+    private static final int SCALE_X        = 0x0004;
+    private static final int SCALE_Y        = 0x0008;
+    private static final int ROTATION       = 0x0010;
+    private static final int ROTATION_X     = 0x0020;
+    private static final int ROTATION_Y     = 0x0040;
+    private static final int X              = 0x0080;
+    private static final int Y              = 0x0100;
+    private static final int ALPHA          = 0x0200;
+
+    private static final int TRANSFORM_MASK = TRANSLATION_X | TRANSLATION_Y | SCALE_X | SCALE_Y |
+            ROTATION | ROTATION_X | ROTATION_Y | X | Y;
+
+    /**
+     * The mechanism by which the user can request several properties that are then animated
+     * together works by posting this Runnable to start the underlying Animator. Every time
+     * a property animation is requested, we cancel any previous postings of the Runnable
+     * and re-post it. This means that we will only ever run the Runnable (and thus start the
+     * underlying animator) after the caller is done setting the properties that should be
+     * animated together.
+     */
+    private Runnable mAnimationStarter = new Runnable() {
+        @Override
+        public void run() {
+            startAnimation();
+        }
+    };
+
+    /**
+     * This class holds information about the overall animation being run on the set of
+     * properties. The mask describes which properties are being animated and the
+     * values holder is the list of all property/value objects.
+     */
+    private static class PropertyBundle {
+        int mPropertyMask;
+        ArrayList<NameValuesHolder> mNameValuesHolder;
+
+        PropertyBundle(int propertyMask, ArrayList<NameValuesHolder> nameValuesHolder) {
+            mPropertyMask = propertyMask;
+            mNameValuesHolder = nameValuesHolder;
+        }
+
+        /**
+         * Removes the given property from being animated as a part of this
+         * PropertyBundle. If the property was a part of this bundle, it returns
+         * true to indicate that it was, in fact, canceled. This is an indication
+         * to the caller that a cancellation actually occurred.
+         *
+         * @param propertyConstant The property whose cancellation is requested.
+         * @return true if the given property is a part of this bundle and if it
+         * has therefore been canceled.
+         */
+        boolean cancel(int propertyConstant) {
+            if ((mPropertyMask & propertyConstant) != 0 && mNameValuesHolder != null) {
+                int count = mNameValuesHolder.size();
+                for (int i = 0; i < count; ++i) {
+                    NameValuesHolder nameValuesHolder = mNameValuesHolder.get(i);
+                    if (nameValuesHolder.mNameConstant == propertyConstant) {
+                        mNameValuesHolder.remove(i);
+                        mPropertyMask &= ~propertyConstant;
+                        return true;
+                    }
+                }
+            }
+            return false;
+        }
+    }
+
+    /**
+     * This list tracks the list of properties being animated by any particular animator.
+     * In most situations, there would only ever be one animator running at a time. But it is
+     * possible to request some properties to animate together, then while those properties
+     * are animating, to request some other properties to animate together. The way that
+     * works is by having this map associate the group of properties being animated with the
+     * animator handling the animation. On every update event for an Animator, we ask the
+     * map for the associated properties and set them accordingly.
+     */
+    private HashMap<Animator, PropertyBundle> mAnimatorMap =
+            new HashMap<Animator, PropertyBundle>();
+
+    /**
+     * This is the information we need to set each property during the animation.
+     * mNameConstant is used to set the appropriate field in View, and the from/delta
+     * values are used to calculate the animated value for a given animation fraction
+     * during the animation.
+     */
+    private static class NameValuesHolder {
+        int mNameConstant;
+        float mFromValue;
+        float mDeltaValue;
+        NameValuesHolder(int nameConstant, float fromValue, float deltaValue) {
+            mNameConstant = nameConstant;
+            mFromValue = fromValue;
+            mDeltaValue = deltaValue;
+        }
+    }
+
+    /**
+     * Constructor, called by View. This is private by design, as the user should only
+     * get a ViewPropertyAnimator by calling View.animate().
+     *
+     * @param view The View associated with this ViewPropertyAnimator
+     */
+    ViewPropertyAnimatorPreHC(View view) {
+        mView = new WeakReference<View>(view);
+        mProxy = AnimatorProxy.wrap(view);
+    }
+
+    /**
+     * Sets the duration for the underlying animator that animates the requested properties.
+     * By default, the animator uses the default value for ValueAnimator. Calling this method
+     * will cause the declared value to be used instead.
+     * @param duration The length of ensuing property animations, in milliseconds. The value
+     * cannot be negative.
+     * @return This object, allowing calls to methods in this class to be chained.
+     */
+    public ViewPropertyAnimator setDuration(long duration) {
+        if (duration < 0) {
+            throw new IllegalArgumentException("Animators cannot have negative duration: " +
+                    duration);
+        }
+        mDurationSet = true;
+        mDuration = duration;
+        return this;
+    }
+
+    /**
+     * Returns the current duration of property animations. If the duration was set on this
+     * object, that value is returned. Otherwise, the default value of the underlying Animator
+     * is returned.
+     *
+     * @see #setDuration(long)
+     * @return The duration of animations, in milliseconds.
+     */
+    public long getDuration() {
+        if (mDurationSet) {
+            return mDuration;
+        } else {
+            // Just return the default from ValueAnimator, since that's what we'd get if
+            // the value has not been set otherwise
+            return new ValueAnimator().getDuration();
+        }
+    }
+
+    @Override
+    public long getStartDelay() {
+        if (mStartDelaySet) {
+            return mStartDelay;
+        } else {
+            // Just return the default from ValueAnimator (0), since that's what we'd get if
+            // the value has not been set otherwise
+            return 0;
+        }
+    }
+
+    @Override
+    public ViewPropertyAnimator setStartDelay(long startDelay) {
+        if (startDelay < 0) {
+            throw new IllegalArgumentException("Animators cannot have negative duration: " +
+                    startDelay);
+        }
+        mStartDelaySet = true;
+        mStartDelay = startDelay;
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator setInterpolator(/*Time*/Interpolator interpolator) {
+        mInterpolatorSet = true;
+        mInterpolator = interpolator;
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator setListener(Animator.AnimatorListener listener) {
+        mListener = listener;
+        return this;
+    }
+
+    @Override
+    public void start() {
+        startAnimation();
+    }
+
+    @Override
+    public void cancel() {
+        if (mAnimatorMap.size() > 0) {
+            HashMap<Animator, PropertyBundle> mAnimatorMapCopy =
+                    (HashMap<Animator, PropertyBundle>)mAnimatorMap.clone();
+            Set<Animator> animatorSet = mAnimatorMapCopy.keySet();
+            for (Animator runningAnim : animatorSet) {
+                runningAnim.cancel();
+            }
+        }
+        mPendingAnimations.clear();
+        View v = mView.get();
+        if (v != null) {
+            v.removeCallbacks(mAnimationStarter);
+        }
+    }
+
+    @Override
+    public ViewPropertyAnimator x(float value) {
+        animateProperty(X, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator xBy(float value) {
+        animatePropertyBy(X, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator y(float value) {
+        animateProperty(Y, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator yBy(float value) {
+        animatePropertyBy(Y, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator rotation(float value) {
+        animateProperty(ROTATION, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator rotationBy(float value) {
+        animatePropertyBy(ROTATION, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator rotationX(float value) {
+        animateProperty(ROTATION_X, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator rotationXBy(float value) {
+        animatePropertyBy(ROTATION_X, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator rotationY(float value) {
+        animateProperty(ROTATION_Y, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator rotationYBy(float value) {
+        animatePropertyBy(ROTATION_Y, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator translationX(float value) {
+        animateProperty(TRANSLATION_X, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator translationXBy(float value) {
+        animatePropertyBy(TRANSLATION_X, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator translationY(float value) {
+        animateProperty(TRANSLATION_Y, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator translationYBy(float value) {
+        animatePropertyBy(TRANSLATION_Y, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator scaleX(float value) {
+        animateProperty(SCALE_X, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator scaleXBy(float value) {
+        animatePropertyBy(SCALE_X, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator scaleY(float value) {
+        animateProperty(SCALE_Y, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator scaleYBy(float value) {
+        animatePropertyBy(SCALE_Y, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator alpha(float value) {
+        animateProperty(ALPHA, value);
+        return this;
+    }
+
+    @Override
+    public ViewPropertyAnimator alphaBy(float value) {
+        animatePropertyBy(ALPHA, value);
+        return this;
+    }
+
+    /**
+     * Starts the underlying Animator for a set of properties. We use a single animator that
+     * simply runs from 0 to 1, and then use that fractional value to set each property
+     * value accordingly.
+     */
+    private void startAnimation() {
+        ValueAnimator animator = ValueAnimator.ofFloat(1.0f);
+        ArrayList<NameValuesHolder> nameValueList =
+                (ArrayList<NameValuesHolder>) mPendingAnimations.clone();
+        mPendingAnimations.clear();
+        int propertyMask = 0;
+        int propertyCount = nameValueList.size();
+        for (int i = 0; i < propertyCount; ++i) {
+            NameValuesHolder nameValuesHolder = nameValueList.get(i);
+            propertyMask |= nameValuesHolder.mNameConstant;
+        }
+        mAnimatorMap.put(animator, new PropertyBundle(propertyMask, nameValueList));
+        animator.addUpdateListener(mAnimatorEventListener);
+        animator.addListener(mAnimatorEventListener);
+        if (mStartDelaySet) {
+            animator.setStartDelay(mStartDelay);
+        }
+        if (mDurationSet) {
+            animator.setDuration(mDuration);
+        }
+        if (mInterpolatorSet) {
+            animator.setInterpolator(mInterpolator);
+        }
+        animator.start();
+    }
+
+    /**
+     * Utility function, called by the various x(), y(), etc. methods. This stores the
+     * constant name for the property along with the from/delta values that will be used to
+     * calculate and set the property during the animation. This structure is added to the
+     * pending animations, awaiting the eventual start() of the underlying animator. A
+     * Runnable is posted to start the animation, and any pending such Runnable is canceled
+     * (which enables us to end up starting just one animator for all of the properties
+     * specified at one time).
+     *
+     * @param constantName The specifier for the property being animated
+     * @param toValue The value to which the property will animate
+     */
+    private void animateProperty(int constantName, float toValue) {
+        float fromValue = getValue(constantName);
+        float deltaValue = toValue - fromValue;
+        animatePropertyBy(constantName, fromValue, deltaValue);
+    }
+
+    /**
+     * Utility function, called by the various xBy(), yBy(), etc. methods. This method is
+     * just like animateProperty(), except the value is an offset from the property's
+     * current value, instead of an absolute "to" value.
+     *
+     * @param constantName The specifier for the property being animated
+     * @param byValue The amount by which the property will change
+     */
+    private void animatePropertyBy(int constantName, float byValue) {
+        float fromValue = getValue(constantName);
+        animatePropertyBy(constantName, fromValue, byValue);
+    }
+
+    /**
+     * Utility function, called by animateProperty() and animatePropertyBy(), which handles the
+     * details of adding a pending animation and posting the request to start the animation.
+     *
+     * @param constantName The specifier for the property being animated
+     * @param startValue The starting value of the property
+     * @param byValue The amount by which the property will change
+     */
+    private void animatePropertyBy(int constantName, float startValue, float byValue) {
+        // First, cancel any existing animations on this property
+        if (mAnimatorMap.size() > 0) {
+            Animator animatorToCancel = null;
+            Set<Animator> animatorSet = mAnimatorMap.keySet();
+            for (Animator runningAnim : animatorSet) {
+                PropertyBundle bundle = mAnimatorMap.get(runningAnim);
+                if (bundle.cancel(constantName)) {
+                    // property was canceled - cancel the animation if it's now empty
+                    // Note that it's safe to break out here because every new animation
+                    // on a property will cancel a previous animation on that property, so
+                    // there can only ever be one such animation running.
+                    if (bundle.mPropertyMask == NONE) {
+                        // the animation is no longer changing anything - cancel it
+                        animatorToCancel = runningAnim;
+                        break;
+                    }
+                }
+            }
+            if (animatorToCancel != null) {
+                animatorToCancel.cancel();
+            }
+        }
+
+        NameValuesHolder nameValuePair = new NameValuesHolder(constantName, startValue, byValue);
+        mPendingAnimations.add(nameValuePair);
+        View v = mView.get();
+        if (v != null) {
+            v.removeCallbacks(mAnimationStarter);
+            v.post(mAnimationStarter);
+        }
+    }
+
+    /**
+     * This method handles setting the property values directly in the View object's fields.
+     * propertyConstant tells it which property should be set, value is the value to set
+     * the property to.
+     *
+     * @param propertyConstant The property to be set
+     * @param value The value to set the property to
+     */
+    private void setValue(int propertyConstant, float value) {
+        //final View.TransformationInfo info = mView.mTransformationInfo;
+        switch (propertyConstant) {
+            case TRANSLATION_X:
+                //info.mTranslationX = value;
+                mProxy.setTranslationX(value);
+                break;
+            case TRANSLATION_Y:
+                //info.mTranslationY = value;
+                mProxy.setTranslationY(value);
+                break;
+            case ROTATION:
+                //info.mRotation = value;
+                mProxy.setRotation(value);
+                break;
+            case ROTATION_X:
+                //info.mRotationX = value;
+                mProxy.setRotationX(value);
+                break;
+            case ROTATION_Y:
+                //info.mRotationY = value;
+                mProxy.setRotationY(value);
+                break;
+            case SCALE_X:
+                //info.mScaleX = value;
+                mProxy.setScaleX(value);
+                break;
+            case SCALE_Y:
+                //info.mScaleY = value;
+                mProxy.setScaleY(value);
+                break;
+            case X:
+                //info.mTranslationX = value - mView.mLeft;
+                mProxy.setX(value);
+                break;
+            case Y:
+                //info.mTranslationY = value - mView.mTop;
+                mProxy.setY(value);
+                break;
+            case ALPHA:
+                //info.mAlpha = value;
+                mProxy.setAlpha(value);
+                break;
+        }
+    }
+
+    /**
+     * This method gets the value of the named property from the View object.
+     *
+     * @param propertyConstant The property whose value should be returned
+     * @return float The value of the named property
+     */
+    private float getValue(int propertyConstant) {
+        //final View.TransformationInfo info = mView.mTransformationInfo;
+        switch (propertyConstant) {
+            case TRANSLATION_X:
+                //return info.mTranslationX;
+                return mProxy.getTranslationX();
+            case TRANSLATION_Y:
+                //return info.mTranslationY;
+                return mProxy.getTranslationY();
+            case ROTATION:
+                //return info.mRotation;
+                return mProxy.getRotation();
+            case ROTATION_X:
+                //return info.mRotationX;
+                return mProxy.getRotationX();
+            case ROTATION_Y:
+                //return info.mRotationY;
+                return mProxy.getRotationY();
+            case SCALE_X:
+                //return info.mScaleX;
+                return mProxy.getScaleX();
+            case SCALE_Y:
+                //return info.mScaleY;
+                return mProxy.getScaleY();
+            case X:
+                //return mView.mLeft + info.mTranslationX;
+                return mProxy.getX();
+            case Y:
+                //return mView.mTop + info.mTranslationY;
+                return mProxy.getY();
+            case ALPHA:
+                //return info.mAlpha;
+                return mProxy.getAlpha();
+        }
+        return 0;
+    }
+
+    /**
+     * Utility class that handles the various Animator events. The only ones we care
+     * about are the end event (which we use to clean up the animator map when an animator
+     * finishes) and the update event (which we use to calculate the current value of each
+     * property and then set it on the view object).
+     */
+    private class AnimatorEventListener
+            implements Animator.AnimatorListener, ValueAnimator.AnimatorUpdateListener {
+        @Override
+        public void onAnimationStart(Animator animation) {
+            if (mListener != null) {
+                mListener.onAnimationStart(animation);
+            }
+        }
+
+        @Override
+        public void onAnimationCancel(Animator animation) {
+            if (mListener != null) {
+                mListener.onAnimationCancel(animation);
+            }
+        }
+
+        @Override
+        public void onAnimationRepeat(Animator animation) {
+            if (mListener != null) {
+                mListener.onAnimationRepeat(animation);
+            }
+        }
+
+        @Override
+        public void onAnimationEnd(Animator animation) {
+            if (mListener != null) {
+                mListener.onAnimationEnd(animation);
+            }
+            mAnimatorMap.remove(animation);
+            // If the map is empty, it means all animation are done or canceled, so the listener
+            // isn't needed anymore. Not nulling it would cause it to leak any objects used in
+            // its implementation
+            if (mAnimatorMap.isEmpty()) {
+                mListener = null;
+            }
+        }
+
+        /**
+         * Calculate the current value for each property and set it on the view. Invalidate
+         * the view object appropriately, depending on which properties are being animated.
+         *
+         * @param animation The animator associated with the properties that need to be
+         * set. This animator holds the animation fraction which we will use to calculate
+         * the current value of each property.
+         */
+        @Override
+        public void onAnimationUpdate(ValueAnimator animation) {
+            // alpha requires slightly different treatment than the other (transform) properties.
+            // The logic in setAlpha() is not simply setting mAlpha, plus the invalidation
+            // logic is dependent on how the view handles an internal call to onSetAlpha().
+            // We track what kinds of properties are set, and how alpha is handled when it is
+            // set, and perform the invalidation steps appropriately.
+            //boolean alphaHandled = false;
+            //mView.invalidateParentCaches();
+            float fraction = animation.getAnimatedFraction();
+            PropertyBundle propertyBundle = mAnimatorMap.get(animation);
+            int propertyMask = propertyBundle.mPropertyMask;
+            if ((propertyMask & TRANSFORM_MASK) != 0) {
+                View v = mView.get();
+                if (v != null) {
+                    v.invalidate(/*false*/);
+                }
+            }
+            ArrayList<NameValuesHolder> valueList = propertyBundle.mNameValuesHolder;
+            if (valueList != null) {
+                int count = valueList.size();
+                for (int i = 0; i < count; ++i) {
+                    NameValuesHolder values = valueList.get(i);
+                    float value = values.mFromValue + fraction * values.mDeltaValue;
+                    //if (values.mNameConstant == ALPHA) {
+                    //    alphaHandled = mView.setAlphaNoInvalidation(value);
+                    //} else {
+                        setValue(values.mNameConstant, value);
+                    //}
+                }
+            }
+            /*if ((propertyMask & TRANSFORM_MASK) != 0) {
+                mView.mTransformationInfo.mMatrixDirty = true;
+                mView.mPrivateFlags |= View.DRAWN; // force another invalidation
+            }*/
+            // invalidate(false) in all cases except if alphaHandled gets set to true
+            // via the call to setAlphaNoInvalidation(), above
+            View v = mView.get();
+            if (v != null) {
+                v.invalidate(/*alphaHandled*/);
+            }
+        }
+    }
+}
Index: app/src/main/res/drawable/common_head_back_selector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/common_head_back_selector.xml	(revision )
+++ app/src/main/res/drawable/common_head_back_selector.xml	(revision )
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@mipmap/common_head_back_selected" android:state_pressed="true"/>
+    <item android:drawable="@mipmap/common_head_back_selected" android:state_focused="true"/>
+    <item android:drawable="@mipmap/common_head_back_selected" android:state_selected="true"/>
+    <item android:drawable="@mipmap/common_head_back_unselected"/>
+
+</selector>
\ No newline at end of file
Index: .idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/encodings.xml	(revision )
+++ .idea/encodings.xml	(revision )
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding" defaultCharsetForPropertiesFiles="UTF-8">
+    <file url="file://$PROJECT_DIR$/app/src/main/java/com/oasgames/android/oaspay/activity/ActivityMain.java" charset="UTF-8" />
+    <file url="PROJECT" charset="UTF-8" />
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/assets/about.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/assets/about.html	(revision )
+++ app/src/main/assets/about.html	(revision )
@@ -0,0 +1,26 @@
+<!doctype html>
+<html>
+<head>
+<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
+<meta name="apple-mobile-web-app-capable" content="yes">
+<meta name="apple-mobile-web-app-status-bar-style" content="black">
+<meta name="format-detection" content="telephone=no">
+<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
+<title>من نحن</title>
+<link href="details.css" rel="stylesheet"  type="text/css">
+<script type="text/javascript" src="jquery_1_7_min.js"></script>
+</head>
+
+<body>
+    <section class="about_section">
+        <img src="logo.png"  />
+        <h1 class="pay_name"><span>OAS PAY</span></h1>
+        <span class="about_section_versions">V1.0.0الإصدار الحالي</span>
+        <p><span>طريقة الدفع oas pay هي طريقة دفع خاصة بالموقع الرسمي لـ oasis games ، هذه الطريقة تجعل الشراء اكثر مرونة ، كما يمكنك التمتع بتجربة الخصومات الخاصة .</span></p>
+    </section>
+    <footer class="about_footer">
+        <span>@2012-2015<br />OASIS GAMES LIMITED. جميع الحقوق محفوظة</span>
+    </footer>
+
+</body>
+</html>
Index: app/src/main/java/com/oasgames/android/oaspay/activity/ActivityGooglePlayBilling.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/activity/ActivityGooglePlayBilling.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/activity/ActivityGooglePlayBilling.java	(revision )
@@ -0,0 +1,648 @@
+/* Copyright (c) 2012 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.oasgames.android.oaspay.activity;
+
+import android.app.Dialog;
+import android.content.DialogInterface;
+import android.content.DialogInterface.OnDismissListener;
+import android.content.Intent;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
+import android.content.pm.PackageManager.NameNotFoundException;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.text.TextUtils;
+
+import com.base.tools.BasesApplication;
+import com.base.tools.activity.BasesActivity;
+import com.base.tools.entity.PhoneInfo;
+import com.base.tools.google.GoogleBillingUtils;
+import com.base.tools.google.IabHelper;
+import com.base.tools.google.IabResult;
+import com.base.tools.google.Inventory;
+import com.base.tools.google.Purchase;
+import com.base.tools.google.SkuDetails;
+import com.base.tools.http.CallbackResultForActivity;
+import com.base.tools.utils.BasesConstant;
+import com.base.tools.utils.BasesUtils;
+import com.base.tools.utils.MD5Encrypt;
+import com.google.android.gms.common.ConnectionResult;
+import com.google.android.gms.common.GooglePlayServicesUtil;
+import com.oasgames.android.oaspay.R;
+import com.oasgames.android.oaspay.entity.OrderInfo;
+import com.oasgames.android.oaspay.service.HttpService;
+import com.oasgames.android.oaspay.tools.APPUtils;
+import com.oasgames.android.oaspay.tools.ReportUtils;
+
+import org.json.JSONException;
+
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+
+/**
+ * Example game using in-app billing version 3.
+ *
+ * Before attempting to run this sample, please read the README file. It
+ * contains important information on how to set up this project.
+ *
+ * All the game-specific logic is implemented here in MainActivity, while the
+ * general-purpose boilerplate that can be reused in any app is provided in the
+ * classes in the util/ subdirectory. When implementing your own application,
+ * you can copy over util/*.java to make use of those utility classes.
+ *
+ * This game is a simple "driving" game where the player can buy gas
+ * and drive. The car has a tank which stores gas. When the player purchases
+ * gas, the tank fills up (1/4 tank at a time). When the player drives, the gas
+ * in the tank diminishes (also 1/4 tank at a time).
+ *
+ * The user can also purchase a "premium upgrade" that gives them a red car
+ * instead of the standard blue one (exciting!).
+ *
+ * The user can also purchase a subscription ("infinite gas") that allows them
+ * to drive without using up any gas while that subscription is active.
+ *
+ * It's important to note the consumption mechanics for each item.
+ *
+ * PREMIUM: the item is purchased and NEVER consumed. So, after the original
+ * purchase, the player will always own that item. The application knows to
+ * display the red car instead of the blue one because it queries whether
+ * the premium "item" is owned or not.
+ *
+ * INFINITE GAS: this is a subscription, and subscriptions can't be consumed.
+ *
+ * GAS: when gas is purchased, the "gas" item is then owned. We consume it
+ * when we apply that item's effects to our app's world, which to us means
+ * filling up 1/4 of the tank. This happens immediately after purchase!
+ * It's at this point (and not when the user drives) that the "gas"
+ * item is CONSUMED. Consumption should always happen when your game
+ * world was safely updated to apply the effect of the purchase. So,
+ * in an example scenario:
+ *
+ * BEFORE:      tank at 1/2
+ * ON PURCHASE: tank at 1/2, "gas" item is owned
+ * IMMEDIATELY: "gas" is consumed, tank goes to 3/4
+ * AFTER:       tank at 3/4, "gas" item NOT owned any more
+ *
+ * Another important point to notice is that it may so happen that
+ * the application crashed (or anything else happened) after the user
+ * purchased the "gas" item, but before it was consumed. That's why,
+ * on startup, we check if we own the "gas" item, and, if so,
+ * we have to apply its effects to our world and consume it. This
+ * is also very important!
+ *
+ * @author Bruno Oliveira (Google)
+ */
+public class ActivityGooglePlayBilling extends BasesActivity {
+    // Debug tag, for logging
+    static final String TAG = "GooglePlayBilling";
+	final String PAY_GOON ="goon";
+	final String PAY_ONCE ="once";
+	public static  final Integer HANDLER_QUERYINVENTORY = 101;
+	public static  final Integer HANDLER_NOTICE = 0;
+
+    private String base64EncodedPublicKey = "";
+   
+    // (arbitrary) request code for the purchase flow
+    static final int RC_REQUEST = 10001;
+    // 验证google play 是否可用
+    static final int RC_VERIFYGOOGLEPLAY  = 10002;
+
+    // The helper object
+    IabHelper mHelper;
+    
+    OrderInfo order;
+    String ext="";// 游戏需要透传的扩展参数
+    MyHandler myHandler ;
+	List<Purchase> oldOrderList = null;//未完成订单
+	List<String> handedOrderIDS = new ArrayList<String>();//已处理过得未完成订单号
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(BasesUtils.getResourceValue(this, "layout", "pay_google"));
+        
+        myHandler = new MyHandler(this);
+
+        /* base64EncodedPublicKey should be YOUR APPLICATION'S PUBLIC KEY
+         * (that you got from the Google Play developer console). This is not your
+         * developer public key, it's the *app-specific* public key.
+         *
+         * Instead of just storing the entire literal string here embedded in the
+         * program,  construct the key at runtime from pieces or
+         * use bit manipulation (for example, XOR with some other string) to hide
+         * the actual key.  The key itself is not secret information, but we don't
+         * want to make it easy for an attacker to replace the public key with one
+         * of their own and then fake messages from the server.
+         */
+//        String base64EncodedPublicKey = "CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE";
+        
+        if(TextUtils.isEmpty(base64EncodedPublicKey)){
+        	ApplicationInfo appInfo;
+			try {
+				appInfo = getPackageManager().getApplicationInfo(getApplicationContext().getPackageName(),PackageManager.GET_META_DATA);
+				base64EncodedPublicKey = appInfo.metaData.getString("com.googleplay.ApplicationId");
+			} catch (NameNotFoundException e) {
+				BasesUtils.logDebug(TAG, "Please put your app's public key in AndroidManifest.xml.");
+			}
+        }
+        if(TextUtils.isEmpty(base64EncodedPublicKey)){
+        	BasesUtils.logError(TAG, "Please put your app's public key in AndroidManifest.xml.");
+        	complain("Please put your app's public key in AndroidManifest.xml.");
+        	return;
+        }
+
+        order = (OrderInfo)getIntent().getExtras().get("orderinfo");
+        ext = getIntent().getStringExtra("ext");
+        
+        if(TextUtils.isEmpty(order.price_product_id)){
+        	BasesUtils.logError(TAG, "Please put product id.");
+        	complain("Please put product id.");
+        	return;
+        }
+//		order.setPrice_product_id("oas.oaspay.120.3927");// 测试套餐
+
+        setWaitScreen(true);
+
+        // Create the helper, passing it our context and the public key to verify signatures with
+        BasesUtils.logDebug(TAG, "Creating IAB helper.");
+        mHelper = new IabHelper(this, base64EncodedPublicKey);
+
+        // enable debug logging (for a production application, you should set this to false).
+        mHelper.enableDebugLogging(BasesApplication.OASISSDK_ENVIRONMENT_SANDBOX);
+
+    	int isGooglePlayAvail = GooglePlayServicesUtil.isGooglePlayServicesAvailable(this);
+        if(isGooglePlayAvail == ConnectionResult.SUCCESS){
+        // Start setup. This is asynchronous and the specified listener
+        // will be called once setup completes.
+        BasesUtils.logDebug(TAG, "Starting setup.");
+        mHelper.startSetup(new IabHelper.OnIabSetupFinishedListener() {
+            public void onIabSetupFinished(IabResult result) {
+            	if (isPageClose()) {
+            		isPageCloseHandler();
+            		return;
+				}
+                BasesUtils.logDebug(TAG, "Setup finished.");
+
+                if (!result.isSuccess()) {
+                    // Oh noes, there was a problem.
+                	BasesUtils.logError(TAG, "Problem setting up in-app billing: " + IabHelper.getResponseDesc(result.getResponse()));
+                	Message msg = new Message();
+                	msg.what = HANDLER_NOTICE;
+                	msg.obj = getResources().getString(R.string.google_error_notice1); // 支付初始化失败
+                    myHandler.sendMessage(msg);
+                    return;
+                }
+
+                // Have we been disposed of in the meantime? If so, quit.
+                if (mHelper == null) return;
+
+                // IAB is fully set up. Now, Start purchase.
+                try {
+					oldOrderList = GoogleBillingUtils.getPurchasedList();
+				} catch (JSONException e) {
+					e.printStackTrace();
+				}
+                checkALLOrder();
+            }
+        });
+        }else{
+
+        	Dialog d = GooglePlayServicesUtil.getErrorDialog(isGooglePlayAvail, this, RC_VERIFYGOOGLEPLAY);
+        	d.setOnDismissListener(new OnDismissListener() {
+				
+				@Override
+				public void onDismiss(DialogInterface arg0) {
+					BasesUtils.logError(TAG, "GooglePlayServicesUtil.showErrorDialogFragment");
+					arg0.dismiss();
+					
+					myHandler.sendEmptyMessageDelayed(-1, 500);
+				}
+			});
+        	d.show();
+
+        }
+    }
+    /**
+     * 检查所有未完成订单
+     */
+    private void checkALLOrder(){
+		if(oldOrderList == null)
+			oldOrderList = new ArrayList<>();
+
+		Purchase payedOrder = null;
+		int oldOrderSize = oldOrderList.size();
+		for (int i = 0; i < oldOrderSize; i++) {
+			Purchase old = oldOrderList.get(i);
+			String payload = old.getDeveloperPayload();
+			if(payload.contains(GoogleBillingUtils.SEPARATE+order.order_id+GoogleBillingUtils.SEPARATE)){
+				payedOrder = old;
+				break;
+			}
+		}
+		if(payedOrder != null)
+			check(payedOrder, PAY_ONCE);
+		else
+			queryInventory();
+
+    }
+    private void queryInventory(){
+    	if (isPageClose()) {
+    		isPageCloseHandler();
+    		return;
+		}
+    	List<String> moreSkus = new ArrayList<String>();
+        moreSkus.add(order.price_product_id);
+        mHelper.queryInventoryAsync(true, moreSkus, new IabHelper.QueryInventoryFinishedListener() {
+
+			@Override
+			public void onQueryInventoryFinished(IabResult result, Inventory inv) {
+				if (isPageClose()) {
+					isPageCloseHandler();
+					return;
+				}
+				// Is it a failure?
+				if (result.isFailure() || inv == null) {
+					BasesUtils.logError(TAG, "Failed to query inventory: " + IabHelper.getResponseDesc(result.getResponse()) + "\n" + result.toString());
+					Message msg = new Message();
+					msg.what = HANDLER_NOTICE;
+					msg.obj = getResources().getString(R.string.google_error_notice2); // 获取套餐失败，请稍后再试
+					myHandler.sendMessage(msg);
+					return;
+				}
+
+				SkuDetails sku = inv.getSkuDetails(order.price_product_id);
+				if (sku == null || TextUtils.isEmpty(sku.getPrice())) {
+					BasesUtils.logError(TAG, "Don't find SkuDetails by " + order.price_product_id);
+					Message msg = new Message();
+					msg.what = HANDLER_NOTICE;
+					msg.obj = getResources().getString(R.string.google_error_notice4); // 未找到商品，请稍后再试
+					myHandler.sendMessage(msg);
+					return;
+				}
+
+				final Purchase p = inv.getPurchase(order.price_product_id);
+				if(p != null){
+					String payload = p.getDeveloperPayload();
+					BasesUtils.logDebug(TAG, "Have old Purchase.Purchase="+p.toString());
+					if(!TextUtils.isEmpty(payload) && payload.contains(GoogleBillingUtils.SEPARATE+order.order_id+GoogleBillingUtils.SEPARATE)){// 属于当前订单，继续执行
+						check(p, PAY_ONCE);
+						return;
+					}else{
+						BasesUtils.logDebug(TAG, "Have not contain this Purchase."+p.getPurchaseState());
+//						// 不属于当前订单，擦除
+//						if (p.getPurchaseState() == IabHelper.BILLING_RESPONSE_RESULT_ITEM_NOT_OWNED) {
+//							inv.erasePurchase(order.price_product_id);
+//						}else if(p.getPurchaseState() == IabHelper.BILLING_RESPONSE_RESULT_ITEM_ALREADY_OWNED){
+							check(p, PAY_GOON);
+							return;
+//						}
+					}
+				}
+
+				if("3".equals(order.pay_status)){// 订单已完成支付，但发钻失败，提示“该订单发现异常，请联系客服！”，此时已无订单数据，无法再次发送发钻请求
+					BasesUtils.logDebug(TAG, "Order is error.order.pay_status="+order.pay_status+";order.order_id="+order.order_id);
+					BasesUtils.showDialogBySystemUI(ActivityGooglePlayBilling.this, getResources().getString(R.string.google_error_notice7), getResources().getString(R.string.search_title_sub2), new DialogInterface.OnClickListener() {
+						@Override
+						public void onClick(DialogInterface dialog, int which) {
+							dialog.cancel();
+							close();
+						}
+					}, "", null, "", null);
+					return;
+				}
+
+				// 订单状态正常，且本地无该订单记录，开启新的支付流程
+				launchPurchaseFlow();
+
+			}
+		});
+    }
+
+    // 向google提交支付请求
+    private void launchPurchaseFlow() {
+    	if (isPageClose()) {
+    		isPageCloseHandler();
+    		return;
+		}
+		setWaitScreen(true);
+
+        /* TODO: for security, generate your payload here for verification. See the comments on
+         *        verifyDeveloperPayload() for more info. Since this is a SAMPLE, we just use
+         *        an empty string, but on a production app you should carefully generate this. */
+       
+        String payload = BasesApplication.userInfo.uid+GoogleBillingUtils.SEPARATE+order.server_id+GoogleBillingUtils.SEPARATE+BasesApplication.userInfo.roleID+GoogleBillingUtils.SEPARATE+ext+GoogleBillingUtils.SEPARATE+""+GoogleBillingUtils.SEPARATE+"serverType"+GoogleBillingUtils.SEPARATE+order.order_id+GoogleBillingUtils.SEPARATE+ MD5Encrypt.StringToMD5(BasesApplication.PUBLICKEY + PhoneInfo.instance().gamecode + order.server_id + BasesApplication.userInfo.uid + order.price_product_id + (TextUtils.isEmpty(ext) ? "" : ext) + order.order_id);
+
+		BasesUtils.logDebug(TAG, "Start purchase " + order.price_product_id);
+		mHelper.launchPurchaseFlow(this, order.price_product_id, RC_REQUEST,
+				mPurchaseFinishedListener, payload);
+    }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        BasesUtils.logDebug(TAG, "onActivityResult(" + requestCode + "," + resultCode + "," + data);
+        if (mHelper == null) return;
+
+        // Pass on the activity result to the helper for handling
+        if (!mHelper.handleActivityResult(requestCode, resultCode, data)) {
+            // not handled, so handle it ourselves (here's where you'd
+            // perform any handling of activity results not related to in-app
+            // billing...
+            super.onActivityResult(requestCode, resultCode, data);
+        }
+        else {
+            BasesUtils.logDebug(TAG, "onActivityResult handled by IABUtil.");
+        }
+    }
+
+    /** Verifies the developer payload of a purchase. */
+    boolean verifyDeveloperPayload(Purchase p) {
+        String payload = p.getDeveloperPayload();
+        
+        /*
+         * TODO: verify that the developer payload of the purchase is correct. It will be
+         * the same one that you sent when initiating the purchase.
+         *
+         * WARNING: Locally generating a random string when starting a purchase and
+         * verifying it here might seem like a good approach, but this will fail in the
+         * case where the user purchases an item on one device and then uses your app on
+         * a different device, because on the other device you will not have access to the
+         * random string you originally generated.
+         *
+         * So a good developer payload has these characteristics:
+         *
+         * 1. If two different users purchase an item, the payload is different between them,
+         *    so that one user's purchase can't be replayed to another user.
+         *
+         * 2. The payload must be such that you can verify it even when the app wasn't the
+         *    one who initiated the purchase flow (so that items purchased by the user on
+         *    one device work on other devices owned by the user).
+         *
+         * Using your own server to store and verify developer payloads across app
+         * installations is recommended.
+         */
+        payload = payload.substring(payload.lastIndexOf(GoogleBillingUtils.SEPARATE)+GoogleBillingUtils.SEPARATE.length());
+        
+        if(MD5Encrypt.StringToMD5(BasesApplication.PUBLICKEY+PhoneInfo.instance().gamecode+order.server_id+BasesApplication.userInfo.uid+order.price_product_id+(TextUtils.isEmpty(ext)?"":ext)+order.order_id).equals(payload))
+        	return true;
+        
+        return false;
+    }
+
+    // Callback for when a purchase is finished
+    IabHelper.OnIabPurchaseFinishedListener mPurchaseFinishedListener = new IabHelper.OnIabPurchaseFinishedListener() {
+        public void onIabPurchaseFinished(IabResult result, Purchase purchase) {
+            BasesUtils.logDebug(TAG, "Purchase finished: " + result.toString() + ", purchase: " + purchase);
+
+            // if we were disposed of in the meantime, quit.
+            if (mHelper == null){// 页面被退出，此时如果支付成功，保存改订单
+            	if(result.isSuccess())
+            		checkAndAddPurchase(purchase);
+            	return;
+            }
+
+            if (result.isFailure()) {
+            	BasesUtils.logError(TAG, "Error purchasing: " + IabHelper.getResponseDesc(result.getResponse()));
+            	if(result.getResponse() == -1005){// User canceled
+            		myHandler.sendEmptyMessage(-1);
+            		setResultInfo(BasesConstant.RESULT_CANCEL, "User canceled");
+            		return;
+            	}
+            	Message msg = new Message();
+            	msg.what = HANDLER_NOTICE;
+            	msg.obj = getResources().getString(R.string.google_error_notice5);// -1003  数据验证失败
+                myHandler.sendMessage(msg);
+                return;
+            }
+            if (!verifyDeveloperPayload(purchase)) {
+            	Message msg = new Message();
+            	msg.what = HANDLER_NOTICE;
+            	msg.obj = getResources().getString(R.string.google_error_notice5);// 数据验证失败
+                myHandler.sendMessage(msg);
+                BasesUtils.logError(TAG, "Error purchasing. Authenticity verification failed.");
+                return;
+            }
+
+            BasesUtils.logDebug(TAG, "Purchase successful." + purchase.toString());
+
+            checkAndAddPurchase(purchase);
+            check(purchase, PAY_ONCE);
+
+        }
+    };
+
+    /**
+	 * 检查当前订单是否已入库，没有入库时，插入
+	 * @param p	订单信息
+	 * @return
+	 */
+	public void checkAndAddPurchase(Purchase p){
+		long id = 0;
+		if(GoogleBillingUtils.checkPurchaseIsExist(p)){
+			BasesUtils.logError(TAG, "支付订单保存至数据库成功1。");
+		}else{
+			id = GoogleBillingUtils.addPurchase(p);
+			if(id > 0)
+				BasesUtils.logError(TAG, "支付订单保存至数据库成功2。");
+			else
+				BasesUtils.logError(TAG, "支付订单保存至数据库失败。");
+		}
+	}
+
+
+    private void consume(Purchase purchase, final String code){
+    	mHelper.consumeAsync(purchase, new IabHelper.OnConsumeFinishedListener() {
+			public void onConsumeFinished(Purchase p, IabResult result) {
+				BasesUtils.logDebug(TAG, "Consumption finished. Purchase: " + p + ", result: " + result);
+
+				// if we were disposed of in the meantime, quit.
+				if (mHelper == null) return;
+
+				if (result.isSuccess()) {
+					BasesUtils.logDebug(TAG, "Consumption successful. Provisioning. Purchase.orderID=" + p.getOrderId());
+//                  case 1000000://交易成功且发钻成功
+//    				case 1000002://该购买交易已发钻成功，因客户端未消费成功，所以重复2次验证
+
+					if (GoogleBillingUtils.deletePurchase(p.getOrderId()) <= 0) {// 消费成功，删除数据库记录
+						BasesUtils.logError(TAG, "delete by orderid=" + p.getOrderId());
+					}
+					if(code.equals(PAY_GOON)){
+						myHandler.sendEmptyMessage(HANDLER_QUERYINVENTORY);
+						return;
+					}
+					Message msg = new Message();
+					msg.what = HANDLER_SUCECCES;
+					myHandler.sendMessage(msg);
+					BasesUtils.logDebug(TAG, "End consumption flow.");
+					return;
+				}
+
+				close();
+
+			}
+        });
+    }
+    /**
+     * 二次服务器验证
+     */
+    private void check(Purchase purchase, String type){
+		HttpService.instance().checkPurchaseForGoogle(purchase, GoogleBillingUtils.SEPARATE, new GoogleCheck(purchase, type));
+
+//    	* 			1000001:验证信息错误（key无效）
+//   	 * 			1000002:该购买交易已发钻成功
+//   	 * 			1000003:支付完成，验证连接失败-连接超时或者无法连接上Google服务器，
+//   	 * 			1000004：ProductID错误—一般不会出现BUG
+//   	 * 			1000005:支付成功，但是发钻不成功，
+//   	 * 			1000100:未知错误，
+    }
+	class GoogleCheck implements CallbackResultForActivity{
+		Purchase purchase;
+		String type;// type=PAY_GOON表示该商品继续支付一次
+		public GoogleCheck(Purchase purchase, String type){
+			this.purchase = purchase;
+			this.type = type;
+		}
+		@Override
+		public void success(Object data, int statusCode, String msg) {
+			if(!type.equals(PAY_GOON))// 不继续支付时，更新order
+				order = (OrderInfo)data;
+
+			((MyApplication)getApplication()).isReLoadOderList = true;
+
+			if("3".equals(order.pay_status)){// 订单已完成支付，但发钻失败；发钻失败时，不消耗该商品
+				String[] info = purchase.getDeveloperPayload().split(GoogleBillingUtils.SEPARATE);
+				Map<String, String> paras = new HashMap<>();
+				if(info.length >= 7)
+					paras.put("orderid", info[6]);
+				paras.put("uid", info[0]);
+				ReportUtils.add(ReportUtils.DEFAULTEVENT_SDIAMONDFAIL, paras, null);
+
+				Message message = new Message();
+				message.what = 0;
+				message.obj = getString(R.string.google_error_notice7);// 提示：该订单发现异常，请联系客服！
+				myHandler.sendMessage(message);
+				return;
+			}
+
+			consume(purchase, type);// 消耗当前商品
+		}
+
+		@Override
+		public void fail(int statusCode, String msg) {
+//			consume(purchase, type);// 发钻失败，意味着服务端已收到消息，估要执行consume
+			((MyApplication)getApplication()).isReLoadOderList = true;
+			APPUtils.showErrorMessageByErrorCode(ActivityGooglePlayBilling.this, "-2000");
+			close();// 先暂时close，后续决定是否添加重试功能
+		}
+
+		@Override
+		public void exception(Exception e) {
+//			showNetWrokError();
+//			check(purchase, type);
+			((MyApplication)getApplication()).isReLoadOderList = true;
+			APPUtils.showErrorMessageByErrorCode(ActivityGooglePlayBilling.this, "-2000");
+			close();// 先暂时close，后续决定是否添加重试功能
+		}
+	}
+
+	public static class MyHandler extends Handler {
+
+		// WeakReference to the outer class's instance.
+		private WeakReference<ActivityGooglePlayBilling> mOuter;
+
+		public MyHandler(ActivityGooglePlayBilling activity) {
+			mOuter = new WeakReference<ActivityGooglePlayBilling>(activity);
+		}
+
+		@Override
+		public void handleMessage(Message msg) {
+
+			ActivityGooglePlayBilling outer = mOuter.get();
+			if (outer != null) {
+				switch (msg.what) {
+				case HANDLER_SUCECCES:
+					BasesUtils.showMsg(outer, outer.getResources().getString(R.string.google_error_notice6));
+					outer.setResultInfo(BasesConstant.RESULT_SUCCESS, "验证成功，并发钻成功");
+					break;
+				case 0:
+					outer.complain((String) msg.obj);
+					break;
+				case 101:
+					outer.queryInventory();
+					break;
+				case -1:
+					outer.close();
+					break;
+				case -2:
+					BasesUtils.showMsg(outer, (String) msg.obj);
+					break;
+				default:
+					
+					break;
+				}
+			}
+		}
+	}
+    private void setResultInfo(int statusCode, String errorMessage){
+        close();
+    }
+    @Override
+    protected void onResume() {
+		super.onResume();
+    	
+    }
+    // We're being destroyed. It's important to dispose of the helper here!
+    @Override
+    public void onDestroy() {
+		super.onDestroy();
+
+        // very important:
+        BasesUtils.logDebug(TAG, "Destroying helper.");
+        if (mHelper != null) {
+        	try {				
+        		mHelper.dispose();
+			} catch (Exception e) {
+				BasesUtils.logError(TAG, "Google onDestroy() exception:" + e.getMessage());
+			}
+            mHelper = null;
+        }
+    }
+
+    void complain(String message) {
+        BasesUtils.logError(TAG, "**** TrivialDrive Error: " + message);
+//        alert(message);
+        BasesUtils.showMsg(this, message);
+        close();
+	}
+
+	void close(){
+    	setWaitScreen(false);
+        finish();
+		startActivity(new Intent().setClass(this, ActivityOrderDetails.class).putExtra("orderinfo", order));
+    }
+    /**
+     * 当页面被用户关闭后，不再做其他操作
+     */
+    private void isPageCloseHandler(){
+    	myHandler.sendEmptyMessage(-1);
+    	setResultInfo(BasesConstant.RESULT_CANCEL, "用户取消操作");
+    }
+
+}
Index: app/src/main/res/layout/page_capture_input.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/page_capture_input.xml	(revision )
+++ app/src/main/res/layout/page_capture_input.xml	(revision )
@@ -0,0 +1,56 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:orientation="vertical">
+
+    <include layout="@layout/common_head"/>
+
+    <LinearLayout
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:background="@color/common_background_all_page"
+        android:orientation="vertical">
+
+        <TextView android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="@dimen/common_content_margin_10"
+            android:layout_marginBottom="@dimen/common_content_margin_10"
+            android:layout_marginRight="@dimen/common_content_margin_15"
+            android:layout_marginLeft="@dimen/common_content_margin_15"
+            android:text="@string/order_details_id"
+            android:textColor="@color/common_font_color_000000"
+            android:textSize="@dimen/common_font_size_12"
+            android:gravity="center_vertical|right"/>
+        <EditText
+            android:id="@+id/capture_input_edit"
+            android:layout_width="fill_parent"
+            android:layout_height="@dimen/login_style_btn_height"
+            android:layout_marginTop="@dimen/common_content_margin_10"
+            android:layout_marginBottom="@dimen/common_content_margin_10"
+            android:layout_marginRight="@dimen/common_content_margin_50"
+            android:layout_marginLeft="@dimen/common_content_margin_50"
+            android:background="@drawable/common_input_bg"
+            android:hint="@string/capture_scan_text2_3"
+            android:textColor="@color/common_font_color_000000"
+            android:textSize="@dimen/common_font_size_16"
+            android:gravity="right|center_vertical"
+            android:paddingRight="@dimen/common_content_margin_5"
+            android:singleLine="true"
+            android:inputType="number"/>
+        <TextView android:layout_width="match_parent"
+            android:layout_height="@dimen/login_style_btn_height"
+            android:layout_marginTop="@dimen/common_content_margin_10"
+            android:layout_marginBottom="@dimen/common_content_margin_10"
+            android:layout_marginRight="@dimen/common_content_margin_50"
+            android:layout_marginLeft="@dimen/common_content_margin_50"
+            android:background="@drawable/common_button_1_selector"
+            android:text="@string/capture_scan_text2_4"
+            android:textColor="@color/common_font_color_ffffff"
+            android:textSize="@dimen/common_font_size_16"
+            android:gravity="center"
+            android:clickable="true"
+            android:onClick="onClickViewToInput"/>
+    </LinearLayout>
+
+</LinearLayout>
\ No newline at end of file
Index: app/src/main/res/layout/fragment_main_mine_item.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_main_mine_item.xml	(revision )
+++ app/src/main/res/layout/fragment_main_mine_item.xml	(revision )
@@ -0,0 +1,40 @@
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:orientation="vertical">
+
+    <TextView
+            android:layout_width="fill_parent"
+            android:layout_height="2dip"
+            android:background="@color/common_list_item_divide_bg"/>
+    <RelativeLayout
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/common_head_height_size"
+        android:background="@drawable/common_list_item_selector">
+
+        <TextView
+            android:id="@+id/fragment_mine_item_title"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_centerVertical="true"
+            android:layout_alignParentLeft="true"
+            android:layout_marginLeft="@dimen/common_content_margin_20"
+            android:textSize="@dimen/common_font_size_14"
+            android:textColor="@color/common_font_color_000000"
+            android:text="sfsdfsf"/>
+        <TextView
+            android:layout_width="@dimen/common_head_back_height"
+            android:layout_height="@dimen/common_head_back_height"
+            android:layout_centerVertical="true"
+            android:layout_alignParentRight="true"
+            android:layout_marginRight="@dimen/common_content_margin_10"
+            android:background="@mipmap/common_arrow_right"/>
+    </RelativeLayout>
+
+    <TextView
+        android:layout_width="fill_parent"
+        android:layout_height="2dip"
+        android:background="@color/common_list_item_divide_bg"
+        android:layout_marginBottom="@dimen/common_content_margin_10"/>
+
+</LinearLayout>
Index: app/src/main/res/layout/fragment_main_shop_category_item.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_main_shop_category_item.xml	(revision )
+++ app/src/main/res/layout/fragment_main_shop_category_item.xml	(revision )
@@ -0,0 +1,51 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:background="@color/common_font_color_ffffff">
+    <ImageView
+        android:id="@+id/fragment_shop_category_item_image"
+        android:layout_width="@dimen/fragment_shop_category_newest_item_width"
+        android:layout_height="@dimen/fragment_shop_category_newest_item_height"
+        android:scaleType="fitXY"
+        android:layout_centerHorizontal="true"
+        android:background="@mipmap/common_default_bg"/>
+    <TextView
+        android:id="@+id/fragment_shop_category_item_title"
+        android:layout_width="@dimen/fragment_shop_category_newest_item_width"
+        android:layout_height="wrap_content"
+        android:layout_below="@id/fragment_shop_category_item_image"
+        android:singleLine="true"
+        android:ellipsize="end"
+        android:layout_centerHorizontal="true"
+        android:layout_marginTop="@dimen/common_content_margin_5"
+        android:layout_marginBottom="@dimen/common_content_margin_5"
+        android:textSize="@dimen/common_font_size_12"
+        android:textColor="@color/common_font_color_000000"
+        android:gravity="center"
+        android:text="sfds是否是电放费似懂非懂是非得失"/>
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_below="@id/fragment_shop_category_item_title"
+        android:orientation="horizontal"
+        android:gravity="center_horizontal">
+
+        <TextView
+            android:id="@+id/fragment_shop_category_item_diamond"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:textSize="@dimen/common_font_size_14"
+            android:textColor="@color/common_font_color_ff5a00"
+            android:gravity="center"
+            android:text="3000"
+            android:layout_marginRight="@dimen/common_content_margin_5"/>
+        <TextView
+            android:layout_width="@dimen/fragment_shop_category_review_item_diamond_width"
+            android:layout_height="@dimen/fragment_shop_category_review_item_diamond_width"
+            android:background="@mipmap/common_diamond_blue"
+            android:layout_gravity="center_vertical"/>
+    </LinearLayout>
+
+
+</RelativeLayout>
Index: app/src/main/res/values/slidelistview_attrs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/slidelistview_attrs.xml	(revision )
+++ app/src/main/res/values/slidelistview_attrs.xml	(revision )
@@ -0,0 +1,25 @@
+<resources>
+
+    <declare-styleable name="SlideListView">
+        <attr name="slideAnimationTime" format="integer" />
+        <attr name="slideMode" format="enum">
+            <enum name="none" value="0" />
+            <enum name="left" value="1" />
+            <enum name="right" value="2" />
+            <enum name="both" value="3" />
+        </attr>
+        <attr name="slideLeftAction" format="enum">
+            <enum name="scroll" value="0" />
+            <enum name="reveal" value="1" />
+        </attr>
+        <attr name="slideRightAction" format="enum">
+            <enum name="scroll" value="0" />
+            <enum name="reveal" value="1" />
+        </attr>
+    </declare-styleable>
+
+    <item name="slide_id_front_view" type="id"/>
+    <item name="slide_id_left_back_view" type="id"/>
+    <item name="slide_id_right_back_view" type="id"/>
+
+</resources>
\ No newline at end of file
Index: app/src/main/res/layout/row_front_view.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/row_front_view.xml	(revision )
+++ app/src/main/res/layout/row_front_view.xml	(revision )
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/front"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:background="#BBBBBB"
+    android:minHeight="100dp"
+    android:orientation="vertical" >
+
+    <Button
+        android:id="@+id/title"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_centerInParent="true"
+        android:textSize="18sp" />
+
+</RelativeLayout>
\ No newline at end of file
Index: app/src/main/java/com/google/zxing/view/ViewfinderResultPointCallback.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/google/zxing/view/ViewfinderResultPointCallback.java	(revision )
+++ app/src/main/java/com/google/zxing/view/ViewfinderResultPointCallback.java	(revision )
@@ -0,0 +1,34 @@
+/*
+ * Copyright (C) 2009 ZXing authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.zxing.view;
+
+import com.google.zxing.ResultPoint;
+import com.google.zxing.ResultPointCallback;
+
+public final class ViewfinderResultPointCallback implements ResultPointCallback {
+
+  private final ViewfinderView viewfinderView;
+
+  public ViewfinderResultPointCallback(ViewfinderView viewfinderView) {
+    this.viewfinderView = viewfinderView;
+  }
+
+  public void foundPossibleResultPoint(ResultPoint point) {
+    viewfinderView.addPossibleResultPoint(point);
+  }
+
+}
Index: app/src/main/java/com/nineoldandroids/animation/FloatKeyframeSet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nineoldandroids/animation/FloatKeyframeSet.java	(revision )
+++ app/src/main/java/com/nineoldandroids/animation/FloatKeyframeSet.java	(revision )
@@ -0,0 +1,136 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.nineoldandroids.animation;
+
+import android.view.animation.Interpolator;
+
+import com.nineoldandroids.animation.Keyframe.FloatKeyframe;
+
+import java.util.ArrayList;
+
+/**
+ * This class holds a collection of FloatKeyframe objects and is called by ValueAnimator to calculate
+ * values between those keyframes for a given animation. The class internal to the animation
+ * package because it is an implementation detail of how Keyframes are stored and used.
+ *
+ * <p>This type-specific subclass of KeyframeSet, along with the other type-specific subclass for
+ * int, exists to speed up the getValue() method when there is no custom
+ * TypeEvaluator set for the animation, so that values can be calculated without autoboxing to the
+ * Object equivalents of these primitive types.</p>
+ */
+class FloatKeyframeSet extends KeyframeSet {
+    private float firstValue;
+    private float lastValue;
+    private float deltaValue;
+    private boolean firstTime = true;
+
+    public FloatKeyframeSet(FloatKeyframe... keyframes) {
+        super(keyframes);
+    }
+
+    @Override
+    public Object getValue(float fraction) {
+        return getFloatValue(fraction);
+    }
+
+    @Override
+    public FloatKeyframeSet clone() {
+        ArrayList<Keyframe> keyframes = mKeyframes;
+        int numKeyframes = mKeyframes.size();
+        FloatKeyframe[] newKeyframes = new FloatKeyframe[numKeyframes];
+        for (int i = 0; i < numKeyframes; ++i) {
+            newKeyframes[i] = (FloatKeyframe) keyframes.get(i).clone();
+        }
+        FloatKeyframeSet newSet = new FloatKeyframeSet(newKeyframes);
+        return newSet;
+    }
+
+    public float getFloatValue(float fraction) {
+        if (mNumKeyframes == 2) {
+            if (firstTime) {
+                firstTime = false;
+                firstValue = ((FloatKeyframe) mKeyframes.get(0)).getFloatValue();
+                lastValue = ((FloatKeyframe) mKeyframes.get(1)).getFloatValue();
+                deltaValue = lastValue - firstValue;
+            }
+            if (mInterpolator != null) {
+                fraction = mInterpolator.getInterpolation(fraction);
+            }
+            if (mEvaluator == null) {
+                return firstValue + fraction * deltaValue;
+            } else {
+                return ((Number)mEvaluator.evaluate(fraction, firstValue, lastValue)).floatValue();
+            }
+        }
+        if (fraction <= 0f) {
+            final FloatKeyframe prevKeyframe = (FloatKeyframe) mKeyframes.get(0);
+            final FloatKeyframe nextKeyframe = (FloatKeyframe) mKeyframes.get(1);
+            float prevValue = prevKeyframe.getFloatValue();
+            float nextValue = nextKeyframe.getFloatValue();
+            float prevFraction = prevKeyframe.getFraction();
+            float nextFraction = nextKeyframe.getFraction();
+            final /*Time*/Interpolator interpolator = nextKeyframe.getInterpolator();
+            if (interpolator != null) {
+                fraction = interpolator.getInterpolation(fraction);
+            }
+            float intervalFraction = (fraction - prevFraction) / (nextFraction - prevFraction);
+            return mEvaluator == null ?
+                    prevValue + intervalFraction * (nextValue - prevValue) :
+                    ((Number)mEvaluator.evaluate(intervalFraction, prevValue, nextValue)).
+                            floatValue();
+        } else if (fraction >= 1f) {
+            final FloatKeyframe prevKeyframe = (FloatKeyframe) mKeyframes.get(mNumKeyframes - 2);
+            final FloatKeyframe nextKeyframe = (FloatKeyframe) mKeyframes.get(mNumKeyframes - 1);
+            float prevValue = prevKeyframe.getFloatValue();
+            float nextValue = nextKeyframe.getFloatValue();
+            float prevFraction = prevKeyframe.getFraction();
+            float nextFraction = nextKeyframe.getFraction();
+            final /*Time*/Interpolator interpolator = nextKeyframe.getInterpolator();
+            if (interpolator != null) {
+                fraction = interpolator.getInterpolation(fraction);
+            }
+            float intervalFraction = (fraction - prevFraction) / (nextFraction - prevFraction);
+            return mEvaluator == null ?
+                    prevValue + intervalFraction * (nextValue - prevValue) :
+                    ((Number)mEvaluator.evaluate(intervalFraction, prevValue, nextValue)).
+                            floatValue();
+        }
+        FloatKeyframe prevKeyframe = (FloatKeyframe) mKeyframes.get(0);
+        for (int i = 1; i < mNumKeyframes; ++i) {
+            FloatKeyframe nextKeyframe = (FloatKeyframe) mKeyframes.get(i);
+            if (fraction < nextKeyframe.getFraction()) {
+                final /*Time*/Interpolator interpolator = nextKeyframe.getInterpolator();
+                if (interpolator != null) {
+                    fraction = interpolator.getInterpolation(fraction);
+                }
+                float intervalFraction = (fraction - prevKeyframe.getFraction()) /
+                    (nextKeyframe.getFraction() - prevKeyframe.getFraction());
+                float prevValue = prevKeyframe.getFloatValue();
+                float nextValue = nextKeyframe.getFloatValue();
+                return mEvaluator == null ?
+                        prevValue + intervalFraction * (nextValue - prevValue) :
+                        ((Number)mEvaluator.evaluate(intervalFraction, prevValue, nextValue)).
+                            floatValue();
+            }
+            prevKeyframe = nextKeyframe;
+        }
+        // shouldn't get here
+        return ((Number)mKeyframes.get(mNumKeyframes - 1).getValue()).floatValue();
+    }
+
+}
+
Index: app/src/main/res/layout/fragment_main_shop_review.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_main_shop_review.xml	(revision )
+++ app/src/main/res/layout/fragment_main_shop_review.xml	(revision )
@@ -0,0 +1,54 @@
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/main_shop_review"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:orientation="vertical">
+
+    <RelativeLayout
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/fragment_shop_category_height">
+
+        <TextView
+            android:id="@+id/fragment_shop_category_review_img"
+            android:layout_width="@dimen/fragment_shop_category_head_img_height"
+            android:layout_height="@dimen/fragment_shop_category_head_img_height"
+            android:layout_alignParentRight="true"
+            android:layout_centerVertical="true"
+            android:layout_marginRight="@dimen/common_content_margin_10"
+            android:background="@mipmap/fragment_shop_category_review"/>
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_toLeftOf="@id/fragment_shop_category_review_img"
+            android:layout_centerVertical="true"
+            android:layout_marginRight="@dimen/common_content_margin_5"
+            android:gravity="right|center_vertical"
+            android:text="@string/fragment_shop_category_review"
+            android:textSize="@dimen/common_font_size_14"
+            android:textColor="@color/common_font_color_000000"/>
+        <TextView
+            android:id="@+id/fragment_shop_category_review_more"
+            android:layout_width="wrap_content"
+            android:layout_height="fill_parent"
+            android:layout_alignParentLeft="true"
+            android:layout_centerVertical="true"
+            android:paddingLeft="@dimen/common_content_margin_10"
+            android:gravity="right|center_vertical"
+            android:text="@string/fragment_shop_category_more"
+            android:textSize="@dimen/common_font_size_12"
+            android:textColor="@color/common_font_color_000000"
+            android:clickable="true"
+            android:onClick="onClickView"/>
+    </RelativeLayout>
+
+    <ListView
+        android:id="@+id/fragment_shop_category_review_grid"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:background="@color/common_font_color_ffffff"
+        android:listSelector="@drawable/common_list_item_selector"
+        android:divider="@color/common_list_item_divide_bg"
+        android:dividerHeight="2dip"/>
+
+</LinearLayout>
Index: app/src/main/java/com/base/tools/google/SkuDetails.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/google/SkuDetails.java	(revision )
+++ app/src/main/java/com/base/tools/google/SkuDetails.java	(revision )
@@ -0,0 +1,58 @@
+/* Copyright (c) 2012 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.base.tools.google;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+/**
+ * Represents an in-app product's listing details.
+ */
+public class SkuDetails {
+    String mItemType;
+    String mSku;
+    String mType;
+    String mPrice;
+    String mTitle;
+    String mDescription;
+    String mJson;
+
+    public SkuDetails(String jsonSkuDetails) throws JSONException {
+        this(IabHelper.ITEM_TYPE_INAPP, jsonSkuDetails);
+    }
+
+    public SkuDetails(String itemType, String jsonSkuDetails) throws JSONException {
+        mItemType = itemType;
+        mJson = jsonSkuDetails;
+        JSONObject o = new JSONObject(mJson);
+        mSku = o.optString("productId");
+        mType = o.optString("type");
+        mPrice = o.optString("price");
+        mTitle = o.optString("title");
+        mDescription = o.optString("description");
+    }
+
+    public String getSku() { return mSku; }
+    public String getType() { return mType; }
+    public String getPrice() { return mPrice; }
+    public String getTitle() { return mTitle; }
+    public String getDescription() { return mDescription; }
+
+    @Override
+    public String toString() {
+        return "SkuDetails:" + mJson;
+    }
+}
Index: app/src/main/res/layout/activity_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_main.xml	(revision )
+++ app/src/main/res/layout/activity_main.xml	(revision )
@@ -0,0 +1,37 @@
+
+    <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+		xmlns:tools="http://schemas.android.com/tools"
+	    android:layout_width="match_parent"
+	    android:layout_height="match_parent"
+		android:background="@color/common_background_all_page">
+		
+        <LinearLayout 
+            android:id="@+id/main_foot"
+		    android:layout_width="match_parent"
+		    android:layout_height="wrap_content"
+		    android:layout_alignParentBottom="true">
+	        <include layout="@layout/activity_main_foot" />
+        </LinearLayout>
+        
+        <FrameLayout android:layout_width="match_parent"
+	    	android:layout_height="match_parent"
+	    	android:layout_above="@id/main_foot">
+            <FrameLayout
+	            android:id="@+id/main_content"
+			    android:layout_width="match_parent"
+			    android:layout_height="match_parent"
+			    android:orientation="horizontal"/>
+            <android.support.v4.view.ViewPager
+			    android:id="@+id/pager"
+			    android:layout_width="match_parent"
+			    android:layout_height="match_parent"
+			    tools:context="com.oasgames.android.oaspay.activity.ActivityMain" />
+			<include layout="@layout/common_network_error"/>
+        </FrameLayout>
+
+    </RelativeLayout>
+    
+
+
+    
+
Index: app/src/main/java/com/base/tools/http/MultipartRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/http/MultipartRequest.java	(revision )
+++ app/src/main/java/com/base/tools/http/MultipartRequest.java	(revision )
@@ -0,0 +1,113 @@
+package com.base.tools.http;
+
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+import java.util.HashMap;
+import java.util.Map;
+
+import android.util.Log;
+
+import com.mopub.volley.AuthFailureError;
+import com.mopub.volley.DefaultRetryPolicy;
+import com.mopub.volley.NetworkResponse;
+import com.mopub.volley.Request;
+import com.mopub.volley.Response;
+import com.mopub.volley.Response.ErrorListener;
+import com.mopub.volley.Response.Listener;
+import com.mopub.volley.RetryPolicy;
+import com.mopub.volley.toolbox.HttpHeaderParser;
+
+/**
+ * @author mrsimple
+ */
+public class MultipartRequest extends Request<String> {
+
+    MultipartEntity mMultiPartEntity = new MultipartEntity();
+
+    Map<String, String> mHeaders = new HashMap<String, String>();
+
+    private final Listener<String> mListener;
+
+    /**
+     * Creates a new request with the given url.
+     *
+     * @param url URL to fetch the string at
+     * @param listener Listener to receive the String response
+     */
+    public MultipartRequest(String url, Listener<String> listener) {
+        this(url, listener, null);
+    }
+
+    /**
+     * Creates a new POST request.
+     *
+     * @param url URL to fetch the string at
+     * @param listener Listener to receive the String response
+     * @param errorListener Error listener, or null to ignore errors
+     */
+    public MultipartRequest(String url, Listener<String> listener, ErrorListener errorListener) {
+        super(Method.POST, url, errorListener);
+        mListener = listener;
+    }
+
+    /**
+     * @return
+     */
+    public MultipartEntity getMultiPartEntity() {
+        return mMultiPartEntity;
+    }
+
+    @Override
+    public String getBodyContentType() {
+        return mMultiPartEntity.getContentType().getValue();
+    }
+
+    public void addHeader(String key, String value) {
+        mHeaders.put(key, value);
+    }
+
+    @Override
+    public Map<String, String> getHeaders() throws AuthFailureError {
+        return mHeaders;
+    }
+
+    @Override
+    public byte[] getBody() {
+
+        ByteArrayOutputStream bos = new ByteArrayOutputStream();
+        try {
+            // multipart body
+            mMultiPartEntity.writeTo(bos);
+        } catch (IOException e) {
+            Log.e("", "IOException writing to ByteArrayOutputStream");
+        }
+        return bos.toByteArray();
+    }
+
+    @Override
+    protected Response<String> parseNetworkResponse(NetworkResponse response) {
+        String parsed = "";
+        try {
+            parsed = new String(response.data, HttpHeaderParser.parseCharset(response.headers));
+        } catch (UnsupportedEncodingException e) {
+            parsed = new String(response.data);
+        }
+        return Response.success(parsed, HttpHeaderParser.parseCacheHeaders(response));
+    }
+
+    @Override
+    protected void deliverResponse(String response) {
+        if (mListener != null) {
+            mListener.onResponse(response);
+        }
+    }
+	@Override
+	public Priority getPriority() {
+		return Priority.HIGH;
+	}
+//	@Override
+//	public RetryPolicy getRetryPolicy() {
+//		return new DefaultRetryPolicy(30000, 0, 1.0f);
+//	}
+}
\ No newline at end of file
Index: app/src/main/res/drawable/common_list_item_selector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/common_list_item_selector.xml	(revision )
+++ app/src/main/res/drawable/common_list_item_selector.xml	(revision )
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@color/common_list_item_bg_selected" android:state_pressed="true"/>
+    <item android:drawable="@color/common_list_item_bg_selected" android:state_focused="true"/>
+    <item android:drawable="@color/common_list_item_bg_selected" android:state_selected="true"/>
+    <item android:drawable="@color/common_list_item_bg_unselected"/>
+
+</selector>
\ No newline at end of file
Index: app/src/main/res/layout/fragment_main_news.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_main_news.xml	(revision )
+++ app/src/main/res/layout/fragment_main_news.xml	(revision )
@@ -0,0 +1,25 @@
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:orientation="vertical">
+
+        <include layout="@layout/common_head"/>
+
+        <ListView
+            android:id="@+id/main_news_list"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:background="@color/common_font_color_ffffff"
+            android:dividerHeight="2dip"
+            android:divider="@color/common_list_item_divide_bg"
+            android:listSelector="@drawable/common_list_item_selector"/>
+    </LinearLayout>
+    <include layout="@layout/common_waiting_anim" android:id="@+id/main_news_wait"/>
+    <include layout="@layout/common_network_error" android:id="@+id/main_news_network_error"/>
+</FrameLayout>
+
+
Index: app/src/main/java/com/google/zxing/decoding/Intents.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/google/zxing/decoding/Intents.java	(revision )
+++ app/src/main/java/com/google/zxing/decoding/Intents.java	(revision )
@@ -0,0 +1,190 @@
+/*
+ * Copyright (C) 2008 ZXing authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.zxing.decoding;
+
+/**
+ * This class provides the constants to use when sending an Intent to Barcode Scanner.
+ * These strings are effectively API and cannot be changed.
+ */
+public final class Intents {
+  private Intents() {
+  }
+
+  public static final class Scan {
+    /**
+     * Send this intent to open the Barcodes app in scanning mode, find a barcode, and return
+     * the results.
+     */
+    public static final String ACTION = "com.google.zxing.client.android.SCAN";
+
+    /**
+     * By default, sending Scan.ACTION will decode all barcodes that we understand. However it
+     * may be useful to limit scanning to certain formats. Use Intent.putExtra(MODE, value) with
+     * one of the values below ({@link #PRODUCT_MODE}, {@link #ONE_D_MODE}, {@link #QR_CODE_MODE}).
+     * Optional.
+     *
+     * Setting this is effectively shorthnad for setting explicit formats with {@link #SCAN_FORMATS}.
+     * It is overridden by that setting.
+     */
+    public static final String MODE = "SCAN_MODE";
+
+    /**
+     * Comma-separated list of formats to scan for. The values must match the names of
+     * {@link com.google.zxing.BarcodeFormat}s, such as {@link com.google.zxing.BarcodeFormat#EAN_13}.
+     * Example: "EAN_13,EAN_8,QR_CODE"
+     *
+     * This overrides {@link #MODE}.
+     */
+    public static final String SCAN_FORMATS = "SCAN_FORMATS";
+
+    /**
+     * @see com.google.zxing.DecodeHintType#CHARACTER_SET
+     */
+    public static final String CHARACTER_SET = "CHARACTER_SET";
+
+    /**
+     * Decode only UPC and EAN barcodes. This is the right choice for shopping apps which get
+     * prices, reviews, etc. for products.
+     */
+    public static final String PRODUCT_MODE = "PRODUCT_MODE";
+
+    /**
+     * Decode only 1D barcodes (currently UPC, EAN, Code 39, and Code 128).
+     */
+    public static final String ONE_D_MODE = "ONE_D_MODE";
+
+    /**
+     * Decode only QR codes.
+     */
+    public static final String QR_CODE_MODE = "QR_CODE_MODE";
+
+    /**
+     * Decode only Data Matrix codes.
+     */
+    public static final String DATA_MATRIX_MODE = "DATA_MATRIX_MODE";
+
+    /**
+     * If a barcode is found, Barcodes returns RESULT_OK to onActivityResult() of the app which
+     * requested the scan via startSubActivity(). The barcodes contents can be retrieved with
+     * intent.getStringExtra(RESULT). If the user presses Back, the result code will be
+     * RESULT_CANCELED.
+     */
+    public static final String RESULT = "SCAN_RESULT";
+
+    /**
+     * Call intent.getStringExtra(RESULT_FORMAT) to determine which barcode format was found.
+     * See Contents.Format for possible values.
+     */
+    public static final String RESULT_FORMAT = "SCAN_RESULT_FORMAT";
+
+    /**
+     * Setting this to false will not save scanned codes in the history.
+     */
+    public static final String SAVE_HISTORY = "SAVE_HISTORY";
+
+    private Scan() {
+    }
+  }
+
+  public static final class Encode {
+    /**
+     * Send this intent to encode a piece of data as a QR code and display it full screen, so
+     * that another person can scan the barcode from your screen.
+     */
+    public static final String ACTION = "com.google.zxing.client.android.ENCODE";
+
+    /**
+     * The data to encode. Use Intent.putExtra(DATA, data) where data is either a String or a
+     * Bundle, depending on the type and format specified. Non-QR Code formats should
+     * just use a String here. For QR Code, see Contents for details.
+     */
+    public static final String DATA = "ENCODE_DATA";
+
+    /**
+     * The type of data being supplied if the format is QR Code. Use
+     * Intent.putExtra(TYPE, type) with one of Contents.Type.
+     */
+    public static final String TYPE = "ENCODE_TYPE";
+    
+    /**
+     * The barcode format to be displayed. If this isn't specified or is blank, 
+     * it defaults to QR Code. Use Intent.putExtra(FORMAT, format), where
+     * format is one of Contents.Format. 
+     */
+    public static final String FORMAT = "ENCODE_FORMAT";
+
+    private Encode() {
+    }
+  }
+
+  public static final class SearchBookContents {
+    /**
+     * Use Google Book Search to search the contents of the book provided.
+     */
+    public static final String ACTION = "com.google.zxing.client.android.SEARCH_BOOK_CONTENTS";
+
+    /**
+     * The book to search, identified by ISBN number.
+     */
+    public static final String ISBN = "ISBN";
+
+    /**
+     * An optional field which is the text to search for.
+     */
+    public static final String QUERY = "QUERY";
+
+    private SearchBookContents() {
+    }
+  }
+
+  public static final class WifiConnect {
+	    /**
+	     * Internal intent used to trigger connection to a wi-fi network.
+	     */
+	    public static final String ACTION = "com.google.zxing.client.android.WIFI_CONNECT";
+
+	    /**
+	     * The network to connect to, all the configuration provided here.
+	     */
+	    public static final String SSID = "SSID";
+
+	    /**
+	     * The network to connect to, all the configuration provided here.
+	     */
+	    public static final String TYPE = "TYPE";
+
+	    /**
+	     * The network to connect to, all the configuration provided here.
+	     */
+	    public static final String PASSWORD = "PASSWORD";
+
+	    private WifiConnect() {
+	    }
+	  }
+
+
+  public static final class Share {
+    /**
+     * Give the user a choice of items to encode as a barcode, then render it as a QR Code and
+     * display onscreen for a friend to scan with their phone.
+     */
+    public static final String ACTION = "com.google.zxing.client.android.SHARE";
+
+    private Share() {
+    }
+  }
+}
Index: app/src/main/res/raw/realm_properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/raw/realm_properties	(revision )
+++ app/src/main/res/raw/realm_properties	(revision )
@@ -0,0 +1,2 @@
+test: test
+admin: OBF:1u2a1toa1w8v1tok1u30,admin
Index: app/src/main/res/layout/page_news_details.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/page_news_details.xml	(revision )
+++ app/src/main/res/layout/page_news_details.xml	(revision )
@@ -0,0 +1,65 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        android:orientation="vertical" android:layout_width="match_parent"
+        android:layout_height="match_parent">
+        <include layout="@layout/common_head"/>
+        <WebView
+            android:id="@+id/news_details_webview"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"/>
+    </LinearLayout>
+    <LinearLayout
+        android:id="@+id/webview_fuc"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:layout_gravity="bottom"
+        android:background="@color/common_font_color_ffffff">
+        <LinearLayout
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:paddingTop="15dip"
+            android:paddingBottom="15dip"
+            android:onClick="onButtonClick_back"
+            android:layout_weight="1"
+            android:gravity="center">
+            <TextView
+                android:id="@+id/webview_fuc_back"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:background="@mipmap/webview_fuc_back_unable"/>
+        </LinearLayout>
+        <LinearLayout
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:paddingTop="15dip"
+            android:paddingBottom="15dip"
+            android:onClick="onButtonClick_forward"
+            android:layout_weight="1"
+            android:gravity="center">
+            <TextView
+                android:id="@+id/webview_fuc_forward"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:background="@mipmap/webview_fuc_forward_unable"/>
+        </LinearLayout>
+        <LinearLayout
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:paddingTop="15dip"
+            android:paddingBottom="15dip"
+            android:onClick="onButtonClick_refresh"
+            android:layout_weight="1"
+            android:gravity="center">
+            <TextView
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:background="@mipmap/webview_fuc_refresh"/>
+        </LinearLayout>
+
+    </LinearLayout>
+</FrameLayout>
Index: app/src/main/java/com/base/tools/exception/BasesDataErrorException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/exception/BasesDataErrorException.java	(revision )
+++ app/src/main/java/com/base/tools/exception/BasesDataErrorException.java	(revision )
@@ -0,0 +1,16 @@
+package com.base.tools.exception;
+/**
+ * 数据格式异常类
+ * 1、服务端返回的json格式不正确
+ * 2、json缺少某属性
+ * @author xdb
+ *
+ */
+public class BasesDataErrorException extends Exception {
+
+	private static final long serialVersionUID = 5587741930897557887L;
+
+	public BasesDataErrorException(String error) {
+		super(error);
+	}
+}
Index: app/src/main/java/com/base/tools/utils/AESUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/utils/AESUtils.java	(revision )
+++ app/src/main/java/com/base/tools/utils/AESUtils.java	(revision )
@@ -0,0 +1,124 @@
+package com.base.tools.utils;
+
+import com.base.tools.BasesApplication;
+import com.base.tools.entity.PhoneInfo;
+
+import java.security.SecureRandom;
+
+import javax.crypto.Cipher;
+import javax.crypto.KeyGenerator;
+import javax.crypto.SecretKey;
+import javax.crypto.spec.IvParameterSpec;
+import javax.crypto.spec.SecretKeySpec;
+
+/**
+ * @author xdb
+ */
+
+public class AESUtils {
+    public static final String TAG = "AESUtils";
+
+    public static String encrypt(String clearText) {
+    	String seed = PhoneInfo.instance().gamecode+BasesApplication.PUBLICKEY;
+//         Log.d(TAG, "加密前的seed=" + seed + ",内容为:" + clearText);
+        byte[] result = null;
+        try {
+            byte[] rawkey = getRawKey(seed.getBytes());
+            result = encrypt(rawkey, clearText.getBytes());
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        String content = toHex(result);
+//         Log.d(TAG, "加密后的内容为:" + content);
+        return content;
+
+    }
+
+    public static String decrypt(String encrypted) {
+    	String seed = PhoneInfo.instance().gamecode+BasesApplication.PUBLICKEY;
+//         Log.d(TAG, "解密前的seed=" + seed + ",内容为:" + encrypted);
+        byte[] rawKey;
+        try {
+            rawKey = getRawKey(seed.getBytes());
+            byte[] enc = toByte(encrypted);
+            byte[] result = decrypt(rawKey, enc);
+            String coentn = new String(result);
+//             Log.d(TAG, "解密后的内容为:" + coentn);
+            return coentn;
+        } catch (Exception e) {
+            e.printStackTrace();
+            return null;
+        }
+
+    }
+
+    private static byte[] getRawKey(byte[] seed) throws Exception {
+        KeyGenerator kgen = KeyGenerator.getInstance("AES");
+        SecureRandom sr = null;
+        if (android.os.Build.VERSION.SDK_INT >=  17) {
+        	sr = SecureRandom.getInstance("SHA1PRNG", "Crypto");
+        } else {
+        	sr = SecureRandom.getInstance("SHA1PRNG");
+        }
+//        SecureRandom sr = SecureRandom.getInstance("SHA1PRNG");
+        sr.setSeed(seed);
+        kgen.init(128, sr);
+        SecretKey sKey = kgen.generateKey();
+        byte[] raw = sKey.getEncoded();
+
+        return raw;
+    }
+
+    private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {
+        SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
+//        Cipher cipher = Cipher.getInstance("AES");
+         Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
+        cipher.init(Cipher.ENCRYPT_MODE, skeySpec, new IvParameterSpec(
+                new byte[cipher.getBlockSize()]));
+        byte[] encrypted = cipher.doFinal(clear);
+        return encrypted;
+    }
+
+    private static byte[] decrypt(byte[] raw, byte[] encrypted)
+            throws Exception {
+        SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
+//        Cipher cipher = Cipher.getInstance("AES");
+         Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
+        cipher.init(Cipher.DECRYPT_MODE, skeySpec, new IvParameterSpec(
+                new byte[cipher.getBlockSize()]));
+        byte[] decrypted = cipher.doFinal(encrypted);
+        return decrypted;
+    }
+
+    public static String toHex(String txt) {
+        return toHex(txt.getBytes());
+    }
+
+    public static String fromHex(String hex) {
+        return new String(toByte(hex));
+    }
+
+    public static byte[] toByte(String hexString) {
+        int len = hexString.length() / 2;
+        byte[] result = new byte[len];
+        for (int i = 0; i < len; i++)
+            result[i] = Integer.valueOf(hexString.substring(2 * i, 2 * i + 2),
+                    16).byteValue();
+        return result;
+    }
+
+    public static String toHex(byte[] buf) {
+        if (buf == null)
+            return "";
+        StringBuffer result = new StringBuffer(2 * buf.length);
+        for (int i = 0; i < buf.length; i++) {
+            appendHex(result, buf[i]);
+        }
+        return result.toString();
+    }
+
+    private static void appendHex(StringBuffer sb, byte b) {
+        final String HEX = "0123456789ABCDEF";
+        sb.append(HEX.charAt((b >> 4) & 0x0f)).append(HEX.charAt(b & 0x0f));
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/google/zxing/decoding/CaptureActivityHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/google/zxing/decoding/CaptureActivityHandler.java	(revision )
+++ app/src/main/java/com/google/zxing/decoding/CaptureActivityHandler.java	(revision )
@@ -0,0 +1,132 @@
+/*
+ * Copyright (C) 2008 ZXing authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.zxing.decoding;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.util.Log;
+
+import com.base.tools.utils.BasesUtils;
+import com.google.zxing.BarcodeFormat;
+import com.google.zxing.camera.CameraManager;
+import com.google.zxing.view.ViewfinderResultPointCallback;
+import com.oasgames.android.oaspay.activity.ActivityCapture;
+
+import java.util.Vector;
+
+/**
+ * This class handles all the messaging which comprises the state machine for capture.
+ */
+public final class CaptureActivityHandler extends Handler {
+
+  private static final String TAG = CaptureActivityHandler.class.getSimpleName();
+
+  private final ActivityCapture activity;
+  private final DecodeThread decodeThread;
+  private State state;
+
+  private enum State {
+    PREVIEW,
+    SUCCESS,
+    DONE
+  }
+
+  public CaptureActivityHandler(ActivityCapture activity, Vector<BarcodeFormat> decodeFormats,
+      String characterSet) {
+    this.activity = activity;
+    decodeThread = new DecodeThread(activity, decodeFormats, characterSet,
+        new ViewfinderResultPointCallback(activity.getViewfinderView()));
+    decodeThread.start();
+    state = State.SUCCESS;
+    // Start ourselves capturing previews and decoding.
+    CameraManager.get().startPreview();
+    restartPreviewAndDecode();
+  }
+
+  @Override
+  public void handleMessage(Message message) {
+	  if(message.what == BasesUtils.getResourceValue("id", "com_google_zxing_auto_focus")){
+        //Log.d(TAG, "Got auto-focus message");
+        // When one auto focus pass finishes, start another. This is the closest thing to
+        // continuous AF. It does seem to hunt a bit, but I'm not sure what else to do.
+        if (state == State.PREVIEW) {
+          CameraManager.get().requestAutoFocus(this, BasesUtils.getResourceValue("id", "com_google_zxing_auto_focus"));
+        }
+	  }else if(message.what == BasesUtils.getResourceValue("id", "com_google_zxing_restart_preview")){
+        Log.d(TAG, "Got restart preview message");
+        restartPreviewAndDecode();
+	  }else if(message.what == BasesUtils.getResourceValue("id", "com_google_zxing_decode_succeeded")){
+        Log.d(TAG, "Got decode succeeded message");
+        state = State.SUCCESS;
+        Bundle bundle = message.getData();
+        
+        /***********************************************************************/
+//        Bitmap barcode = bundle == null ? null :
+//            (Bitmap) bundle.getParcelable(DecodeThread.BARCODE_BITMAP);
+        
+//        activity.handleDecode((Result) message.obj, barcode);
+        activity.handleDecode((com.google.zxing.Result) message.obj, null);
+        /***********************************************************************/
+	  }else if(message.what == BasesUtils.getResourceValue("id", "com_google_zxing_decode_failed")){
+        // We're decoding as fast as possible, so when one decode fails, start another.
+        state = State.PREVIEW;
+        CameraManager.get().requestPreviewFrame(decodeThread.getHandler(), BasesUtils.getResourceValue("id", "com_google_zxing_decode"));
+	  }else if(message.what == BasesUtils.getResourceValue("id", "com_google_zxing_return_scan_result")){
+        Log.d(TAG, "Got return scan result message");
+        activity.setResult(Activity.RESULT_OK, (Intent) message.obj);
+        activity.finish();
+	  }else if(message.what == BasesUtils.getResourceValue("id", "com_google_zxing_launch_product_query")){
+        Log.d(TAG, "Got product query message");
+        String url = (String) message.obj;
+        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
+        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);
+        activity.startActivity(intent);
+	  }else if(message.what == 123123){
+          restartPreviewAndDecode();
+      }
+  }
+
+  public void quitSynchronously() {
+    state = State.DONE;
+    CameraManager.get().stopPreview();
+    Message quit = Message.obtain(decodeThread.getHandler(), BasesUtils.getResourceValue("id", "com_google_zxing_quit"));
+    quit.sendToTarget();
+    try {
+      decodeThread.join();
+    } catch (InterruptedException e) {
+      // continue
+    }
+
+    // Be absolutely sure we don't send any queued up messages
+    removeMessages(BasesUtils.getResourceValue("id", "com_google_zxing_decode_succeeded"));
+    removeMessages(BasesUtils.getResourceValue("id", "com_google_zxing_decode_failed"));
+  }
+
+  private void restartPreviewAndDecode() {
+    if (state == State.SUCCESS) {
+      state = State.PREVIEW;
+      CameraManager.get().requestPreviewFrame(decodeThread.getHandler(), BasesUtils.getResourceValue("id", "com_google_zxing_decode"));
+      CameraManager.get().requestAutoFocus(this, BasesUtils.getResourceValue("id", "com_google_zxing_auto_focus"));
+      activity.drawViewfinder();
+    }
+  }
+
+}
Index: app/src/main/res/values/ids.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/ids.xml	(revision )
+++ app/src/main/res/values/ids.xml	(revision )
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ Copyright (C) 2008 ZXing authors
+
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+ -->
+<resources>
+  <!-- Messages IDs -->
+  <item type="id" name="com_google_zxing_auto_focus"/>
+  <item type="id" name="com_google_zxing_decode"/>
+  <item type="id" name="com_google_zxing_decode_failed"/>
+  <item type="id" name="com_google_zxing_decode_succeeded"/>
+  <item type="id" name="com_google_zxing_encode_failed"/>
+  <item type="id" name="com_google_zxing_encode_succeeded"/>
+  <item type="id" name="com_google_zxing_launch_product_query"/>
+  <item type="id" name="com_google_zxing_quit"/>
+  <item type="id" name="com_google_zxing_restart_preview"/>
+  <item type="id" name="com_google_zxing_return_scan_result"/>
+</resources>
Index: app/src/main/java/com/nineoldandroids/animation/TypeEvaluator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nineoldandroids/animation/TypeEvaluator.java	(revision )
+++ app/src/main/java/com/nineoldandroids/animation/TypeEvaluator.java	(revision )
@@ -0,0 +1,44 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.nineoldandroids.animation;
+
+/**
+ * Interface for use with the {@link ValueAnimator#setEvaluator(TypeEvaluator)} function. Evaluators
+ * allow developers to create animations on arbitrary property types, by allowing them to supply
+ * custom evaulators for types that are not automatically understood and used by the animation
+ * system.
+ *
+ * @see ValueAnimator#setEvaluator(TypeEvaluator)
+ */
+public interface TypeEvaluator<T> {
+
+    /**
+     * This function returns the result of linearly interpolating the start and end values, with
+     * <code>fraction</code> representing the proportion between the start and end values. The
+     * calculation is a simple parametric calculation: <code>result = x0 + t * (v1 - v0)</code>,
+     * where <code>x0</code> is <code>startValue</code>, <code>x1</code> is <code>endValue</code>,
+     * and <code>t</code> is <code>fraction</code>.
+     *
+     * @param fraction   The fraction from the starting to the ending values
+     * @param startValue The start value.
+     * @param endValue   The end value.
+     * @return A linear interpolation between the start and end values, given the
+     *         <code>fraction</code> parameter.
+     */
+    public T evaluate(float fraction, T startValue, T endValue);
+
+}
\ No newline at end of file
Index: app/src/main/java/com/oasgames/android/oaspay/service/HttpService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/service/HttpService.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/service/HttpService.java	(revision )
@@ -0,0 +1,894 @@
+package com.oasgames.android.oaspay.service;
+
+import android.util.Log;
+
+import com.base.tools.BasesApplication;
+import com.base.tools.entity.MemberBaseInfo;
+import com.base.tools.entity.PhoneInfo;
+import com.base.tools.exception.BasesDataErrorException;
+import com.base.tools.exception.BasesNetworkErrorException;
+import com.base.tools.google.Purchase;
+import com.base.tools.http.CallbackResultForActivity;
+import com.base.tools.json.BasesJsonParser;
+import com.base.tools.service.BasesDao;
+import com.base.tools.service.BasesServiceLogin;
+import com.base.tools.utils.BasesConstant;
+import com.base.tools.utils.BasesUtils;
+import com.base.tools.utils.MD5Encrypt;
+import com.mopub.volley.Response;
+import com.mopub.volley.VolleyError;
+import com.oasgames.android.oaspay.activity.MyApplication;
+import com.oasgames.android.oaspay.entity.AppVersionInfo;
+import com.oasgames.android.oaspay.entity.NewsInfo;
+import com.oasgames.android.oaspay.entity.NewsList;
+import com.oasgames.android.oaspay.entity.OrderInfo;
+import com.oasgames.android.oaspay.entity.OrderList;
+import com.oasgames.android.oaspay.entity.PayHistoryInfoDetail;
+import com.oasgames.android.oaspay.entity.PayHistoryList;
+import com.oasgames.android.oaspay.entity.PayInfoDetail;
+import com.oasgames.android.oaspay.entity.PayInfoList;
+import com.oasgames.android.oaspay.entity.ProductInfo;
+import com.oasgames.android.oaspay.entity.ProductList;
+import com.oasgames.android.oaspay.entity.ReportMdataInfo;
+import com.oasgames.android.oaspay.entity.SearchKeywordInfo;
+import com.oasgames.android.oaspay.entity.ServerInfo;
+import com.oasgames.android.oaspay.entity.ShopFocus;
+import com.oasgames.android.oaspay.entity.ShopList;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.UnsupportedEncodingException;
+import java.net.URLEncoder;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * http service
+ * 处理请求参数
+ * 处理请求结果
+ * @author Xdb
+ * 
+ */
+public class HttpService {
+	private static final String SPLITCHAR = "OASUSER";// 分隔符，避免截取出错
+	private final static String TAG = "OAS_HttpService";
+	private final static HttpService HTTP_SERVICE = new HttpService();
+
+	private HttpService() {
+	}
+
+	/**
+	 * @return 返回逻辑的实例.
+	 */
+	public static HttpService instance() {
+
+		return HTTP_SERVICE;
+	}
+
+	/**
+	 * 注册新用户
+	 * @param username	
+	 * @param password	
+	 * @return  成功	{status:"ok",uid:"20000000012345678",type:”2”,token:"690c122e35e2681fb34f9fef236396d0"}；type=1 是免注册用户，type=2 是正常用户
+	 * 			失败     {status:"fail",error:"错误编号",err_msg:”错误描述”}
+	 * @throws JSONException 
+	 * @throws BasesNetworkErrorException
+	 * @throws BasesDataErrorException
+	 * @throws UnsupportedEncodingException 
+	 */
+	public void register(String username, String password, CallbackResultForActivity callback){
+		
+		StringBuffer url = new StringBuffer("a=Regist&m=NewUser");
+
+		url.append("&username="+username);
+		try {
+			url.append("&password="+URLEncoder.encode(password, "UTF-8"));
+		} catch (UnsupportedEncodingException e) {
+			url.append("&password="+password);
+		}
+
+		url.append("&sign=" + MD5Encrypt.StringToMD5(BasesUtils.getMobileCode() + PhoneInfo.instance().gamecode + username + password + BasesApplication.PUBLICKEY));
+
+		new BasesServiceLogin().register(url, username, password, callback);
+	}
+
+	/**
+	 * 使用Token登录
+	 * @param callback
+	 */
+	public void loginByToken(CallbackResultForActivity callback){
+		new BasesServiceLogin().loginWithRecentlyToken(getUrl("a=Login&m=AutoLogin"), callback);
+	}
+	/**
+	 * 登录和注册
+	 * @param username			usertype=1时，传手机唯一码
+								usertype=2时，玩家输入的OAS平台账号（邮箱格式）
+								usertype=3时，传入第三方的平台代码，例如facebook、twiiter、google
+	 * @param password			usertype=2时，玩家输入的密码，
+								usertype=3时，传入第三方的平台token
+	 * @return  成功	{status:"ok",uid:"20000000012345678",type:”2”,token:"690c122e35e2681fb34f9fef236396d0"}；type=1 是免注册用户，type=2 是正常用户
+	 * 			失败     {status:"fail",error:"错误编号",err_msg:”错误描述”}
+	 * 				err_msg:	-1	签名未通过
+	 * 							-2	OAS用户名或密码错误
+	 * 							-3	注册的username已经存在
+	 * 							-4	未知错误
+	 * 							-5	oas_token过期
+	 * @throws BasesNetworkErrorException
+	 * @throws BasesDataErrorException
+	 */
+	public void login(String platform, String username, String password, String oasNickName, CallbackResultForActivity callback){
+		
+		StringBuffer url = getUrl("a=Login&m=UserLogin");
+		int userType = 0;
+		if(platform.equals(MemberBaseInfo.USER_NONE)) {
+			userType = 0;
+			url.append("&sign="+MD5Encrypt.StringToMD5(BasesUtils.getMobileCode()+PhoneInfo.instance().gamecode+userType+BasesApplication.PUBLICKEY));
+		}else if(platform.equals(MemberBaseInfo.USER_REGISTED)) {
+			userType = 1;
+			url.append("&username=" + username);
+			try {
+				url.append("&password=" + URLEncoder.encode(password, "UTF-8"));
+			} catch (UnsupportedEncodingException e) {
+				url.append("&password=" + password);
+			}
+			url.append("&sign=" + MD5Encrypt.StringToMD5(BasesUtils.getMobileCode() + PhoneInfo.instance().gamecode + userType + username + password + BasesApplication.PUBLICKEY));
+		}else {
+			userType = 2;
+			url.append("&platform="+platform);
+			url.append("&platform_token="+password);
+
+			url.append("&sign="+MD5Encrypt.StringToMD5(BasesUtils.getMobileCode()+PhoneInfo.instance().gamecode+userType+platform+BasesApplication.PUBLICKEY));
+		}
+
+		url.append("&usertype=" + userType);
+
+
+		new BasesServiceLogin().login(url, platform, username, password, oasNickName, callback);
+	}
+	
+
+	/**
+	 * 修改密码
+	 * @throws BasesNetworkErrorException
+	 * @throws BasesDataErrorException
+	 */
+	public void modifyPwd(String password, String newPwd, String newPwd_repeat, CallbackResultForActivity callBack) throws BasesNetworkErrorException, BasesDataErrorException {
+		StringBuffer url = new StringBuffer("a=Login&m=Updatepasswd");
+		url.append("&username="+BasesApplication.userInfo.username);
+		try {
+			url.append("&password="+URLEncoder.encode(password, "UTF-8"));
+		} catch (UnsupportedEncodingException e) {
+			url.append("&password="+password);
+		}
+		try {
+			url.append("&newpassword="+URLEncoder.encode(newPwd, "UTF-8"));
+		} catch (UnsupportedEncodingException e) {
+			url.append("&newpassword="+newPwd);
+		}
+		try {
+			url.append("&newpassword_repeat="+URLEncoder.encode(newPwd_repeat, "UTF-8"));
+		} catch (UnsupportedEncodingException e) {
+			url.append("&newpassword_repeat="+newPwd_repeat);
+		}
+		url.append("&sign=" + MD5Encrypt.StringToMD5(BasesApplication.userInfo.username + password + BasesApplication.PUBLICKEY));
+		new BasesServiceLogin().modifyPwd(url, newPwd, callBack);
+	}
+
+	/**
+	 * 检查应用版本
+	 * @param callback
+	 */
+	public void checkAppVersion(final CallbackResultForActivity callback){
+		new BasesDao().post(getUrl("a=system&m=version").toString(), null, new Response.Listener<String>() {
+			@Override
+			public void onResponse(String s) {
+				boolean status = isSuccess("checkAppVersion", s, callback);
+				if (!status)
+					return;
+
+				AppVersionInfo app = new AppVersionInfo();
+				try {
+					// 解析json
+					BasesJsonParser.newInstance().parserJson2Obj(new JSONObject(s).get("version").toString(), app);
+				} catch (Exception e) {
+					callback.fail(BasesConstant.RESULT_FAIL_DATAERROR, "");
+					return;
+				}
+				callback.success(app, BasesConstant.RESULT_SUCCESS, s);
+
+			}
+		}, new Response.ErrorListener() {
+			@Override
+			public void onErrorResponse(VolleyError volleyError) {
+				callback.exception(new BasesNetworkErrorException(""));
+			}
+		});
+	}
+
+	/**
+	 * 获取默认搜索关键词
+	 * @param callback
+	 */
+	public void getSearchKeyword(final CallbackResultForActivity callback){
+		StringBuffer url = getUrl("a=Product&m=GetKeywords");
+		url.append("&sign="+MD5Encrypt.StringToMD5(PhoneInfo.instance().gamecode+BasesApplication.PUBLICKEY));
+
+		new BasesDao().post(url.toString(), null, new Response.Listener<String>() {
+			@Override
+			public void onResponse(String s) {
+				boolean status = isSuccess("getSearchKeyword", s, callback);
+//
+				if (!status)
+					return;
+//
+				SearchKeywordInfo ki = new SearchKeywordInfo();
+				List list = new ArrayList();
+				try{
+					// 解析json
+					list = BasesJsonParser.newInstance().parserJSONObj2ObjList(s, ki, "keywords_list");
+				}catch (Exception e){
+					callback.fail(BasesConstant.RESULT_FAIL_DATAERROR, "");
+					return;
+				}
+				callback.success(list, BasesConstant.RESULT_SUCCESS, s);
+
+			}
+		}, new Response.ErrorListener() {
+			@Override
+			public void onErrorResponse(VolleyError volleyError) {
+				callback.exception(new BasesNetworkErrorException(""));
+			}
+		});
+	}
+	/**
+	 * 获取商城页面所有数据
+	 * @param callback
+	 */
+	public void getShopInfo(final CallbackResultForActivity callback){
+		StringBuffer url = getUrl("a=Product&m=Index");
+		url.append("&sign="+MD5Encrypt.StringToMD5(PhoneInfo.instance().mobilecode+PhoneInfo.instance().gamecode+BasesApplication.PUBLICKEY));
+
+		new BasesDao().post(url.toString(), null, new Response.Listener<String>() {
+			@Override
+			public void onResponse(String s) {
+				boolean status = isSuccess("getShopInfo", s, callback);
+
+				if(!status)
+					return;
+
+				ShopList list = new ShopList();
+				try {
+					JSONObject o = new JSONObject(s);
+					if(o.has("focus_img")){
+						list.setFocusList(BasesJsonParser.newInstance().parserJSON2ObjList(o.getString("focus_img"), new ShopFocus()));
+					}
+					if(o.has("new_product")){
+						list.setNewestList(BasesJsonParser.newInstance().parserJSON2ObjList(o.getString("new_product"), new ProductInfo()));
+					}
+					if(o.has("hot_product")){
+						list.setHotList(BasesJsonParser.newInstance().parserJSON2ObjList(o.getString("hot_product"), new ProductInfo()));
+					}
+					if(o.has("browse_product")){
+						list.setBrowseList(BasesJsonParser.newInstance().parserJSON2ObjList(o.getString("browse_product"), new ProductInfo()));
+					}
+
+				}catch (Exception e){
+					BasesUtils.logError(TAG, "getShopInfo Json解析出错。" + e.getMessage());
+				}
+
+				// 解析json
+				callback.success(list, BasesConstant.RESULT_SUCCESS, s);
+
+			}
+		}, new Response.ErrorListener() {
+			@Override
+			public void onErrorResponse(VolleyError volleyError) {
+				callback.exception(new BasesNetworkErrorException(""));
+			}
+		});
+	}
+
+	/**
+	 * 根据条件，获取商品列表（含 搜索列表、商城中商品列表、）
+	 * @param product_type		商品类型 1为最新上架 2为热门推荐 3为最近浏览
+	 * @param keyword		关键词
+	 * @param pageNo		当前页号
+	 * @param pageSize		每页条数
+	 * @param callback		回调
+	 */
+	public void getProductList(String product_type, String keyword, int pageNo, int pageSize, final CallbackResultForActivity callback){
+		StringBuffer sb = getUrl("a=Product&m=ProductList");
+//		if(!TextUtils.isEmpty(product_type) && !"null".equals(product_type))//不区分此参数
+//			sb.append("&product_type="+product_type);
+
+		try{
+			sb.append("&keywords="+URLEncoder.encode(keyword, "UTF-8"));
+		}catch (Exception e){}
+		sb.append("&cur_page="+pageNo);
+		sb.append("&every_page_count="+pageSize);
+		sb.append("&sign="+MD5Encrypt.StringToMD5(PhoneInfo.instance().gamecode+MyApplication.PUBLICKEY));
+
+		new BasesDao().post(sb.toString(), null, new Response.Listener<String>() {
+			@Override
+			public void onResponse(String s) {
+				boolean status = isSuccess("getProductList", s, callback);
+
+				if(!status)
+					return;
+
+				ProductList list = new ProductList();
+				try {
+					BasesJsonParser.newInstance().parserJson2Obj(s, list);
+					list.list = BasesJsonParser.newInstance().parserJSONObj2ObjList(s, new ProductInfo(), "product_list");
+				}catch (Exception e){
+					BasesUtils.logError(TAG, "getProductList 数据解析错误。"+e.getMessage());
+					callback.fail(BasesConstant.RESULT_FAIL_DATAERROR, "");
+				}
+				// 解析json
+				callback.success(list, BasesConstant.RESULT_SUCCESS, s);
+			}
+		}, new Response.ErrorListener() {
+			@Override
+			public void onErrorResponse(VolleyError volleyError) {
+				callback.exception(new BasesNetworkErrorException(""));
+			}
+		});
+	}
+
+	/**
+	 * 根据商品ID获取详细信息
+	 * @param id
+	 * @param callback
+	 */
+	public void getProductDetails(String id, final CallbackResultForActivity callback){
+		StringBuffer sb = getUrl("a=Product&m=ProductInfo");
+		sb.append("&product_id="+id);
+		sb.append("&sign="+MD5Encrypt.StringToMD5(id + MyApplication.PUBLICKEY));
+		new BasesDao().post(sb.toString(), null, new Response.Listener<String>() {
+			@Override
+			public void onResponse(String s) {
+				boolean status = isSuccess("getProductDetails", s, callback);
+
+				if(!status)
+					return;
+
+				ProductInfo info = null;
+				try {
+					info = new ProductInfo();
+					BasesJsonParser.newInstance().parserJson2Obj(s, info);
+				}catch (Exception e){
+					BasesUtils.logError(TAG, "getProductDetails 数据解析错误。" + e.getMessage());
+					callback.fail(BasesConstant.RESULT_FAIL_DATAERROR, "");
+				}
+				// 解析json
+				callback.success(info, BasesConstant.RESULT_SUCCESS, s);
+			}
+		}, new Response.ErrorListener() {
+			@Override
+			public void onErrorResponse(VolleyError volleyError) {
+				callback.exception(new BasesNetworkErrorException(""));
+			}
+		});
+	}
+
+	/**
+	 * 交易前，先下订单
+	 * @param productid 	应用内商品id
+	 * @param serverid		 	服id
+	 * @param servername		 服名称
+	 * @param rolename		 	角色名
+	 * @param orderType		 	订单类型
+	 *
+	 * @throws BasesNetworkErrorException
+	 */
+	public void sendOrder(String productid, String serverid, String servername, String rolename ,String orderType,final CallbackResultForActivity callback){
+		StringBuffer url = getUrl("a=Order&m=PlaceOrder");
+		url.append("&uid="+BasesApplication.userInfo.uid);
+		url.append("&product_id="+productid);
+		url.append("&server_id="+serverid);
+		url.append("&server_name="+servername);
+		url.append("&rolename="+rolename);
+		url.append("&order_type="+orderType);
+		url.append("&sign="+MD5Encrypt.StringToMD5(PhoneInfo.instance().gamecode+productid+BasesApplication.PUBLICKEY));
+
+		new BasesDao().post(url.toString(), null, new Response.Listener<String>() {
+			@Override
+			public void onResponse(String s) {
+				boolean flag = isSuccess("sendOrder", s, callback);
+				if(!flag)
+					return;
+
+				OrderInfo info = new OrderInfo();
+				try {
+					BasesJsonParser.newInstance().parserJson2Obj(s, info);
+				}catch (Exception e){
+					callback.fail(BasesConstant.RESULT_FAIL_DATAERROR, "");
+				}
+				callback.success(info, BasesConstant.RESULT_SUCCESS, "");
+			}
+		}, new Response.ErrorListener() {
+			@Override
+			public void onErrorResponse(VolleyError volleyError) {
+				callback.exception(new BasesNetworkErrorException(""));
+			}
+		});
+
+	}
+	/**
+	 * 获取订单列表
+	 * @param type		订单类型（历史订单、当月订单）
+	 * @param pageNo	当前页号
+	 * @param pageSize	每页记录数
+	 * @param callback	回调
+	 */
+	public void getOrderList(int type, final int pageNo, final int pageSize, final CallbackResultForActivity callback){
+		StringBuffer sb = getUrl("a=Order&m=OrderList");
+		sb.append("&uid="+BasesApplication.userInfo.uid);
+		sb.append("&date_type="+type);
+		sb.append("&cur_page="+pageNo);
+		sb.append("&every_page_count="+pageSize);
+		sb.append("&sign="+MD5Encrypt.StringToMD5(BasesApplication.userInfo.uid+PhoneInfo.instance().gamecode+MyApplication.PUBLICKEY));
+		new BasesDao().post(sb.toString(), null, new Response.Listener<String>() {
+			@Override
+			public void onResponse(String s) {
+				boolean flag = isSuccess("getOrderList", s, callback);
+				if(!flag)
+					return;
+
+				OrderList list = new OrderList();
+				try {
+					BasesJsonParser.newInstance().parserJson2Obj(s, list);
+					list.list = BasesJsonParser.newInstance().parserJSONObj2ObjList(s, new OrderInfo(), "order_list");
+				}catch (Exception e){
+					callback.fail(BasesConstant.RESULT_FAIL_DATAERROR, s);
+					return;
+				}
+				// 解析json
+				callback.success(list, BasesConstant.RESULT_SUCCESS, s);
+			}
+		}, new Response.ErrorListener() {
+			@Override
+			public void onErrorResponse(VolleyError volleyError) {
+				callback.exception(new BasesNetworkErrorException(""));
+			}
+		});
+	}
+	public void getOrderInfoByID(String orderId, final CallbackResultForActivity callback){
+		StringBuffer sb = getUrl("a=Order&m=OrderInfo");
+		sb.append("&uid="+BasesApplication.userInfo.uid);
+		sb.append("&order_id="+orderId);
+		sb.append("&sign="+MD5Encrypt.StringToMD5(BasesApplication.userInfo.uid+orderId+MyApplication.PUBLICKEY));
+		new BasesDao().post(sb.toString(), null, new Response.Listener<String>() {
+			@Override
+			public void onResponse(String s) {
+				boolean flag = isSuccess("getOrderInfoByID", s, callback);
+				if(!flag)
+					return;
+				OrderInfo info = null;
+				try {
+					info = new OrderInfo();
+					BasesJsonParser.newInstance().parserJson2Obj(s, info);
+				}catch (Exception e){
+					callback.fail(BasesConstant.RESULT_FAIL_DATAERROR, "");
+				}
+				callback.success(info, BasesConstant.RESULT_SUCCESS, "");
+			}
+		}, new Response.ErrorListener() {
+			@Override
+			public void onErrorResponse(VolleyError volleyError) {
+				callback.exception(new BasesNetworkErrorException(""));
+			}
+		});
+	}
+	public void getOrderInfoByQR(String data, final CallbackResultForActivity callback){
+		StringBuffer sb = getUrl("a=Order&m=QrcodePlaceOrder");
+		sb.append("&uid="+BasesApplication.userInfo.uid);//"100002155542648");//
+		try{
+			sb.append("&order_info="+ URLEncoder.encode(data, "UTF-8"));
+		}catch (Exception e){}
+
+		sb.append("&sign="+MD5Encrypt.StringToMD5(BasesApplication.userInfo.uid+MyApplication.PUBLICKEY));
+		new BasesDao().post(sb.toString(), null, new Response.Listener<String>() {
+			@Override
+			public void onResponse(String s) {
+				OrderInfo info = null;
+				try {
+					JSONObject o = new JSONObject(s);
+					if(!"ok".equalsIgnoreCase(o.getString("status"))){
+						callback.fail(BasesConstant.RESULT_FAIL_DATAERROR, o.getString("error"));
+						return;
+					}
+					info = new OrderInfo();
+					BasesJsonParser.newInstance().parserJson2Obj(s, info);
+				}catch (Exception e){
+					callback.fail(BasesConstant.RESULT_FAIL_DATAERROR, "");
+				}
+				callback.success(info, BasesConstant.RESULT_SUCCESS, "");
+			}
+		}, new Response.ErrorListener() {
+			@Override
+			public void onErrorResponse(VolleyError volleyError) {
+				callback.exception(new BasesNetworkErrorException(""));
+			}
+		});
+	}
+	public void getOrderInfoByInput(String orderid, final CallbackResultForActivity callback){// 手动输入订单号
+		StringBuffer sb = getUrl("a=Order&m=InputPlaceOrder");
+		sb.append("&uid="+BasesApplication.userInfo.uid);//"100002155542648");//
+		sb.append("&order_id="+ orderid);
+
+		sb.append("&sign="+MD5Encrypt.StringToMD5(BasesApplication.userInfo.uid+MyApplication.PUBLICKEY));
+		new BasesDao().post(sb.toString(), null, new Response.Listener<String>() {
+			@Override
+			public void onResponse(String s) {
+				OrderInfo info = null;
+				try {
+					JSONObject o = new JSONObject(s);
+					if(!"ok".equalsIgnoreCase(o.getString("status"))){
+						callback.fail(BasesConstant.RESULT_FAIL_DATAERROR, o.getString("error"));
+						return;
+					}
+					info = new OrderInfo();
+					BasesJsonParser.newInstance().parserJson2Obj(s, info);
+				}catch (Exception e){
+					callback.fail(BasesConstant.RESULT_FAIL_DATAERROR, "");
+				}
+				callback.success(info, BasesConstant.RESULT_SUCCESS, "");
+			}
+		}, new Response.ErrorListener() {
+			@Override
+			public void onErrorResponse(VolleyError volleyError) {
+				callback.exception(new BasesNetworkErrorException(""));
+			}
+		});
+	}
+	public void deleteOrderByID(String id, String type, final CallbackResultForActivity callback){
+		StringBuffer sb = getUrl("a=Order&m=OrderStatus");
+		sb.append("&uid="+BasesApplication.userInfo.uid);
+		sb.append("&order_id="+id);
+		sb.append("&operate_type="+type);
+		sb.append("&sign="+MD5Encrypt.StringToMD5(BasesApplication.userInfo.uid+id+MyApplication.PUBLICKEY));
+		new BasesDao().post(sb.toString(), null, new Response.Listener<String>() {
+			@Override
+			public void onResponse(String s) {
+				boolean flag = isSuccess("deleteOrderByID", s, callback);
+				if(!flag)
+					return;
+				callback.success("true", BasesConstant.RESULT_SUCCESS, "");
+			}
+		}, new Response.ErrorListener() {
+			@Override
+			public void onErrorResponse(VolleyError volleyError) {
+				callback.exception(new BasesNetworkErrorException(""));
+			}
+		});
+	}
+	/**
+	 * 获取资讯列表
+	 * @param pageNo
+	 * @param pageSize
+	 * @param callback
+	 */
+	public void getNewsList(final int pageNo, final int pageSize, final CallbackResultForActivity callback){
+		StringBuffer url = getUrl("a=system&m=Getnewlist");
+		url.append("&cur_page="+pageNo);
+		url.append("&every_page_count="+pageSize);
+		url.append("&sign="+MD5Encrypt.StringToMD5(PhoneInfo.instance().gamecode+pageNo+pageSize+MyApplication.PUBLICKEY));
+		new BasesDao().post(url.toString(), null, new Response.Listener<String>() {
+			@Override
+			public void onResponse(String s) {
+				boolean flag = isSuccess("getNewsList", s, callback);
+				if(!flag)
+					return;
+
+				NewsList list = new NewsList();
+				try {
+					BasesJsonParser.newInstance().parserJson2Obj(s, list);
+					list.list = BasesJsonParser.newInstance().parserJSONObj2ObjList(s, new NewsInfo(), "new_list");
+				}catch (Exception e){
+					callback.fail(BasesConstant.RESULT_FAIL_DATAERROR, s);
+					return;
+				}
+				// 解析json
+				callback.success(list, BasesConstant.RESULT_SUCCESS, s);
+			}
+		}, new Response.ErrorListener() {
+			@Override
+			public void onErrorResponse(VolleyError volleyError) {
+				callback.exception(new BasesNetworkErrorException(""));
+			}
+		});
+	}
+
+	/**
+	 * 提交服务器验证支付是否成功，(发游戏币)
+	 * @throws BasesNetworkErrorException
+	 * 
+	 * return int  
+	 * 			1000000:成功，
+	 * 			1000001:验证信息错误（key无效）
+	 * 			1000002:该购买交易成功并且已发钻成功
+	 * 			1000003:支付完成，验证连接失败-连接超时或者无法连接上Google服务器，
+	 * 			1000004：ProductID错误—一般不会出现BUG
+	 * 			1000005:支付成功，但是发钻不成功，
+	 * 			1000100:未知错误，
+	 */
+	public void checkPurchaseForGoogle(Purchase p, String separate, final CallbackResultForActivity callback) {
+		String[] info = p.getDeveloperPayload().split(separate);
+		StringBuffer url = getUrl("a=Order&m=AndroidPaymentSuccess");
+//		url.append("&order_id="+p.getOrderId());
+//		url.append("&token="+p.getToken());
+//		url.append("&product_id="+p.getSku());
+//		url.append("&uid="+info[0]);
+//		url.append("&sid="+info[1]);
+//		if(info.length >= 6 && ("android".equalsIgnoreCase(info[5]) || "all".equalsIgnoreCase(info[5]) || "test".equalsIgnoreCase(info[5]) ))
+//			url.append("&stype="+info[5]);
+//		else
+//			url.append("&stype="+BasesApplication.userInfo.serverType);
+//		if(info.length >= 7)
+//			url.append("&oas_orderid="+info[6]);
+//
+//		url.append("&roleid="+info[2]);
+//		url.append("&ext="+info[3]);
+//		url.append("&trace_signture="+URLEncoder.encode(p.getSignature()));
+//		url.append("&trace_data="+p.getOriginalJson());
+//		url.append("&sign="+MD5Encrypt.StringToMD5(PhoneInfo.instance().gamecode + MyApplication.PUBLICKEY + p.getOrderId() + p.getToken() + p.getSku() + info[0] + info[1] + info[2]));
+
+		Map paras = new HashMap();
+		paras.put("order_id",p.getOrderId());
+		paras.put("token", p.getToken());
+		paras.put("product_id",p.getSku());
+		paras.put("uid",info[0]);
+		paras.put("sid",info[1]);
+		paras.put("stype",BasesApplication.userInfo.serverType);
+		if(info.length >= 7)
+			paras.put("oas_orderid",info[6]);
+
+		paras.put("roleid",info[2]);
+		paras.put("ext",info[3]);
+		paras.put("trace_signture",URLEncoder.encode(p.getSignature()));
+		paras.put("trace_data",p.getOriginalJson());
+		paras.put("sign",MD5Encrypt.StringToMD5(PhoneInfo.instance().gamecode + MyApplication.PUBLICKEY + p.getOrderId() + p.getToken() + p.getSku() + info[0] + info[1] + info[2]));
+		new BasesDao().post(url.toString(), paras, new Response.Listener<String>() {
+			@Override
+			public void onResponse(String s) {
+				boolean flag = isSuccess("checkPurchaseForGoogle",s ,callback);
+				if(!flag)
+					return;
+
+				OrderInfo info = new OrderInfo();
+				try {
+					BasesJsonParser.newInstance().parserJson2Obj(s, info);
+				}catch (Exception e){
+					callback.fail(BasesConstant.RESULT_FAIL_DATAERROR, "");
+					return;
+				}
+				callback.success(info, BasesConstant.RESULT_SUCCESS, "");
+			}
+		}, new Response.ErrorListener() {
+			@Override
+			public void onErrorResponse(VolleyError volleyError) {
+				callback.exception(new BasesNetworkErrorException(""));
+			}
+		});
+		String result = "";
+//		result = HttpDao.instance().submit(new RequestEntity(url.toString(), true));
+//		BasesUtils.logDebug("OAS-HttpService", "checkPurchaseForGoogle() return result:" + result);
+//		try {
+//			JSONObject o = new JSONObject(result);
+//
+////			if("ok".equalsIgnoreCase(o.getString("status"))){
+////				return 0;
+////			}else{
+//				String errorCode = o.getString("code");
+//
+//				BasesUtils.logError(TAG, "发钻请求结果：OasisOrderid=" + (info.length >= 7 ? info[6] : "") + ", GoogleOrderid=" + p.getOrderId() + ", uid=" + info[0] + ", sid=" + info[1] + ", roleid=" + info[2] + ", ext=" + info[3] + ", Result Code=" + errorCode + "");
+//
+//				if(TextUtils.isEmpty(errorCode)){
+//					return 1000100;
+//				}
+//				return Integer.valueOf(errorCode);
+////			}
+//		} catch (JSONException e) {
+//			return 1000100;// 请求发送成功，但服务器返回格式不正确，处理为1000100，失败
+//		}
+	}
+
+	/**
+	 * 获取第三方交易套餐
+	 * @throws BasesNetworkErrorException
+	 */
+	@SuppressWarnings({ "unchecked", "rawtypes" })
+	public void getPayKindsInfo(final CallbackResultForActivity callback) {
+
+		StringBuffer url = getUrl("a=System&m=GetServersRole");
+
+		url.append("&uid=" + BasesApplication.userInfo.uid);//"20000005619435");//
+		url.append("&ostype=android");
+		url.append("&sign=" + MD5Encrypt.StringToMD5(PhoneInfo.instance().gamecode + BasesApplication.PUBLICKEY));
+		BasesUtils.logError(TAG, url.toString());
+		new BasesDao().post(url.toString(), null, new Response.Listener<String>() {
+			@Override
+			public void onResponse(String s) {
+				boolean flag = isSuccess("getPayKindsInfo", s, callback);
+				if (!flag)
+					return;
+				PayInfoList pil = new PayInfoList();
+				try {
+					JSONObject o = new JSONObject(s);
+					pil.setList(BasesJsonParser.newInstance().parserJSON2ObjList(o.getString("gifts"), new PayInfoDetail()));
+					pil.setServers(BasesJsonParser.newInstance().parserJSON2ObjList(o.getString("serverlist"), new ServerInfo()));
+				} catch (Exception e) {
+					callback.fail(BasesConstant.RESULT_FAIL_DATAERROR, "数据格式异常");
+					return;
+				}
+				callback.success(pil, BasesConstant.RESULT_SUCCESS, "成功");
+			}
+		}, new Response.ErrorListener() {
+			@Override
+			public void onErrorResponse(VolleyError volleyError) {
+				callback.exception(new BasesNetworkErrorException(""));
+			}
+		});
+
+	}
+	
+	/**
+	 * 扫描结束后，根据扫描结果请求更新充值界面
+	 * @param code	扫描结果码
+	 * @return
+	 * @throws BasesNetworkErrorException
+	 */
+	public boolean toPcRecharge(String code) throws BasesNetworkErrorException {
+
+		StringBuffer url = new StringBuffer("a=pay&m=setPayWish");
+		url.append("&sid="+BasesApplication.userInfo.serverID);
+		url.append("&uid="+BasesApplication.userInfo.uid);
+		url.append("&roleid="+BasesApplication.userInfo.roleID);
+		url.append("&wcode=" + code);
+		url.append("&token=" + BasesApplication.userInfo.token);
+		url.append("&sign="+MD5Encrypt.StringToMD5(code+BasesApplication.userInfo.uid+PhoneInfo.instance().gamecode+BasesApplication.userInfo.serverID+BasesApplication.userInfo.roleID+BasesApplication.userInfo.token+BasesApplication.PUBLICKEY));
+		
+		String result = "";
+//		result = HttpDao.instance().submit(getOldUrl(url.toString()));
+		try {
+			JSONObject o = new JSONObject(result);
+			if("ok".equalsIgnoreCase(o.getString("status"))){
+				return true;
+			}
+		} catch (JSONException e) {
+			Log.e("HttpService", "toPcRecharge() fail!");
+			return false;
+		} 
+		return false;
+	}
+	/**
+	 * 支付信息日志
+	 * @param page 页数
+	 * @param page_size 每页记录数
+	 * @throws JSONException 
+	 */
+	@SuppressWarnings({ "unchecked", "rawtypes" })
+	public PayHistoryList paymentLog(int page, int page_size) throws BasesNetworkErrorException, JSONException{
+		StringBuffer url = new StringBuffer("http://pay.oasgames.com/oasadmin/api/getRechargeOrders.php?msg=getRecharge");
+		String uid = BasesApplication.userInfo.uid;//"200000053568227";//
+		url.append("&uid="+uid);
+		url.append("&page="+page);
+		url.append("&page_size="+page_size);
+		
+		url.append("&token="+MD5Encrypt.StringToMD5(uid+PhoneInfo.instance().gamecode+page+"d9411ce0301eb928632daacf1431ec9f"+page_size));
+		String res = "";
+//		res = HttpDao.instance().submit(new RequestEntity(url.toString()));
+		JSONObject json = new JSONObject(res);
+		if("ok".equalsIgnoreCase(json.getString("status"))){
+			PayHistoryList list = new PayHistoryList();
+			list.setGame_code(json.getString("game_code"));
+			list.setPage(json.getInt("page"));
+			list.setPage_size(json.getInt("page_size"));
+			try {
+				list.setMsg((List) BasesJsonParser.newInstance().parserJSON2ObjList(json.getJSONArray("msg").toString(), new PayHistoryInfoDetail()));
+			} catch (Exception e) {
+				throw new BasesNetworkErrorException(e.getMessage());
+			}
+			return list;
+		}
+		return null;
+	}
+	
+	/**
+	 * 玩家登录游戏服事件接收接口
+	 * 为OAS服务器发送玩家数据
+	 * @return
+	 * @throws BasesNetworkErrorException
+	 */
+	public String game_play_log() throws BasesNetworkErrorException {
+		StringBuffer url = new StringBuffer("a=gamelogin&m=game_play_log");
+		
+		url.append("&server_id=" + BasesApplication.userInfo.serverID);
+		url.append("&role_id="+BasesApplication.userInfo.roleID);
+		url.append("&uid="+BasesApplication.userInfo.uid);
+		
+		url.append("&sign="+MD5Encrypt.StringToMD5(PhoneInfo.instance().gamecode+BasesApplication.userInfo.serverID+BasesApplication.userInfo.uid+BasesApplication.PUBLICKEY));
+		String res = "";
+//		res = HttpDao.instance().submit(getOldUrl(url.toString()));
+		return res;
+	}
+	/**
+	 * 根据IP获取国家或地区
+	 * @return
+	 */
+	public void getConutryCodeByIP(){
+		new BasesDao().get("http://ipinfo.io/json", new Response.Listener<String>() {
+			@Override
+			public void onResponse(String s) {
+				try {
+					JSONObject o = new JSONObject(s);
+
+					PhoneInfo.instance().setIpToCountry(o.getString("country"));
+					BasesUtils.logDebug("getConutryCodeByIp()", "Get country by ipinfo is failed." + o.getString("country"));
+				} catch (Exception e) {
+				}
+			}
+		}, new Response.ErrorListener() {
+			@Override
+			public void onErrorResponse(VolleyError volleyError) {
+				BasesUtils.logDebug("getConutryCodeByIp()", "Get country by ipinfo is failed.");
+			}
+		});
+
+	}
+	/**
+	 * 向MData发送数据
+	 * @param info
+	 * @throws BasesNetworkErrorException
+	 */
+	public void sendToMdataInfo(final ReportMdataInfo info) throws BasesNetworkErrorException {
+//		RequestEntity re = new RequestEntity("http://10.1.9.135/r2.php");
+		String main = "us.";
+		if("tr.".equals(PhoneInfo.instance().getIpToCountryWithHttp()) ||
+				"us.".equals(PhoneInfo.instance().getIpToCountryWithHttp()) ||
+				"br.".equals(PhoneInfo.instance().getIpToCountryWithHttp()) ||
+				"cn.".equals(PhoneInfo.instance().getIpToCountryWithHttp()) ){
+			main = PhoneInfo.instance().getIpToCountryWithHttp();
+		}
+
+		new BasesDao().postMdata("http://"+main+"mdata.cool/mdata.php", info.content, new Response.Listener<String>() {
+			@Override
+			public void onResponse(String s) {
+				BasesUtils.logError(TAG, "sendToMdataInfo:success.eventName="+info.eventName+";"+s);
+			}
+		}, new Response.ErrorListener() {
+			@Override
+			public void onErrorResponse(VolleyError volleyError) {
+
+				BasesUtils.logError(TAG, "sendToMdataInfo:exception."+info.eventName);
+			}
+		});
+	}
+
+	private Boolean isSuccess(String methodName, String result, CallbackResultForActivity callback){
+		JSONObject o = null;
+		boolean isScucess = true;
+		try {
+			o = new JSONObject(result);
+			if(!"ok".equalsIgnoreCase(o.getString("status"))){
+				isScucess = false;
+			}
+		}catch (Exception e){
+			isScucess = false;
+		}
+		BasesUtils.logError(TAG, "请求源：" + methodName + "\n" + "响应结果" + result);
+		if(!isScucess) {
+			callback.fail(BasesConstant.RESULT_FAIL_DATAERROR, result);
+		}
+		return isScucess;
+	}
+
+	private StringBuffer getUrl(String url){
+		StringBuffer sb = new StringBuffer("http://arapp.mobile.test.oasgames.com/?"+url);
+		return sb.append(PhoneInfo.instance().toString());
+	}
+}
Index: app/src/main/res/layout/page_product_list_item.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/page_product_list_item.xml	(revision )
+++ app/src/main/res/layout/page_product_list_item.xml	(revision )
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:gravity="center">
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="商品（礼品）A "/>
+</LinearLayout>
\ No newline at end of file
Index: app/src/main/java/com/base/tools/utils/BaseRadioButton.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/utils/BaseRadioButton.java	(revision )
+++ app/src/main/java/com/base/tools/utils/BaseRadioButton.java	(revision )
@@ -0,0 +1,25 @@
+package com.base.tools.utils;
+
+import android.content.Context;
+import android.widget.RadioButton;
+
+/**
+ * Created by Administrator on 2015/10/16.
+ */
+public class BaseRadioButton extends RadioButton {
+
+    public BaseRadioButton(Context context) {
+        super(context);
+    }
+    public BaseRadioButton(Context context, String[] texts) {
+        super(context);
+
+    }
+
+    public void addView(){
+        this.addView();
+    }
+
+    
+
+}
Index: app/src/main/res/layout/fragment_main_shop.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_main_shop.xml	(revision )
+++ app/src/main/res/layout/fragment_main_shop.xml	(revision )
@@ -0,0 +1,48 @@
+
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+    <ScrollView
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:orientation="vertical">
+
+            <include layout="@layout/common_head"/>
+
+            <RelativeLayout
+                android:layout_width="match_parent"
+                android:layout_height="120dip">
+
+                <android.support.v4.view.ViewPager
+                    android:id="@+id/main_shop_viewpager"
+                    android:layout_width="fill_parent"
+                    android:layout_height="match_parent"
+                    android:background="@mipmap/shop_viewpager_bg"/>
+                <LinearLayout
+                    android:id="@+id/main_shop_viewpager_flag"
+                    android:orientation="horizontal"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_centerHorizontal="true"
+                    android:layout_alignParentBottom="true"
+                    android:layout_marginBottom="15dip"/>
+            </RelativeLayout>
+
+            <include layout="@layout/fragment_main_shop_function"/>
+
+            <include layout="@layout/fragment_main_shop_newest"/>
+
+            <include layout="@layout/fragment_main_shop_hot"/>
+
+            <include layout="@layout/fragment_main_shop_review"/>
+
+        </LinearLayout>
+
+    </ScrollView>
+    <include layout="@layout/common_waiting_anim" android:id="@+id/main_shop_wait"/>
+    <include layout="@layout/common_network_error" android:id="@+id/main_shop_netwrok_error"/>
+</FrameLayout>
\ No newline at end of file
Index: app/src/main/java/com/nineoldandroids/animation/IntEvaluator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nineoldandroids/animation/IntEvaluator.java	(revision )
+++ app/src/main/java/com/nineoldandroids/animation/IntEvaluator.java	(revision )
@@ -0,0 +1,42 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.nineoldandroids.animation;
+
+/**
+ * This evaluator can be used to perform type interpolation between <code>int</code> values.
+ */
+public class IntEvaluator implements TypeEvaluator<Integer> {
+
+    /**
+     * This function returns the result of linearly interpolating the start and end values, with
+     * <code>fraction</code> representing the proportion between the start and end values. The
+     * calculation is a simple parametric calculation: <code>result = x0 + t * (v1 - v0)</code>,
+     * where <code>x0</code> is <code>startValue</code>, <code>x1</code> is <code>endValue</code>,
+     * and <code>t</code> is <code>fraction</code>.
+     *
+     * @param fraction   The fraction from the starting to the ending values
+     * @param startValue The start value; should be of type <code>int</code> or
+     *                   <code>Integer</code>
+     * @param endValue   The end value; should be of type <code>int</code> or <code>Integer</code>
+     * @return A linear interpolation between the start and end values, given the
+     *         <code>fraction</code> parameter.
+     */
+    public Integer evaluate(float fraction, Integer startValue, Integer endValue) {
+        int startInt = startValue;
+        return (int)(startInt + fraction * (endValue - startInt));
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/nineoldandroids/util/ReflectiveProperty.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nineoldandroids/util/ReflectiveProperty.java	(revision )
+++ app/src/main/java/com/nineoldandroids/util/ReflectiveProperty.java	(revision )
@@ -0,0 +1,182 @@
+/*
+ * Copyright (C) 2011 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.nineoldandroids.util;
+
+import java.lang.reflect.Field;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+
+/**
+ * Internal class to automatically generate a Property for a given class/name pair, given the
+ * specification of {@link Property#of(Class, Class, String)}
+ */
+class ReflectiveProperty<T, V> extends Property<T, V> {
+
+    private static final String PREFIX_GET = "get";
+    private static final String PREFIX_IS = "is";
+    private static final String PREFIX_SET = "set";
+    private Method mSetter;
+    private Method mGetter;
+    private Field mField;
+
+    /**
+     * For given property name 'name', look for getName/isName method or 'name' field.
+     * Also look for setName method (optional - could be readonly). Failing method getters and
+     * field results in throwing NoSuchPropertyException.
+     *
+     * @param propertyHolder The class on which the methods or field are found
+     * @param name The name of the property, where this name is capitalized and appended to
+     * "get" and "is to search for the appropriate methods. If the get/is methods are not found,
+     * the constructor will search for a field with that exact name.
+     */
+    public ReflectiveProperty(Class<T> propertyHolder, Class<V> valueType, String name) {
+         // TODO: cache reflection info for each new class/name pair
+        super(valueType, name);
+        char firstLetter = Character.toUpperCase(name.charAt(0));
+        String theRest = name.substring(1);
+        String capitalizedName = firstLetter + theRest;
+        String getterName = PREFIX_GET + capitalizedName;
+        try {
+            mGetter = propertyHolder.getMethod(getterName, (Class<?>[]) null);
+        } catch (NoSuchMethodException e) {
+            try {
+                /* The native implementation uses JNI to do reflection, which allows access to private methods.
+                 * getDeclaredMethod(..) does not find superclass methods, so it's implemented as a fallback.
+                 */
+                mGetter = propertyHolder.getDeclaredMethod(getterName, (Class<?>[]) null);
+                mGetter.setAccessible(true);
+            } catch (NoSuchMethodException e2) {
+                // getName() not available - try isName() instead
+                getterName = PREFIX_IS + capitalizedName;
+                try {
+                    mGetter = propertyHolder.getMethod(getterName, (Class<?>[]) null);
+                } catch (NoSuchMethodException e3) {
+                    try {
+                        /* The native implementation uses JNI to do reflection, which allows access to private methods.
+                         * getDeclaredMethod(..) does not find superclass methods, so it's implemented as a fallback.
+                         */
+                        mGetter = propertyHolder.getDeclaredMethod(getterName, (Class<?>[]) null);
+                        mGetter.setAccessible(true);
+                    } catch (NoSuchMethodException e4) {
+                        // Try public field instead
+                        try {
+                            mField = propertyHolder.getField(name);
+                            Class fieldType = mField.getType();
+                            if (!typesMatch(valueType, fieldType)) {
+                                throw new NoSuchPropertyException("Underlying type (" + fieldType + ") " +
+                                        "does not match Property type (" + valueType + ")");
+                            }
+                            return;
+                        } catch (NoSuchFieldException e5) {
+                            // no way to access property - throw appropriate exception
+                            throw new NoSuchPropertyException("No accessor method or field found for"
+                                    + " property with name " + name);
+                        }
+                    }
+                }
+            }
+        }
+        Class getterType = mGetter.getReturnType();
+        // Check to make sure our getter type matches our valueType
+        if (!typesMatch(valueType, getterType)) {
+            throw new NoSuchPropertyException("Underlying type (" + getterType + ") " +
+                    "does not match Property type (" + valueType + ")");
+        }
+        String setterName = PREFIX_SET + capitalizedName;
+        try {
+            // mSetter = propertyHolder.getMethod(setterName, getterType);
+            // The native implementation uses JNI to do reflection, which allows access to private methods.
+            mSetter = propertyHolder.getDeclaredMethod(setterName, getterType);
+            mSetter.setAccessible(true);
+        } catch (NoSuchMethodException ignored) {
+            // Okay to not have a setter - just a readonly property
+        }
+    }
+
+    /**
+     * Utility method to check whether the type of the underlying field/method on the target
+     * object matches the type of the Property. The extra checks for primitive types are because
+     * generics will force the Property type to be a class, whereas the type of the underlying
+     * method/field will probably be a primitive type instead. Accept float as matching Float,
+     * etc.
+     */
+    private boolean typesMatch(Class<V> valueType, Class getterType) {
+        if (getterType != valueType) {
+            if (getterType.isPrimitive()) {
+                return (getterType == float.class && valueType == Float.class) ||
+                        (getterType == int.class && valueType == Integer.class) ||
+                        (getterType == boolean.class && valueType == Boolean.class) ||
+                        (getterType == long.class && valueType == Long.class) ||
+                        (getterType == double.class && valueType == Double.class) ||
+                        (getterType == short.class && valueType == Short.class) ||
+                        (getterType == byte.class && valueType == Byte.class) ||
+                        (getterType == char.class && valueType == Character.class);
+            }
+            return false;
+        }
+        return true;
+    }
+
+    @Override
+    public void set(T object, V value) {
+        if (mSetter != null) {
+            try {
+                mSetter.invoke(object, value);
+            } catch (IllegalAccessException e) {
+                throw new AssertionError();
+            } catch (InvocationTargetException e) {
+                throw new RuntimeException(e.getCause());
+            }
+        } else if (mField != null) {
+            try {
+                mField.set(object, value);
+            } catch (IllegalAccessException e) {
+                throw new AssertionError();
+            }
+        } else {
+            throw new UnsupportedOperationException("Property " + getName() +" is read-only");
+        }
+    }
+
+    @Override
+    public V get(T object) {
+        if (mGetter != null) {
+            try {
+                return (V) mGetter.invoke(object, (Object[])null);
+            } catch (IllegalAccessException e) {
+                throw new AssertionError();
+            } catch (InvocationTargetException e) {
+                throw new RuntimeException(e.getCause());
+            }
+        } else if (mField != null) {
+            try {
+                return (V) mField.get(object);
+            } catch (IllegalAccessException e) {
+                throw new AssertionError();
+            }
+        }
+        // Should not get here: there should always be a non-null getter or field
+        throw new AssertionError();
+    }
+
+    /**
+     * Returns false if there is no setter or public field underlying this Property.
+     */
+    @Override
+    public boolean isReadOnly() {
+        return (mSetter == null && mField == null);
+    }
+}
Index: app/src/main/res/layout/page_search.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/page_search.xml	(revision )
+++ app/src/main/res/layout/page_search.xml	(revision )
@@ -0,0 +1,190 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/common_background_all_page">
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/common_head_height_size"
+        android:background="@color/common_button_bg_unselected"
+        android:paddingRight="@dimen/common_content_margin_20">
+
+        <TextView
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:layout_weight="8"
+            android:gravity="center"
+            android:text="@string/search_title_sub1"
+            android:textColor="@color/common_font_color_ffffff"
+            android:textSize="@dimen/common_font_size_12"
+            android:clickable="true"
+            android:onClick="onClickCancel"/>
+        <RelativeLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_weight="2"
+            android:background="@drawable/common_bg_ffffff"
+            android:layout_gravity="center_vertical">
+            <TextView
+                android:id="@+id/search_edittext_layout"
+                android:layout_width="@dimen/common_head_back_height"
+                android:layout_height="@dimen/common_head_back_height"
+                android:layout_centerVertical="true"
+                android:layout_alignParentRight="true"
+                android:background="@mipmap/common_head_search_selected"
+                android:clickable="true"
+                android:onClick="onClickViewToSearch"/>
+            <EditText
+                android:id="@+id/search_edittext"
+                android:layout_width="match_parent"
+                android:layout_height="@dimen/order_list_item_center_topay_height"
+                android:layout_centerVertical="true"
+                android:layout_toLeftOf="@id/search_edittext_layout"
+                android:paddingRight="@dimen/common_content_margin_5"
+                android:paddingLeft="@dimen/common_content_margin_5"
+                android:background="@null"
+                android:gravity="left|center_vertical"
+                android:singleLine="true"
+                android:hint="@string/search_title_sub3"
+                android:textSize="@dimen/common_font_size_12"/>
+            <!--
+                android:imeOptions="actionSearch" -->
+
+        </RelativeLayout>
+    </LinearLayout>
+    <FrameLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:orientation="vertical">
+            <LinearLayout
+                android:id="@+id/search_recommend_layout"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="vertical"
+                android:paddingRight="@dimen/common_content_margin_20"
+                android:paddingTop="@dimen/common_content_margin_10"
+                android:visibility="visible">
+                <TextView
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:gravity="center_vertical|right"
+                    android:text="@string/search_title_sub4"
+                    android:textSize="@dimen/common_font_size_12"
+                    android:textColor="@color/common_font_color_868585"/>
+                <TableLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content">
+                    <TableRow
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:layout_marginTop="@dimen/common_content_margin_10"
+                        android:layout_marginLeft="@dimen/common_content_margin_10"
+                        android:weightSum="2">
+                        <TextView
+                            android:layout_width="match_parent"
+                            android:layout_height="41dip"
+                            android:layout_weight="1"
+                            android:gravity="center"
+                            android:background="@drawable/common_button_2_selector"
+                            android:layout_marginLeft="@dimen/common_content_margin_10"
+                            android:layout_marginRight="@dimen/common_content_margin_10"
+                            android:textSize="@dimen/common_font_size_12"
+                            android:textColor="@drawable/common_button_2_text_selector"
+                            android:clickable="true"/>
+                        <TextView
+                            android:layout_width="match_parent"
+                            android:layout_height="41dip"
+                            android:layout_weight="1"
+                            android:gravity="center"
+                            android:background="@drawable/common_button_2_selector"
+                            android:layout_marginLeft="@dimen/common_content_margin_10"
+                            android:textSize="@dimen/common_font_size_12"
+                            android:textColor="@drawable/common_button_2_text_selector"
+                            android:clickable="true"/>
+                    </TableRow>
+                    <TableRow
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:layout_marginTop="@dimen/common_content_margin_10"
+                        android:layout_marginLeft="@dimen/common_content_margin_10"
+                        android:weightSum="2">
+                        <TextView
+                            android:layout_width="match_parent"
+                            android:layout_height="41dip"
+                            android:layout_weight="1"
+                            android:gravity="center"
+                            android:background="@drawable/common_button_2_selector"
+                            android:layout_marginLeft="@dimen/common_content_margin_10"
+                            android:layout_marginRight="@dimen/common_content_margin_10"
+                            android:textSize="@dimen/common_font_size_12"
+                            android:textColor="@drawable/common_button_2_text_selector"
+                            android:clickable="true"/>
+                        <TextView
+                            android:layout_width="match_parent"
+                            android:layout_height="41dip"
+                            android:layout_weight="1"
+                            android:gravity="center"
+                            android:background="@drawable/common_button_2_selector"
+                            android:layout_marginLeft="@dimen/common_content_margin_10"
+                            android:textSize="@dimen/common_font_size_12"
+                            android:textColor="@drawable/common_button_2_text_selector"
+                            android:clickable="true"/>
+                    </TableRow>
+
+                </TableLayout>
+
+            </LinearLayout>
+            <LinearLayout
+                android:id="@+id/search_history_layout"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="vertical"
+                android:layout_marginTop="@dimen/common_content_margin_15">
+                <TextView
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:gravity="center_vertical|right"
+                    android:text="@string/search_title_sub5"
+                    android:textSize="@dimen/common_font_size_12"
+                    android:textColor="@color/common_font_color_868585"
+                    android:paddingRight="@dimen/common_content_margin_20"/>
+                <TextView
+                    android:layout_width="match_parent"
+                    android:layout_height="2dip"
+                    android:background="@color/common_list_item_divide_bg"
+                    android:layout_marginTop="@dimen/common_content_margin_10"/>
+                <ListView
+                    android:id="@+id/search_history"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:background="@color/common_font_color_ffffff"
+                    android:dividerHeight="2dip"
+                    android:divider="@color/common_list_item_divide_bg"
+                    android:listSelector="@drawable/common_list_item_selector"/>
+            </LinearLayout>
+        </LinearLayout>
+        <FrameLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:id="@+id/search_result_list_layout"
+            android:visibility="gone">
+
+            <ListView
+                android:id="@+id/search_result_list"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:background="@color/common_font_color_ffffff"
+                android:divider="@color/common_list_item_divide_bg"
+                android:dividerHeight="2dip"
+                android:listSelector="@drawable/common_list_item_selector"/>
+            <include layout="@layout/page_search_result_list_empty"
+                android:id="@+id/search_result_list_empty"/>
+        </FrameLayout>
+        <include layout="@layout/common_network_error"/>
+    </FrameLayout>
+
+</LinearLayout>
\ No newline at end of file
Index: app/src/main/res/layout/page_order_list_slide_empty.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/page_order_list_slide_empty.xml	(revision )
+++ app/src/main/res/layout/page_order_list_slide_empty.xml	(revision )
@@ -0,0 +1,41 @@
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+	android:id="@+id/order_list_slide_empty"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/common_background_all_page"
+	android:gravity="center"
+	android:orientation="vertical"
+	android:visibility="invisible">
+
+    <TextView
+        android:layout_width="wrap_content"
+    	android:layout_height="wrap_content"
+    	android:layout_gravity="center"
+		android:background="@mipmap/order_list_empty"/>
+
+	<TextView
+		android:layout_width="wrap_content"
+		android:layout_height="wrap_content"
+		android:layout_marginTop="@dimen/common_content_margin_10"
+		android:gravity="center"
+		android:text="@string/order_list_item_label5"
+		android:textColor="@color/common_font_color_868585"
+		android:textSize="@dimen/common_font_size_12"/>
+	<TextView
+		android:layout_width="match_parent"
+		android:layout_height="@dimen/login_style_btn_height"
+		android:layout_marginTop="@dimen/common_content_margin_30"
+		android:layout_marginLeft="@dimen/common_content_margin_20"
+		android:layout_marginRight="@dimen/common_content_margin_20"
+		android:gravity="center"
+		android:text="@string/order_list_item_label6"
+		android:background="@drawable/common_button_1_selector"
+		android:textColor="@color/common_font_color_ffffff"
+		android:textSize="@dimen/common_font_size_16"
+		android:clickable="true"
+		android:onClick="toproduct_list"/>
+
+
+
+</LinearLayout>
Index: app/src/main/java/com/oasgames/android/oaspay/entity/ReportMdataInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/entity/ReportMdataInfo.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/entity/ReportMdataInfo.java	(revision )
@@ -0,0 +1,108 @@
+package com.oasgames.android.oaspay.entity;
+
+import android.text.TextUtils;
+
+import com.base.tools.BasesApplication;
+import com.base.tools.entity.PhoneInfo;
+import com.base.tools.utils.BasesUtils;
+import com.base.tools.utils.MD5Encrypt;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.Map;
+
+/**
+ * 数据上报信息
+ * @author Administrator
+ *
+ */
+public class ReportMdataInfo extends ReportInfo{
+
+	public Map<String, String> params;	//上报APP自定义参数
+	public Map<String, String> status;	//上报APP自定义参数
+	public String content;// 上报内容
+
+	
+	public ReportMdataInfo(String eventName, Map<String, String> params, Map<String, String> status) {
+		super.type = 2;
+		super.eventName = eventName;
+		super.createTime = System.currentTimeMillis();
+		this.params = params;
+		this.status = status;
+		this.content = getMdataJsonInfo();
+	}
+	
+	private String getMdataJsonInfo(){
+		
+//		StringBuffer o = new StringBuffer("{");
+//
+//		o.append("\"appid\":\""+ PhoneInfo.instance().mdataAppID+"\"");
+//		o.append(",\"uuid\":\""+(BasesApplication.userInfo!=null&&!TextUtils.isEmpty(BasesApplication.userInfo.uid)?BasesApplication.userInfo.uid: MD5Encrypt.StringToMD5(BasesUtils.getMobileCode()))+"\"");// 未登陆 mobilecode，已登陆uid
+//		o.append(",\"udid\":\""+ BasesUtils.getMobileCode()+"\"");
+//		o.append(",\"server_id\":\""+(BasesApplication.userInfo!=null&&!TextUtils.isEmpty(BasesApplication.userInfo.serverID)?BasesApplication.userInfo.serverID:"")+"\"");
+//		o.append(",\"__time_shift\":\""+(createTime - System.currentTimeMillis())/1000+"\"");// 转换为秒
+//
+//		o.append(",\"channel\":\"oaspay\"");
+//		o.append(",\"locale\":\"ar\"");//"+PhoneInfo.instance().locale+"
+//		o.append(",\"version\":\""+PhoneInfo.instance().bundleversion+"\"");//PhoneInfo.instance().softwareVersion
+////		o.append(",\"country\":\"" + PhoneInfo.instance().getIpToCountry() + "\"");
+//		o.append(",\"os\":\""+"android"+"\"");
+//		o.append(",\"browser\":\"\"");
+//		o.append(",\"screen\":\""+PhoneInfo.instance().screen+"\"");
+//
+//		o.append(",\"event\":\""+eventName+"\"");
+		JSONObject o = new JSONObject();
+
+		try {
+			o.put("appid", PhoneInfo.instance().mdataAppID);
+			o.put("uuid", (BasesApplication.userInfo != null && !TextUtils.isEmpty(BasesApplication.userInfo.uid) ? BasesApplication.userInfo.uid : MD5Encrypt.StringToMD5(BasesUtils.getMobileCode())));// 未登陆 mobilecode，已登陆uid
+			o.put("udid", BasesUtils.getMobileCode());
+			o.put("server_id", (BasesApplication.userInfo != null && !TextUtils.isEmpty(BasesApplication.userInfo.serverID) ? BasesApplication.userInfo.serverID : ""));
+			o.put("__time_shift", (createTime - System.currentTimeMillis()) / 1000);// 转换为秒
+
+			o.put("channel", "oaspay");
+			o.put("locale", "ar");//"+PhoneInfo.instance().locale+"
+			o.put("version", PhoneInfo.instance().bundleversion);//PhoneInfo.instance().softwareVersion
+//			o.put("country", PhoneInfo.instance().getIpToCountry());
+			o.put("os", "android");
+			o.put("browser", "");
+			o.put("screen", PhoneInfo.instance().screen);
+
+			o.put("event", eventName);
+		} catch (JSONException e) {
+			e.printStackTrace();
+		}
+
+
+		JSONObject pJson = new JSONObject();// 事件级参数
+		try {
+			if(params != null){
+				for (Map.Entry<String, String> iter : params.entrySet()) {
+					pJson.put(iter.getKey(), iter.getValue());
+				}
+			}
+			o.put("params", pJson);
+		} catch (JSONException e) {
+			e.printStackTrace();
+		}
+
+
+		JSONObject sJson = new JSONObject();// 应用级参数
+		try {
+			sJson.put("gamecode", PhoneInfo.instance().gamecode);
+			if(status != null){
+				for (Map.Entry<String, String> iter : status.entrySet()) {
+					sJson.put(iter.getKey(), iter.getValue());
+				}
+			}
+			o.put("status", sJson);
+		} catch (JSONException e) {
+			e.printStackTrace();
+		}
+
+
+		BasesUtils.logDebug("Mdata", o.toString());
+		return o.toString();
+	}
+}
Index: app/src/main/java/com/oasgames/android/oaspay/entity/OrderInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/entity/OrderInfo.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/entity/OrderInfo.java	(revision )
@@ -0,0 +1,135 @@
+package com.oasgames.android.oaspay.entity;
+
+import java.io.Serializable;
+
+/**
+ * 订单详细信息
+ * @author xdb
+ *
+ */
+public class OrderInfo implements Serializable{
+	public static final long serialVersionUID = 1598605839985469091L;
+	
+	public String uid;				//用户id
+	public String order_id;			//订单id
+	public String product_id;		//OAS商品id
+	public String product_name;		//套餐或礼包名称
+	public String product_img_url;	//套餐或礼包图片
+	public String content_info;		//套餐或礼包介绍
+	public String price_product_id;	//第三方商店id
+	public String server_id;		//服务器ID
+	public String server_name;		//服务器名称
+	public String rolename;			//角色名称
+
+	public String game_coins;			//游戏币数量
+	public String game_coins_show;		//展示游戏币数量
+	public String price_discount;		//赠送游戏币数量
+
+
+	public String amount;			//价格
+	public String amount_show;		//展示金额
+	public String currency;			//币种
+	public String currency_show;	//展示币种
+
+	public String exchange_code;	//兑换码
+
+
+	public String order_type;		//订单类型	礼包:giftapp    套餐：payapp
+	public String order_status;		//订单状态  1正常  2删除 3取消 4下单失败
+	public String pay_status;		//支付状态   1等待支付 2完成支付
+	public String create_time;		//下单时间
+	public String pay_time;			//完成支付时间
+
+
+	public void setUid(String uid) {
+		this.uid = uid;
+	}
+
+	public void setOrder_id(String order_id) {
+		this.order_id = order_id;
+	}
+
+	public void setProduct_id(String product_id) {
+		this.product_id = product_id;
+	}
+
+	public void setProduct_name(String product_name) {
+		this.product_name = product_name;
+	}
+
+	public void setProduct_img_url(String product_img_url) {
+		this.product_img_url = product_img_url;
+	}
+
+	public void setContent_info(String content_info) {
+		this.content_info = content_info;
+	}
+
+	public void setPrice_product_id(String price_product_id) {
+		this.price_product_id = price_product_id;
+	}
+
+	public void setServer_id(String server_id) {
+		this.server_id = server_id;
+	}
+
+	public void setServer_name(String server_name) {
+		this.server_name = server_name;
+	}
+
+	public void setRolename(String rolename) {
+		this.rolename = rolename;
+	}
+
+	public void setGame_coins(String game_coins) {
+		this.game_coins = game_coins;
+	}
+
+	public void setGame_coins_show(String game_coins_show) {
+		this.game_coins_show = game_coins_show;
+	}
+
+	public void setPrice_discount(String price_discount) {
+		this.price_discount = price_discount;
+	}
+
+	public void setAmount(String amount) {
+		this.amount = amount;
+	}
+
+	public void setAmount_show(String amount_show) {
+		this.amount_show = amount_show;
+	}
+
+	public void setCurrency(String currency) {
+		this.currency = currency;
+	}
+
+	public void setCurrency_show(String currency_show) {
+		this.currency_show = currency_show;
+	}
+
+	public void setOrder_type(String order_type) {
+		this.order_type = order_type;
+	}
+
+	public void setOrder_status(String order_status) {
+		this.order_status = order_status;
+	}
+
+	public void setPay_status(String pay_status) {
+		this.pay_status = pay_status;
+	}
+
+	public void setCreate_time(String create_time) {
+		this.create_time = create_time;
+	}
+
+	public void setPay_time(String pay_time) {
+		this.pay_time = pay_time;
+	}
+
+	public void setExchange_code(String exchange_code) {
+		this.exchange_code = exchange_code;
+	}
+}
Index: app/src/main/java/com/google/zxing/decoding/DecodeThread.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/google/zxing/decoding/DecodeThread.java	(revision )
+++ app/src/main/java/com/google/zxing/decoding/DecodeThread.java	(revision )
@@ -0,0 +1,86 @@
+/*
+ * Copyright (C) 2008 ZXing authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.zxing.decoding;
+
+import java.util.Hashtable;
+import java.util.Vector;
+import java.util.concurrent.CountDownLatch;
+
+import android.os.Handler;
+import android.os.Looper;
+
+import com.google.zxing.BarcodeFormat;
+import com.google.zxing.DecodeHintType;
+import com.google.zxing.ResultPointCallback;
+import com.oasgames.android.oaspay.activity.ActivityCapture;
+
+/**
+ * This thread does all the heavy lifting of decoding the images.
+ * 解码线程
+ */
+final class DecodeThread extends Thread {
+
+  public static final String BARCODE_BITMAP = "barcode_bitmap";
+  private final ActivityCapture activity;
+  private final Hashtable<DecodeHintType, Object> hints;
+  private Handler handler;
+  private final CountDownLatch handlerInitLatch;
+
+  DecodeThread(ActivityCapture activity,
+               Vector<BarcodeFormat> decodeFormats,
+               String characterSet,
+               ResultPointCallback resultPointCallback) {
+
+    this.activity = activity;
+    handlerInitLatch = new CountDownLatch(1);
+
+    hints = new Hashtable<DecodeHintType, Object>(3);
+
+    if (decodeFormats == null || decodeFormats.isEmpty()) {
+    	 decodeFormats = new Vector<BarcodeFormat>();
+    	 decodeFormats.addAll(DecodeFormatManager.ONE_D_FORMATS);
+    	 decodeFormats.addAll(DecodeFormatManager.QR_CODE_FORMATS);
+    	 decodeFormats.addAll(DecodeFormatManager.DATA_MATRIX_FORMATS);
+    }
+    
+    hints.put(DecodeHintType.POSSIBLE_FORMATS, decodeFormats);
+
+    if (characterSet != null) {
+      hints.put(DecodeHintType.CHARACTER_SET, characterSet);
+    }
+
+    hints.put(DecodeHintType.NEED_RESULT_POINT_CALLBACK, resultPointCallback);
+  }
+
+  Handler getHandler() {
+    try {
+      handlerInitLatch.await();
+    } catch (InterruptedException ie) {
+      // continue?
+    }
+    return handler;
+  }
+
+  @Override
+  public void run() {
+    Looper.prepare();
+    handler = new DecodeHandler(activity, hints);
+    handlerInitLatch.countDown();
+    Looper.loop();
+  }
+
+}
Index: app/src/main/java/com/oasgames/android/oaspay/activity/ActivityOrderDetails.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/activity/ActivityOrderDetails.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/activity/ActivityOrderDetails.java	(revision )
@@ -0,0 +1,190 @@
+package com.oasgames.android.oaspay.activity;
+
+import android.app.Activity;
+import android.content.ClipboardManager;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.os.Bundle;
+import android.text.TextUtils;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.base.tools.activity.BasesActivity;
+import com.base.tools.http.CallbackResultForActivity;
+import com.base.tools.utils.BasesUtils;
+import com.oasgames.android.oaspay.R;
+import com.oasgames.android.oaspay.entity.OrderInfo;
+import com.oasgames.android.oaspay.service.HttpService;
+import com.oasgames.android.oaspay.tools.APPUtils;
+
+import org.json.JSONArray;
+
+import java.text.SimpleDateFormat;
+
+
+/**
+ * 界面 订单详细信息
+ * orderinfo（订单信息）
+ * Created by Administrator on 2015/10/16.
+ */
+public class ActivityOrderDetails extends BasesActivity {
+    OrderInfo order;
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.page_order_details);
+        initHead(true, true, null, false, getString(R.string.order_details_title), false, null);
+
+        order = (OrderInfo)getIntent().getExtras().get("orderinfo");
+
+        updateView();
+    }
+
+    @Override
+    protected void onNewIntent(Intent intent) {
+        super.onNewIntent(intent);
+        order = (OrderInfo)intent.getExtras().get("orderinfo");
+        updateView();
+    }
+    private void updateView(){
+        ((TextView)findViewById(R.id.order_details_id)).setText(order.order_id);
+
+        findViewById(R.id.product_item_charge).setVisibility(View.INVISIBLE);
+        if("payapp".equalsIgnoreCase(order.order_type))
+            findViewById(R.id.product_item_img).setBackgroundResource(R.mipmap.common_diamond_bg);
+        else
+            BasesUtils.loadImg(this, (ImageView) findViewById(R.id.product_item_img), order.product_img_url);
+        ((TextView)findViewById(R.id.product_item_title)).setText(order.product_name);
+        ((TextView)findViewById(R.id.product_item_diamond_count)).setText(order.game_coins_show);
+        if("payapp".equals(order.order_type)) {
+            String disconunt = order.price_discount;
+            if(disconunt != null && !"null".equals(disconunt) && !TextUtils.isEmpty(disconunt))
+                ((TextView)findViewById(R.id.product_item_title)).setText(order.price_discount + " + " + order.game_coins_show);
+            else
+                ((TextView)findViewById(R.id.product_item_title)).setText(order.game_coins_show);
+            findViewById(R.id.product_item_diamond_count).setVisibility(View.INVISIBLE);
+            findViewById(R.id.product_item_diamond_bg).setVisibility(View.INVISIBLE);
+        }
+
+        LinearLayout codeLayout = (LinearLayout)findViewById(R.id.order_details_code_layout);// 兑换码区域
+        if("giftapp".equalsIgnoreCase(order.order_type) && "2".equals(order.pay_status)) {
+            codeLayout.setVisibility(View.VISIBLE);// 是礼包，并且支付成功才显示
+            if(TextUtils.isEmpty(order.exchange_code)){
+                ((TextView)findViewById(R.id.order_details_code)).setText(getString(R.string.order_details_label_12));
+                findViewById(R.id.order_details_code_copy).setVisibility(View.INVISIBLE);
+            }else{
+                ((TextView)findViewById(R.id.order_details_code)).setText(order.exchange_code);
+                findViewById(R.id.order_details_code_copy).setVisibility(View.VISIBLE);
+            }
+        }else
+            codeLayout.setVisibility(View.GONE);
+
+        LinearLayout notice = (LinearLayout)findViewById(R.id.order_details_notice);// 添加说明  ZX
+        notice.removeAllViews();
+        if(!TextUtils.isEmpty(order.content_info)){
+            try {
+                JSONArray ja = new JSONArray(order.content_info);
+                int count = ja.length();
+
+                for (int i = 0; i <count; i++) {
+                    View view = getLayoutInflater().inflate(R.layout.page_product_details_item, null);
+                    TextView tv_notice = (TextView)view.findViewById(R.id.product_details_item_notice);
+                    tv_notice.setText(ja.getString(i));
+                    notice.addView(view);
+                }
+            }catch (Exception e){}
+        }
+
+        if("giftapp".equalsIgnoreCase(order.order_type) ){
+            findViewById(R.id.order_details_game).setVisibility(View.GONE);
+        }else{
+            findViewById(R.id.order_details_game).setVisibility(View.VISIBLE);
+            ((TextView)findViewById(R.id.order_details_game_servername)).setText(order.server_name);
+            ((TextView)findViewById(R.id.order_details_game_rolename)).setText(order.rolename);
+        }
+
+        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
+        ((TextView)findViewById(R.id.order_details_status)).setText(getString(R.string.order_details_label_3) + "  "+(("1".equals(order.pay_status) || "3".equals(order.pay_status)) ? getString(R.string.order_details_label_8) : getString(R.string.order_details_label_7)));
+        ((TextView)findViewById(R.id.order_details_downtime)).setText(getString(R.string.order_details_label_4) + "  "+sdf.format(Long.parseLong(order.create_time + "000")));
+        if("2".equals(order.pay_status) && !TextUtils.isEmpty(order.pay_time)) {
+            TextView paytime = (TextView)findViewById(R.id.order_details_paytime);
+            paytime.setVisibility(View.VISIBLE);
+            paytime.setText(getString(R.string.order_details_label_5) + "  "+sdf.format(Long.parseLong(order.pay_time + "000")));
+        }else
+            ((TextView)findViewById(R.id.order_details_paytime)).setVisibility(View.GONE);
+        ((TextView)findViewById(R.id.order_details_paystyle)).setText(getString(R.string.order_details_label_6) +"  "+ "Google Play" );
+
+        ((TextView)findViewById(R.id.order_details_price)).setText(order.currency_show +"  "+ order.amount_show);
+
+        if("2".equals(order.pay_status))
+            findViewById(R.id.order_details_topay).setVisibility(View.GONE);
+        else
+            findViewById(R.id.order_details_topay).setVisibility(View.VISIBLE);
+    }
+
+    public void onClickViewCodeCopy(View view){
+        if(TextUtils.isEmpty(order.exchange_code)){
+            BasesUtils.showMsg(this, getString(R.string.order_details_label_12));
+            return;
+        }
+        // 点击复制按钮  复制 兑换码
+        ClipboardManager cm = (ClipboardManager)this.getSystemService(CLIPBOARD_SERVICE);
+        cm.setText(order.exchange_code);
+
+        BasesUtils.showMsg(this, getString(R.string.order_details_label_11));
+    }
+
+    public void onClickViewTopay(View view){
+        // 点击支付按钮
+        setWaitScreen(true);
+        HttpService.instance().getOrderInfoByID(order.order_id, new GetOrderInfo(this));
+    }
+    class GetOrderInfo implements CallbackResultForActivity{
+        Activity activity;
+        public GetOrderInfo(Activity activity){
+            this.activity = activity;
+        }
+        @Override
+        public void success(final Object data, int statusCode, String msg) {
+            setWaitScreen(false);
+            order = (OrderInfo)data;
+            if(!"1".equals(order.order_status)){// 订单已被删除
+                BasesUtils.showDialogBySystemUI(activity, getResources().getString(R.string.order_list_item_label9), getResources().getString(R.string.search_title_sub2), new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        dialog.cancel();
+                        ((MyApplication)activity.getApplication()).isReLoadOderList = true;// 数据有变化，请求重新刷新列表
+                        finish();
+                    }
+                }, "", null, "", null);
+                return;
+            }
+            if("2".equals(order.pay_status)){// 订单已完成，提示“该订单已完成支付！”
+                BasesUtils.showDialogBySystemUI(activity, getResources().getString(R.string.order_list_item_label10), getResources().getString(R.string.search_title_sub2), new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        dialog.cancel();
+                        ((MyApplication)activity.getApplication()).isReLoadOderList = true;// 数据有变化，请求重新刷新列表
+                        updateView();
+                    }
+                }, "", null, "",null);
+                return;
+            }
+            startActivity(new Intent().setClass(activity, ActivityGooglePlayBilling.class).putExtra("orderinfo", order));
+        }
+
+        @Override
+        public void fail(int statusCode, String msg) {
+            setWaitScreen(false);
+            APPUtils.showErrorMessageByErrorCode(activity, "-2000");
+        }
+
+        @Override
+        public void exception(Exception e) {
+            setWaitScreen(false);
+            APPUtils.showErrorMessageByErrorCode(activity, "-2000");
+        }
+    }
+}
Index: app/src/main/java/com/google/zxing/camera/FlashlightManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/google/zxing/camera/FlashlightManager.java	(revision )
+++ app/src/main/java/com/google/zxing/camera/FlashlightManager.java	(revision )
@@ -0,0 +1,150 @@
+/*
+ * Copyright (C) 2010 ZXing authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.zxing.camera;
+
+import android.os.IBinder;
+import android.util.Log;
+
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+
+/**
+ * This class is used to activate the weak light on some camera phones (not flash)
+ * in order to illuminate surfaces for scanning. There is no official way to do this,
+ * but, classes which allow access to this function still exist on some devices.
+ * This therefore proceeds through a great deal of reflection.
+ *
+ * See <a href="http://almondmendoza.com/2009/01/05/changing-the-screen-brightness-programatically/">
+ * http://almondmendoza.com/2009/01/05/changing-the-screen-brightness-programatically/</a> and
+ * <a href="http://code.google.com/p/droidled/source/browse/trunk/src/com/droidled/demo/DroidLED.java">
+ * http://code.google.com/p/droidled/source/browse/trunk/src/com/droidled/demo/DroidLED.java</a>.
+ * Thanks to Ryan Alford for pointing out the availability of this class.
+ */
+final class FlashlightManager {
+
+  private static final String TAG = FlashlightManager.class.getSimpleName();
+
+  private static final Object iHardwareService;
+  private static final Method setFlashEnabledMethod;
+  static {
+    iHardwareService = getHardwareService();
+    setFlashEnabledMethod = getSetFlashEnabledMethod(iHardwareService);
+    if (iHardwareService == null) {
+      Log.v(TAG, "This device does supports control of a flashlight");
+    } else {
+      Log.v(TAG, "This device does not support control of a flashlight");
+    }
+  }
+
+  private FlashlightManager() {
+  }
+
+  /**
+   * 控制相机闪光灯开关
+   */
+  //FIXME
+  static void enableFlashlight() {
+    setFlashlight(false);
+  }
+
+  static void disableFlashlight() {
+    setFlashlight(false);
+  }
+
+  private static Object getHardwareService() {
+    Class<?> serviceManagerClass = maybeForName("android.os.ServiceManager");
+    if (serviceManagerClass == null) {
+      return null;
+    }
+
+    Method getServiceMethod = maybeGetMethod(serviceManagerClass, "getService", String.class);
+    if (getServiceMethod == null) {
+      return null;
+    }
+
+    Object hardwareService = invoke(getServiceMethod, null, "hardware");
+    if (hardwareService == null) {
+      return null;
+    }
+
+    Class<?> iHardwareServiceStubClass = maybeForName("android.os.IHardwareService$Stub");
+    if (iHardwareServiceStubClass == null) {
+      return null;
+    }
+
+    Method asInterfaceMethod = maybeGetMethod(iHardwareServiceStubClass, "asInterface", IBinder.class);
+    if (asInterfaceMethod == null) {
+      return null;
+    }
+
+    return invoke(asInterfaceMethod, null, hardwareService);
+  }
+
+  private static Method getSetFlashEnabledMethod(Object iHardwareService) {
+    if (iHardwareService == null) {
+      return null;
+    }
+    Class<?> proxyClass = iHardwareService.getClass();
+    return maybeGetMethod(proxyClass, "setFlashlightEnabled", boolean.class);
+  }
+
+  private static Class<?> maybeForName(String name) {
+    try {
+      return Class.forName(name);
+    } catch (ClassNotFoundException cnfe) {
+      // OK
+      return null;
+    } catch (RuntimeException re) {
+      Log.w(TAG, "Unexpected error while finding class " + name, re);
+      return null;
+    }
+  }
+
+  private static Method maybeGetMethod(Class<?> clazz, String name, Class<?>... argClasses) {
+    try {
+      return clazz.getMethod(name, argClasses);
+    } catch (NoSuchMethodException nsme) {
+      // OK
+      return null;
+    } catch (RuntimeException re) {
+      Log.w(TAG, "Unexpected error while finding method " + name, re);
+      return null;
+    }
+  }
+
+  private static Object invoke(Method method, Object instance, Object... args) {
+    try {
+      return method.invoke(instance, args);
+    } catch (IllegalAccessException e) {
+      Log.w(TAG, "Unexpected error while invoking " + method, e);
+      return null;
+    } catch (InvocationTargetException e) {
+      Log.w(TAG, "Unexpected error while invoking " + method, e.getCause());
+      return null;
+    } catch (RuntimeException re) {
+      Log.w(TAG, "Unexpected error while invoking " + method, re);
+      return null;
+    }
+  }
+
+  private static void setFlashlight(boolean active) {
+    if (iHardwareService != null) {
+      invoke(setFlashEnabledMethod, iHardwareService, active);
+    }
+  }
+
+}
Index: app/src/main/java/com/nineoldandroids/view/ViewPropertyAnimator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nineoldandroids/view/ViewPropertyAnimator.java	(revision )
+++ app/src/main/java/com/nineoldandroids/view/ViewPropertyAnimator.java	(revision )
@@ -0,0 +1,346 @@
+/*
+ * Copyright (C) 2011 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.nineoldandroids.view;
+
+import java.util.WeakHashMap;
+import android.os.Build;
+import android.view.View;
+import android.view.animation.Interpolator;
+import com.nineoldandroids.animation.Animator;
+
+/**
+ * This class enables automatic and optimized animation of select properties on View objects.
+ * If only one or two properties on a View object are being animated, then using an
+ * {@link android.animation.ObjectAnimator} is fine; the property setters called by ObjectAnimator
+ * are well equipped to do the right thing to set the property and invalidate the view
+ * appropriately. But if several properties are animated simultaneously, or if you just want a
+ * more convenient syntax to animate a specific property, then ViewPropertyAnimator might be
+ * more well-suited to the task.
+ *
+ * <p>This class may provide better performance for several simultaneous animations, because
+ * it will optimize invalidate calls to take place only once for several properties instead of each
+ * animated property independently causing its own invalidation. Also, the syntax of using this
+ * class could be easier to use because the caller need only tell the View object which
+ * property to animate, and the value to animate either to or by, and this class handles the
+ * details of configuring the underlying Animator class and starting it.</p>
+ *
+ * <p>This class is not constructed by the caller, but rather by the View whose properties
+ * it will animate. Calls to {@link View#animate()} will return a reference
+ * to the appropriate ViewPropertyAnimator object for that View.</p>
+ *
+ */
+public abstract class ViewPropertyAnimator {
+    private static final WeakHashMap<View, ViewPropertyAnimator> ANIMATORS =
+            new WeakHashMap<View, ViewPropertyAnimator>(0);
+
+    /**
+     * This method returns a ViewPropertyAnimator object, which can be used to animate specific
+     * properties on this View.
+     *
+     * @param view View to animate.
+     * @return The ViewPropertyAnimator associated with this View.
+     */
+    public static ViewPropertyAnimator animate(View view) {
+        ViewPropertyAnimator animator = ANIMATORS.get(view);
+        if (animator == null) {
+            final int version = Integer.valueOf(Build.VERSION.SDK);
+            if (version >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
+                animator = new ViewPropertyAnimatorICS(view);
+            } else if (version >= Build.VERSION_CODES.HONEYCOMB) {
+                animator = new ViewPropertyAnimatorHC(view);
+            } else {
+                animator = new ViewPropertyAnimatorPreHC(view);
+            }
+            ANIMATORS.put(view, animator);
+        }
+        return animator;
+    }
+
+
+    /**
+     * Sets the duration for the underlying animator that animates the requested properties.
+     * By default, the animator uses the default value for ValueAnimator. Calling this method
+     * will cause the declared value to be used instead.
+     * @param duration The length of ensuing property animations, in milliseconds. The value
+     * cannot be negative.
+     * @return This object, allowing calls to methods in this class to be chained.
+     */
+    public abstract ViewPropertyAnimator setDuration(long duration);
+
+    /**
+     * Returns the current duration of property animations. If the duration was set on this
+     * object, that value is returned. Otherwise, the default value of the underlying Animator
+     * is returned.
+     *
+     * @see #setDuration(long)
+     * @return The duration of animations, in milliseconds.
+     */
+    public abstract long getDuration();
+
+    /**
+     * Returns the current startDelay of property animations. If the startDelay was set on this
+     * object, that value is returned. Otherwise, the default value of the underlying Animator
+     * is returned.
+     *
+     * @see #setStartDelay(long)
+     * @return The startDelay of animations, in milliseconds.
+     */
+    public abstract long getStartDelay();
+
+    /**
+     * Sets the startDelay for the underlying animator that animates the requested properties.
+     * By default, the animator uses the default value for ValueAnimator. Calling this method
+     * will cause the declared value to be used instead.
+     * @param startDelay The delay of ensuing property animations, in milliseconds. The value
+     * cannot be negative.
+     * @return This object, allowing calls to methods in this class to be chained.
+     */
+    public abstract ViewPropertyAnimator setStartDelay(long startDelay);
+
+    /**
+     * Sets the interpolator for the underlying animator that animates the requested properties.
+     * By default, the animator uses the default interpolator for ValueAnimator. Calling this method
+     * will cause the declared object to be used instead.
+     *
+     * @param interpolator The TimeInterpolator to be used for ensuing property animations.
+     * @return This object, allowing calls to methods in this class to be chained.
+     */
+    public abstract ViewPropertyAnimator setInterpolator(/*Time*/Interpolator interpolator);
+
+    /**
+     * Sets a listener for events in the underlying Animators that run the property
+     * animations.
+     *
+     * @param listener The listener to be called with AnimatorListener events.
+     * @return This object, allowing calls to methods in this class to be chained.
+     */
+    public abstract ViewPropertyAnimator setListener(Animator.AnimatorListener listener);
+
+    /**
+     * Starts the currently pending property animations immediately. Calling <code>start()</code>
+     * is optional because all animations start automatically at the next opportunity. However,
+     * if the animations are needed to start immediately and synchronously (not at the time when
+     * the next event is processed by the hierarchy, which is when the animations would begin
+     * otherwise), then this method can be used.
+     */
+    public abstract void start();
+
+    /**
+     * Cancels all property animations that are currently running or pending.
+     */
+    public abstract void cancel();
+
+    /**
+     * This method will cause the View's <code>x</code> property to be animated to the
+     * specified value. Animations already running on the property will be canceled.
+     *
+     * @param value The value to be animated to.
+     * @see View#setX(float)
+     * @return This object, allowing calls to methods in this class to be chained.
+     */
+    public abstract ViewPropertyAnimator x(float value);
+
+    /**
+     * This method will cause the View's <code>x</code> property to be animated by the
+     * specified value. Animations already running on the property will be canceled.
+     *
+     * @param value The amount to be animated by, as an offset from the current value.
+     * @see View#setX(float)
+     * @return This object, allowing calls to methods in this class to be chained.
+     */
+    public abstract ViewPropertyAnimator xBy(float value);
+
+    /**
+     * This method will cause the View's <code>y</code> property to be animated to the
+     * specified value. Animations already running on the property will be canceled.
+     *
+     * @param value The value to be animated to.
+     * @see View#setY(float)
+     * @return This object, allowing calls to methods in this class to be chained.
+     */
+    public abstract ViewPropertyAnimator y(float value);
+
+    /**
+     * This method will cause the View's <code>y</code> property to be animated by the
+     * specified value. Animations already running on the property will be canceled.
+     *
+     * @param value The amount to be animated by, as an offset from the current value.
+     * @see View#setY(float)
+     * @return This object, allowing calls to methods in this class to be chained.
+     */
+    public abstract ViewPropertyAnimator yBy(float value);
+
+    /**
+     * This method will cause the View's <code>rotation</code> property to be animated to the
+     * specified value. Animations already running on the property will be canceled.
+     *
+     * @param value The value to be animated to.
+     * @see View#setRotation(float)
+     * @return This object, allowing calls to methods in this class to be chained.
+     */
+    public abstract ViewPropertyAnimator rotation(float value);
+
+    /**
+     * This method will cause the View's <code>rotation</code> property to be animated by the
+     * specified value. Animations already running on the property will be canceled.
+     *
+     * @param value The amount to be animated by, as an offset from the current value.
+     * @see View#setRotation(float)
+     * @return This object, allowing calls to methods in this class to be chained.
+     */
+    public abstract ViewPropertyAnimator rotationBy(float value);
+
+    /**
+     * This method will cause the View's <code>rotationX</code> property to be animated to the
+     * specified value. Animations already running on the property will be canceled.
+     *
+     * @param value The value to be animated to.
+     * @see View#setRotationX(float)
+     * @return This object, allowing calls to methods in this class to be chained.
+     */
+    public abstract ViewPropertyAnimator rotationX(float value);
+
+    /**
+     * This method will cause the View's <code>rotationX</code> property to be animated by the
+     * specified value. Animations already running on the property will be canceled.
+     *
+     * @param value The amount to be animated by, as an offset from the current value.
+     * @see View#setRotationX(float)
+     * @return This object, allowing calls to methods in this class to be chained.
+     */
+    public abstract ViewPropertyAnimator rotationXBy(float value);
+
+    /**
+     * This method will cause the View's <code>rotationY</code> property to be animated to the
+     * specified value. Animations already running on the property will be canceled.
+     *
+     * @param value The value to be animated to.
+     * @see View#setRotationY(float)
+     * @return This object, allowing calls to methods in this class to be chained.
+     */
+    public abstract ViewPropertyAnimator rotationY(float value);
+
+    /**
+     * This method will cause the View's <code>rotationY</code> property to be animated by the
+     * specified value. Animations already running on the property will be canceled.
+     *
+     * @param value The amount to be animated by, as an offset from the current value.
+     * @see View#setRotationY(float)
+     * @return This object, allowing calls to methods in this class to be chained.
+     */
+    public abstract ViewPropertyAnimator rotationYBy(float value);
+
+    /**
+     * This method will cause the View's <code>translationX</code> property to be animated to the
+     * specified value. Animations already running on the property will be canceled.
+     *
+     * @param value The value to be animated to.
+     * @see View#setTranslationX(float)
+     * @return This object, allowing calls to methods in this class to be chained.
+     */
+    public abstract ViewPropertyAnimator translationX(float value);
+
+    /**
+     * This method will cause the View's <code>translationX</code> property to be animated by the
+     * specified value. Animations already running on the property will be canceled.
+     *
+     * @param value The amount to be animated by, as an offset from the current value.
+     * @see View#setTranslationX(float)
+     * @return This object, allowing calls to methods in this class to be chained.
+     */
+    public abstract ViewPropertyAnimator translationXBy(float value);
+
+    /**
+     * This method will cause the View's <code>translationY</code> property to be animated to the
+     * specified value. Animations already running on the property will be canceled.
+     *
+     * @param value The value to be animated to.
+     * @see View#setTranslationY(float)
+     * @return This object, allowing calls to methods in this class to be chained.
+     */
+    public abstract ViewPropertyAnimator translationY(float value);
+
+    /**
+     * This method will cause the View's <code>translationY</code> property to be animated by the
+     * specified value. Animations already running on the property will be canceled.
+     *
+     * @param value The amount to be animated by, as an offset from the current value.
+     * @see View#setTranslationY(float)
+     * @return This object, allowing calls to methods in this class to be chained.
+     */
+    public abstract ViewPropertyAnimator translationYBy(float value);
+
+    /**
+     * This method will cause the View's <code>scaleX</code> property to be animated to the
+     * specified value. Animations already running on the property will be canceled.
+     *
+     * @param value The value to be animated to.
+     * @see View#setScaleX(float)
+     * @return This object, allowing calls to methods in this class to be chained.
+     */
+    public abstract ViewPropertyAnimator scaleX(float value);
+
+    /**
+     * This method will cause the View's <code>scaleX</code> property to be animated by the
+     * specified value. Animations already running on the property will be canceled.
+     *
+     * @param value The amount to be animated by, as an offset from the current value.
+     * @see View#setScaleX(float)
+     * @return This object, allowing calls to methods in this class to be chained.
+     */
+    public abstract ViewPropertyAnimator scaleXBy(float value);
+
+    /**
+     * This method will cause the View's <code>scaleY</code> property to be animated to the
+     * specified value. Animations already running on the property will be canceled.
+     *
+     * @param value The value to be animated to.
+     * @see View#setScaleY(float)
+     * @return This object, allowing calls to methods in this class to be chained.
+     */
+    public abstract ViewPropertyAnimator scaleY(float value);
+
+    /**
+     * This method will cause the View's <code>scaleY</code> property to be animated by the
+     * specified value. Animations already running on the property will be canceled.
+     *
+     * @param value The amount to be animated by, as an offset from the current value.
+     * @see View#setScaleY(float)
+     * @return This object, allowing calls to methods in this class to be chained.
+     */
+    public abstract ViewPropertyAnimator scaleYBy(float value);
+
+    /**
+     * This method will cause the View's <code>alpha</code> property to be animated to the
+     * specified value. Animations already running on the property will be canceled.
+     *
+     * @param value The value to be animated to.
+     * @see View#setAlpha(float)
+     * @return This object, allowing calls to methods in this class to be chained.
+     */
+    public abstract ViewPropertyAnimator alpha(float value);
+
+    /**
+     * This method will cause the View's <code>alpha</code> property to be animated by the
+     * specified value. Animations already running on the property will be canceled.
+     *
+     * @param value The amount to be animated by, as an offset from the current value.
+     * @see View#setAlpha(float)
+     * @return This object, allowing calls to methods in this class to be chained.
+     */
+    public abstract ViewPropertyAnimator alphaBy(float value);
+}
Index: app/src/main/java/com/base/tools/entity/PhoneInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/entity/PhoneInfo.java	(revision )
+++ app/src/main/java/com/base/tools/entity/PhoneInfo.java	(revision )
@@ -0,0 +1,260 @@
+package com.base.tools.entity;
+
+import android.text.TextUtils;
+import android.util.DisplayMetrics;
+
+import java.io.UnsupportedEncodingException;
+import java.net.URLEncoder;
+
+
+public class PhoneInfo {
+	private final static PhoneInfo PHONEINFO = new PhoneInfo();
+
+	private PhoneInfo() {
+	}
+
+	/**
+	 * @return 返回逻辑的实例.
+	 */
+	public static PhoneInfo instance() {
+
+		return PHONEINFO;
+	}
+	/**  
+	   * 唯一的设备ID：   
+	   * GSM手机的 IMEI 和 CDMA手机的 MEID.    
+	   * Return null if device ID is not available.   
+	   */   
+	public String deviceId;
+	/**
+	 * 手机系统类型
+	 */
+	public String softwareType;
+	/**  
+	   * 设备的软件版本号：   
+	   * 例如：the IMEI/SV(software version) for GSM phones.   
+	   * Return null if the software version is not available.    
+	   */  
+	public String softwareVersion;
+	/**   
+	   * 手机号：   
+	   * GSM手机的 MSISDN.   
+	   * Return null if it is unavailable.    
+	   */  
+	public String line1Number;
+	public String line2Number;
+	
+	 /**
+	   * 当前使用的网络类型：   
+	   * 例如： NETWORK_TYPE_UNKNOWN  网络类型未知  0   
+	     NETWORK_TYPE_GPRS     GPRS网络  1   
+	     NETWORK_TYPE_EDGE     EDGE网络  2   
+	     NETWORK_TYPE_UMTS     UMTS网络  3   
+	     NETWORK_TYPE_HSDPA    HSDPA网络  8    
+	     NETWORK_TYPE_HSUPA    HSUPA网络  9   
+	     NETWORK_TYPE_HSPA     HSPA网络  10   
+	     NETWORK_TYPE_CDMA     CDMA网络,IS95A 或 IS95B.  4   
+	     NETWORK_TYPE_EVDO_0   EVDO网络, revision 0.  5   
+	     NETWORK_TYPE_EVDO_A   EVDO网络, revision A.  6   
+	     NETWORK_TYPE_1xRTT    1xRTT网络  7   
+	   */    
+	public String networkType;//int  
+	
+	/**  
+	   * 唯一的用户ID：   
+	   * 例如：IMSI(国际移动用户识别码) for a GSM phone.   
+	   * 需要权限：READ_PHONE_STATE   
+	   */    
+	public String subscriberId;
+	
+	/**
+	 * 手机型号
+	 */
+	public String model;
+	
+	/**
+	 * 手机品牌
+	 */
+	public String brand;
+	/**
+	 * 2位国家代码(来自sim卡)
+	 */
+	public String iso2Country;
+//	model = android.os.Build.MODEL;   // 手机型号
+//	sdk=android.os.Build.VERSION.SDK;    // SDK号
+//	release=android.os.Build.VERSION.RELEASE;  // android系统版本号
+
+	/**
+	 * 包名
+	 */
+	public String bundleid;
+	/**
+	 * 版本号  2.4.5
+	 */
+	public String bundleversion;
+	/**
+	 * 版本号
+	 */
+	public String bundleversioncode;
+
+	public String channel;// 渠道
+	public String mdataAppID;// mData App id
+	public String androidID;// android id
+	public String googleAdid;// Google 广告id
+	public String ipToCountry;//根据ip获取地区
+	public String event;// 事件
+	public int locale;// LCID, 语种对应的id，int类型；获取到国家（地区）后，根据语种获取LCID
+	public String browser;
+	public String screen;// 屏幕分辨率
+	public String density;// 设备分辨率
+	public String referrer;// 推广渠道信息
+	public DisplayMetrics dm;// 屏幕相关数据
+	public String gamecode;// 应用代码
+	public String mobilecode;// 设备唯一码
+
+	public void setDeviceId(String deviceId) {
+		this.deviceId = deviceId;
+	}
+
+	public void setSoftwareType(String softwareType) {
+		this.softwareType = softwareType;
+	}
+
+	public void setSoftwareVersion(String softwareVersion) {
+		this.softwareVersion = softwareVersion;
+	}
+
+	public void setLine1Number(String line1Number) {
+		this.line1Number = line1Number;
+	}
+
+	public void setLine2Number(String line2Number) {
+		this.line2Number = line2Number;
+	}
+
+	public void setNetworkType(String networkType) {
+		this.networkType = networkType;
+	}
+
+	public void setSubscriberId(String subscriberId) {
+		this.subscriberId = subscriberId;
+	}
+
+	public void setModel(String model) {
+		this.model = model;
+	}
+
+	public void setBrand(String brand) {
+		this.brand = brand;
+	}
+
+	public void setIso2Country(String iso2Country) {
+		this.iso2Country = iso2Country;
+	}
+
+	public void setDm(DisplayMetrics dm){
+		this.dm = dm;
+	}
+	public String toString(){
+		StringBuffer sb = new StringBuffer();
+		sb.append("&phonebrand="+brand);
+		try {
+			sb.append("&phonemodel="+URLEncoder.encode(model, "UTF-8"));
+		} catch (UnsupportedEncodingException e) {
+			e.printStackTrace();
+		}
+		sb.append("&ostype="+softwareType);
+		sb.append("&osversion="+softwareVersion);
+		sb.append("&bundleid="+bundleid);// 包名
+		sb.append("&bundleversion="+bundleversion);// 2.4.5
+		sb.append("&bundleversioncode="+bundleversioncode);// versioncode
+		sb.append("&androidid="+androidID);// android id
+		try {
+			sb.append("&referrer="+URLEncoder.encode(referrer, "UTF-8"));// 推广渠道信息
+		} catch (UnsupportedEncodingException e) {
+		}
+		sb.append("&adid="+googleAdid);// 广告id
+		sb.append("&game_code="+gamecode);
+		sb.append("&mobile_code="+mobilecode);
+
+		return sb.toString();
+	}
+
+
+	public void setChannel(String channel) {
+		this.channel = channel;
+	}
+
+	public void setMdataAppID(String mdataAppID) {
+		this.mdataAppID = mdataAppID;
+	}
+
+	public void setAndroidID(String androidID) {
+		this.androidID = androidID;
+	}
+
+	public void setGoogleAdid(String adid) {
+		this.googleAdid = adid;
+	}
+
+	public String getIpToCountry() {
+		if(TextUtils.isEmpty(ipToCountry))
+			return "";
+		return ipToCountry.toLowerCase();
+	}
+	public String getIpToCountryWithHttp() {
+		if(TextUtils.isEmpty(ipToCountry))
+			return "";
+		return ipToCountry.toLowerCase()+".";
+	}
+
+	public void setIpToCountry(String ipToCountry) {
+		this.ipToCountry = ipToCountry;
+	}
+
+	public void setEvent(String event) {
+		this.event = event;
+	}
+
+	public void setLocale(int locale) {
+		this.locale = locale;
+	}
+
+	public void setBrowser(String browser) {
+		this.browser = browser;
+	}
+
+	public void setScreen(String screen) {
+		this.screen = screen;
+	}
+
+	public void setDensity(String density) {
+		this.density = density;
+	}
+
+	public void setBundleid(String bundleid) {
+		this.bundleid = bundleid;
+	}
+
+	public void setBundleversion(String bundleversion) {
+		this.bundleversion = bundleversion;
+	}
+
+	public void setBundleversioncode(String bundleversioncode) {
+		this.bundleversioncode = bundleversioncode;
+	}
+
+	public void setReferrer(String referrer) {
+		this.referrer = referrer;
+	}
+
+
+	public void setGamecode(String gamecode) {
+		this.gamecode = gamecode;
+	}
+
+	public void setMobilecode(String mobilecode) {
+		this.mobilecode = mobilecode;
+	}
+
+}
Index: app/src/main/res/layout/page_search_history_list_endview.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/page_search_history_list_endview.xml	(revision )
+++ app/src/main/res/layout/page_search_history_list_endview.xml	(revision )
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="horizontal" android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:gravity="center">
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="@dimen/search_history_list_item_height"
+        android:textSize="@dimen/common_font_size_12"
+        android:textColor="@color/common_font_color_868585"
+        android:paddingRight="@dimen/common_content_margin_5"
+        android:gravity="center_vertical|right"
+        android:text="@string/search_title_sub6"/>
+    <TextView
+        android:layout_width="12dip"
+        android:layout_height="15dip"
+        android:background="@mipmap/common_delete_bg"/>
+</LinearLayout>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision )
+++ .idea/misc.xml	(revision )
@@ -0,0 +1,46 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="EntryPointsManager">
+    <entry_points version="2.0" />
+  </component>
+  <component name="NullableNotNullManager">
+    <option name="myDefaultNullable" value="android.support.annotation.Nullable" />
+    <option name="myDefaultNotNull" value="android.support.annotation.NonNull" />
+    <option name="myNullables">
+      <value>
+        <list size="4">
+          <item index="0" class="java.lang.String" itemvalue="org.jetbrains.annotations.Nullable" />
+          <item index="1" class="java.lang.String" itemvalue="javax.annotation.Nullable" />
+          <item index="2" class="java.lang.String" itemvalue="edu.umd.cs.findbugs.annotations.Nullable" />
+          <item index="3" class="java.lang.String" itemvalue="android.support.annotation.Nullable" />
+        </list>
+      </value>
+    </option>
+    <option name="myNotNulls">
+      <value>
+        <list size="4">
+          <item index="0" class="java.lang.String" itemvalue="org.jetbrains.annotations.NotNull" />
+          <item index="1" class="java.lang.String" itemvalue="javax.annotation.Nonnull" />
+          <item index="2" class="java.lang.String" itemvalue="edu.umd.cs.findbugs.annotations.NonNull" />
+          <item index="3" class="java.lang.String" itemvalue="android.support.annotation.NonNull" />
+        </list>
+      </value>
+    </option>
+  </component>
+  <component name="ProjectLevelVcsManager" settingsEditedManually="false">
+    <OptionsSetting value="true" id="Add" />
+    <OptionsSetting value="true" id="Remove" />
+    <OptionsSetting value="true" id="Checkout" />
+    <OptionsSetting value="true" id="Update" />
+    <OptionsSetting value="true" id="Status" />
+    <OptionsSetting value="true" id="Edit" />
+    <ConfirmationsSetting value="0" id="Add" />
+    <ConfirmationsSetting value="0" id="Remove" />
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_7" assert-keyword="true" jdk-15="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/build/classes" />
+  </component>
+  <component name="ProjectType">
+    <option name="id" value="Android" />
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/java/com/base/tools/google/Inventory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/google/Inventory.java	(revision )
+++ app/src/main/java/com/base/tools/google/Inventory.java	(revision )
@@ -0,0 +1,91 @@
+/* Copyright (c) 2012 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.base.tools.google;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Represents a block of information about in-app items.
+ * An Inventory is returned by such methods as {@link IabHelper#queryInventory}.
+ */
+public class Inventory {
+    Map<String,SkuDetails> mSkuMap = new HashMap<String,SkuDetails>();
+    Map<String,Purchase> mPurchaseMap = new HashMap<String,Purchase>();
+
+    Inventory() { }
+
+    /** Returns the listing details for an in-app product. */
+    public SkuDetails getSkuDetails(String sku) {
+        return mSkuMap.get(sku);
+    }
+
+    /** Returns purchase information for a given product, or null if there is no purchase. */
+    public Purchase getPurchase(String sku) {
+        return mPurchaseMap.get(sku);
+    }
+
+    /** Returns whether or not there exists a purchase of the given product. */
+    public boolean hasPurchase(String sku) {
+        return mPurchaseMap.containsKey(sku);
+    }
+
+    /** Return whether or not details about the given product are available. */
+    public boolean hasDetails(String sku) {
+        return mSkuMap.containsKey(sku);
+    }
+
+    /**
+     * Erase a purchase (locally) from the inventory, given its product ID. This just
+     * modifies the Inventory object locally and has no effect on the server! This is
+     * useful when you have an existing Inventory object which you know to be up to date,
+     * and you have just consumed an item successfully, which means that erasing its
+     * purchase data from the Inventory you already have is quicker than querying for
+     * a new Inventory.
+     */
+    public void erasePurchase(String sku) {
+        if (mPurchaseMap.containsKey(sku)) mPurchaseMap.remove(sku);
+    }
+
+    /** Returns a list of all owned product IDs. */
+    List<String> getAllOwnedSkus() {
+        return new ArrayList<String>(mPurchaseMap.keySet());
+    }
+
+    /** Returns a list of all owned product IDs of a given type */
+    List<String> getAllOwnedSkus(String itemType) {
+        List<String> result = new ArrayList<String>();
+        for (Purchase p : mPurchaseMap.values()) {
+            if (p.getItemType().equals(itemType)) result.add(p.getSku());
+        }
+        return result;
+    }
+
+    /** Returns a list of all purchases. */
+    List<Purchase> getAllPurchases() {
+        return new ArrayList<Purchase>(mPurchaseMap.values());
+    }
+
+    void addSkuDetails(SkuDetails d) {
+        mSkuMap.put(d.getSku(), d);
+    }
+
+    void addPurchase(Purchase p) {
+        mPurchaseMap.put(p.getSku(), p);
+    }
+}
Index: app/src/main/java/com/oasgames/android/oaspay/adapter/AdapterNewsList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/adapter/AdapterNewsList.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/adapter/AdapterNewsList.java	(revision )
@@ -0,0 +1,62 @@
+package com.oasgames.android.oaspay.adapter;
+
+import android.text.format.DateFormat;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.base.tools.list.BasesListAdapter;
+import com.oasgames.android.oaspay.R;
+import com.oasgames.android.oaspay.activity.FragmentNews;
+import com.oasgames.android.oaspay.entity.NewsInfo;
+
+import java.util.List;
+
+/**
+ * 资讯列表
+ * @author Administrator
+ *
+ */
+public class AdapterNewsList extends BasesListAdapter<NewsInfo> {
+	FragmentNews c;
+	public AdapterNewsList(FragmentNews activity, List<NewsInfo> data,
+						   int count, LinearLayout footerView) {
+		super(activity.getActivity(), data, count, footerView);
+		this.c = (FragmentNews)activity;
+	}
+
+	@Override
+	public void loadMore() {
+		// no more
+		c.loadMoreNews();
+	}
+
+	@Override
+	public View getRowView(int position, View convertView, ViewGroup parent) {
+		ViewHoder hoder = null;
+		if(null == convertView){
+			convertView = c.getActivity().getLayoutInflater().inflate(R.layout.fragment_main_news_item, null);
+			hoder = new ViewHoder();
+			hoder.title = (TextView) convertView.findViewById(R.id.fragment_news_item_title);
+			hoder.discrip = (TextView) convertView.findViewById(R.id.fragment_news_item_discrip);
+			hoder.time = (TextView) convertView.findViewById(R.id.fragment_news_item_date);
+			convertView.setTag(hoder);
+		}else{
+			hoder = (ViewHoder) convertView.getTag();
+		}
+		
+		final NewsInfo info = getItem(position);
+		hoder.title.setText(info.title);
+		hoder.discrip.setText(info.summary);
+		hoder.time.setText(DateFormat.format("MM-dd", Long.parseLong(info.start_time + "000")));
+
+		return convertView;
+	}
+
+	static class ViewHoder{
+		TextView title;					// 标题
+		TextView discrip;				// 描述
+		TextView time;					// 时间
+	}
+}
Index: app/src/main/java/com/base/tools/list/BasesListAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/list/BasesListAdapter.java	(revision )
+++ app/src/main/java/com/base/tools/list/BasesListAdapter.java	(revision )
@@ -0,0 +1,120 @@
+package com.base.tools.list;
+
+import android.app.Activity;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.BaseAdapter;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+
+import com.base.tools.utils.BasesUtils;
+
+import java.util.List;
+
+/**
+ * ListView使用的Adapter的基类，理论上所有的ListView Adapter都继承这个Adapter.
+ * 
+ * @author xdb
+ * 
+ * @param <T>
+ */
+public abstract class BasesListAdapter<T> extends BaseAdapter {
+
+	protected Activity activity;
+	public List<T> data;
+	public int pages = 1;
+	public int currentPage = 1;
+	protected LinearLayout footerView;
+	protected int moreLayout, endLayout;
+
+	/**
+	 * 构造方法.
+	 * 
+	 * @param activity
+	 * @param data
+	 *            数据
+	 * @param count
+	 *            总页数，不分页传1
+	 * @param footerView
+	 *            列表脚布局对象
+	 * @param moreLayout
+	 *            列表脚布局对象
+	 * @param endLayout
+	 *            列表脚布局对象
+	 */
+	public BasesListAdapter(Activity activity, List<T> data, int count, LinearLayout footerView,
+							int moreLayout, int endLayout) {
+		this.activity = activity;
+		this.data = data;
+		this.pages = count;
+		this.footerView = footerView;
+		this.moreLayout = moreLayout;
+		this.endLayout = endLayout;
+	}
+	public BasesListAdapter(Activity activity, List<T> data, int count, LinearLayout footerView) {
+		this.activity = activity;
+		this.data = data;
+		this.pages = count;
+		this.footerView = footerView;
+	}
+
+	@Override
+	public T getItem(int position) {
+		return data.get(position);
+	}
+
+	@Override
+	public long getItemId(int position) {
+		return position;
+	}
+
+	@Override
+	public int getCount() {
+		if (null != data && data.size() > 0)
+			return data.size();
+		else
+			return 0;
+	}
+
+	@Override
+	public View getView(int position, View convertView, ViewGroup parent) {
+		if (data.size() - 1 == position) {
+			if (pages == currentPage) {
+				if (null != footerView) {
+					footerView.removeAllViews();
+					if(endLayout != 0)
+					footerView.addView(BasesUtils.getEndViewFootView(activity, endLayout), new LinearLayout.LayoutParams(
+							LinearLayout.LayoutParams.FILL_PARENT, LinearLayout.LayoutParams.FILL_PARENT));
+				}
+			} else {
+				this.loadMore();
+				if (null != footerView) {
+					footerView.removeAllViews();
+					if(moreLayout != 0)
+					footerView.addView(BasesUtils.getLoadMoreFootView(activity, moreLayout), new LinearLayout.LayoutParams(
+							LinearLayout.LayoutParams.FILL_PARENT, LinearLayout.LayoutParams.FILL_PARENT));
+				}
+			}
+		}
+		return getRowView(position, convertView, parent);
+	}
+
+	/**
+	 * 获取更多数据的方法.(子类实现)
+	 */
+	public abstract void loadMore();
+
+	/**
+	 * 获取每一行显示的内容.(子类实现)
+	 * 
+	 * @param position
+	 * @param convertView
+	 * @param parent
+	 * @return
+	 */
+	public abstract View getRowView(int position, View convertView, ViewGroup parent);
+
+	public void loadImg(final ImageView imageView, String imgUrl){
+		BasesUtils.loadImg(activity, imageView, imgUrl);
+	}
+}
Index: app/src/main/java/com/oasgames/android/oaspay/activity/ActivityOrderListSlide.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/activity/ActivityOrderListSlide.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/activity/ActivityOrderListSlide.java	(revision )
@@ -0,0 +1,484 @@
+package com.oasgames.android.oaspay.activity;
+
+import android.app.Activity;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.os.Bundle;
+import android.text.TextUtils;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.RadioButton;
+import android.widget.RadioGroup;
+import android.widget.Toast;
+
+import com.base.tools.activity.BasesActivity;
+import com.base.tools.http.CallbackResultForActivity;
+import com.base.tools.slide.SlideListView;
+import com.base.tools.slide.SlideListView.SlideMode;
+import com.base.tools.utils.BasesUtils;
+import com.oasgames.android.oaspay.R;
+import com.oasgames.android.oaspay.adapter.AdapterOrderListSlide;
+import com.oasgames.android.oaspay.entity.OrderInfo;
+import com.oasgames.android.oaspay.entity.OrderList;
+import com.oasgames.android.oaspay.service.HttpService;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Map;
+
+
+public class ActivityOrderListSlide extends BasesActivity {
+    final int TYPE_HISTORY = 1; // 历史订单
+    final int TYPE_MONTH = 2;   // 当月订单
+    final int PAGESIZE = 20;    // 每页记录数
+    boolean isLoadMore = false; // 是否正在加载下一页数据
+    int currentType = TYPE_MONTH;
+    RadioGroup radioGroup;
+    private SlideListView mSlideListViewHistory, mSlideListViewMonth;
+    private AdapterOrderListSlide mAdapterHistory, mAdapterMonth;
+
+    Map<Integer, OrderList> map_type;// key为type，value为该type下的数据
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.page_order_list_slide);
+        initHead(true, true, null, false, getString(R.string.fragment_shop_function_order), false, null);
+
+        MyApplication application = (MyApplication)getApplication();
+        application.isReLoadOderList = true;// 每次onCreate默认重新加载所有数据
+
+        radioGroup = (RadioGroup)findViewById(R.id.order_list_radiogroup);
+        radioGroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
+            @Override
+            public void onCheckedChanged(RadioGroup group, int checkedId) {
+                updateRadioButton(checkedId);
+            }
+        });
+
+        mSlideListViewHistory = ((SlideListView) findViewById(R.id.list_view));
+        mSlideListViewMonth = ((SlideListView) findViewById(R.id.list_view_month));
+
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        MyApplication myApplication = (MyApplication)getApplication();
+        if(myApplication.isReLoadOderList){
+            reLoadData();
+        }
+    }
+    private void init(){
+        if (map_type == null)
+            map_type = new HashMap<Integer, OrderList>();
+        map_type.clear();
+
+        OrderList orderList = new OrderList();
+        orderList.list = new ArrayList<>();
+        orderList.setTotal_page("0");
+        orderList.setCur_page("0");
+        orderList.setEvery_page_count(""+PAGESIZE);
+        map_type.put(TYPE_HISTORY, orderList);
+
+        mAdapterHistory = new AdapterOrderListSlide(this, orderList);
+        mSlideListViewHistory.setAdapter(mAdapterHistory);
+        mSlideListViewHistory.setOnItemClickListener(new MyOnItemClickLisnter());
+
+        orderList = new OrderList();
+        orderList.list = new ArrayList<>();
+        orderList.setTotal_page("0");
+        orderList.setCur_page("0");
+        orderList.setEvery_page_count(""+PAGESIZE);
+        map_type.put(TYPE_MONTH, orderList);
+
+        mAdapterMonth = new AdapterOrderListSlide(this, orderList);
+        mSlideListViewMonth.setAdapter(mAdapterMonth);
+        mSlideListViewMonth.setOnItemClickListener(new MyOnItemClickLisnter());
+        ((MyApplication)getApplication()).isReLoadOderList = false;// 设置为false，表示重新获取过数据一次
+    }
+    private void reLoadData(){
+        init();
+        loadNewData();
+    }
+    private void loadNewData(){
+        setWaitScreen(true);
+//        randomCreateTestData();
+        OrderList cur = map_type.get(currentType);
+        HttpService.instance().getOrderList(currentType, Integer.valueOf(cur.cur_page) + 1, PAGESIZE, new MyCallBack());
+    }
+    public void loadMore(){
+        if(isLoadMore)
+            return;
+        isLoadMore = true;
+        OrderList cur = map_type.get(currentType);
+        if(Integer.valueOf(cur.total_page) > Integer.valueOf(cur.cur_page)){
+            isLoadMore = false;
+            return;
+        }
+        HttpService.instance().getOrderList(currentType, Integer.valueOf(cur.cur_page)+1, PAGESIZE, new MyCallBack());
+    }
+    private void showCurrentData(){
+        if(map_type == null){
+            reLoadData();
+            return;
+        }
+        OrderList cur = map_type.get(currentType);
+        if(cur!=null && "0".equals(cur.cur_page)){// 第一次没有订单时，再次加载数据,以cur_page是否为0判断，是0表示从未加载过数据，不是0表示已加载过数据
+            loadNewData();
+            return;
+        }
+        if(currentType == TYPE_HISTORY) {
+            mSlideListViewHistory.setVisibility(View.VISIBLE);
+            mSlideListViewMonth.setVisibility(View.INVISIBLE);
+
+            mAdapterHistory.mData = cur;
+            mAdapterHistory.notifyDataSetChanged();
+        }else if(currentType == TYPE_MONTH) {
+            mSlideListViewMonth.setVisibility(View.VISIBLE);
+            mSlideListViewHistory.setVisibility(View.INVISIBLE);
+
+            mAdapterMonth.mData = cur;
+            mAdapterMonth.notifyDataSetChanged();
+        }
+
+        if("1".equals(cur.cur_page) && cur.list.isEmpty()){// 第一页 且 无数据时 ，显示提示信息
+            findViewById(R.id.order_list_slide_empty).setVisibility(View.VISIBLE);
+        }else
+            findViewById(R.id.order_list_slide_empty).setVisibility(View.GONE);
+
+        setWaitScreen(false);
+        isLoadMore = false;
+    }
+
+    class MyOnItemClickLisnter implements AdapterView.OnItemClickListener{
+        @Override
+        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+            OrderInfo order = (OrderInfo) parent.getAdapter().getItem(position);
+            topay(order, position, 1);
+        }
+    }
+    class MyCallBack implements CallbackResultForActivity{
+        @Override
+        public void success(Object data, int statusCode, String msg) {
+            OrderList list = (OrderList)data;
+            OrderList cur = map_type.get(currentType);
+            cur.setCur_page(list.cur_page);
+            cur.setTotal_page(list.total_page);
+            if (cur.list == null)
+                cur.list = new ArrayList<>();
+            cur.list.addAll(list.list);
+            map_type.put(currentType, cur);
+            showCurrentData();
+        }
+
+        @Override
+        public void fail(int statusCode, String msg) {
+            setWaitScreen(false);
+        }
+
+        @Override
+        public void exception(Exception e) {
+            setWaitScreen(false);
+            OrderList cur = map_type.get(currentType);
+            if(cur == null || cur.isEmpty()){// 表示第一次获取数据，网络有问题
+//                findViewById(R.id.order_list_slide_empty).setVisibility(View.VISIBLE);
+                showNetWrokError();
+            }
+        }
+    }
+
+    @Override
+    public void retry() {
+        super.retry();
+        loadNewData();
+    }
+
+    private void updateRadioButton(int checkedId){
+        int count = radioGroup.getChildCount();
+        for (int i = 0; i < count; i++) {
+            RadioButton radioButton = (RadioButton)radioGroup.getChildAt(i);
+            if(checkedId == radioButton.getId())
+                radioButton.setTextColor(getResources().getColor(R.color.common_font_color_ffffff));
+            else
+                radioButton.setTextColor(getResources().getColor(R.color.common_button_bg_unselected));
+        }
+        radioGroup.check(checkedId);
+
+        switch (checkedId){
+            case R.id.order_list_radiogroup_month:
+                currentType = TYPE_MONTH;
+                break;
+            case R.id.order_list_radiogroup_history:
+                currentType = TYPE_HISTORY;
+                break;
+        }
+        showCurrentData();// 切换时，展示已获取的数据
+    }
+
+    /**
+     * 去逛逛，无历史订单时，前往商品列表
+     * @param view
+     */
+    public void toproduct_list(View view){
+        finish();
+        startActivity(new Intent().setClass(this, ActivityProductList.class));
+    }
+
+    public void showCancelDialog(final int position){
+        BasesUtils.showDialogBySystemUI(this, getString(R.string.order_list_item_label8), getString(R.string.search_title_sub1), new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                dialog.cancel();
+            }
+        }, "", null, getString(R.string.search_title_sub2), new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                dialog.cancel();
+                deleteOrder(position, "2");
+            }
+        });
+    }
+    public void showDeleteDialog(final int position){
+        BasesUtils.showDialogBySystemUI(this, getString(R.string.order_list_item_label7), getString(R.string.search_title_sub1), new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                dialog.cancel();
+            }
+        }, "", null, getString(R.string.search_title_sub2), new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                dialog.cancel();
+                deleteOrder(position, "1");
+            }
+        });
+    }
+    private void deleteOrder(int position, String operate_type){
+        setWaitScreen(true);
+        OrderInfo info = null;
+        if(currentType == TYPE_MONTH){
+            info = (OrderInfo)mAdapterMonth.mData.list.get(position);
+        }else  if(currentType == TYPE_HISTORY){
+            info = (OrderInfo)mAdapterHistory.mData.list.get(position);
+        }
+        HttpService.instance().deleteOrderByID(info.order_id, operate_type, new DeleteOrderCallback(this, info, position));
+    }
+
+    class DeleteOrderCallback implements CallbackResultForActivity{
+        Activity c;
+        OrderInfo info;
+        int position ;
+        public DeleteOrderCallback(Activity activity, OrderInfo info, int position){
+            this.c = activity;
+            this.info = info;
+            this.position = position;
+        }
+        @Override
+        public void success(Object data, int statusCode, String msg) {
+            setWaitScreen(false);
+//            if(currentType == TYPE_MONTH){
+//                mAdapterMonth.mData.list.remove(position);
+//                mAdapterMonth.notifyDataSetChanged();
+//                if(mAdapterMonth.mData.list.isEmpty())
+//                    findViewById(R.id.order_list_slide_empty).setVisibility(View.VISIBLE);
+//                else
+//                    findViewById(R.id.order_list_slide_empty).setVisibility(View.GONE);
+//            }else  if(currentType == TYPE_HISTORY){
+//                mAdapterHistory.mData.list.remove(position);
+//                mAdapterHistory.notifyDataSetChanged();
+//                if(mAdapterHistory.mData.list.isEmpty())
+//                    findViewById(R.id.order_list_slide_empty).setVisibility(View.VISIBLE);
+//                else
+//                    findViewById(R.id.order_list_slide_empty).setVisibility(View.GONE);
+//            }
+            updateListForDelete(position);
+
+
+        }
+
+        @Override
+        public void fail(int statusCode, String msg) {
+            setWaitScreen(false);
+            BasesUtils.showMsg(c, c.getString(R.string.common_nowifi));
+        }
+
+        @Override
+        public void exception(Exception e) {
+            setWaitScreen(false);
+            BasesUtils.showMsg(c, c.getString(R.string.common_nowifi));
+        }
+    }
+    private void updateListForDelete(int position){
+        if(currentType == TYPE_MONTH){
+            mAdapterMonth.mData.list.remove(position);
+            mAdapterMonth.notifyDataSetChanged();
+            if(mAdapterMonth.mData.list.isEmpty())
+                findViewById(R.id.order_list_slide_empty).setVisibility(View.VISIBLE);
+            else
+                findViewById(R.id.order_list_slide_empty).setVisibility(View.GONE);
+        }else  if(currentType == TYPE_HISTORY){
+            mAdapterHistory.mData.list.remove(position);
+            mAdapterHistory.notifyDataSetChanged();
+            if(mAdapterHistory.mData.list.isEmpty())
+                findViewById(R.id.order_list_slide_empty).setVisibility(View.VISIBLE);
+            else
+                findViewById(R.id.order_list_slide_empty).setVisibility(View.GONE);
+        }
+    }
+    /**
+     * 继续支付、点击列表每个Item触发
+     * @param info
+     */
+    public void topay(OrderInfo info, int position, int type){
+        setWaitScreen(true);
+        HttpService.instance().getOrderInfoByID(info.order_id, new GetOrderInfoCallback(position, type));
+    }
+
+    class GetOrderInfoCallback implements CallbackResultForActivity{
+        int position = -1;
+        int type = -1;// 0:继续支付  1:查看详细信息
+        public GetOrderInfoCallback(int position, int type){
+            this.position = position;
+            this.type = type;
+        }
+        @Override
+        public void success(Object data, int statusCode, String msg) {
+            setWaitScreen(false);
+            final OrderInfo info = (OrderInfo)data;
+
+            if(type == 0 && !"1".equals(info.order_status)){// 订单已被删除
+                BasesUtils.showDialogBySystemUI(ActivityOrderListSlide.this, getResources().getString(R.string.order_list_item_label9), getResources().getString(R.string.search_title_sub2), new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        dialog.cancel();
+                        updateListForDelete(position);
+                    }
+                }, "", null, "", null);
+                return;
+            }
+            if(type == 0 && "2".equals(info.pay_status)){// 订单已完成，提示“该订单已完成支付！”
+                BasesUtils.showDialogBySystemUI(ActivityOrderListSlide.this, getResources().getString(R.string.order_list_item_label10), getResources().getString(R.string.search_title_sub2), new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        dialog.cancel();
+                        if(currentType == TYPE_MONTH){
+                            mAdapterMonth.mData.list.add(position, info);
+                            mAdapterMonth.notifyDataSetChanged();
+                            if(mAdapterMonth.mData.list.isEmpty())
+                                findViewById(R.id.order_list_slide_empty).setVisibility(View.VISIBLE);
+                            else
+                                findViewById(R.id.order_list_slide_empty).setVisibility(View.GONE);
+                        }else  if(currentType == TYPE_HISTORY){
+                            mAdapterHistory.mData.list.add(position, info);
+                            mAdapterHistory.notifyDataSetChanged();
+                            if(mAdapterHistory.mData.list.isEmpty())
+                                findViewById(R.id.order_list_slide_empty).setVisibility(View.VISIBLE);
+                            else
+                                findViewById(R.id.order_list_slide_empty).setVisibility(View.GONE);
+                        }
+                    }
+                }, "", null, "",null);
+                return;
+            }
+
+            if (info != null && !TextUtils.isEmpty(info.order_id)) {// 直接转到详细界面
+                startActivity(new Intent().setClass(ActivityOrderListSlide.this, ActivityOrderDetails.class).putExtra("orderinfo", info));
+                return;
+            }
+        }
+
+        @Override
+        public void fail(int statusCode, String msg) {
+            setWaitScreen(false);
+
+        }
+
+        @Override
+        public void exception(Exception e) {
+            setWaitScreen(false);
+
+        }
+    }
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        // Inflate the menu; this adds items to the action bar if it is present.
+        getMenuInflater().inflate(R.menu.main, menu);
+        // SlideMode
+        MenuItem item = menu.findItem(R.id.menu_slide_mode);
+        item.setTitle("切换SlideMode:" + mSlideListViewHistory.getSlideMode().toString());
+        // SlideLeftAction
+        item = menu.findItem(R.id.menu_slide_left_action);
+        item.setTitle("切换SlideLeftAction:" + mSlideListViewHistory.getSlideLeftAction().toString());
+        // SlideRightAction
+        item = menu.findItem(R.id.menu_slide_right_action);
+        item.setTitle("切换SlideRightAction:" + mSlideListViewHistory.getSlideRightAction().toString());
+        return true;
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        // Handle action bar item clicks here. The action bar will
+        // automatically handle clicks on the Home/Up button, so long
+        // as you specify a parent activity in AndroidManifest.xml.
+        int id = item.getItemId();
+        if (id == R.id.menu_slide_mode) {
+            changeSlideMode(item);
+        } else if (id == R.id.menu_slide_left_action) {
+            changeSlideLeftAction(item);
+        } else if (id == R.id.menu_slide_right_action) {
+            changeSlideRightAction(item);
+        } else if (id == R.id.menu_data_change) {
+//            randomCreateTestData();
+            mAdapterHistory.notifyDataSetChanged();
+        } else if (id == R.id.menu_adapter_change) {
+//            randomCreateTestData();
+//            mAdapter2 = new AdapterOrderListSlide(this, mTestData);
+            mSlideListViewHistory.setAdapter(mAdapterHistory);
+        }
+        return super.onOptionsItemSelected(item);
+    }
+
+    private void changeSlideMode(MenuItem item) {
+        if (mSlideListViewHistory.getSlideMode() == SlideMode.BOTH) {
+            mSlideListViewHistory.setSlideMode(SlideMode.LEFT);
+        } else if (mSlideListViewHistory.getSlideMode() == SlideMode.LEFT) {
+            mSlideListViewHistory.setSlideMode(SlideMode.RIGHT);
+        } else if (mSlideListViewHistory.getSlideMode() == SlideMode.RIGHT) {
+            mSlideListViewHistory.setSlideMode(SlideMode.NONE);
+        } else if (mSlideListViewHistory.getSlideMode() == SlideMode.NONE) {
+            mSlideListViewHistory.setSlideMode(SlideMode.BOTH);
+        }
+        if (item != null) {
+            item.setTitle("切换SlideMode:" + mSlideListViewHistory.getSlideMode().toString());
+        }
+        Toast.makeText(this, "切换SlideMode:" + mSlideListViewHistory.getSlideMode().toString(), Toast.LENGTH_SHORT).show();
+    }
+
+    private void changeSlideLeftAction(MenuItem item) {
+        if (mSlideListViewHistory.getSlideLeftAction() == SlideListView.SlideAction.SCROLL) {
+            mSlideListViewHistory.setSlideLeftAction(SlideListView.SlideAction.REVEAL);
+        } else {
+            mSlideListViewHistory.setSlideLeftAction(SlideListView.SlideAction.SCROLL);
+        }
+        if (item != null) {
+            item.setTitle("切换SlideLeftAction:" + mSlideListViewHistory.getSlideLeftAction().toString());
+        }
+        Toast.makeText(this, "切换SlideLeftAction:" + mSlideListViewHistory.getSlideLeftAction().toString(), Toast.LENGTH_SHORT).show();
+    }
+
+    private void changeSlideRightAction(MenuItem item) {
+        if (mSlideListViewHistory.getSlideRightAction() == SlideListView.SlideAction.SCROLL) {
+            mSlideListViewHistory.setSlideRightAction(SlideListView.SlideAction.REVEAL);
+        } else {
+            mSlideListViewHistory.setSlideRightAction(SlideListView.SlideAction.SCROLL);
+        }
+        if (item != null) {
+            item.setTitle("切换SlideRightAction:" + mSlideListViewHistory.getSlideRightAction().toString());
+        }
+        Toast.makeText(this, "切换SlideRightAction:" + mSlideListViewHistory.getSlideRightAction().toString(), Toast.LENGTH_SHORT).show();
+    }
+}
+
Index: app/src/main/res/layout/page_order_list_slide_item_back_right.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/page_order_list_slide_item_back_right.xml	(revision )
+++ app/src/main/res/layout/page_order_list_slide_item_back_right.xml	(revision )
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="wrap_content"
+    android:layout_height="match_parent"
+    android:orientation="vertical">
+
+    <TextView
+        android:id="@+id/order_list_item_line"
+        android:layout_width="@dimen/order_list_item_delete_width"
+        android:layout_height="2dip"
+        android:background="@color/common_list_item_divide_bg"
+        android:layout_alignParentBottom="true"
+        android:layout_marginBottom="@dimen/common_content_margin_10"/>
+    <LinearLayout
+        android:layout_width="@dimen/order_list_item_delete_width"
+        android:layout_height="fill_parent"
+        android:orientation="vertical"
+        android:layout_above="@id/order_list_item_line">
+        <TextView
+            android:layout_width="@dimen/order_list_item_delete_width"
+            android:layout_height="2dip"
+            android:background="@color/common_list_item_divide_bg"/>
+        <TextView
+            android:id="@+id/order_list_item_delete"
+            android:layout_width="@dimen/order_list_item_delete_width"
+            android:layout_height="match_parent"
+            android:text="@string/order_list_item_label4"
+            android:textSize="@dimen/common_font_size_12"
+            android:textColor="@color/common_font_color_ffffff"
+            android:gravity="center"
+            android:background="@drawable/common_delete_selector"/>
+    </LinearLayout>
+</RelativeLayout>
Index: app/src/main/java/com/oasgames/android/oaspay/entity/ReportInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/entity/ReportInfo.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/entity/ReportInfo.java	(revision )
@@ -0,0 +1,19 @@
+package com.oasgames.android.oaspay.entity;
+
+import java.util.Map;
+
+/**
+ * 数据上报信息
+ * @author Administrator
+ *
+ */
+public class ReportInfo {
+	
+	public int type;					//上报类型. 1:Adjust  2:Mdata
+	public String eventName;			//上报事件名称
+	public Map<String, String> params;	//上报Event参数
+	public long createTime;				//创建时间
+	
+	
+	
+}
Index: app/src/main/res/layout/common_null.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/common_null.xml	(revision )
+++ app/src/main/res/layout/common_null.xml	(revision )
@@ -0,0 +1,1 @@
+<merge/>
\ No newline at end of file
Index: app/src/main/res/values-xhdpi/dimens.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values-xhdpi/dimens.xml	(revision )
+++ app/src/main/res/values-xhdpi/dimens.xml	(revision )
@@ -0,0 +1,58 @@
+<resources>
+    <!-- Default screen margins, per the Android Design guidelines. -->
+    <dimen name="activity_horizontal_margin">8dp</dimen>
+    <dimen name="activity_vertical_margin">8dp</dimen>
+
+    <dimen name="common_head_height_size">49dip</dimen>
+    <dimen name="common_head_back_height">33dip</dimen>
+
+    <dimen name="common_content_margin_50">50dip</dimen>
+    <dimen name="common_content_margin_30">30dip</dimen>
+    <dimen name="common_content_margin_20">20dip</dimen>
+    <dimen name="common_content_margin_15">15dip</dimen>
+    <dimen name="common_content_margin_10">10dip</dimen>
+    <dimen name="common_content_margin_5">5dip</dimen>
+
+    <dimen name="common_font_size_16">16sp</dimen>
+    <dimen name="common_font_size_14">14sp</dimen>
+    <dimen name="common_font_size_12">12sp</dimen>
+
+    <dimen name="fragment_shop_viewpager_height">90dip</dimen>
+    <dimen name="fragment_shop_function_item_height">62dip</dimen>
+    <dimen name="fragment_shop_category_height">25dip</dimen>
+    <dimen name="fragment_shop_category_head_img_height">13dip</dimen>
+    <dimen name="fragment_shop_category_newest_item_height">90dip</dimen>
+    <dimen name="fragment_shop_category_newest_item_width">140dip</dimen>
+    <dimen name="fragment_shop_category_review_item_height">78dip</dimen>
+    <dimen name="fragment_shop_category_review_item_img_height">58dip</dimen>
+    <dimen name="fragment_shop_category_review_item_img_width">87dip</dimen>
+    <dimen name="fragment_shop_category_review_item_diamond_width">10dip</dimen>
+    <dimen name="fragment_shop_category_review_item_charge_width">70dip</dimen>
+    <dimen name="fragment_shop_category_review_item_charge_height">28dip</dimen>
+
+    <dimen name="fragment_mine_head_bg_height">150dip</dimen>
+    <dimen name="fragment_mine_head_bg_touxiang_height">61dip</dimen>
+    <dimen name="fragment_mine_exit_width">220dip</dimen>
+    <dimen name="fragment_mine_exit_height">45dip</dimen>
+
+    <dimen name="main_foot_height">50dip</dimen>
+    <dimen name="main_foot_flag_height">3dip</dimen>
+
+    <dimen name="login_edit_height">28dip</dimen>
+    <dimen name="login_style_btn_height">44dip</dimen>
+    <dimen name="login_register_btn_height">33dip</dimen>
+    <dimen name="login_register_btn_width">94dip</dimen>
+    <dimen name="login_user_list_item_height">32dip</dimen>
+
+    <dimen name="order_list_item_head_height">31dip</dimen>
+    <dimen name="order_list_item_center_image_width">87dip</dimen>
+    <dimen name="order_list_item_center_image_height">58dip</dimen>
+    <dimen name="order_list_item_center_topay_width">80dip</dimen>
+    <dimen name="order_list_item_center_topay_height">28dip</dimen>
+    <dimen name="order_list_item_delete_width">64dip</dimen>
+    <dimen name="order_list_item_delete_width2">-64dip</dimen>
+    <dimen name="order_list_item_delete_height">159dip</dimen>
+
+    <dimen name="search_history_list_item_height">40dip</dimen>
+
+</resources>
Index: app/src/main/java/com/base/tools/service/BasesServiceLogin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/service/BasesServiceLogin.java	(revision )
+++ app/src/main/java/com/base/tools/service/BasesServiceLogin.java	(revision )
@@ -0,0 +1,287 @@
+package com.base.tools.service;
+
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.base.tools.BasesApplication;
+import com.base.tools.entity.MemberBaseInfo;
+import com.base.tools.entity.PhoneInfo;
+import com.base.tools.entity.UserInfo;
+import com.base.tools.exception.BasesDataErrorException;
+import com.base.tools.exception.BasesNetworkErrorException;
+import com.base.tools.http.CallbackResultForActivity;
+import com.base.tools.http.HttpClient;
+import com.base.tools.utils.AESUtils;
+import com.base.tools.utils.BasesConstant;
+import com.base.tools.utils.BasesUtils;
+import com.base.tools.utils.MD5Encrypt;
+import com.mopub.volley.Response;
+import com.mopub.volley.VolleyError;
+import com.oasgames.android.oaspay.activity.MyApplication;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.List;
+
+/**
+ * Created by xdb on 2015/10/12.
+ */
+public class BasesServiceLogin {
+    final String TAG = BasesServiceLogin.class.getSimpleName();
+    /**
+     * 最近登录的用户信息
+     */
+    public static final String SHAREDPREFERENCES_RECENTLYUSERINFOS = "recentlyuserinfos";
+    private static final String SPLITCHAR = "OASUSER";// 分隔符，避免截取出错
+    /**
+     * 使用最近登录账号进行登录，只支持登录过的注册账号(即新注册账号)
+     * @param url   请求地址
+     * @param callback  回调方法
+     */
+    public void loginWithRecentlyRegitUser(StringBuffer url,CallbackResultForActivity callback){
+
+        List<MemberBaseInfo> list = BasesUtils.getSPMembers();
+        if(list!=null && list.size() > 0 && null != list.get(0)){
+            String username = list.get(0).memberName;
+            String password = list.get(0).password;
+            if( !TextUtils.isEmpty(username)
+                    && !TextUtils.isEmpty(password)){
+                password = AESUtils.decrypt(password);
+                if(!TextUtils.isEmpty(password)){
+                    login(url,MemberBaseInfo.USER_REGISTED, username, password, username, callback);// OAS账号
+                }
+            }
+        }
+    }
+    public void loginWithRecentlyToken(StringBuffer url,CallbackResultForActivity callback){
+        String[] oldUserInfo = getCacheUserInfo();
+        if(oldUserInfo == null) {
+            callback.fail(BasesConstant.RESULT_FAIL, "");
+            return;
+        }
+//        uid, token, username, password, platform, oasnickname
+        loginByToken(url, oldUserInfo[0], oldUserInfo[1], oldUserInfo[2], oldUserInfo[3], oldUserInfo[4], oldUserInfo.length>5?oldUserInfo[5]:"", callback);
+    }
+    /**
+     * 自动登录（二次登录），通过某唯一标示验证
+     * @param url   请求地址
+     * @param callback  回调方法
+     * @param password	 usertype=2时，玩家输入的密码，
+     * @param uid       登录账号uid
+     * @param oasToken  登录验证的唯一标示
+     * @param username  用户名
+     * @param password  密码
+     * @param platform  账号平台类型
+     * @param nickName  昵称（各平台上的昵称）
+     */
+    private void loginByToken(StringBuffer url, String uid, String oasToken, String username, String password, String platform, String nickName, CallbackResultForActivity callback){
+        int usertype = MemberBaseInfo.checkUserType(platform);
+        url.append("&usertype="+usertype);
+        url.append("&oas_token="+oasToken);
+        url.append("&uid="+uid);
+
+        if(MemberBaseInfo.isOther(platform))
+            url.append("&platform="+platform);
+
+        url.append("&sign="+ MD5Encrypt.StringToMD5(PhoneInfo.instance().mobilecode+ PhoneInfo.instance().gamecode+usertype+oasToken+ MyApplication.PUBLICKEY));
+        loginAndRegist(platform, username, password, nickName, url, callback);
+    }
+    /**
+     * 注册新用户
+     * @param requestUrl    请求地址
+     * @param username      用户名
+     * @param password      密码
+     * @return  成功	{status:"ok",uid:"20000000012345678",type:”2”,token:"690c122e35e2681fb34f9fef236396d0"}；type=1 是免注册用户，type=2 是正常用户
+     * 			失败     {status:"fail",error:"错误编号",err_msg:”错误描述”}
+     */
+    public void register(StringBuffer requestUrl, String username, String password, CallbackResultForActivity callback){
+
+        loginAndRegist(MemberBaseInfo.USER_REGISTED, username, password, username, requestUrl, callback);
+
+    }
+
+    /**
+     * 登录和注册
+     * @param username			usertype=1时，传手机唯一码
+                                usertype=2时，已注册账号（用户名）
+                                usertype=3时，传入第三方的平台代码，例如facebook、twiiter、google
+     * @param password			usertype=2时，玩家输入的密码，
+                                usertype=3时，传入第三方的平台token
+     * @return  成功	{status:"ok",uid:"20000000012345678",type:”2”,token:"690c122e35e2681fb34f9fef236396d0"}；type=1 是免注册用户，type=2 是正常用户
+     * 			失败     {status:"fail",error:"错误编号",err_msg:”错误描述”}
+     * 				err_msg:	-1	签名未通过
+     * 							-2	OAS用户名或密码错误
+     * 							-3	注册的username已经存在
+     * 							-4	未知错误
+     * 							-5	oas_token过期
+     */
+    public void login(StringBuffer requestUrl, String platform, String username, String password, String oasNickName, CallbackResultForActivity callback){
+
+        loginAndRegist(platform, username, password, oasNickName, requestUrl, callback);
+
+    }
+
+    private void loginAndRegist(final String platform, final String username, final String password, final String oasNickName, StringBuffer url, final CallbackResultForActivity callback) {
+        String result = "";
+        BasesUtils.logError(TAG, "登录URL："+url.toString());
+        new BasesDao().post(url.toString(), null, new Response.Listener<String>() {
+            @Override
+            public void onResponse(String s) {
+                try {
+                    JSONObject json = new JSONObject(s);
+                    handLoginData(json, platform, username, password, oasNickName);
+                    callback.success(BasesApplication.userInfo, BasesConstant.RESULT_SUCCESS, "success");
+                } catch (Exception e) {
+                    callback.fail(BasesConstant.RESULT_EXCEPTION, e.getMessage());
+                }
+            }
+        }, new Response.ErrorListener() {
+            @Override
+            public void onErrorResponse(VolleyError volleyError) {
+                callback.exception(new BasesNetworkErrorException(volleyError.getMessage()));
+            }
+        });
+    }
+
+
+    private void handLoginData(JSONObject o, String platform, String username, String password, String oasNickName) throws BasesDataErrorException {
+        try {
+            if(BasesApplication.userInfo == null)
+                BasesApplication.userInfo = new UserInfo();
+
+            if("ok".equalsIgnoreCase(o.getString("status"))){
+
+                // 登录成功，缓存用户信息
+                BasesApplication.userInfo.setStatus("ok");
+                BasesApplication.userInfo.setUid(o.getString("uid"));
+                BasesApplication.userInfo.setToken(o.getString("token"));
+                if(o.has("user_type"))
+                    BasesApplication.userInfo.setUser_type(""+o.getInt("user_type"));
+                BasesApplication.userInfo.setError("");
+                BasesApplication.userInfo.setErr_msg("");
+
+
+                if(o.has("platform"))
+                    BasesApplication.userInfo.setPlatform(o.getString("platform"));
+                else
+                    BasesApplication.userInfo.setPlatform(platform);
+
+                if(BasesApplication.userInfo.platform.equals(MemberBaseInfo.USER_NONE))
+                    BasesApplication.userInfo.setPlatform_token("");
+                else if(BasesApplication.userInfo.platform.equals(MemberBaseInfo.USER_REGISTED))
+                    BasesApplication.userInfo.setPlatform_token("");
+                else
+                    BasesApplication.userInfo.setPlatform_token(password);// 第三方token
+
+                if(o.has("username"))
+                    BasesApplication.userInfo.setUsername(o.getString("username"));
+                else
+                    BasesApplication.userInfo.setUsername(username);
+
+                if(o.has("nickname"))
+                    BasesApplication.userInfo.setNickname(o.getString("nickname"));
+                else
+                    BasesApplication.userInfo.setNickname(oasNickName);
+
+                if(o.has("avatar_pic"))
+                    BasesApplication.userInfo.setAvatar_pic(o.getString("avatar_pic"));
+
+                cacheUserInfo(BasesApplication.userInfo.uid, BasesApplication.userInfo.token, BasesApplication.userInfo.username, password, BasesApplication.userInfo.platform, BasesApplication.userInfo.nickname);
+            }else{
+                // 登录失败，在当前缓存上更新状态
+                BasesApplication.userInfo.setStatus("fail");
+
+                BasesApplication.userInfo.setError(o.getString("error"));
+                BasesApplication.userInfo.setErr_msg(o.getString("err_msg"));
+            }
+
+        } catch (JSONException e) {
+            Log.e("HttpService", "Result not json. Init BasesApplication.userInfo fail!");
+            throw new BasesDataErrorException("Login fail. Return data format error.");
+        }
+    }
+    /**
+     * 缓存用户信息
+     * @param username			usertype=1时，传手机唯一码
+    usertype=2时，玩家输入的OAS平台账号（邮箱格式）
+    usertype=3时，传入第三方的平台代码，例如facebook、twiiter、google
+     * @param password			usertype=2时，玩家输入的密码，
+    usertype=3时，传入第三方的平台token
+     * @param platform			登录平台
+     * @param oasNickName			oas昵称
+     */
+    private void cacheUserInfo(String uid, String token, String username, String password, String platform, String oasNickName){
+        // 保存最近登录用户的信息，作为下次登录验证的凭据
+        StringBuffer buf = new StringBuffer();
+//        buf.append(userType);
+//        buf.append(SPLITCHAR);
+        buf.append(uid);
+        buf.append(SPLITCHAR);
+        buf.append(token);
+        buf.append(SPLITCHAR);
+        buf.append(username);
+        buf.append(SPLITCHAR);
+        buf.append(password);
+        buf.append(SPLITCHAR);
+        buf.append(platform);
+        buf.append(SPLITCHAR);
+        buf.append(oasNickName);
+        buf.append(SPLITCHAR);
+        BasesApplication.settingEditor.putString(SHAREDPREFERENCES_RECENTLYUSERINFOS, buf.toString());
+        BasesApplication.settingEditor.commit();
+
+        if(platform.equals(MemberBaseInfo.USER_REGISTED))// 非OAS账号登录或有异常，直接返回结果，不保存OAS用户信息
+            BasesUtils.cacheUserInfo(username, password);
+    }
+
+    public void deleteCacheUserInfo(){
+        BasesApplication.settingEditor.putString(SHAREDPREFERENCES_RECENTLYUSERINFOS, "");
+        BasesApplication.settingEditor.commit();
+    }
+    /**
+     * uid, token, username, password, platform, oasnickname
+     * @return
+     */
+    private String[] getCacheUserInfo(){
+        String oldUserInfo = BasesApplication.setting.getString(SHAREDPREFERENCES_RECENTLYUSERINFOS, "");
+        if(TextUtils.isEmpty(oldUserInfo))
+            return null;
+
+        return oldUserInfo.split(SPLITCHAR);
+    }
+    /**
+     * 修改密码
+     * @throws BasesNetworkErrorException
+     * @throws BasesDataErrorException
+     */
+    public void modifyPwd(StringBuffer reqeustUrl, final String newpassword, final CallbackResultForActivity callback) throws BasesNetworkErrorException, BasesDataErrorException {
+
+        new HttpClient(reqeustUrl.toString(), null, new HttpClient.Callback() {
+
+            @Override
+            public void handleResultData(String result) {
+
+                try {
+                    JSONObject json = new JSONObject(result);
+                    if("ok".equalsIgnoreCase(json.getString("status"))){
+                        BasesApplication.userInfo.setToken(json.getString("token"));// 此处要更新原有token，修改密码会导致旧token失效。
+                        cacheUserInfo(BasesApplication.userInfo.uid, BasesApplication.userInfo.token,
+                                BasesApplication.userInfo.username, newpassword, BasesApplication.userInfo.platform, BasesApplication.userInfo.nickname);
+                        callback.success(BasesApplication.userInfo, BasesConstant.RESULT_SUCCESS, "success");
+                    }else{
+                        callback.fail(BasesConstant.RESULT_FAIL_DATAERROR, json.has("msg")?json.getString("msg"):"Not error message!");
+                    }
+                } catch (Exception e) {
+                    callback.fail(BasesConstant.RESULT_EXCEPTION, e.getMessage());
+                }
+            }
+
+            @Override
+            public void handleErorrData(VolleyError error) {
+                callback.exception(new BasesNetworkErrorException(error.getMessage()));
+            }
+        }).submitGet();
+
+    }
+}
Index: app/src/main/java/com/oasgames/android/oaspay/service/SearchUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/service/SearchUtil.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/service/SearchUtil.java	(revision )
@@ -0,0 +1,46 @@
+package com.oasgames.android.oaspay.service;
+
+import android.content.ContentValues;
+
+import com.base.tools.BasesApplication;
+import com.base.tools.exception.BasesDataErrorException;
+import com.oasgames.android.oaspay.entity.SearchInfo;
+
+import java.util.List;
+
+/**
+ * 搜索本地数据服务类
+ * Created by Administrator on 2015/10/26.
+ */
+public class SearchUtil {
+    public static final String TABLENAME = "search";
+    public static final String COLUMNS_ID = "id";
+    public static final String COLUMNS_KEYWORD = "keyword";
+    public static final String COLUMNS_TIME = "createtime";
+    public static final String COLUMNS_EXT1 = "ext1";
+    public static final String COLUMNS_EXT2 = "ext2";
+    private static final String[] COLUMNS = new String[]{COLUMNS_ID, COLUMNS_KEYWORD, COLUMNS_TIME, COLUMNS_EXT1, COLUMNS_EXT2};
+
+    public static List<SearchInfo> getAll(int limit) throws BasesDataErrorException{
+//        Cursor cur = BasesApplication.dbHelper.loadByWhere(TABLENAME, COLUMNS, COLUMNS_ID+"=?", new String[]{limit});
+
+        try {
+            return BasesApplication.dbHelper.loadByWhere2List(TABLENAME, COLUMNS, new SearchInfo(), "", null, null, COLUMNS_TIME + " desc", " "+limit);
+
+        }catch (Exception e){
+            throw new BasesDataErrorException("");
+        }
+    }
+
+    public static boolean deleteAll(){
+        return BasesApplication.dbHelper.delete(TABLENAME, "");
+    }
+
+    public static long insert(String text){
+        ContentValues cv = new ContentValues();
+        cv.put(COLUMNS_ID, ""+System.nanoTime());
+        cv.put(COLUMNS_TIME, ""+System.nanoTime());
+        cv.put(COLUMNS_KEYWORD, text);
+        return BasesApplication.dbHelper.insert(TABLENAME, cv);
+    }
+}
Index: app/src/main/java/com/oasgames/android/oaspay/activity/ActivityCaptureInput.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/activity/ActivityCaptureInput.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/activity/ActivityCaptureInput.java	(revision )
@@ -0,0 +1,123 @@
+package com.oasgames.android.oaspay.activity;
+
+import android.app.Activity;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.os.Bundle;
+import android.text.TextUtils;
+import android.view.View;
+import android.widget.EditText;
+
+import com.base.tools.activity.BasesActivity;
+import com.base.tools.http.CallbackResultForActivity;
+import com.base.tools.utils.BasesUtils;
+import com.oasgames.android.oaspay.R;
+import com.oasgames.android.oaspay.entity.OrderInfo;
+import com.oasgames.android.oaspay.service.HttpService;
+import com.oasgames.android.oaspay.tools.ReportUtils;
+
+/**
+ * 手动输入订单号
+ * Created by Administrator on 2015/10/16.
+ */
+public class ActivityCaptureInput extends BasesActivity {
+    EditText et_orderID;
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.page_capture_input);
+        initHead(true, true, null, false, getString(R.string.capture_scan_text2_3), false, null);
+        et_orderID = (EditText)findViewById(R.id.capture_input_edit);
+    }
+
+    public void onClickViewToInput(View view){
+        check();
+    }
+    private void check(){
+        String orderid = et_orderID.getText().toString().trim();
+        if(TextUtils.isEmpty(orderid) || !BasesUtils.regexNum(orderid)){
+//            BasesUtils.showDialogBySystemUI(this, getString(R.string.capture_scan_text5), getString(R.string.search_title_sub2), new DialogInterface.OnClickListener() {
+//                @Override
+//                public void onClick(DialogInterface dialog, int which) {
+//                    dialog.cancel();
+//                }
+//            }, "", null, "", null);
+            BasesUtils.showMsg(this, getString(R.string.capture_scan_text6));
+            return;
+        }
+
+        if(BasesUtils.isLogin())
+            GetOrderInfo(orderid);
+        else
+            startActivityForResult(new Intent().setClass(ActivityCaptureInput.this, ActivityLogin.class), 100);
+    }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        if(requestCode == 100 && resultCode == Activity.RESULT_OK){
+            check();
+        }
+    }
+
+    private void GetOrderInfo(String orderid){
+        ReportUtils.add(ReportUtils.DEFAULTEVENT_SCANCODEORDER, null, null);
+        setWaitScreen(true);
+        HttpService.instance().getOrderInfoByInput(orderid, new GetOrderInfoCallback(this));
+    }
+    class GetOrderInfoCallback implements CallbackResultForActivity {
+        Activity activity;
+        public GetOrderInfoCallback(Activity activity){
+            this.activity = activity;
+        }
+        @Override
+        public void success(Object data, int statusCode, String msg) {
+            setWaitScreen(false);
+            OrderInfo info = (OrderInfo)data;
+            if(!"1".equals(info.order_status)){// 订单已被删除
+                BasesUtils.showDialogBySystemUI(activity, getResources().getString(R.string.order_list_item_label9), getResources().getString(R.string.search_title_sub2), new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        dialog.cancel();
+                    }
+                }, "", null, "", null);
+                return;
+            }
+            startActivity(new Intent().setClass(activity, ActivityOrderDetails.class).putExtra("orderinfo", info));
+        }
+
+        @Override
+        public void fail(int statusCode, String msg) {
+            setWaitScreen(false);
+            if(!TextUtils.isEmpty(msg) && "-16".equals(msg)){
+                BasesUtils.showDialogBySystemUI(activity, getResources().getString(R.string.capture_scan_text4), getString(R.string.search_title_sub1), new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        dialog.cancel();
+                    }
+                }, getString(R.string.search_title_sub2), new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        dialog.cancel();
+                        startActivity(new Intent().setClass(activity, ActivityLogin.class));
+                    }
+                }, "", null);
+                return;
+            }else {
+                BasesUtils.showDialogBySystemUI(activity, getString(R.string.capture_scan_text5), getString(R.string.search_title_sub2), new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        dialog.cancel();
+                    }
+                }, "", null, "", null);
+                return;
+            }
+//            APPUtils.showErrorMessageByErrorCode(activity, "-2000");
+        }
+
+        @Override
+        public void exception(Exception e) {
+            setWaitScreen(false);
+        }
+    }
+}
Index: app/src/main/java/com/oasgames/android/oaspay/activity/ActivityLogo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/activity/ActivityLogo.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/activity/ActivityLogo.java	(revision )
@@ -0,0 +1,154 @@
+package com.oasgames.android.oaspay.activity;
+
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+
+import com.base.tools.BasesApplication;
+import com.base.tools.activity.BasesActivity;
+import com.base.tools.http.CallbackResultForActivity;
+import com.base.tools.utils.BasesUtils;
+import com.oasgames.android.oaspay.R;
+import com.oasgames.android.oaspay.entity.AppVersionInfo;
+import com.oasgames.android.oaspay.service.HttpService;
+import com.oasgames.android.oaspay.tools.ReportUtils;
+
+import java.lang.ref.WeakReference;
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * 启动界面
+ * Created by Administrator on 2015/10/16.
+ */
+public class ActivityLogo extends BasesActivity {
+
+    MyHandler myHandler;
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.page_logo);
+
+        myHandler = new MyHandler(new WeakReference<ActivityLogo>(this));
+
+        BasesUtils.getFBKeyHash(this);
+
+        myHandler.sendEmptyMessage(100);
+    }
+    private void checkAppVersion(){
+        HttpService.instance().checkAppVersion(new CheckAppVersionCallback());
+    }
+
+    int flag = 0;
+    class CheckAppVersionCallback implements CallbackResultForActivity{
+        @Override
+        public void success(Object data, int statusCode, String msg) {
+            final AppVersionInfo version = (AppVersionInfo)data;
+            BasesUtils.showDialogBySystemUI(ActivityLogo.this, version.version_intro, version.isForceUpdate()?"":getString(R.string.app_version_8), new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        flag = 1;
+                        dialog.cancel();
+                        testLogin();
+                    }
+                }, getString(R.string.app_version_7), new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+
+                        flag = 2;
+                        dialog.cancel();
+                        try {
+                            startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(version.version_url)));// "market://details?id=" + appPackageName
+                        } catch (android.content.ActivityNotFoundException anfe) {
+                            startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("market://details?id=" + BasesApplication.packageName)));
+                        } catch (Exception anfe) {
+                            startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("https://play.google.com/store/apps/details?id=" + BasesApplication.packageName)));
+                        }
+                        finish();
+                    }
+                }, "", null);
+//				String appPackageName = "com.thirdplat.test3";
+//				try {
+//					startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("market://details?id=" + appPackageName)));
+//				} catch (android.content.ActivityNotFoundException anfe) {
+//					startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("https://play.google.com/store/apps/details?id=" + appPackageName)));
+//				}
+
+        }
+
+        @Override
+        public void fail(int statusCode, String msg) {
+            myHandler.sendEmptyMessage(101);
+        }
+
+        @Override
+        public void exception(Exception e) {
+            myHandler.sendEmptyMessage(101);
+        }
+    }
+
+    /**
+     * 尝试登录，登录TOKEN
+     */
+    private void testLogin(){
+        HttpService.instance().loginByToken(new LoginCallBack());
+    }
+
+    class LoginCallBack implements CallbackResultForActivity{
+        @Override
+        public void success(Object data, int statusCode, String msg) {
+            Map<String, String> paras = new HashMap<>();
+            paras.put("logintype", BasesUtils.isLogin() ? BasesApplication.userInfo.platform : "loginno");
+            ReportUtils.add(ReportUtils.DEFAULTEVENT_LOGIN, paras, null);
+            myHandler.sendEmptyMessage(102);
+
+        }
+
+        @Override
+        public void fail(int statusCode, String msg) {
+            myHandler.sendEmptyMessage(102);
+            Map<String, String> paras = new HashMap<>();
+            paras.put("logintype", "loginno");
+            ReportUtils.add(ReportUtils.DEFAULTEVENT_LOGIN, paras, null);
+        }
+
+        @Override
+        public void exception(Exception e) {
+            myHandler.sendEmptyMessage(102);
+            Map<String, String> paras = new HashMap<>();
+            paras.put("logintype", "loginno");
+            ReportUtils.add(ReportUtils.DEFAULTEVENT_LOGIN, paras, null);
+        }
+    }
+    private static class MyHandler extends Handler{
+        //使用弱引用避免Handler泄露.这里的泛型参数可以不是Activity，也可以是Fragment等
+        private WeakReference<ActivityLogo> weakReference;
+
+        protected MyHandler(WeakReference<ActivityLogo> wk){
+            weakReference = wk;
+        }
+
+        @Override
+        public void handleMessage(Message msg) {
+            super.handleMessage(msg);
+            switch (msg.what) {
+                case 100:
+                    weakReference.get().checkAppVersion();
+                    break;
+                case 101:
+                    weakReference.get().testLogin();
+                    break;
+                case 102:
+                    weakReference.get().startActivity(new Intent().setClass(weakReference.get(), ActivityMain.class));
+                    weakReference.get().finish();
+                    break;
+                default:
+                    break;
+            }
+        }
+    }
+
+}
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- gradle/wrapper/gradle-wrapper.properties	(revision )
+++ gradle/wrapper/gradle-wrapper.properties	(revision )
@@ -0,0 +1,6 @@
+#Thu Oct 08 11:00:11 GMT+08:00 2015
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.4-all.zip
Index: app/src/main/java/com/nineoldandroids/animation/Keyframe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nineoldandroids/animation/Keyframe.java	(revision )
+++ app/src/main/java/com/nineoldandroids/animation/Keyframe.java	(revision )
@@ -0,0 +1,360 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.nineoldandroids.animation;
+
+import android.view.animation.Interpolator;
+
+/**
+ * This class holds a time/value pair for an animation. The Keyframe class is used
+ * by {@link ValueAnimator} to define the values that the animation target will have over the course
+ * of the animation. As the time proceeds from one keyframe to the other, the value of the
+ * target object will animate between the value at the previous keyframe and the value at the
+ * next keyframe. Each keyframe also holds an optional {@link TimeInterpolator}
+ * object, which defines the time interpolation over the intervalue preceding the keyframe.
+ *
+ * <p>The Keyframe class itself is abstract. The type-specific factory methods will return
+ * a subclass of Keyframe specific to the type of value being stored. This is done to improve
+ * performance when dealing with the most common cases (e.g., <code>float</code> and
+ * <code>int</code> values). Other types will fall into a more general Keyframe class that
+ * treats its values as Objects. Unless your animation requires dealing with a custom type
+ * or a data structure that needs to be animated directly (and evaluated using an implementation
+ * of {@link TypeEvaluator}), you should stick to using float and int as animations using those
+ * types have lower runtime overhead than other types.</p>
+ */
+public abstract class Keyframe implements Cloneable {
+    /**
+     * The time at which mValue will hold true.
+     */
+    float mFraction;
+
+    /**
+     * The type of the value in this Keyframe. This type is determined at construction time,
+     * based on the type of the <code>value</code> object passed into the constructor.
+     */
+    Class mValueType;
+
+    /**
+     * The optional time interpolator for the interval preceding this keyframe. A null interpolator
+     * (the default) results in linear interpolation over the interval.
+     */
+    private /*Time*/Interpolator mInterpolator = null;
+
+    /**
+     * Flag to indicate whether this keyframe has a valid value. This flag is used when an
+     * animation first starts, to populate placeholder keyframes with real values derived
+     * from the target object.
+     */
+    boolean mHasValue = false;
+
+    /**
+     * Constructs a Keyframe object with the given time and value. The time defines the
+     * time, as a proportion of an overall animation's duration, at which the value will hold true
+     * for the animation. The value for the animation between keyframes will be calculated as
+     * an interpolation between the values at those keyframes.
+     *
+     * @param fraction The time, expressed as a value between 0 and 1, representing the fraction
+     * of time elapsed of the overall animation duration.
+     * @param value The value that the object will animate to as the animation time approaches
+     * the time in this keyframe, and the the value animated from as the time passes the time in
+     * this keyframe.
+     */
+    public static Keyframe ofInt(float fraction, int value) {
+        return new IntKeyframe(fraction, value);
+    }
+
+    /**
+     * Constructs a Keyframe object with the given time. The value at this time will be derived
+     * from the target object when the animation first starts (note that this implies that keyframes
+     * with no initial value must be used as part of an {@link ObjectAnimator}).
+     * The time defines the
+     * time, as a proportion of an overall animation's duration, at which the value will hold true
+     * for the animation. The value for the animation between keyframes will be calculated as
+     * an interpolation between the values at those keyframes.
+     *
+     * @param fraction The time, expressed as a value between 0 and 1, representing the fraction
+     * of time elapsed of the overall animation duration.
+     */
+    public static Keyframe ofInt(float fraction) {
+        return new IntKeyframe(fraction);
+    }
+
+    /**
+     * Constructs a Keyframe object with the given time and value. The time defines the
+     * time, as a proportion of an overall animation's duration, at which the value will hold true
+     * for the animation. The value for the animation between keyframes will be calculated as
+     * an interpolation between the values at those keyframes.
+     *
+     * @param fraction The time, expressed as a value between 0 and 1, representing the fraction
+     * of time elapsed of the overall animation duration.
+     * @param value The value that the object will animate to as the animation time approaches
+     * the time in this keyframe, and the the value animated from as the time passes the time in
+     * this keyframe.
+     */
+    public static Keyframe ofFloat(float fraction, float value) {
+        return new FloatKeyframe(fraction, value);
+    }
+
+    /**
+     * Constructs a Keyframe object with the given time. The value at this time will be derived
+     * from the target object when the animation first starts (note that this implies that keyframes
+     * with no initial value must be used as part of an {@link ObjectAnimator}).
+     * The time defines the
+     * time, as a proportion of an overall animation's duration, at which the value will hold true
+     * for the animation. The value for the animation between keyframes will be calculated as
+     * an interpolation between the values at those keyframes.
+     *
+     * @param fraction The time, expressed as a value between 0 and 1, representing the fraction
+     * of time elapsed of the overall animation duration.
+     */
+    public static Keyframe ofFloat(float fraction) {
+        return new FloatKeyframe(fraction);
+    }
+
+    /**
+     * Constructs a Keyframe object with the given time and value. The time defines the
+     * time, as a proportion of an overall animation's duration, at which the value will hold true
+     * for the animation. The value for the animation between keyframes will be calculated as
+     * an interpolation between the values at those keyframes.
+     *
+     * @param fraction The time, expressed as a value between 0 and 1, representing the fraction
+     * of time elapsed of the overall animation duration.
+     * @param value The value that the object will animate to as the animation time approaches
+     * the time in this keyframe, and the the value animated from as the time passes the time in
+     * this keyframe.
+     */
+    public static Keyframe ofObject(float fraction, Object value) {
+        return new ObjectKeyframe(fraction, value);
+    }
+
+    /**
+     * Constructs a Keyframe object with the given time. The value at this time will be derived
+     * from the target object when the animation first starts (note that this implies that keyframes
+     * with no initial value must be used as part of an {@link ObjectAnimator}).
+     * The time defines the
+     * time, as a proportion of an overall animation's duration, at which the value will hold true
+     * for the animation. The value for the animation between keyframes will be calculated as
+     * an interpolation between the values at those keyframes.
+     *
+     * @param fraction The time, expressed as a value between 0 and 1, representing the fraction
+     * of time elapsed of the overall animation duration.
+     */
+    public static Keyframe ofObject(float fraction) {
+        return new ObjectKeyframe(fraction, null);
+    }
+
+    /**
+     * Indicates whether this keyframe has a valid value. This method is called internally when
+     * an {@link ObjectAnimator} first starts; keyframes without values are assigned values at
+     * that time by deriving the value for the property from the target object.
+     *
+     * @return boolean Whether this object has a value assigned.
+     */
+    public boolean hasValue() {
+        return mHasValue;
+    }
+
+    /**
+     * Gets the value for this Keyframe.
+     *
+     * @return The value for this Keyframe.
+     */
+    public abstract Object getValue();
+
+    /**
+     * Sets the value for this Keyframe.
+     *
+     * @param value value for this Keyframe.
+     */
+    public abstract void setValue(Object value);
+
+    /**
+     * Gets the time for this keyframe, as a fraction of the overall animation duration.
+     *
+     * @return The time associated with this keyframe, as a fraction of the overall animation
+     * duration. This should be a value between 0 and 1.
+     */
+    public float getFraction() {
+        return mFraction;
+    }
+
+    /**
+     * Sets the time for this keyframe, as a fraction of the overall animation duration.
+     *
+     * @param fraction time associated with this keyframe, as a fraction of the overall animation
+     * duration. This should be a value between 0 and 1.
+     */
+    public void setFraction(float fraction) {
+        mFraction = fraction;
+    }
+
+    /**
+     * Gets the optional interpolator for this Keyframe. A value of <code>null</code> indicates
+     * that there is no interpolation, which is the same as linear interpolation.
+     *
+     * @return The optional interpolator for this Keyframe.
+     */
+    public /*Time*/Interpolator getInterpolator() {
+        return mInterpolator;
+    }
+
+    /**
+     * Sets the optional interpolator for this Keyframe. A value of <code>null</code> indicates
+     * that there is no interpolation, which is the same as linear interpolation.
+     *
+     * @return The optional interpolator for this Keyframe.
+     */
+    public void setInterpolator(/*Time*/Interpolator interpolator) {
+        mInterpolator = interpolator;
+    }
+
+    /**
+     * Gets the type of keyframe. This information is used by ValueAnimator to determine the type of
+     * {@link TypeEvaluator} to use when calculating values between keyframes. The type is based
+     * on the type of Keyframe created.
+     *
+     * @return The type of the value stored in the Keyframe.
+     */
+    public Class getType() {
+        return mValueType;
+    }
+
+    @Override
+    public abstract Keyframe clone();
+
+    /**
+     * This internal subclass is used for all types which are not int or float.
+     */
+    static class ObjectKeyframe extends Keyframe {
+
+        /**
+         * The value of the animation at the time mFraction.
+         */
+        Object mValue;
+
+        ObjectKeyframe(float fraction, Object value) {
+            mFraction = fraction;
+            mValue = value;
+            mHasValue = (value != null);
+            mValueType = mHasValue ? value.getClass() : Object.class;
+        }
+
+        public Object getValue() {
+            return mValue;
+        }
+
+        public void setValue(Object value) {
+            mValue = value;
+            mHasValue = (value != null);
+        }
+
+        @Override
+        public ObjectKeyframe clone() {
+            ObjectKeyframe kfClone = new ObjectKeyframe(getFraction(), mValue);
+            kfClone.setInterpolator(getInterpolator());
+            return kfClone;
+        }
+    }
+
+    /**
+     * Internal subclass used when the keyframe value is of type int.
+     */
+    static class IntKeyframe extends Keyframe {
+
+        /**
+         * The value of the animation at the time mFraction.
+         */
+        int mValue;
+
+        IntKeyframe(float fraction, int value) {
+            mFraction = fraction;
+            mValue = value;
+            mValueType = int.class;
+            mHasValue = true;
+        }
+
+        IntKeyframe(float fraction) {
+            mFraction = fraction;
+            mValueType = int.class;
+        }
+
+        public int getIntValue() {
+            return mValue;
+        }
+
+        public Object getValue() {
+            return mValue;
+        }
+
+        public void setValue(Object value) {
+            if (value != null && value.getClass() == Integer.class) {
+                mValue = ((Integer)value).intValue();
+                mHasValue = true;
+            }
+        }
+
+        @Override
+        public IntKeyframe clone() {
+            IntKeyframe kfClone = new IntKeyframe(getFraction(), mValue);
+            kfClone.setInterpolator(getInterpolator());
+            return kfClone;
+        }
+    }
+
+    /**
+     * Internal subclass used when the keyframe value is of type float.
+     */
+    static class FloatKeyframe extends Keyframe {
+        /**
+         * The value of the animation at the time mFraction.
+         */
+        float mValue;
+
+        FloatKeyframe(float fraction, float value) {
+            mFraction = fraction;
+            mValue = value;
+            mValueType = float.class;
+            mHasValue = true;
+        }
+
+        FloatKeyframe(float fraction) {
+            mFraction = fraction;
+            mValueType = float.class;
+        }
+
+        public float getFloatValue() {
+            return mValue;
+        }
+
+        public Object getValue() {
+            return mValue;
+        }
+
+        public void setValue(Object value) {
+            if (value != null && value.getClass() == Float.class) {
+                mValue = ((Float)value).floatValue();
+                mHasValue = true;
+            }
+        }
+
+        @Override
+        public FloatKeyframe clone() {
+            FloatKeyframe kfClone = new FloatKeyframe(getFraction(), mValue);
+            kfClone.setInterpolator(getInterpolator());
+            return kfClone;
+        }
+    }
+}
Index: .idea/runConfigurations.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/runConfigurations.xml	(revision )
+++ .idea/runConfigurations.xml	(revision )
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RunConfigurationProducerService">
+    <option name="ignoredProducers">
+      <set>
+        <option value="org.jetbrains.plugins.gradle.execution.test.runner.AllInPackageGradleConfigurationProducer" />
+        <option value="org.jetbrains.plugins.gradle.execution.test.runner.TestClassGradleConfigurationProducer" />
+        <option value="org.jetbrains.plugins.gradle.execution.test.runner.TestMethodGradleConfigurationProducer" />
+      </set>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/java/com/oasgames/android/oaspay/entity/NewsList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/entity/NewsList.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/entity/NewsList.java	(revision )
@@ -0,0 +1,37 @@
+package com.oasgames.android.oaspay.entity;
+
+import java.io.Serializable;
+import java.util.List;
+
+/**
+ * 资讯列表集合
+ * @author xdb
+ *
+ */
+public class NewsList implements Serializable{
+	private static final long serialVersionUID = 1598605839985469091L;
+	
+	public String cur_page;			//当前页号
+	public String total_page;		//总页数
+	public String every_page_count;			//每页记录数
+	public List list;	//数据集合
+
+
+	public boolean isEmpty(){
+		if(list == null || list.size()<= 0)
+			return true;
+		return false;
+	}
+
+	public void setCur_page(String cur_page) {
+		this.cur_page = cur_page;
+	}
+
+	public void setTotal_page(String total_page) {
+		this.total_page = total_page;
+	}
+
+	public void setEvery_page_count(String every_page_count) {
+		this.every_page_count = every_page_count;
+	}
+}
Index: app/src/main/res/anim/slide_out_left.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/anim/slide_out_left.xml	(revision )
+++ app/src/main/res/anim/slide_out_left.xml	(revision )
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+/* //device/apps/common/res/anim/slide_out_right.xml
+**
+** Copyright 2007, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License"); 
+** you may not use this file except in compliance with the License. 
+** You may obtain a copy of the License at 
+**
+**     http://www.apache.org/licenses/LICENSE-2.0 
+**
+** Unless required by applicable law or agreed to in writing, software 
+** distributed under the License is distributed on an "AS IS" BASIS, 
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+** See the License for the specific language governing permissions and 
+** limitations under the License.
+*/
+-->
+
+<set xmlns:android="http://schemas.android.com/apk/res/android">
+	<translate android:fromXDelta="0" android:toXDelta="-100%p"
+            android:duration="@android:integer/config_shortAnimTime"
+        android:interpolator="@android:anim/decelerate_interpolator"/>
+	<!--<alpha android:fromAlpha="1.0" android:toAlpha="0.0"
+            android:duration="@android:integer/config_mediumAnimTime" />-->
+</set>
Index: app/src/main/res/layout/page_product_list.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/page_product_list.xml	(revision )
+++ app/src/main/res/layout/page_product_list.xml	(revision )
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:gravity="center"
+    android:background="@color/common_background_all_page">
+
+    <include layout="@layout/common_head"/>
+
+    <FrameLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+
+        <ListView
+            android:id="@+id/product_list"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:listSelector="@drawable/common_list_item_selector"
+            android:background="@color/common_font_color_ffffff"
+            android:divider="@color/common_list_item_divide_bg"
+            android:dividerHeight="2dip"
+            android:cacheColorHint="@color/transparent_background"/>
+
+        <include layout="@layout/common_network_error"/>
+    </FrameLayout>
+
+
+</LinearLayout>
\ No newline at end of file
Index: app/src/main/java/com/oasgames/android/oaspay/tools/ReportTimer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/tools/ReportTimer.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/tools/ReportTimer.java	(revision )
@@ -0,0 +1,72 @@
+package com.oasgames.android.oaspay.tools;
+
+import android.text.TextUtils;
+
+import com.base.tools.entity.PhoneInfo;
+import com.base.tools.utils.BasesUtils;
+import com.oasgames.android.oaspay.entity.ReportInfo;
+import com.oasgames.android.oaspay.entity.ReportMdataInfo;
+import com.oasgames.android.oaspay.service.HttpService;
+
+import java.util.TimerTask;
+
+public class ReportTimer extends TimerTask {
+
+	private static final String TAG = ReportTimer.class.getSimpleName();
+	@Override
+	public void run() {
+		do{
+			
+			synchronized (ReportUtils.queue) {// 同步
+				ReportInfo info = ReportUtils.queue.peek();
+				if(info != null){
+					reportMdata((ReportMdataInfo)info);
+
+					ReportUtils.queue.poll();
+					
+					BasesUtils.logDebug(TAG, "ReportInfo queue poll success;eventname " + info.eventName);
+
+				}else{
+					BasesUtils.logDebug(TAG, "ReportInfo queue is null;");
+				}
+			}
+		}while(ReportUtils.queue.peek()!=null);
+		
+//		if(SystemCache.logListsSD != null){
+//			synchronized (SystemCache.logListsSD) {// 同步
+//				if(SystemCache.logListsSD != null && SystemCache.logListsSD.size() > 0){
+//					List<String> log = new ArrayList<String>(SystemCache.logListsSD);
+//					SystemCache.logListsSD.clear();
+//					for (String str : log) {
+//						FileUtils.writeLogToStore(str);
+//					}
+//				}
+//			}
+//		}
+	}
+
+	private void reportMdata(final ReportMdataInfo info){
+//		if(BasesUtils.isSandBox())
+//			return;
+		/**	Mdata */
+		new Thread(new Runnable() {
+			
+			@Override
+			public void run() {
+				if(!TextUtils.isEmpty(PhoneInfo.instance().mdataAppID)){
+					BasesUtils.logDebug(TAG, "MData queue eventname "+info.eventName);
+					try {
+						HttpService.instance().sendToMdataInfo(info);
+					} catch (Exception e) {
+						BasesUtils.logDebug(TAG, "MData send fail. Event Name:"+info.eventName);
+						return;
+					}								
+				}else{
+					BasesUtils.logDebug(TAG, "MData appid is null.");
+					return;
+				}
+			}
+		}).start();
+	}
+
+}
Index: app/src/main/res/layout/common_waiting_anim.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/common_waiting_anim.xml	(revision )
+++ app/src/main/res/layout/common_waiting_anim.xml	(revision )
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+	android:orientation="vertical" android:layout_width="fill_parent"
+	android:layout_height="fill_parent" android:gravity="center">
+
+	<ProgressBar 
+		android:layout_width="162dip" android:layout_height="162dip"
+		android:indeterminate="false" android:indeterminateDrawable="@anim/common_loading_pic_more"
+		android:indeterminateOnly="true"/>
+	
+	<TextView android:layout_width="wrap_content"
+		android:layout_height="wrap_content" android:layout_marginTop="15dip"
+		android:visibility="gone"/>  <!-- android:text="数据加载中" -->
+	
+</LinearLayout>
\ No newline at end of file
Index: app/src/main/java/com/oasgames/android/oaspay/activity/ActivityProductList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/activity/ActivityProductList.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/activity/ActivityProductList.java	(revision )
@@ -0,0 +1,141 @@
+package com.oasgames.android.oaspay.activity;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.ListView;
+
+import com.base.tools.activity.BasesActivity;
+import com.base.tools.http.CallbackResultForActivity;
+import com.oasgames.android.oaspay.R;
+import com.oasgames.android.oaspay.adapter.AdapterProdcutList;
+import com.oasgames.android.oaspay.entity.ProductInfo;
+import com.oasgames.android.oaspay.entity.ProductList;
+import com.oasgames.android.oaspay.service.HttpService;
+import com.oasgames.android.oaspay.tools.ReportUtils;
+
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * 界面 商品（礼品）列表
+ * Created by Administrator on 2015/10/16.
+ */
+public class ActivityProductList extends BasesActivity {
+    final int MAXPAGESIZE = 20;
+    boolean isLoading = false;
+    MyHandler myHandler;
+    ListView listView;
+    AdapterProdcutList adapter;
+
+    ProductList productList;
+    String product_type = "";
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.page_product_list);
+
+        initHead(true, true, null, false, getString(R.string.product_list_title), true, new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                startActivity(new Intent().setClass(ActivityProductList.this, ActivitySearch.class));
+            }
+        });
+
+        product_type = getIntent().getStringExtra("product_type");
+
+        listView = (ListView)findViewById(R.id.product_list);
+        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+                startActivity(new Intent().setClass(ActivityProductList.this, ActivityProductDetails.class).putExtra("id", ((ProductInfo) productList.list.get(position)).product_id));
+            }
+        });
+        List<ProductInfo> list = new ArrayList<ProductInfo>();
+        adapter = new AdapterProdcutList(this, list, 1, null);
+        listView.setAdapter(adapter);
+
+        myHandler = new MyHandler(new WeakReference<ActivityProductList>(this));
+
+        setWaitScreen(true);
+        myHandler.sendEmptyMessage(100);
+
+        ReportUtils.add(ReportUtils.DEFAULTEVENT_PRODUCTLIST, null, null);
+    }
+
+    private void loadDataForCurPage(){
+        loadData(1);
+    }
+    public void loadDataForNextPage(){
+        loadData(Integer.valueOf(productList.cur_page)+1);
+    }
+    private void loadData(int pageNo){
+        if(isLoading)
+            return;
+        isLoading = true;
+        setWaitScreen(true);
+        HttpService.instance().getProductList(product_type, "", pageNo, MAXPAGESIZE, new MyCallback());
+    }
+    class MyCallback implements CallbackResultForActivity{
+        @Override
+        public void success(Object data, int statusCode, String msg) {
+            isLoading = false;
+            setWaitScreen(false);
+            productList = (ProductList)data;
+            if(productList != null && productList.list != null && productList.list.size()>0) {
+                adapter.pages = Integer.valueOf(productList.total_page);
+                adapter.currentPage = Integer.valueOf(productList.cur_page);
+                adapter.data.addAll(productList.list);
+                adapter.notifyDataSetChanged();
+            }
+        }
+
+        @Override
+        public void fail(int statusCode, String msg) {
+            isLoading = false;
+            setWaitScreen(false);
+        }
+
+        @Override
+        public void exception(Exception e) {
+            isLoading = false;
+            setWaitScreen(false);
+            if(productList == null)
+                showNetWrokError();
+        }
+    }
+
+    @Override
+    public void retry() {
+        super.retry();
+        loadDataForCurPage();
+    }
+
+    private static class MyHandler extends Handler {
+
+
+        //使用弱引用避免Handler泄露.这里的泛型参数可以不是Activity，也可以是Fragment等
+        private WeakReference<ActivityProductList> weakReference;
+
+        protected MyHandler(WeakReference<ActivityProductList> wk){
+            weakReference = wk;
+        }
+
+        @Override
+        public void handleMessage(Message msg) {
+            super.handleMessage(msg);
+            switch (msg.what) {
+                case 100:
+                    weakReference.get().loadDataForCurPage();
+                    break;
+                default:
+                    break;
+            }
+        }
+    }
+}
Index: app/src/main/java/com/base/tools/entity/MemberBaseInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/entity/MemberBaseInfo.java	(revision )
+++ app/src/main/java/com/base/tools/entity/MemberBaseInfo.java	(revision )
@@ -0,0 +1,32 @@
+package com.base.tools.entity;
+
+public class MemberBaseInfo extends UserInfo{
+	public static final String USER_FACEBOOK = "facebook";// Facebook
+	public static final String USER_GOOGLE = "google";
+	public static final String USER_TWITTER = "twitter";
+	/**
+	 * 游客
+	 */
+	public static final String USER_NONE = "auto";
+	/**
+	 * 已注册用户
+	 */
+	public static final String USER_REGISTED = "oas";
+
+	
+	public String memberName;
+	public String password;
+
+	public static int checkUserType(String platform){
+		if(platform.equals(USER_NONE))
+			return 0;
+		else if(platform.equals(USER_REGISTED))
+			return 1;
+		return 2;
+	}
+	public static boolean isOther(String platform){
+		if(platform.equals(USER_NONE) || platform.equals(USER_REGISTED))
+			return false;
+		return true;
+	}
+}
Index: app/src/main/java/com/oasgames/android/oaspay/activity/FragmentMine.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/activity/FragmentMine.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/activity/FragmentMine.java	(revision )
@@ -0,0 +1,160 @@
+package com.oasgames.android.oaspay.activity;
+
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.graphics.Bitmap;
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.text.TextUtils;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.base.tools.BasesApplication;
+import com.base.tools.entity.UserInfo;
+import com.base.tools.utils.BasesUtils;
+import com.base.tools.utils.DisplayUtil;
+import com.mopub.volley.Response;
+import com.mopub.volley.VolleyError;
+import com.mopub.volley.toolbox.ImageRequest;
+import com.oasgames.android.oaspay.R;
+import com.oasgames.android.oaspay.tools.ReportUtils;
+
+
+/**
+ * 我 功能页
+ */
+public class FragmentMine extends Fragment {
+	final String TAG = FragmentMine.class.getSimpleName();
+	Integer[] loginedStr = new Integer[]{R.string.fragment_shop_function_order, R.string.fragment_mine_head_list_2, R.string.fragment_mine_head_list_3};
+	Integer[] unLoginStr = new Integer[]{R.string.fragment_mine_head_list_2, R.string.fragment_mine_head_list_3};
+	LinearLayout list, touxiang;
+	TextView exit, username;
+	@Override
+	public View onCreateView(LayoutInflater inflater, ViewGroup container,
+			Bundle savedInstanceState) {
+		super.onCreateView(inflater, container, savedInstanceState);
+		return inflater.inflate(R.layout.fragment_main_mine, null);
+	}
+
+	@Override
+	public void onActivityCreated(Bundle savedInstanceState) {
+		super.onActivityCreated(savedInstanceState);
+		list = (LinearLayout)getActivity().findViewById(R.id.fragment_mine_list);
+		exit = (TextView)getActivity().findViewById(R.id.fragment_mine_exit);
+		username = (TextView) getActivity().findViewById(R.id.fragment_mine_head_username);
+		touxiang = (LinearLayout)getActivity().findViewById(R.id.fragment_mine_head_touxiang);
+	}
+	public void updateUserInfo(){
+
+		if(BasesUtils.isLogin()){// 已登录
+			BasesApplication basesApplication = (BasesApplication)getActivity().getApplication();
+			UserInfo userInfo = basesApplication.userInfo;
+			username.setText(getString(R.string.login_edit_user) +" "+(TextUtils.isEmpty(userInfo.nickname) ? ((TextUtils.isEmpty(userInfo.username)||"null".equals(userInfo.username) || BasesApplication.userInfo.username.contains("@"+BasesApplication.userInfo.platform))?userInfo.uid:userInfo.username) : userInfo.nickname));
+			touxiang.getChildAt(0).setVisibility(View.VISIBLE);
+			touxiang.getChildAt(1).setVisibility(View.GONE);
+
+			// 设置默认头像
+			((ImageView)touxiang.getChildAt(0)).setBackgroundResource(R.mipmap.fragment_mine_head_bg_touxiang_default);
+			((ImageView)touxiang.getChildAt(0)).setImageBitmap(null);
+			if(!TextUtils.isEmpty(userInfo.avatar_pic)){
+
+				ImageRequest iq = new ImageRequest(userInfo.avatar_pic,
+
+						new Response.Listener<Bitmap>() {
+							@Override
+							public void onResponse(Bitmap arg0) {
+								if(arg0 != null){
+									arg0 = BasesUtils.toRoundCorner(arg0, 30);
+									((ImageView)touxiang.getChildAt(0)).setImageBitmap(arg0);
+									((ImageView)touxiang.getChildAt(0)).postInvalidate();
+								}
+							}
+						},
+						DisplayUtil.dip2px(66, BasesUtils.getDisplayMetrics(getActivity()).density), // 以布局文件为准，200dip
+						DisplayUtil.dip2px(66, BasesUtils.getDisplayMetrics(getActivity()).density),
+						Bitmap.Config.ARGB_8888,
+						new Response.ErrorListener() {
+
+							@Override
+							public void onErrorResponse(VolleyError arg0) {
+							}
+
+						});
+				BasesApplication.volleyRequestQueue.add(iq);
+			}
+
+			exit.setVisibility(View.VISIBLE);
+			exit.setOnClickListener(new View.OnClickListener() {
+				@Override
+				public void onClick(View v) {
+					((MyApplication)getActivity().getApplication()).clearUserInfo();
+					updateUserInfo();
+				}
+			});
+			initList(true);
+			return;
+		}
+
+		exit.setVisibility(View.INVISIBLE);
+		username.setText("");
+
+		touxiang.getChildAt(0).setVisibility(View.GONE);
+		touxiang.getChildAt(1).setVisibility(View.VISIBLE);
+		touxiang.getChildAt(1).setBackgroundResource(R.mipmap.fragment_mine_head_bg_touxiang);
+		initList(false);
+
+	}
+
+	private void initList(boolean flag){
+		list.removeAllViews();
+		Integer[] data = flag?loginedStr:unLoginStr;
+		int count = data.length;
+		for (int i = 0; i < count; i++) {
+			View v = getActivity().getLayoutInflater().inflate(R.layout.fragment_main_mine_item, null);
+			TextView tv = (TextView)v.findViewById(R.id.fragment_mine_item_title);
+			tv.setText(getResources().getText(data[i]));
+			v.setTag(data[i]);
+			v.setOnClickListener(new MyListener());
+			list.addView(v);
+		}
+	}
+
+	class MyListener implements View.OnClickListener{
+		@Override
+		public void onClick(View v) {
+			int tag = (int)v.getTag();
+			switch (tag){
+				case R.string.fragment_shop_function_order:
+					startActivity(new Intent().setClass(getActivity(), ActivityOrderListSlide.class));
+					ReportUtils.add(ReportUtils.DEFAULTEVENT_FMETMYLIST, null, null);
+					break;
+				case R.string.fragment_mine_head_list_2:
+					BasesUtils.showDialogBySystemUI(getActivity(), getString(R.string.fragment_mine_head_list_2_1), getString(R.string.search_title_sub1), new DialogInterface.OnClickListener() {
+						@Override
+						public void onClick(DialogInterface dialog, int which) {
+							dialog.cancel();
+						}
+					}, getString(R.string.search_title_sub2), new DialogInterface.OnClickListener() {
+						@Override
+						public void onClick(DialogInterface dialog, int which) {
+							dialog.cancel();
+							BasesUtils.showMsg(getActivity(), getString(R.string.fragment_mine_head_list_2_2));
+						}
+					}, "", null);
+					break;
+				case R.string.fragment_mine_head_list_3:
+					startActivity(new Intent().setClass(getActivity(), ActivityAbout.class));
+					break;
+			}
+		}
+	}
+	@Override
+	public void onResume() {
+		super.onResume();
+		updateUserInfo();
+	}
+}
Index: app/src/main/java/com/oasgames/android/oaspay/adapter/AdapterShopNewestHotProductList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/adapter/AdapterShopNewestHotProductList.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/adapter/AdapterShopNewestHotProductList.java	(revision )
@@ -0,0 +1,64 @@
+package com.oasgames.android.oaspay.adapter;
+
+import android.app.Activity;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.base.tools.list.BasesListAdapter;
+import com.oasgames.android.oaspay.R;
+import com.oasgames.android.oaspay.entity.ProductInfo;
+
+import java.util.List;
+
+
+/**
+ * 商城 最新 最热 列表 适配器
+ * @author Administrator
+ *
+ */
+public class AdapterShopNewestHotProductList extends BasesListAdapter<ProductInfo> {
+	Activity c;
+	ViewHoder hoder = null;
+	public AdapterShopNewestHotProductList(Activity activity, List<ProductInfo> data,
+										   int count, LinearLayout footerView) {
+		super(activity, data, count, footerView);
+		this.c = activity;
+	}
+
+	@Override
+	public void loadMore() {
+		// no more
+	}
+
+	@Override
+	public View getRowView(int position, View convertView, ViewGroup parent) {
+		ViewHoder holder = null;
+		if(null == convertView){
+			convertView = c.getLayoutInflater().inflate(R.layout.fragment_main_shop_category_item, null);
+			holder = new ViewHoder();
+			holder.title = (TextView) convertView.findViewById(R.id.fragment_shop_category_item_title);
+			holder.img = (ImageView) convertView.findViewById(R.id.fragment_shop_category_item_image);
+			holder.diamond = (TextView) convertView.findViewById(R.id.fragment_shop_category_item_diamond);
+
+			convertView.setTag(holder);
+		}else{
+			holder = (ViewHoder) convertView.getTag();
+		}
+
+		final ProductInfo info = getItem(position);
+		holder.title.setText(info.product_name);
+		holder.diamond.setText(info.game_coins_show);
+		loadImg(holder.img, info.product_img_url);
+		return convertView;
+	}
+
+	static class ViewHoder{
+		TextView title;
+		ImageView img;
+		TextView diamond;
+
+	}
+}
Index: app/src/main/res/anim/slide_in_left.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/anim/slide_in_left.xml	(revision )
+++ app/src/main/res/anim/slide_in_left.xml	(revision )
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+/* //device/apps/common/res/anim/slide_in_right.xml
+**
+** Copyright 2007, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License"); 
+** you may not use this file except in compliance with the License. 
+** You may obtain a copy of the License at 
+**
+**     http://www.apache.org/licenses/LICENSE-2.0 
+**
+** Unless required by applicable law or agreed to in writing, software 
+** distributed under the License is distributed on an "AS IS" BASIS, 
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+** See the License for the specific language governing permissions and 
+** limitations under the License.
+*/
+-->
+
+<set xmlns:android="http://schemas.android.com/apk/res/android">
+	<translate android:fromXDelta="-100%p" android:toXDelta="0"
+            android:duration="@android:integer/config_shortAnimTime"
+        android:interpolator="@android:anim/decelerate_interpolator"/>
+	<!--<alpha android:fromAlpha="0.0" android:toAlpha="1.0"
+            android:duration="@android:integer/config_mediumAnimTime" />-->
+</set>
Index: app/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/.gitignore	(revision )
+++ app/.gitignore	(revision )
@@ -0,0 +1,1 @@
+/build
Index: app/src/main/res/drawable/common_delete_selector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/common_delete_selector.xml	(revision )
+++ app/src/main/res/drawable/common_delete_selector.xml	(revision )
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@color/common_button_delete_bg_selected" android:state_pressed="true"/>
+    <item android:drawable="@color/common_button_delete_bg_selected" android:state_focused="true"/>
+    <item android:drawable="@color/common_button_delete_bg_selected" android:state_selected="true"/>
+    <item android:drawable="@color/common_button_delete_bg_unselect"/>
+
+</selector>
\ No newline at end of file
Index: app/src/main/java/com/base/tools/service/BasesDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/service/BasesDao.java	(revision )
+++ app/src/main/java/com/base/tools/service/BasesDao.java	(revision )
@@ -0,0 +1,145 @@
+package com.base.tools.service;
+
+import com.base.tools.BasesApplication;
+import com.base.tools.http.MultipartEntity;
+import com.base.tools.http.MultipartRequest;
+import com.base.tools.utils.BasesUtils;
+import com.mopub.volley.NetworkResponse;
+import com.mopub.volley.Request;
+import com.mopub.volley.Response;
+import com.mopub.volley.RetryPolicy;
+import com.mopub.volley.VolleyError;
+import com.mopub.volley.toolbox.HttpHeaderParser;
+import com.mopub.volley.toolbox.JsonRequest;
+
+import java.io.UnsupportedEncodingException;
+import java.util.Map;
+
+/**
+ * http DAO
+ * 
+ * @author Xdb
+ * 
+ */
+public class BasesDao {
+	final String TAG = BasesDao.class.getSimpleName();
+//	private final static HttpDao HTTP_DAO = new HttpDao();
+//
+//	private HttpDao() {
+//	}
+//
+//	/**
+//	 * @return 返回逻辑的实例.
+//	 */
+//	public static HttpDao instance() {
+//
+//		return HTTP_DAO;
+//	}
+
+	public void post(String url, Map<String, String> paras, Response.Listener<String> listener, Response.ErrorListener error){
+		BasesUtils.logError(TAG, "请求地址："+url);
+		MultipartRequest multipartRequest = new MultipartRequest(
+				url, listener, error);
+		multipartRequest.setRetryPolicy(new RetryPolicy() {
+
+			@Override
+			public void retry(VolleyError arg0) throws VolleyError {
+			}
+
+			@Override
+			public int getCurrentTimeout() {
+				return 30000;
+			}
+
+			@Override
+			public int getCurrentRetryCount() {
+				return 0;
+			}
+		});
+
+		// 添加header
+		multipartRequest.addHeader("header-name", "value");
+
+		// 通过MultipartEntity来设置参数
+		MultipartEntity multi = multipartRequest.getMultiPartEntity();
+
+		// 文本参数
+		if(paras != null && paras.size() >0) {
+			StringBuffer sbuf = new StringBuffer(url+"?");
+			for (Map.Entry<String, String> en : paras.entrySet()) {
+				multi.addStringPart(en.getKey(), en.getValue());
+				sbuf.append("&"+en.getKey()+"="+en.getValue());
+			}
+			BasesUtils.logError(TAG, sbuf.toString());
+		}
+		multipartRequest.setShouldCache(false);
+		// 将请求添加到队列中
+		BasesApplication.volleyRequestQueue.add(multipartRequest);
+	}
+	public void postMdata(String url, String paras, Response.Listener<String> listener, Response.ErrorListener error){
+		BasesUtils.logError(TAG, "请求地址：" + url);
+		MyJsonRequest stringRequest = new MyJsonRequest(Request.Method.POST, url, paras, listener, error);
+		stringRequest.setRetryPolicy(new RetryPolicy() {
+
+			@Override
+			public void retry(VolleyError arg0) throws VolleyError {
+			}
+
+			@Override
+			public int getCurrentTimeout() {
+				return 30000;
+			}
+
+			@Override
+			public int getCurrentRetryCount() {
+				return 0;
+			}
+		});
+
+		stringRequest.setShouldCache(false);
+		// 将请求添加到队列中
+		BasesApplication.volleyRequestQueue.add(stringRequest);
+	}
+
+	class MyJsonRequest extends JsonRequest<String>{
+		 public MyJsonRequest(int method, String url, String content, Response.Listener<String> listener, Response.ErrorListener error){
+			 super(method, url, content, listener,error);
+		 }
+
+		@Override
+		protected Response<String> parseNetworkResponse(NetworkResponse response) {
+			String parsed = "";
+			try {
+				parsed = new String(response.data, HttpHeaderParser.parseCharset(response.headers));
+			} catch (UnsupportedEncodingException e) {
+				parsed = new String(response.data);
+			}
+			return Response.success(parsed, HttpHeaderParser.parseCacheHeaders(response));
+		}
+	}
+
+	public void get(String url, Response.Listener<String> listener, Response.ErrorListener error){
+		BasesUtils.logError(TAG, "请求地址：" + url);
+		MyJsonRequest stringRequest = new MyJsonRequest(Request.Method.GET, url, null, listener, error);
+		stringRequest.setRetryPolicy(new RetryPolicy() {
+
+			@Override
+			public void retry(VolleyError arg0) throws VolleyError {
+			}
+
+			@Override
+			public int getCurrentTimeout() {
+				return 30000;
+			}
+
+			@Override
+			public int getCurrentRetryCount() {
+				return 0;
+			}
+		});
+
+		stringRequest.setShouldCache(false);
+		// 将请求添加到队列中
+		BasesApplication.volleyRequestQueue.add(stringRequest);
+	}
+}
Index: app/src/main/java/com/base/tools/utils/DisplayUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/utils/DisplayUtil.java	(revision )
+++ app/src/main/java/com/base/tools/utils/DisplayUtil.java	(revision )
@@ -0,0 +1,52 @@
+package com.base.tools.utils;
+/**
+ * Android大小单位转换工具类
+ * 
+ * @author xdb
+ * 
+ */
+public class DisplayUtil {
+ /**
+  * 将px值转换为dip或dp值，保证尺寸大小不变
+  * 
+  * @param pxValue
+  * @param scale（DisplayMetrics类中属性density）
+  * @return
+  */
+ public static int px2dip(float pxValue, float scale) {
+  return (int) (pxValue / scale + 0.5f);
+ }
+
+ /**
+  * 将dip或dp值转换为px值，保证尺寸大小不变
+  * 
+  * @param dipValue
+  * @param scale（DisplayMetrics类中属性density）
+  * @return
+  */
+ public static int dip2px(float dipValue, float scale) {
+  return (int) (dipValue * scale + 0.5f);
+ }
+
+ /**
+  * 将px值转换为sp值，保证文字大小不变
+  * 
+  * @param pxValue
+  * @param fontScale（DisplayMetrics类中属性scaledDensity）
+  * @return
+  */
+ public static int px2sp(float pxValue, float fontScale) {
+  return (int) (pxValue / fontScale + 0.5f);
+ }
+
+ /**
+  * 将sp值转换为px值，保证文字大小不变
+  * 
+  * @param spValue
+  * @param fontScale（DisplayMetrics类中属性scaledDensity）
+  * @return
+  */
+ public static int sp2px(float spValue, float fontScale) {
+  return (int) (spValue * fontScale + 0.5f);
+ }
+}
Index: app/src/main/java/com/nineoldandroids/animation/AnimatorInflater.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nineoldandroids/animation/AnimatorInflater.java	(revision )
+++ app/src/main/java/com/nineoldandroids/animation/AnimatorInflater.java	(revision )
@@ -0,0 +1,344 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.nineoldandroids.animation;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.content.res.TypedArray;
+import android.content.res.XmlResourceParser;
+import android.content.res.Resources.NotFoundException;
+import android.util.AttributeSet;
+import android.util.TypedValue;
+import android.util.Xml;
+import android.view.animation.AnimationUtils;
+import org.xmlpull.v1.XmlPullParser;
+import org.xmlpull.v1.XmlPullParserException;
+
+import java.io.IOException;
+import java.util.ArrayList;
+
+/**
+ * This class is used to instantiate animator XML files into Animator objects.
+ * <p>
+ * For performance reasons, inflation relies heavily on pre-processing of
+ * XML files that is done at build time. Therefore, it is not currently possible
+ * to use this inflater with an XmlPullParser over a plain XML file at runtime;
+ * it only works with an XmlPullParser returned from a compiled resource (R.
+ * <em>something</em> file.)
+ */
+public class AnimatorInflater {
+    private static final int[] AnimatorSet = new int[] {
+        /* 0 */ android.R.attr.ordering,
+    };
+    private static final int AnimatorSet_ordering = 0;
+
+    private static final int[] PropertyAnimator = new int[] {
+        /* 0 */ android.R.attr.propertyName,
+    };
+    private static final int PropertyAnimator_propertyName = 0;
+
+    private static final int[] Animator = new int[] {
+        /* 0 */ android.R.attr.interpolator,
+        /* 1 */ android.R.attr.duration,
+        /* 2 */ android.R.attr.startOffset,
+        /* 3 */ android.R.attr.repeatCount,
+        /* 4 */ android.R.attr.repeatMode,
+        /* 5 */ android.R.attr.valueFrom,
+        /* 6 */ android.R.attr.valueTo,
+        /* 7 */ android.R.attr.valueType,
+    };
+    private static final int Animator_interpolator = 0;
+    private static final int Animator_duration = 1;
+    private static final int Animator_startOffset = 2;
+    private static final int Animator_repeatCount = 3;
+    private static final int Animator_repeatMode = 4;
+    private static final int Animator_valueFrom = 5;
+    private static final int Animator_valueTo = 6;
+    private static final int Animator_valueType = 7;
+
+    /**
+     * These flags are used when parsing AnimatorSet objects
+     */
+    private static final int TOGETHER = 0;
+    //private static final int SEQUENTIALLY = 1;
+
+    /**
+     * Enum values used in XML attributes to indicate the value for mValueType
+     */
+    private static final int VALUE_TYPE_FLOAT       = 0;
+    //private static final int VALUE_TYPE_INT         = 1;
+    //private static final int VALUE_TYPE_COLOR       = 4;
+    //private static final int VALUE_TYPE_CUSTOM      = 5;
+
+    /**
+     * Loads an {@link Animator} object from a resource
+     *
+     * @param context Application context used to access resources
+     * @param id The resource id of the animation to load
+     * @return The animator object reference by the specified id
+     * @throws NotFoundException when the animation cannot be loaded
+     */
+    public static Animator loadAnimator(Context context, int id)
+            throws NotFoundException {
+
+        XmlResourceParser parser = null;
+        try {
+            parser = context.getResources().getAnimation(id);
+            return createAnimatorFromXml(context, parser);
+        } catch (XmlPullParserException ex) {
+            NotFoundException rnf =
+                    new NotFoundException("Can't load animation resource ID #0x" +
+                    Integer.toHexString(id));
+            rnf.initCause(ex);
+            throw rnf;
+        } catch (IOException ex) {
+            NotFoundException rnf =
+                    new NotFoundException("Can't load animation resource ID #0x" +
+                    Integer.toHexString(id));
+            rnf.initCause(ex);
+            throw rnf;
+        } finally {
+            if (parser != null) parser.close();
+        }
+    }
+
+    private static Animator createAnimatorFromXml(Context c, XmlPullParser parser)
+            throws XmlPullParserException, IOException {
+
+        return createAnimatorFromXml(c, parser, Xml.asAttributeSet(parser), null, 0);
+    }
+
+    private static Animator createAnimatorFromXml(Context c, XmlPullParser parser,
+            AttributeSet attrs, AnimatorSet parent, int sequenceOrdering)
+            throws XmlPullParserException, IOException {
+
+        Animator anim = null;
+        ArrayList<Animator> childAnims = null;
+
+        // Make sure we are on a start tag.
+        int type;
+        int depth = parser.getDepth();
+
+        while (((type=parser.next()) != XmlPullParser.END_TAG || parser.getDepth() > depth)
+               && type != XmlPullParser.END_DOCUMENT) {
+
+            if (type != XmlPullParser.START_TAG) {
+                continue;
+            }
+
+            String  name = parser.getName();
+
+            if (name.equals("objectAnimator")) {
+                anim = loadObjectAnimator(c, attrs);
+            } else if (name.equals("animator")) {
+                anim = loadAnimator(c, attrs, null);
+            } else if (name.equals("set")) {
+                anim = new AnimatorSet();
+                TypedArray a = c.obtainStyledAttributes(attrs,
+                        /*com.android.internal.R.styleable.*/AnimatorSet);
+
+                TypedValue orderingValue = new TypedValue();
+                a.getValue(/*com.android.internal.R.styleable.*/AnimatorSet_ordering, orderingValue);
+                int ordering = orderingValue.type == TypedValue.TYPE_INT_DEC ? orderingValue.data : TOGETHER;
+
+                createAnimatorFromXml(c, parser, attrs, (AnimatorSet) anim,  ordering);
+                a.recycle();
+            } else {
+                throw new RuntimeException("Unknown animator name: " + parser.getName());
+            }
+
+            if (parent != null) {
+                if (childAnims == null) {
+                    childAnims = new ArrayList<Animator>();
+                }
+                childAnims.add(anim);
+            }
+        }
+        if (parent != null && childAnims != null) {
+            Animator[] animsArray = new Animator[childAnims.size()];
+            int index = 0;
+            for (Animator a : childAnims) {
+                animsArray[index++] = a;
+            }
+            if (sequenceOrdering == TOGETHER) {
+                parent.playTogether(animsArray);
+            } else {
+                parent.playSequentially(animsArray);
+            }
+        }
+
+        return anim;
+
+    }
+
+    private static ObjectAnimator loadObjectAnimator(Context context, AttributeSet attrs)
+            throws NotFoundException {
+
+        ObjectAnimator anim = new ObjectAnimator();
+
+        loadAnimator(context, attrs, anim);
+
+        TypedArray a =
+                context.obtainStyledAttributes(attrs, /*com.android.internal.R.styleable.*/PropertyAnimator);
+
+        String propertyName = a.getString(/*com.android.internal.R.styleable.*/PropertyAnimator_propertyName);
+
+        anim.setPropertyName(propertyName);
+
+        a.recycle();
+
+        return anim;
+    }
+
+    /**
+     * Creates a new animation whose parameters come from the specified context and
+     * attributes set.
+     *
+     * @param context the application environment
+     * @param attrs the set of attributes holding the animation parameters
+     */
+    private static ValueAnimator loadAnimator(Context context, AttributeSet attrs, ValueAnimator anim)
+            throws NotFoundException {
+
+        TypedArray a =
+                context.obtainStyledAttributes(attrs, /*com.android.internal.R.styleable.*/Animator);
+
+        long duration = a.getInt(/*com.android.internal.R.styleable.*/Animator_duration, 0);
+
+        long startDelay = a.getInt(/*com.android.internal.R.styleable.*/Animator_startOffset, 0);
+
+        int valueType = a.getInt(/*com.android.internal.R.styleable.*/Animator_valueType,
+                VALUE_TYPE_FLOAT);
+
+        if (anim == null) {
+            anim = new ValueAnimator();
+        }
+        //TypeEvaluator evaluator = null;
+
+        int valueFromIndex = /*com.android.internal.R.styleable.*/Animator_valueFrom;
+        int valueToIndex = /*com.android.internal.R.styleable.*/Animator_valueTo;
+
+        boolean getFloats = (valueType == VALUE_TYPE_FLOAT);
+
+        TypedValue tvFrom = a.peekValue(valueFromIndex);
+        boolean hasFrom = (tvFrom != null);
+        int fromType = hasFrom ? tvFrom.type : 0;
+        TypedValue tvTo = a.peekValue(valueToIndex);
+        boolean hasTo = (tvTo != null);
+        int toType = hasTo ? tvTo.type : 0;
+
+        if ((hasFrom && (fromType >= TypedValue.TYPE_FIRST_COLOR_INT) &&
+                (fromType <= TypedValue.TYPE_LAST_COLOR_INT)) ||
+            (hasTo && (toType >= TypedValue.TYPE_FIRST_COLOR_INT) &&
+                (toType <= TypedValue.TYPE_LAST_COLOR_INT))) {
+            // special case for colors: ignore valueType and get ints
+            getFloats = false;
+            anim.setEvaluator(new ArgbEvaluator());
+        }
+
+        if (getFloats) {
+            float valueFrom;
+            float valueTo;
+            if (hasFrom) {
+                if (fromType == TypedValue.TYPE_DIMENSION) {
+                    valueFrom = a.getDimension(valueFromIndex, 0f);
+                } else {
+                    valueFrom = a.getFloat(valueFromIndex, 0f);
+                }
+                if (hasTo) {
+                    if (toType == TypedValue.TYPE_DIMENSION) {
+                        valueTo = a.getDimension(valueToIndex, 0f);
+                    } else {
+                        valueTo = a.getFloat(valueToIndex, 0f);
+                    }
+                    anim.setFloatValues(valueFrom, valueTo);
+                } else {
+                    anim.setFloatValues(valueFrom);
+                }
+            } else {
+                if (toType == TypedValue.TYPE_DIMENSION) {
+                    valueTo = a.getDimension(valueToIndex, 0f);
+                } else {
+                    valueTo = a.getFloat(valueToIndex, 0f);
+                }
+                anim.setFloatValues(valueTo);
+            }
+        } else {
+            int valueFrom;
+            int valueTo;
+            if (hasFrom) {
+                if (fromType == TypedValue.TYPE_DIMENSION) {
+                    valueFrom = (int) a.getDimension(valueFromIndex, 0f);
+                } else if ((fromType >= TypedValue.TYPE_FIRST_COLOR_INT) &&
+                        (fromType <= TypedValue.TYPE_LAST_COLOR_INT)) {
+                    valueFrom = a.getColor(valueFromIndex, 0);
+                } else {
+                    valueFrom = a.getInt(valueFromIndex, 0);
+                }
+                if (hasTo) {
+                    if (toType == TypedValue.TYPE_DIMENSION) {
+                        valueTo = (int) a.getDimension(valueToIndex, 0f);
+                    } else if ((toType >= TypedValue.TYPE_FIRST_COLOR_INT) &&
+                            (toType <= TypedValue.TYPE_LAST_COLOR_INT)) {
+                        valueTo = a.getColor(valueToIndex, 0);
+                    } else {
+                        valueTo = a.getInt(valueToIndex, 0);
+                    }
+                    anim.setIntValues(valueFrom, valueTo);
+                } else {
+                    anim.setIntValues(valueFrom);
+                }
+            } else {
+                if (hasTo) {
+                    if (toType == TypedValue.TYPE_DIMENSION) {
+                        valueTo = (int) a.getDimension(valueToIndex, 0f);
+                    } else if ((toType >= TypedValue.TYPE_FIRST_COLOR_INT) &&
+                        (toType <= TypedValue.TYPE_LAST_COLOR_INT)) {
+                        valueTo = a.getColor(valueToIndex, 0);
+                    } else {
+                        valueTo = a.getInt(valueToIndex, 0);
+                    }
+                    anim.setIntValues(valueTo);
+                }
+            }
+        }
+
+        anim.setDuration(duration);
+        anim.setStartDelay(startDelay);
+
+        if (a.hasValue(/*com.android.internal.R.styleable.*/Animator_repeatCount)) {
+            anim.setRepeatCount(
+                    a.getInt(/*com.android.internal.R.styleable.*/Animator_repeatCount, 0));
+        }
+        if (a.hasValue(/*com.android.internal.R.styleable.*/Animator_repeatMode)) {
+            anim.setRepeatMode(
+                    a.getInt(/*com.android.internal.R.styleable.*/Animator_repeatMode,
+                            ValueAnimator.RESTART));
+        }
+        //if (evaluator != null) {
+        //    anim.setEvaluator(evaluator);
+        //}
+
+        final int resID =
+                a.getResourceId(/*com.android.internal.R.styleable.*/Animator_interpolator, 0);
+        if (resID > 0) {
+            anim.setInterpolator(AnimationUtils.loadInterpolator(context, resID));
+        }
+        a.recycle();
+
+        return anim;
+    }
+}
\ No newline at end of file
Index: app/src/main/res/drawable/main_foot_news_selector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/main_foot_news_selector.xml	(revision )
+++ app/src/main/res/drawable/main_foot_news_selector.xml	(revision )
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@mipmap/main_foot_news_checked" android:state_pressed="true"/>
+    <item android:drawable="@mipmap/main_foot_news_checked" android:state_focused="true"/>
+    <item android:drawable="@mipmap/main_foot_news_checked" android:state_selected="true"/>
+    <item android:drawable="@mipmap/main_foot_news_checked" android:state_checked="true"/>
+    <item android:drawable="@mipmap/main_foot_news_uncheck"/>
+
+</selector>
\ No newline at end of file
Index: app/src/main/java/com/nineoldandroids/animation/PropertyValuesHolder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nineoldandroids/animation/PropertyValuesHolder.java	(revision )
+++ app/src/main/java/com/nineoldandroids/animation/PropertyValuesHolder.java	(revision )
@@ -0,0 +1,1030 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.nineoldandroids.animation;
+
+import android.util.Log;
+
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.HashMap;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+
+import com.nineoldandroids.util.FloatProperty;
+import com.nineoldandroids.util.IntProperty;
+import com.nineoldandroids.util.Property;
+
+/**
+ * This class holds information about a property and the values that that property
+ * should take on during an animation. PropertyValuesHolder objects can be used to create
+ * animations with ValueAnimator or ObjectAnimator that operate on several different properties
+ * in parallel.
+ */
+public class PropertyValuesHolder implements Cloneable {
+
+    /**
+     * The name of the property associated with the values. This need not be a real property,
+     * unless this object is being used with ObjectAnimator. But this is the name by which
+     * aniamted values are looked up with getAnimatedValue(String) in ValueAnimator.
+     */
+    String mPropertyName;
+
+    /**
+     * @hide
+     */
+    protected Property mProperty;
+
+    /**
+     * The setter function, if needed. ObjectAnimator hands off this functionality to
+     * PropertyValuesHolder, since it holds all of the per-property information. This
+     * property is automatically
+     * derived when the animation starts in setupSetterAndGetter() if using ObjectAnimator.
+     */
+    Method mSetter = null;
+
+    /**
+     * The getter function, if needed. ObjectAnimator hands off this functionality to
+     * PropertyValuesHolder, since it holds all of the per-property information. This
+     * property is automatically
+     * derived when the animation starts in setupSetterAndGetter() if using ObjectAnimator.
+     * The getter is only derived and used if one of the values is null.
+     */
+    private Method mGetter = null;
+
+    /**
+     * The type of values supplied. This information is used both in deriving the setter/getter
+     * functions and in deriving the type of TypeEvaluator.
+     */
+    Class mValueType;
+
+    /**
+     * The set of keyframes (time/value pairs) that define this animation.
+     */
+    KeyframeSet mKeyframeSet = null;
+
+
+    // type evaluators for the primitive types handled by this implementation
+    private static final TypeEvaluator sIntEvaluator = new IntEvaluator();
+    private static final TypeEvaluator sFloatEvaluator = new FloatEvaluator();
+
+    // We try several different types when searching for appropriate setter/getter functions.
+    // The caller may have supplied values in a type that does not match the setter/getter
+    // functions (such as the integers 0 and 1 to represent floating point values for alpha).
+    // Also, the use of generics in constructors means that we end up with the Object versions
+    // of primitive types (Float vs. float). But most likely, the setter/getter functions
+    // will take primitive types instead.
+    // So we supply an ordered array of other types to try before giving up.
+    private static Class[] FLOAT_VARIANTS = {float.class, Float.class, double.class, int.class,
+            Double.class, Integer.class};
+    private static Class[] INTEGER_VARIANTS = {int.class, Integer.class, float.class, double.class,
+            Float.class, Double.class};
+    private static Class[] DOUBLE_VARIANTS = {double.class, Double.class, float.class, int.class,
+            Float.class, Integer.class};
+
+    // These maps hold all property entries for a particular class. This map
+    // is used to speed up property/setter/getter lookups for a given class/property
+    // combination. No need to use reflection on the combination more than once.
+    private static final HashMap<Class, HashMap<String, Method>> sSetterPropertyMap =
+            new HashMap<Class, HashMap<String, Method>>();
+    private static final HashMap<Class, HashMap<String, Method>> sGetterPropertyMap =
+            new HashMap<Class, HashMap<String, Method>>();
+
+    // This lock is used to ensure that only one thread is accessing the property maps
+    // at a time.
+    final ReentrantReadWriteLock mPropertyMapLock = new ReentrantReadWriteLock();
+
+    // Used to pass single value to varargs parameter in setter invocation
+    final Object[] mTmpValueArray = new Object[1];
+
+    /**
+     * The type evaluator used to calculate the animated values. This evaluator is determined
+     * automatically based on the type of the start/end objects passed into the constructor,
+     * but the system only knows about the primitive types int and float. Any other
+     * type will need to set the evaluator to a custom evaluator for that type.
+     */
+    private TypeEvaluator mEvaluator;
+
+    /**
+     * The value most recently calculated by calculateValue(). This is set during
+     * that function and might be retrieved later either by ValueAnimator.animatedValue() or
+     * by the property-setting logic in ObjectAnimator.animatedValue().
+     */
+    private Object mAnimatedValue;
+
+    /**
+     * Internal utility constructor, used by the factory methods to set the property name.
+     * @param propertyName The name of the property for this holder.
+     */
+    private PropertyValuesHolder(String propertyName) {
+        mPropertyName = propertyName;
+    }
+
+    /**
+     * Internal utility constructor, used by the factory methods to set the property.
+     * @param property The property for this holder.
+     */
+    private PropertyValuesHolder(Property property) {
+        mProperty = property;
+        if (property != null) {
+            mPropertyName = property.getName();
+        }
+    }
+
+    /**
+     * Constructs and returns a PropertyValuesHolder with a given property name and
+     * set of int values.
+     * @param propertyName The name of the property being animated.
+     * @param values The values that the named property will animate between.
+     * @return PropertyValuesHolder The constructed PropertyValuesHolder object.
+     */
+    public static PropertyValuesHolder ofInt(String propertyName, int... values) {
+        return new IntPropertyValuesHolder(propertyName, values);
+    }
+
+    /**
+     * Constructs and returns a PropertyValuesHolder with a given property and
+     * set of int values.
+     * @param property The property being animated. Should not be null.
+     * @param values The values that the property will animate between.
+     * @return PropertyValuesHolder The constructed PropertyValuesHolder object.
+     */
+    public static PropertyValuesHolder ofInt(Property<?, Integer> property, int... values) {
+        return new IntPropertyValuesHolder(property, values);
+    }
+
+    /**
+     * Constructs and returns a PropertyValuesHolder with a given property name and
+     * set of float values.
+     * @param propertyName The name of the property being animated.
+     * @param values The values that the named property will animate between.
+     * @return PropertyValuesHolder The constructed PropertyValuesHolder object.
+     */
+    public static PropertyValuesHolder ofFloat(String propertyName, float... values) {
+        return new FloatPropertyValuesHolder(propertyName, values);
+    }
+
+    /**
+     * Constructs and returns a PropertyValuesHolder with a given property and
+     * set of float values.
+     * @param property The property being animated. Should not be null.
+     * @param values The values that the property will animate between.
+     * @return PropertyValuesHolder The constructed PropertyValuesHolder object.
+     */
+    public static PropertyValuesHolder ofFloat(Property<?, Float> property, float... values) {
+        return new FloatPropertyValuesHolder(property, values);
+    }
+
+    /**
+     * Constructs and returns a PropertyValuesHolder with a given property name and
+     * set of Object values. This variant also takes a TypeEvaluator because the system
+     * cannot automatically interpolate between objects of unknown type.
+     *
+     * @param propertyName The name of the property being animated.
+     * @param evaluator A TypeEvaluator that will be called on each animation frame to
+     * provide the necessary interpolation between the Object values to derive the animated
+     * value.
+     * @param values The values that the named property will animate between.
+     * @return PropertyValuesHolder The constructed PropertyValuesHolder object.
+     */
+    public static PropertyValuesHolder ofObject(String propertyName, TypeEvaluator evaluator,
+            Object... values) {
+        PropertyValuesHolder pvh = new PropertyValuesHolder(propertyName);
+        pvh.setObjectValues(values);
+        pvh.setEvaluator(evaluator);
+        return pvh;
+    }
+
+    /**
+     * Constructs and returns a PropertyValuesHolder with a given property and
+     * set of Object values. This variant also takes a TypeEvaluator because the system
+     * cannot automatically interpolate between objects of unknown type.
+     *
+     * @param property The property being animated. Should not be null.
+     * @param evaluator A TypeEvaluator that will be called on each animation frame to
+     * provide the necessary interpolation between the Object values to derive the animated
+     * value.
+     * @param values The values that the property will animate between.
+     * @return PropertyValuesHolder The constructed PropertyValuesHolder object.
+     */
+    public static <V> PropertyValuesHolder ofObject(Property property,
+            TypeEvaluator<V> evaluator, V... values) {
+        PropertyValuesHolder pvh = new PropertyValuesHolder(property);
+        pvh.setObjectValues(values);
+        pvh.setEvaluator(evaluator);
+        return pvh;
+    }
+
+    /**
+     * Constructs and returns a PropertyValuesHolder object with the specified property name and set
+     * of values. These values can be of any type, but the type should be consistent so that
+     * an appropriate {@link android.animation.TypeEvaluator} can be found that matches
+     * the common type.
+     * <p>If there is only one value, it is assumed to be the end value of an animation,
+     * and an initial value will be derived, if possible, by calling a getter function
+     * on the object. Also, if any value is null, the value will be filled in when the animation
+     * starts in the same way. This mechanism of automatically getting null values only works
+     * if the PropertyValuesHolder object is used in conjunction
+     * {@link ObjectAnimator}, and with a getter function
+     * derived automatically from <code>propertyName</code>, since otherwise PropertyValuesHolder has
+     * no way of determining what the value should be.
+     * @param propertyName The name of the property associated with this set of values. This
+     * can be the actual property name to be used when using a ObjectAnimator object, or
+     * just a name used to get animated values, such as if this object is used with an
+     * ValueAnimator object.
+     * @param values The set of values to animate between.
+     */
+    public static PropertyValuesHolder ofKeyframe(String propertyName, Keyframe... values) {
+        KeyframeSet keyframeSet = KeyframeSet.ofKeyframe(values);
+        if (keyframeSet instanceof IntKeyframeSet) {
+            return new IntPropertyValuesHolder(propertyName, (IntKeyframeSet) keyframeSet);
+        } else if (keyframeSet instanceof FloatKeyframeSet) {
+            return new FloatPropertyValuesHolder(propertyName, (FloatKeyframeSet) keyframeSet);
+        }
+        else {
+            PropertyValuesHolder pvh = new PropertyValuesHolder(propertyName);
+            pvh.mKeyframeSet = keyframeSet;
+            pvh.mValueType = ((Keyframe)values[0]).getType();
+            return pvh;
+        }
+    }
+
+    /**
+     * Constructs and returns a PropertyValuesHolder object with the specified property and set
+     * of values. These values can be of any type, but the type should be consistent so that
+     * an appropriate {@link android.animation.TypeEvaluator} can be found that matches
+     * the common type.
+     * <p>If there is only one value, it is assumed to be the end value of an animation,
+     * and an initial value will be derived, if possible, by calling the property's
+     * {@link android.util.Property#get(Object)} function.
+     * Also, if any value is null, the value will be filled in when the animation
+     * starts in the same way. This mechanism of automatically getting null values only works
+     * if the PropertyValuesHolder object is used in conjunction with
+     * {@link ObjectAnimator}, since otherwise PropertyValuesHolder has
+     * no way of determining what the value should be.
+     * @param property The property associated with this set of values. Should not be null.
+     * @param values The set of values to animate between.
+     */
+    public static PropertyValuesHolder ofKeyframe(Property property, Keyframe... values) {
+        KeyframeSet keyframeSet = KeyframeSet.ofKeyframe(values);
+        if (keyframeSet instanceof IntKeyframeSet) {
+            return new IntPropertyValuesHolder(property, (IntKeyframeSet) keyframeSet);
+        } else if (keyframeSet instanceof FloatKeyframeSet) {
+            return new FloatPropertyValuesHolder(property, (FloatKeyframeSet) keyframeSet);
+        }
+        else {
+            PropertyValuesHolder pvh = new PropertyValuesHolder(property);
+            pvh.mKeyframeSet = keyframeSet;
+            pvh.mValueType = ((Keyframe)values[0]).getType();
+            return pvh;
+        }
+    }
+
+    /**
+     * Set the animated values for this object to this set of ints.
+     * If there is only one value, it is assumed to be the end value of an animation,
+     * and an initial value will be derived, if possible, by calling a getter function
+     * on the object. Also, if any value is null, the value will be filled in when the animation
+     * starts in the same way. This mechanism of automatically getting null values only works
+     * if the PropertyValuesHolder object is used in conjunction
+     * {@link ObjectAnimator}, and with a getter function
+     * derived automatically from <code>propertyName</code>, since otherwise PropertyValuesHolder has
+     * no way of determining what the value should be.
+     *
+     * @param values One or more values that the animation will animate between.
+     */
+    public void setIntValues(int... values) {
+        mValueType = int.class;
+        mKeyframeSet = KeyframeSet.ofInt(values);
+    }
+
+    /**
+     * Set the animated values for this object to this set of floats.
+     * If there is only one value, it is assumed to be the end value of an animation,
+     * and an initial value will be derived, if possible, by calling a getter function
+     * on the object. Also, if any value is null, the value will be filled in when the animation
+     * starts in the same way. This mechanism of automatically getting null values only works
+     * if the PropertyValuesHolder object is used in conjunction
+     * {@link ObjectAnimator}, and with a getter function
+     * derived automatically from <code>propertyName</code>, since otherwise PropertyValuesHolder has
+     * no way of determining what the value should be.
+     *
+     * @param values One or more values that the animation will animate between.
+     */
+    public void setFloatValues(float... values) {
+        mValueType = float.class;
+        mKeyframeSet = KeyframeSet.ofFloat(values);
+    }
+
+    /**
+     * Set the animated values for this object to this set of Keyframes.
+     *
+     * @param values One or more values that the animation will animate between.
+     */
+    public void setKeyframes(Keyframe... values) {
+        int numKeyframes = values.length;
+        Keyframe keyframes[] = new Keyframe[Math.max(numKeyframes,2)];
+        mValueType = ((Keyframe)values[0]).getType();
+        for (int i = 0; i < numKeyframes; ++i) {
+            keyframes[i] = (Keyframe)values[i];
+        }
+        mKeyframeSet = new KeyframeSet(keyframes);
+    }
+
+    /**
+     * Set the animated values for this object to this set of Objects.
+     * If there is only one value, it is assumed to be the end value of an animation,
+     * and an initial value will be derived, if possible, by calling a getter function
+     * on the object. Also, if any value is null, the value will be filled in when the animation
+     * starts in the same way. This mechanism of automatically getting null values only works
+     * if the PropertyValuesHolder object is used in conjunction
+     * {@link ObjectAnimator}, and with a getter function
+     * derived automatically from <code>propertyName</code>, since otherwise PropertyValuesHolder has
+     * no way of determining what the value should be.
+     *
+     * @param values One or more values that the animation will animate between.
+     */
+    public void setObjectValues(Object... values) {
+        mValueType = values[0].getClass();
+        mKeyframeSet = KeyframeSet.ofObject(values);
+    }
+
+    /**
+     * Determine the setter or getter function using the JavaBeans convention of setFoo or
+     * getFoo for a property named 'foo'. This function figures out what the name of the
+     * function should be and uses reflection to find the Method with that name on the
+     * target object.
+     *
+     * @param targetClass The class to search for the method
+     * @param prefix "set" or "get", depending on whether we need a setter or getter.
+     * @param valueType The type of the parameter (in the case of a setter). This type
+     * is derived from the values set on this PropertyValuesHolder. This type is used as
+     * a first guess at the parameter type, but we check for methods with several different
+     * types to avoid problems with slight mis-matches between supplied values and actual
+     * value types used on the setter.
+     * @return Method the method associated with mPropertyName.
+     */
+    private Method getPropertyFunction(Class targetClass, String prefix, Class valueType) {
+        // TODO: faster implementation...
+        Method returnVal = null;
+        String methodName = getMethodName(prefix, mPropertyName);
+        Class args[] = null;
+        if (valueType == null) {
+            try {
+                returnVal = targetClass.getMethod(methodName, args);
+            } catch (NoSuchMethodException e) {
+                /* The native implementation uses JNI to do reflection, which allows access to private methods.
+                 * getDeclaredMethod(..) does not find superclass methods, so it's implemented as a fallback.
+                 */
+                try {
+                    returnVal = targetClass.getDeclaredMethod(methodName, args);
+                    returnVal.setAccessible(true);
+                } catch (NoSuchMethodException e2) {
+                    Log.e("PropertyValuesHolder",
+                            "Couldn't find no-arg method for property " + mPropertyName + ": " + e);
+                }
+            }
+        } else {
+            args = new Class[1];
+            Class typeVariants[];
+            if (mValueType.equals(Float.class)) {
+                typeVariants = FLOAT_VARIANTS;
+            } else if (mValueType.equals(Integer.class)) {
+                typeVariants = INTEGER_VARIANTS;
+            } else if (mValueType.equals(Double.class)) {
+                typeVariants = DOUBLE_VARIANTS;
+            } else {
+                typeVariants = new Class[1];
+                typeVariants[0] = mValueType;
+            }
+            for (Class typeVariant : typeVariants) {
+                args[0] = typeVariant;
+                try {
+                    returnVal = targetClass.getMethod(methodName, args);
+                    // change the value type to suit
+                    mValueType = typeVariant;
+                    return returnVal;
+                } catch (NoSuchMethodException e) {
+                    /* The native implementation uses JNI to do reflection, which allows access to private methods.
+                     * getDeclaredMethod(..) does not find superclass methods, so it's implemented as a fallback.
+                     */
+                    try {
+                        returnVal = targetClass.getDeclaredMethod(methodName, args);
+                        returnVal.setAccessible(true);
+                        // change the value type to suit
+                        mValueType = typeVariant;
+                        return returnVal;
+                    } catch (NoSuchMethodException e2) {
+                        // Swallow the error and keep trying other variants
+                    }
+                }
+            }
+            // If we got here, then no appropriate function was found
+            Log.e("PropertyValuesHolder",
+                    "Couldn't find setter/getter for property " + mPropertyName +
+                            " with value type "+ mValueType);
+        }
+
+        return returnVal;
+    }
+
+
+    /**
+     * Returns the setter or getter requested. This utility function checks whether the
+     * requested method exists in the propertyMapMap cache. If not, it calls another
+     * utility function to request the Method from the targetClass directly.
+     * @param targetClass The Class on which the requested method should exist.
+     * @param propertyMapMap The cache of setters/getters derived so far.
+     * @param prefix "set" or "get", for the setter or getter.
+     * @param valueType The type of parameter passed into the method (null for getter).
+     * @return Method the method associated with mPropertyName.
+     */
+    private Method setupSetterOrGetter(Class targetClass,
+            HashMap<Class, HashMap<String, Method>> propertyMapMap,
+            String prefix, Class valueType) {
+        Method setterOrGetter = null;
+        try {
+            // Have to lock property map prior to reading it, to guard against
+            // another thread putting something in there after we've checked it
+            // but before we've added an entry to it
+            mPropertyMapLock.writeLock().lock();
+            HashMap<String, Method> propertyMap = propertyMapMap.get(targetClass);
+            if (propertyMap != null) {
+                setterOrGetter = propertyMap.get(mPropertyName);
+            }
+            if (setterOrGetter == null) {
+                setterOrGetter = getPropertyFunction(targetClass, prefix, valueType);
+                if (propertyMap == null) {
+                    propertyMap = new HashMap<String, Method>();
+                    propertyMapMap.put(targetClass, propertyMap);
+                }
+                propertyMap.put(mPropertyName, setterOrGetter);
+            }
+        } finally {
+            mPropertyMapLock.writeLock().unlock();
+        }
+        return setterOrGetter;
+    }
+
+    /**
+     * Utility function to get the setter from targetClass
+     * @param targetClass The Class on which the requested method should exist.
+     */
+    void setupSetter(Class targetClass) {
+        mSetter = setupSetterOrGetter(targetClass, sSetterPropertyMap, "set", mValueType);
+    }
+
+    /**
+     * Utility function to get the getter from targetClass
+     */
+    private void setupGetter(Class targetClass) {
+        mGetter = setupSetterOrGetter(targetClass, sGetterPropertyMap, "get", null);
+    }
+
+    /**
+     * Internal function (called from ObjectAnimator) to set up the setter and getter
+     * prior to running the animation. If the setter has not been manually set for this
+     * object, it will be derived automatically given the property name, target object, and
+     * types of values supplied. If no getter has been set, it will be supplied iff any of the
+     * supplied values was null. If there is a null value, then the getter (supplied or derived)
+     * will be called to set those null values to the current value of the property
+     * on the target object.
+     * @param target The object on which the setter (and possibly getter) exist.
+     */
+    void setupSetterAndGetter(Object target) {
+        if (mProperty != null) {
+            // check to make sure that mProperty is on the class of target
+            try {
+                Object testValue = mProperty.get(target);
+                for (Keyframe kf : mKeyframeSet.mKeyframes) {
+                    if (!kf.hasValue()) {
+                        kf.setValue(mProperty.get(target));
+                    }
+                }
+                return;
+            } catch (ClassCastException e) {
+                Log.e("PropertyValuesHolder","No such property (" + mProperty.getName() +
+                        ") on target object " + target + ". Trying reflection instead");
+                mProperty = null;
+            }
+        }
+        Class targetClass = target.getClass();
+        if (mSetter == null) {
+            setupSetter(targetClass);
+        }
+        for (Keyframe kf : mKeyframeSet.mKeyframes) {
+            if (!kf.hasValue()) {
+                if (mGetter == null) {
+                    setupGetter(targetClass);
+                }
+                try {
+                    kf.setValue(mGetter.invoke(target));
+                } catch (InvocationTargetException e) {
+                    Log.e("PropertyValuesHolder", e.toString());
+                } catch (IllegalAccessException e) {
+                    Log.e("PropertyValuesHolder", e.toString());
+                }
+            }
+        }
+    }
+
+    /**
+     * Utility function to set the value stored in a particular Keyframe. The value used is
+     * whatever the value is for the property name specified in the keyframe on the target object.
+     *
+     * @param target The target object from which the current value should be extracted.
+     * @param kf The keyframe which holds the property name and value.
+     */
+    private void setupValue(Object target, Keyframe kf) {
+        if (mProperty != null) {
+            kf.setValue(mProperty.get(target));
+        }
+        try {
+            if (mGetter == null) {
+                Class targetClass = target.getClass();
+                setupGetter(targetClass);
+            }
+            kf.setValue(mGetter.invoke(target));
+        } catch (InvocationTargetException e) {
+            Log.e("PropertyValuesHolder", e.toString());
+        } catch (IllegalAccessException e) {
+            Log.e("PropertyValuesHolder", e.toString());
+        }
+    }
+
+    /**
+     * This function is called by ObjectAnimator when setting the start values for an animation.
+     * The start values are set according to the current values in the target object. The
+     * property whose value is extracted is whatever is specified by the propertyName of this
+     * PropertyValuesHolder object.
+     *
+     * @param target The object which holds the start values that should be set.
+     */
+    void setupStartValue(Object target) {
+        setupValue(target, mKeyframeSet.mKeyframes.get(0));
+    }
+
+    /**
+     * This function is called by ObjectAnimator when setting the end values for an animation.
+     * The end values are set according to the current values in the target object. The
+     * property whose value is extracted is whatever is specified by the propertyName of this
+     * PropertyValuesHolder object.
+     *
+     * @param target The object which holds the start values that should be set.
+     */
+    void setupEndValue(Object target) {
+        setupValue(target, mKeyframeSet.mKeyframes.get(mKeyframeSet.mKeyframes.size() - 1));
+    }
+
+    @Override
+    public PropertyValuesHolder clone() {
+        try {
+            PropertyValuesHolder newPVH = (PropertyValuesHolder) super.clone();
+            newPVH.mPropertyName = mPropertyName;
+            newPVH.mProperty = mProperty;
+            newPVH.mKeyframeSet = mKeyframeSet.clone();
+            newPVH.mEvaluator = mEvaluator;
+            return newPVH;
+        } catch (CloneNotSupportedException e) {
+            // won't reach here
+            return null;
+        }
+    }
+
+    /**
+     * Internal function to set the value on the target object, using the setter set up
+     * earlier on this PropertyValuesHolder object. This function is called by ObjectAnimator
+     * to handle turning the value calculated by ValueAnimator into a value set on the object
+     * according to the name of the property.
+     * @param target The target object on which the value is set
+     */
+    void setAnimatedValue(Object target) {
+        if (mProperty != null) {
+            mProperty.set(target, getAnimatedValue());
+        }
+        if (mSetter != null) {
+            try {
+                mTmpValueArray[0] = getAnimatedValue();
+                mSetter.invoke(target, mTmpValueArray);
+            } catch (InvocationTargetException e) {
+                Log.e("PropertyValuesHolder", e.toString());
+            } catch (IllegalAccessException e) {
+                Log.e("PropertyValuesHolder", e.toString());
+            }
+        }
+    }
+
+    /**
+     * Internal function, called by ValueAnimator, to set up the TypeEvaluator that will be used
+     * to calculate animated values.
+     */
+    void init() {
+        if (mEvaluator == null) {
+            // We already handle int and float automatically, but not their Object
+            // equivalents
+            mEvaluator = (mValueType == Integer.class) ? sIntEvaluator :
+                    (mValueType == Float.class) ? sFloatEvaluator :
+                    null;
+        }
+        if (mEvaluator != null) {
+            // KeyframeSet knows how to evaluate the common types - only give it a custom
+            // evaluator if one has been set on this class
+            mKeyframeSet.setEvaluator(mEvaluator);
+        }
+    }
+
+    /**
+     * The TypeEvaluator will the automatically determined based on the type of values
+     * supplied to PropertyValuesHolder. The evaluator can be manually set, however, if so
+     * desired. This may be important in cases where either the type of the values supplied
+     * do not match the way that they should be interpolated between, or if the values
+     * are of a custom type or one not currently understood by the animation system. Currently,
+     * only values of type float and int (and their Object equivalents: Float
+     * and Integer) are  correctly interpolated; all other types require setting a TypeEvaluator.
+     * @param evaluator
+     */
+    public void setEvaluator(TypeEvaluator evaluator) {
+        mEvaluator = evaluator;
+        mKeyframeSet.setEvaluator(evaluator);
+    }
+
+    /**
+     * Function used to calculate the value according to the evaluator set up for
+     * this PropertyValuesHolder object. This function is called by ValueAnimator.animateValue().
+     *
+     * @param fraction The elapsed, interpolated fraction of the animation.
+     */
+    void calculateValue(float fraction) {
+        mAnimatedValue = mKeyframeSet.getValue(fraction);
+    }
+
+    /**
+     * Sets the name of the property that will be animated. This name is used to derive
+     * a setter function that will be called to set animated values.
+     * For example, a property name of <code>foo</code> will result
+     * in a call to the function <code>setFoo()</code> on the target object. If either
+     * <code>valueFrom</code> or <code>valueTo</code> is null, then a getter function will
+     * also be derived and called.
+     *
+     * <p>Note that the setter function derived from this property name
+     * must take the same parameter type as the
+     * <code>valueFrom</code> and <code>valueTo</code> properties, otherwise the call to
+     * the setter function will fail.</p>
+     *
+     * @param propertyName The name of the property being animated.
+     */
+    public void setPropertyName(String propertyName) {
+        mPropertyName = propertyName;
+    }
+
+    /**
+     * Sets the property that will be animated.
+     *
+     * <p>Note that if this PropertyValuesHolder object is used with ObjectAnimator, the property
+     * must exist on the target object specified in that ObjectAnimator.</p>
+     *
+     * @param property The property being animated.
+     */
+    public void setProperty(Property property) {
+        mProperty = property;
+    }
+
+    /**
+     * Gets the name of the property that will be animated. This name will be used to derive
+     * a setter function that will be called to set animated values.
+     * For example, a property name of <code>foo</code> will result
+     * in a call to the function <code>setFoo()</code> on the target object. If either
+     * <code>valueFrom</code> or <code>valueTo</code> is null, then a getter function will
+     * also be derived and called.
+     */
+    public String getPropertyName() {
+        return mPropertyName;
+    }
+
+    /**
+     * Internal function, called by ValueAnimator and ObjectAnimator, to retrieve the value
+     * most recently calculated in calculateValue().
+     * @return
+     */
+    Object getAnimatedValue() {
+        return mAnimatedValue;
+    }
+
+    @Override
+    public String toString() {
+        return mPropertyName + ": " + mKeyframeSet.toString();
+    }
+
+    /**
+     * Utility method to derive a setter/getter method name from a property name, where the
+     * prefix is typically "set" or "get" and the first letter of the property name is
+     * capitalized.
+     *
+     * @param prefix The precursor to the method name, before the property name begins, typically
+     * "set" or "get".
+     * @param propertyName The name of the property that represents the bulk of the method name
+     * after the prefix. The first letter of this word will be capitalized in the resulting
+     * method name.
+     * @return String the property name converted to a method name according to the conventions
+     * specified above.
+     */
+    static String getMethodName(String prefix, String propertyName) {
+        if (propertyName == null || propertyName.length() == 0) {
+            // shouldn't get here
+            return prefix;
+        }
+        char firstLetter = Character.toUpperCase(propertyName.charAt(0));
+        String theRest = propertyName.substring(1);
+        return prefix + firstLetter + theRest;
+    }
+
+    static class IntPropertyValuesHolder extends PropertyValuesHolder {
+
+        // Cache JNI functions to avoid looking them up twice
+        //private static final HashMap<Class, HashMap<String, Integer>> sJNISetterPropertyMap =
+        //        new HashMap<Class, HashMap<String, Integer>>();
+        //int mJniSetter;
+        private IntProperty mIntProperty;
+
+        IntKeyframeSet mIntKeyframeSet;
+        int mIntAnimatedValue;
+
+        public IntPropertyValuesHolder(String propertyName, IntKeyframeSet keyframeSet) {
+            super(propertyName);
+            mValueType = int.class;
+            mKeyframeSet = keyframeSet;
+            mIntKeyframeSet = (IntKeyframeSet) mKeyframeSet;
+        }
+
+        public IntPropertyValuesHolder(Property property, IntKeyframeSet keyframeSet) {
+            super(property);
+            mValueType = int.class;
+            mKeyframeSet = keyframeSet;
+            mIntKeyframeSet = (IntKeyframeSet) mKeyframeSet;
+            if (property instanceof  IntProperty) {
+                mIntProperty = (IntProperty) mProperty;
+            }
+        }
+
+        public IntPropertyValuesHolder(String propertyName, int... values) {
+            super(propertyName);
+            setIntValues(values);
+        }
+
+        public IntPropertyValuesHolder(Property property, int... values) {
+            super(property);
+            setIntValues(values);
+            if (property instanceof  IntProperty) {
+                mIntProperty = (IntProperty) mProperty;
+            }
+        }
+
+        @Override
+        public void setIntValues(int... values) {
+            super.setIntValues(values);
+            mIntKeyframeSet = (IntKeyframeSet) mKeyframeSet;
+        }
+
+        @Override
+        void calculateValue(float fraction) {
+            mIntAnimatedValue = mIntKeyframeSet.getIntValue(fraction);
+        }
+
+        @Override
+        Object getAnimatedValue() {
+            return mIntAnimatedValue;
+        }
+
+        @Override
+        public IntPropertyValuesHolder clone() {
+            IntPropertyValuesHolder newPVH = (IntPropertyValuesHolder) super.clone();
+            newPVH.mIntKeyframeSet = (IntKeyframeSet) newPVH.mKeyframeSet;
+            return newPVH;
+        }
+
+        /**
+         * Internal function to set the value on the target object, using the setter set up
+         * earlier on this PropertyValuesHolder object. This function is called by ObjectAnimator
+         * to handle turning the value calculated by ValueAnimator into a value set on the object
+         * according to the name of the property.
+         * @param target The target object on which the value is set
+         */
+        @Override
+        void setAnimatedValue(Object target) {
+            if (mIntProperty != null) {
+                mIntProperty.setValue(target, mIntAnimatedValue);
+                return;
+            }
+            if (mProperty != null) {
+                mProperty.set(target, mIntAnimatedValue);
+                return;
+            }
+            //if (mJniSetter != 0) {
+            //    nCallIntMethod(target, mJniSetter, mIntAnimatedValue);
+            //    return;
+            //}
+            if (mSetter != null) {
+                try {
+                    mTmpValueArray[0] = mIntAnimatedValue;
+                    mSetter.invoke(target, mTmpValueArray);
+                } catch (InvocationTargetException e) {
+                    Log.e("PropertyValuesHolder", e.toString());
+                } catch (IllegalAccessException e) {
+                    Log.e("PropertyValuesHolder", e.toString());
+                }
+            }
+        }
+
+        @Override
+        void setupSetter(Class targetClass) {
+            if (mProperty != null) {
+                return;
+            }
+            // Check new static hashmap<propName, int> for setter method
+            //try {
+            //    mPropertyMapLock.writeLock().lock();
+            //    HashMap<String, Integer> propertyMap = sJNISetterPropertyMap.get(targetClass);
+            //    if (propertyMap != null) {
+            //        Integer mJniSetterInteger = propertyMap.get(mPropertyName);
+            //        if (mJniSetterInteger != null) {
+            //            mJniSetter = mJniSetterInteger;
+            //        }
+            //    }
+            //    if (mJniSetter == 0) {
+            //        String methodName = getMethodName("set", mPropertyName);
+            //        mJniSetter = nGetIntMethod(targetClass, methodName);
+            //        if (mJniSetter != 0) {
+            //            if (propertyMap == null) {
+            //                propertyMap = new HashMap<String, Integer>();
+            //                sJNISetterPropertyMap.put(targetClass, propertyMap);
+            //            }
+            //            propertyMap.put(mPropertyName, mJniSetter);
+            //        }
+            //    }
+            //} catch (NoSuchMethodError e) {
+            //    Log.d("PropertyValuesHolder",
+            //            "Can't find native method using JNI, use reflection" + e);
+            //} finally {
+            //    mPropertyMapLock.writeLock().unlock();
+            //}
+            //if (mJniSetter == 0) {
+                // Couldn't find method through fast JNI approach - just use reflection
+                super.setupSetter(targetClass);
+            //}
+        }
+    }
+
+    static class FloatPropertyValuesHolder extends PropertyValuesHolder {
+
+        // Cache JNI functions to avoid looking them up twice
+        //private static final HashMap<Class, HashMap<String, Integer>> sJNISetterPropertyMap =
+        //        new HashMap<Class, HashMap<String, Integer>>();
+        //int mJniSetter;
+        private FloatProperty mFloatProperty;
+
+        FloatKeyframeSet mFloatKeyframeSet;
+        float mFloatAnimatedValue;
+
+        public FloatPropertyValuesHolder(String propertyName, FloatKeyframeSet keyframeSet) {
+            super(propertyName);
+            mValueType = float.class;
+            mKeyframeSet = keyframeSet;
+            mFloatKeyframeSet = (FloatKeyframeSet) mKeyframeSet;
+        }
+
+        public FloatPropertyValuesHolder(Property property, FloatKeyframeSet keyframeSet) {
+            super(property);
+            mValueType = float.class;
+            mKeyframeSet = keyframeSet;
+            mFloatKeyframeSet = (FloatKeyframeSet) mKeyframeSet;
+            if (property instanceof FloatProperty) {
+                mFloatProperty = (FloatProperty) mProperty;
+            }
+        }
+
+        public FloatPropertyValuesHolder(String propertyName, float... values) {
+            super(propertyName);
+            setFloatValues(values);
+        }
+
+        public FloatPropertyValuesHolder(Property property, float... values) {
+            super(property);
+            setFloatValues(values);
+            if (property instanceof  FloatProperty) {
+                mFloatProperty = (FloatProperty) mProperty;
+            }
+        }
+
+        @Override
+        public void setFloatValues(float... values) {
+            super.setFloatValues(values);
+            mFloatKeyframeSet = (FloatKeyframeSet) mKeyframeSet;
+        }
+
+        @Override
+        void calculateValue(float fraction) {
+            mFloatAnimatedValue = mFloatKeyframeSet.getFloatValue(fraction);
+        }
+
+        @Override
+        Object getAnimatedValue() {
+            return mFloatAnimatedValue;
+        }
+
+        @Override
+        public FloatPropertyValuesHolder clone() {
+            FloatPropertyValuesHolder newPVH = (FloatPropertyValuesHolder) super.clone();
+            newPVH.mFloatKeyframeSet = (FloatKeyframeSet) newPVH.mKeyframeSet;
+            return newPVH;
+        }
+
+        /**
+         * Internal function to set the value on the target object, using the setter set up
+         * earlier on this PropertyValuesHolder object. This function is called by ObjectAnimator
+         * to handle turning the value calculated by ValueAnimator into a value set on the object
+         * according to the name of the property.
+         * @param target The target object on which the value is set
+         */
+        @Override
+        void setAnimatedValue(Object target) {
+            if (mFloatProperty != null) {
+                mFloatProperty.setValue(target, mFloatAnimatedValue);
+                return;
+            }
+            if (mProperty != null) {
+                mProperty.set(target, mFloatAnimatedValue);
+                return;
+            }
+            //if (mJniSetter != 0) {
+            //    nCallFloatMethod(target, mJniSetter, mFloatAnimatedValue);
+            //    return;
+            //}
+            if (mSetter != null) {
+                try {
+                    mTmpValueArray[0] = mFloatAnimatedValue;
+                    mSetter.invoke(target, mTmpValueArray);
+                } catch (InvocationTargetException e) {
+                    Log.e("PropertyValuesHolder", e.toString());
+                } catch (IllegalAccessException e) {
+                    Log.e("PropertyValuesHolder", e.toString());
+                }
+            }
+        }
+
+        @Override
+        void setupSetter(Class targetClass) {
+            if (mProperty != null) {
+                return;
+            }
+            // Check new static hashmap<propName, int> for setter method
+            //try {
+            //    mPropertyMapLock.writeLock().lock();
+            //    HashMap<String, Integer> propertyMap = sJNISetterPropertyMap.get(targetClass);
+            //    if (propertyMap != null) {
+            //        Integer mJniSetterInteger = propertyMap.get(mPropertyName);
+            //        if (mJniSetterInteger != null) {
+            //            mJniSetter = mJniSetterInteger;
+            //        }
+            //    }
+            //    if (mJniSetter == 0) {
+            //        String methodName = getMethodName("set", mPropertyName);
+            //        mJniSetter = nGetFloatMethod(targetClass, methodName);
+            //        if (mJniSetter != 0) {
+            //            if (propertyMap == null) {
+            //                propertyMap = new HashMap<String, Integer>();
+            //                sJNISetterPropertyMap.put(targetClass, propertyMap);
+            //            }
+            //            propertyMap.put(mPropertyName, mJniSetter);
+            //        }
+            //    }
+            //} catch (NoSuchMethodError e) {
+            //    Log.d("PropertyValuesHolder",
+            //            "Can't find native method using JNI, use reflection" + e);
+            //} finally {
+            //    mPropertyMapLock.writeLock().unlock();
+            //}
+            //if (mJniSetter == 0) {
+                // Couldn't find method through fast JNI approach - just use reflection
+                super.setupSetter(targetClass);
+            //}
+        }
+
+    }
+
+    //native static private int nGetIntMethod(Class targetClass, String methodName);
+    //native static private int nGetFloatMethod(Class targetClass, String methodName);
+    //native static private void nCallIntMethod(Object target, int methodID, int arg);
+    //native static private void nCallFloatMethod(Object target, int methodID, float arg);
+}
Index: app/src/main/java/com/base/tools/slide/FrontViewWrapLayout.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/slide/FrontViewWrapLayout.java	(revision )
+++ app/src/main/java/com/base/tools/slide/FrontViewWrapLayout.java	(revision )
@@ -0,0 +1,41 @@
+package com.base.tools.slide;
+
+import android.content.Context;
+import android.util.AttributeSet;
+import android.view.MotionEvent;
+import android.widget.LinearLayout;
+
+/**
+ * wrap the front view ,so we can handle motion event more simple
+ * 
+ * @author Dean Tao
+ * 
+ */
+public class FrontViewWrapLayout extends LinearLayout {
+	private boolean isOpend;// whether the front view is opend
+
+	public FrontViewWrapLayout(Context context) {
+		super(context);
+	}
+
+	public FrontViewWrapLayout(Context context, AttributeSet attrs) {
+		super(context, attrs);
+	}
+
+	public FrontViewWrapLayout(Context context, AttributeSet attrs, int defStyle) {
+		super(context, attrs, defStyle);
+	}
+
+	@Override
+	public boolean dispatchTouchEvent(MotionEvent ev) {
+		// if the front view is opend,drop all motion event(include sub view)
+		if (isOpend) {
+			return false;
+		}
+		return super.dispatchTouchEvent(ev);
+	}
+
+	public void setOpend(boolean isOpend) {
+		this.isOpend = isOpend;
+	}
+}
Index: app/src/main/java/com/google/zxing/camera/PreviewCallback.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/google/zxing/camera/PreviewCallback.java	(revision )
+++ app/src/main/java/com/google/zxing/camera/PreviewCallback.java	(revision )
@@ -0,0 +1,59 @@
+/*
+ * Copyright (C) 2010 ZXing authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.zxing.camera;
+
+import android.graphics.Point;
+import android.hardware.Camera;
+import android.os.Handler;
+import android.os.Message;
+import android.util.Log;
+
+final class PreviewCallback implements Camera.PreviewCallback {
+
+  private static final String TAG = PreviewCallback.class.getSimpleName();
+
+  private final CameraConfigurationManager configManager;
+  private final boolean useOneShotPreviewCallback;
+  private Handler previewHandler;
+  private int previewMessage;
+
+  PreviewCallback(CameraConfigurationManager configManager, boolean useOneShotPreviewCallback) {
+    this.configManager = configManager;
+    this.useOneShotPreviewCallback = useOneShotPreviewCallback;
+  }
+
+  void setHandler(Handler previewHandler, int previewMessage) {
+    this.previewHandler = previewHandler;
+    this.previewMessage = previewMessage;
+  }
+
+  public void onPreviewFrame(byte[] data, Camera camera) {
+    Point cameraResolution = configManager.getCameraResolution();
+    if (!useOneShotPreviewCallback) {
+      camera.setPreviewCallback(null);
+    }
+    if (previewHandler != null) {
+      Message message = previewHandler.obtainMessage(previewMessage, cameraResolution.x,
+          cameraResolution.y, data);
+      message.sendToTarget();
+      previewHandler = null;
+    } else {
+      Log.d(TAG, "Got preview callback, but no handler for it");
+    }
+  }
+
+}
Index: app/src/main/java/com/oasgames/android/oaspay/activity/ActivityOrderList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/activity/ActivityOrderList.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/activity/ActivityOrderList.java	(revision )
@@ -0,0 +1,340 @@
+package com.oasgames.android.oaspay.activity;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.view.GestureDetector;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.LinearLayout;
+import android.widget.RadioButton;
+import android.widget.RadioGroup;
+import android.widget.TextView;
+
+import com.base.tools.activity.BasesActivity;
+import com.base.tools.utils.BasesUtils;
+import com.base.tools.utils.DisplayUtil;
+import com.oasgames.android.oaspay.R;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * 支付订单列表
+ * Created by Administrator on 2015/10/13.
+ */
+public class ActivityOrderList extends BasesActivity{
+
+    RadioGroup radioGroup;
+    RecyclerView recyclerView;
+
+
+    List personList;
+    PersonAdapter adapter;
+
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.page_order_list_recyclerview);
+        initHead(true, true, null, false, getString(R.string.fragment_shop_function_order), false, null);
+
+        radioGroup = (RadioGroup)findViewById(R.id.order_list_radiogroup);
+        radioGroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
+            @Override
+            public void onCheckedChanged(RadioGroup group, int checkedId) {
+                updateRadioButton(checkedId);
+            }
+        });
+        recyclerView = (RecyclerView) findViewById(R.id.order_list);
+
+        recyclerView.setHasFixedSize(true);
+
+        RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
+        recyclerView.setLayoutManager(layoutManager);
+//        //添加分割线
+//        recyclerView.addItemDecoration(new DividerItemDecoration(
+//                getActivity(), DividerItemDecoration.HORIZONTAL_LIST));
+
+        initData();
+        adapter = new PersonAdapter(this,personList);
+//        adapter.setOnRecyclerViewListener(this);
+        adapter.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                switch (v.getId()){
+                    case R.id.order_list_item:// item 点击事件
+                        BasesUtils.showMsg(ActivityOrderList.this, " item 点击事件");
+                        break;
+                    case R.id.order_list_item_topay:// item 继续支付 点击事件
+                        BasesUtils.showMsg(ActivityOrderList.this, " item 继续支付 点击事件");
+                        break;
+                    case R.id.order_list_item_cancel:// item 取消订单 点击事件
+                        BasesUtils.showMsg(ActivityOrderList.this, " item 取消订单 点击事件");
+                        break;
+                    case R.id.order_list_item_delete:// item 删除 点击事件
+                        BasesUtils.showMsg(ActivityOrderList.this, " item 删除 点击事件");
+                        break;
+                }
+            }
+        });
+
+        recyclerView.setAdapter(adapter);
+
+    }
+
+    private void updateRadioButton(int checkedId){
+        int count = radioGroup.getChildCount();
+        for (int i = 0; i < count; i++) {
+            RadioButton radioButton = (RadioButton)radioGroup.getChildAt(i);
+            if(checkedId == radioButton.getId())
+                radioButton.setTextColor(getResources().getColor(R.color.common_font_color_ffffff));
+            else
+                radioButton.setTextColor(getResources().getColor(R.color.common_button_bg_unselected));
+        }
+        radioGroup.check(checkedId);
+        loadData();
+    }
+    private void loadData(){
+
+    }
+    private void initData(){
+        personList = new ArrayList();
+
+        for (int count=0;count<50;count++){
+            Person person = new Person();
+            person.id = count;
+            person.name = "聊是减肥了时间飞逝都叫我恶如我饿ur物品扔威迫我我我我我我我我我我我我我我我我我我我我我我我我我我我我我我我我我我irsmvxmcvsljflsdjf"+count;
+            person.age = count;
+            personList.add(person);
+        }
+    }
+
+    class Person {
+        int id;
+        String name;
+        int age;
+    }
+
+    class PersonAdapter extends RecyclerView.Adapter{
+        List persons = null;
+        ActivityOrderList activity;
+        View.OnClickListener clickListener;
+        public PersonAdapter(ActivityOrderList activity, List data){
+            this.persons = data;
+            this.activity = activity;
+        }
+        public void setOnClickListener(View.OnClickListener listener){
+            this.clickListener = listener;
+        }
+        @Override
+        public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {
+            View v = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.page_order_list_slide_item, null);
+
+            return new PersonHolderView(v, clickListener);
+        }
+
+        @Override
+        public void onBindViewHolder(RecyclerView.ViewHolder viewHolder, final int i) {
+            final PersonHolderView holder = (PersonHolderView) viewHolder;
+            final Person person = (Person) persons.get(i);
+            holder.tv_title.setText(person.name);
+            holder.tv_money.setText(person.age + "岁");
+
+
+            System.out.println("即将删除" + holder.tv_del.isShown());
+
+            if(!holder.tv_del.isShown()) {
+                holder.v_allItem.setLongClickable(true);
+            holder.v_allItem.setOnTouchListener(new View.OnTouchListener() {
+                    float x, y;
+                    @Override
+                    public boolean onTouch(View v, MotionEvent event) {
+
+                        switch (event.getAction()){
+                            case MotionEvent.ACTION_DOWN:
+                                x = event.getX();
+
+                                System.out.println("OnTouchListener down  " + x);
+                                break;
+                            case MotionEvent.ACTION_MOVE:
+                                if (holder.tv_del.isShown()) {
+                                    return true;
+                                }
+                                System.out.println("OnTouchListener move  " + event.getX());
+                                break;
+                            case MotionEvent.ACTION_UP:
+                                if (Math.abs(event.getX() - x) < 10 ) {// 整个item点击事件
+                                    if (holder.tv_del.isShown()) {
+//                                        TranslateAnimation animation = new TranslateAnimation(-(DisplayUtil.dip2px(64, BasesUtils.getDisplayMetrics(activity).scaledDensity)), 0, 0, 0);
+//                                        animation.setDuration(200);
+//                                        animation.setFillAfter(true);
+//                                        v.startAnimation(animation);
+                                        holder.tv_del.setVisibility(View.GONE);
+                                        v.scrollBy(-(DisplayUtil.dip2px(64, BasesUtils.getDisplayMetrics(activity).scaledDensity)), 0);
+                                        v.postInvalidate();
+                                        return false;
+                                    }
+                                    activity.startActivity(new Intent().setClass(activity, ActivityOrderDetails.class).putExtra("orderid", person.id));
+                                    overridePendingTransition(R.anim.slide_in_right, R.anim.slide_out_right);
+                                    return false;
+                                }
+                                holder.tv_del.setVisibility(View.VISIBLE);
+                                v.scrollBy((DisplayUtil.dip2px(64, BasesUtils.getDisplayMetrics(activity).scaledDensity)), 0);
+                                v.postInvalidate();
+
+//                                TranslateAnimation animation = new TranslateAnimation(0, -(DisplayUtil.dip2px(64, BasesUtils.getDisplayMetrics(activity).scaledDensity)), 0, 0);
+//                                animation.setDuration(200);
+//                                animation.setFillAfter(true);
+//                                v.startAnimation(animation);
+
+//                                    if (holder.tv_del.isShown()) {
+//                                        holder.tv_del.setVisibility(View.GONE);
+//                                        return true;
+//                                    }
+//                                    holder.tv_del.setVisibility(View.VISIBLE);
+//                                    holder.tv_del.setOnClickListener(new View.OnClickListener() {
+//                                        @Override
+//                                        public void onClick(View v) {
+//                                            int size = adapter.persons.size();
+//                                            for (int i = 0; i < size; i++) {
+//                                                Person p = (Person) adapter.persons.get(i);
+//                                                if (p.id == person.id) {
+//                                                    adapter.persons.remove(p);
+//                                                    adapter.notifyItemRemoved(i);
+//                                                    break;
+//                                                }
+//                                            }
+//                                        }
+//                                    });
+
+                                System.out.println("OnTouchListener up");
+                                break;
+                        }
+                        return false;
+//                        return new GestureDetector(activity.getApplicationContext(), new MyGesture(holder.tv_del, i, person.id)).onTouchEvent(event);
+                    }
+                });
+            }
+        }
+
+        @Override
+        public int getItemCount() {
+            if(persons==null)
+                return 0;
+            return persons.size();
+        }
+
+        @Override
+        public long getItemId(int position) {
+            return ((Person)persons.get(position)).id;
+        }
+    }
+
+    class PersonHolderView extends RecyclerView.ViewHolder{
+        LinearLayout v_allItem;
+        TextView tv_title;
+        TextView tv_money;
+        TextView tv_del;
+        TextView tv_topay;
+        TextView tv_cancel;
+        public PersonHolderView(View v, View.OnClickListener listener){
+            super(v);
+            v_allItem = (LinearLayout)v.findViewById(R.id.order_list_item);
+            tv_title = (TextView)v.findViewById(R.id.order_list_item_title);
+            tv_money = (TextView)v.findViewById(R.id.order_list_item_money);
+            tv_del = (TextView)v.findViewById(R.id.order_list_item_delete);
+            tv_topay = (TextView)v.findViewById(R.id.order_list_item_topay);
+            tv_cancel = (TextView)v.findViewById(R.id.order_list_item_cancel);
+
+//            v_allItem.setOnClickListener(listener);
+            tv_topay.setOnClickListener(listener);
+            tv_cancel.setOnClickListener(listener);
+            tv_del.setOnClickListener(listener);
+
+        }
+    }
+
+    class MyGesture extends GestureDetector.SimpleOnGestureListener {
+        int curPosition = -1;
+        int id ;
+        View v;
+        public MyGesture(View v, int position, int id){
+            this.curPosition = position;
+            this.v = v;
+            this.id = id;
+
+        }
+        @Override
+        public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
+
+            System.out.println("onFling"+velocityX);
+            return super.onFling(e1, e2, velocityX, velocityY);
+        }
+
+        @Override
+        public boolean onDown(MotionEvent e) {
+            return super.onDown(e);
+        }
+
+        @Override
+        public void onShowPress(MotionEvent e) {
+        }
+
+        @Override
+        public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {
+
+            System.out.println("onScroll"+distanceX);
+            if(v.isShown()) {
+                v.setVisibility(View.GONE);
+                return true;
+            }
+            v.setVisibility(View.VISIBLE);
+            v.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    int size = adapter.persons.size();
+                    for (int i = 0; i < size; i++) {
+                        Person p = (Person) adapter.persons.get(i);
+                        if (p.id == id) {
+                            adapter.persons.remove(p);
+                            adapter.notifyItemRemoved(i);
+                            break;
+                        }
+                    }
+                }
+            });
+            return true;
+        }
+
+        @Override
+        public void onLongPress(MotionEvent e) {
+        }
+
+        @Override
+        public boolean onSingleTapUp(MotionEvent e) {
+            System.out.println("onSingleTapUp"+e.getAction());
+            return false;
+        }
+
+        @Override
+        public boolean onSingleTapConfirmed(MotionEvent e) {
+            super.onSingleTapConfirmed(e);
+            System.out.println("onSingleTapConfirmed up   作为点击事件 " + e.getX());
+            if(!v.isShown()) {
+            }
+            return true;
+        }
+    }
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+        setContentView(R.layout.common_null);
+        adapter = null;
+        personList = null;
+    }
+}
Index: app/src/main/res/layout/page_order_list_recyclerview.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/page_order_list_recyclerview.xml	(revision )
+++ app/src/main/res/layout/page_order_list_recyclerview.xml	(revision )
@@ -0,0 +1,57 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/common_background_all_page">
+
+    <include layout="@layout/common_head"/>
+
+    <RadioGroup
+        android:id="@+id/order_list_radiogroup"
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/main_foot_height"
+        android:background="@color/common_font_color_ffffff"
+        android:paddingTop="@dimen/common_content_margin_10"
+        android:paddingBottom="@dimen/common_content_margin_10"
+        android:paddingRight="@dimen/common_content_margin_20"
+        android:paddingLeft="@dimen/common_content_margin_20"
+        android:orientation="horizontal">
+        <RadioButton
+            android:id="@+id/order_list_radiogroup_history"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:text="@string/order_list_title_sub1"
+            android:layout_weight="1"
+            android:gravity="center"
+            android:button="@null"
+            android:background="@drawable/order_list_head_left_selector"
+            android:textSize="@dimen/common_font_size_14"
+            android:textColor="@color/common_font_color_ffffff"
+            android:checked="true"/>
+        <RadioButton
+            android:id="@+id/order_list_radiogroup_month"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:text="@string/order_list_title_sub2"
+            android:layout_weight="1"
+            android:gravity="center"
+            android:button="@null"
+            android:background="@drawable/order_list_head_right_selector"
+            android:textSize="@dimen/common_font_size_14"
+            android:textColor="@color/common_button_bg_unselected"/>
+
+    </RadioGroup>
+
+    <TextView
+        android:layout_width="match_parent"
+        android:layout_height="2dip"
+        android:background="@color/common_list_item_divide_bg"
+        android:layout_marginBottom="@dimen/common_content_margin_10"/>
+
+    <android.support.v7.widget.RecyclerView
+        android:id="@+id/order_list"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+
+    </android.support.v7.widget.RecyclerView>
+</LinearLayout>
\ No newline at end of file
Index: app/src/main/res/anim/common_loading_pic_more.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/anim/common_loading_pic_more.xml	(revision )
+++ app/src/main/res/anim/common_loading_pic_more.xml	(revision )
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+	<!--
+		Copyright (C) 2007 The Android Open Source Project Licensed under the
+		Apache License, Version 2.0 (the "License"); you may not use this file
+		except in compliance with the License. You may obtain a copy of the
+		License at http://www.apache.org/licenses/LICENSE-2.0 Unless required
+		by applicable law or agreed to in writing, software distributed under
+		the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
+		CONDITIONS OF ANY KIND, either express or implied. See the License for
+		the specific language governing permissions and limitations under the
+		License.
+	-->
+
+
+	<!--
+		<translate xmlns:android="http://schemas.android.com/apk/res/android"
+		android:fromXDelta="0" android:toXDelta="10" android:duration="1000"
+		android:interpolator="@anim/cycle_7" />
+		android:interpolator="@anim/shake_cycle"
+	-->
+<animation-list xmlns:android="http://schemas.android.com/apk/res/android">
+	<item android:drawable="@mipmap/common_wait_logo_1" android:duration="200"/>
+	<item android:drawable="@mipmap/common_wait_logo_2" android:duration="200"/>
+	<item android:drawable="@mipmap/common_wait_logo_3" android:duration="200"/>
+	<item android:drawable="@mipmap/common_wait_logo_4" android:duration="200"/>
+	<item android:drawable="@mipmap/common_wait_logo_5" android:duration="200"/>
+	<item android:drawable="@mipmap/common_wait_logo_6" android:duration="200"/>
+</animation-list>
Index: app/src/main/res/layout/page_logo.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/page_logo.xml	(revision )
+++ app/src/main/res/layout/page_logo.xml	(revision )
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ImageView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:src="@mipmap/logo_bg"
+    android:scaleType="centerCrop"/>
\ No newline at end of file
Index: app/src/main/java/com/base/tools/http/HttpClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/http/HttpClient.java	(revision )
+++ app/src/main/java/com/base/tools/http/HttpClient.java	(revision )
@@ -0,0 +1,171 @@
+package com.base.tools.http;
+
+import com.base.tools.BasesApplication;
+import com.mopub.volley.AuthFailureError;
+import com.mopub.volley.Request.Method;
+import com.mopub.volley.Response;
+import com.mopub.volley.RetryPolicy;
+import com.mopub.volley.VolleyError;
+import com.mopub.volley.toolbox.JsonObjectRequest;
+import com.mopub.volley.toolbox.StringRequest;
+
+import org.json.JSONObject;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Map.Entry;
+
+public class HttpClient {
+	private String url;
+	private Map<String, String> param;
+	private Callback callback;
+	public HttpClient(String url, Map<String, String> param, Callback callback) {
+		this.url = url;
+		this.param = param;
+		this.callback = callback;
+	}
+	
+	public void submitPost(){
+		StringRequest request = new StringRequest(Method.POST, url, new Response.Listener<String>() {
+
+			@Override
+			public void onResponse(String response) {
+				callback.handleResultData(response);
+			}
+			
+		}, new Response.ErrorListener() {
+
+			@Override
+			public void onErrorResponse(VolleyError error) {
+				callback.handleErorrData(error);
+			}
+			
+		}){
+			@Override
+			protected Map<String, String> getParams() throws AuthFailureError {
+				if(param != null && !param.isEmpty()){
+					HashMap<String, String> hashMap = new HashMap<String, String>();
+					for (Entry<String, String> iter : param.entrySet()) {
+						hashMap.put(iter.getKey(), iter.getValue());
+					}
+	                return hashMap;
+				}
+				else
+					return super.getParams();
+			}
+			@Override  
+	        public Map<String, String> getHeaders() throws AuthFailureError {  //设置头信息  
+	          Map<String, String> map = new HashMap<String, String>();  
+	          map.put("Accept", "application/json");
+	          map.put("Content-Type", "application/x-www-form-urldecoded");  
+	          return map;  
+	        }  
+
+		};
+		BasesApplication.volleyRequestQueue.add(request);
+	}
+	public void submitPost_json(){
+		JsonObjectRequest request = new JsonObjectRequest(Method.POST, url, null, new Response.Listener<JSONObject>() {
+			
+			@Override
+			public void onResponse(JSONObject arg0) {
+				callback.handleResultData(arg0.toString());
+			}
+			
+		}, new Response.ErrorListener() {
+			
+			@Override
+			public void onErrorResponse(VolleyError error) {
+				callback.handleErorrData(error);
+			}
+			
+		}){
+//			@Override
+//			protected Map<String, String> getParams() throws AuthFailureError {
+//				if(param != null && !param.isEmpty()){
+//					HashMap<String, String> hashMap = new HashMap<String, String>();
+//					for (Entry<String, String> iter : param.entrySet()) {
+//						hashMap.put(iter.getKey(), iter.getValue());
+//					}
+//	                return hashMap;
+//				}
+//				else
+//					return super.getParams();
+//			}
+//			@Override  
+//	        public Map<String, String> getHeaders() throws AuthFailureError {  //设置头信息  
+//	          Map<String, String> map = new HashMap<String, String>();  
+//	          map.put("Accept", "application/json");
+//	          map.put("Content-Type", "application/x-www-form-urldecoded");  
+//	          return map;  
+//	        }  
+
+		};
+		BasesApplication.volleyRequestQueue.add(request);
+	}
+	public void submitGet(){
+//		final long l = new Date().getTime();
+		StringRequest request = new StringRequest(Method.GET, url, new Response.Listener<String>() {
+			
+			@Override
+			public void onResponse(String response) {
+//				long e = new Date().getTime() - l;
+//				if(e > 6000)
+//					BaseUtils.logError("HttpClient", "耗时:"+e+" ms"+" "+ url+"\n"+response);
+//				else if(e > 3000 && e <= 6000)
+//					BaseUtils.logWarn("HttpClient", "耗时:"+e+" ms"+" "+ url+"\n"+response);
+//				else
+//					BaseUtils.logDebug("HttpClient", "耗时:"+e+" ms"+" "+ url);
+				callback.handleResultData(response);
+			}
+			
+		}, new Response.ErrorListener() {
+			
+			@Override
+			public void onErrorResponse(VolleyError error) {
+				callback.handleErorrData(error);
+			}
+			
+		}){
+			@Override
+			protected Map<String, String> getParams() throws AuthFailureError {
+				return param;
+			}
+		};
+//		request.setRetryPolicy(new DefaultRetryPolicy(30*1000, 0, 1f));
+		request.setRetryPolicy(new RetryPolicy() {
+			
+			@Override
+			public void retry(VolleyError arg0) throws VolleyError {
+			}
+			
+			@Override
+			public int getCurrentTimeout() {
+				return 30000;
+			}
+			
+			@Override
+			public int getCurrentRetryCount() {
+				return 0;
+			}
+		});
+		request.setShouldCache(false);
+		
+		BasesApplication.volleyRequestQueue.add(request);
+		
+	}
+	
+	public interface Callback {
+		/**
+		 * 处理正确结果
+		 * @param result
+		 */
+		abstract void handleResultData(String result);
+		
+		/**
+		 * 处理错误结果
+		 * @param error
+		 */
+		abstract void handleErorrData(VolleyError error);
+	}
+}
\ No newline at end of file
Index: app/src/main/java/com/nineoldandroids/animation/ArgbEvaluator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nineoldandroids/animation/ArgbEvaluator.java	(revision )
+++ app/src/main/java/com/nineoldandroids/animation/ArgbEvaluator.java	(revision )
@@ -0,0 +1,59 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.nineoldandroids.animation;
+
+/**
+ * This evaluator can be used to perform type interpolation between integer
+ * values that represent ARGB colors.
+ */
+public class ArgbEvaluator implements TypeEvaluator {
+
+    /**
+     * This function returns the calculated in-between value for a color
+     * given integers that represent the start and end values in the four
+     * bytes of the 32-bit int. Each channel is separately linearly interpolated
+     * and the resulting calculated values are recombined into the return value.
+     *
+     * @param fraction The fraction from the starting to the ending values
+     * @param startValue A 32-bit int value representing colors in the
+     * separate bytes of the parameter
+     * @param endValue A 32-bit int value representing colors in the
+     * separate bytes of the parameter
+     * @return A value that is calculated to be the linearly interpolated
+     * result, derived by separating the start and end values into separate
+     * color channels and interpolating each one separately, recombining the
+     * resulting values in the same way.
+     */
+    public Object evaluate(float fraction, Object startValue, Object endValue) {
+        int startInt = (Integer) startValue;
+        int startA = (startInt >> 24);
+        int startR = (startInt >> 16) & 0xff;
+        int startG = (startInt >> 8) & 0xff;
+        int startB = startInt & 0xff;
+
+        int endInt = (Integer) endValue;
+        int endA = (endInt >> 24);
+        int endR = (endInt >> 16) & 0xff;
+        int endG = (endInt >> 8) & 0xff;
+        int endB = endInt & 0xff;
+
+        return (int)((startA + (int)(fraction * (endA - startA))) << 24) |
+                (int)((startR + (int)(fraction * (endR - startR))) << 16) |
+                (int)((startG + (int)(fraction * (endG - startG))) << 8) |
+                (int)((startB + (int)(fraction * (endB - startB))));
+    }
+}
\ No newline at end of file
Index: app/src/androidTest/java/com/oasgames/mobilepay/ApplicationTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/androidTest/java/com/oasgames/mobilepay/ApplicationTest.java	(revision )
+++ app/src/androidTest/java/com/oasgames/mobilepay/ApplicationTest.java	(revision )
@@ -0,0 +1,13 @@
+package com.oasgames.mobilepay;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+/**
+ * <a href="http://d.android.com/tools/testing/testing_android.html">Testing Fundamentals</a>
+ */
+public class ApplicationTest extends ApplicationTestCase<Application> {
+    public ApplicationTest() {
+        super(Application.class);
+    }
+}
\ No newline at end of file
Index: gradlew.bat
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- gradlew.bat	(revision )
+++ gradlew.bat	(revision )
@@ -0,0 +1,90 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
Index: app/src/main/java/com/oasgames/android/oaspay/activity/FragmentShop.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/activity/FragmentShop.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/activity/FragmentShop.java	(revision )
@@ -0,0 +1,457 @@
+package com.oasgames.android.oaspay.activity;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.support.annotation.Nullable;
+import android.support.v4.app.Fragment;
+import android.support.v4.view.PagerAdapter;
+import android.support.v4.view.ViewPager;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewParent;
+import android.widget.AdapterView;
+import android.widget.GridView;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.ListView;
+
+import com.base.tools.http.CallbackResultForActivity;
+import com.base.tools.utils.BasesUtils;
+import com.base.tools.utils.DisplayUtil;
+import com.oasgames.android.oaspay.R;
+import com.oasgames.android.oaspay.adapter.AdapterProdcutList;
+import com.oasgames.android.oaspay.adapter.AdapterShopNewestHotProductList;
+import com.oasgames.android.oaspay.entity.ShopFocus;
+import com.oasgames.android.oaspay.entity.ShopList;
+import com.oasgames.android.oaspay.service.HttpService;
+
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+
+public class FragmentShop extends Fragment {
+	final String TAG = FragmentShop.class.getSimpleName();
+
+	ShopList shop;
+
+	ViewPager viewPager;
+	AdapterShopHeadImage headAdapter;
+	ArrayList<ImageView> viewPagerImages = new ArrayList<ImageView>();
+	ArrayList<ImageView> viewPagerImageFlags = new ArrayList<ImageView>();
+
+	View main_shop_wait;
+	View networkError;
+	public ShopHeadImageHandler handler;
+	@Override
+	public View onCreateView(LayoutInflater inflater, ViewGroup container,
+			Bundle savedInstanceState) {
+		super.onCreateView(inflater, container, savedInstanceState);
+		return inflater.inflate(R.layout.fragment_main_shop, null);
+	}
+	@Override
+	public void onActivityCreated(@Nullable Bundle savedInstanceState) {
+		// TODO Auto-generated method stub
+		super.onActivityCreated(savedInstanceState);
+
+		main_shop_wait = getActivity().findViewById(R.id.main_shop_wait);
+		main_shop_wait.setVisibility(View.VISIBLE);
+//		TextView tv = (TextView)this.getActivity().findViewById(R.id.main_shop_test);
+//		tv.setOnClickListener(new View.OnClickListener() {
+//			@Override
+//			public void onClick(View v) {
+////				//调用扫码界面
+////				startActivity(new Intent().setClass(FragmentShop.super.getActivity(), CaptureActivity.class));
+//
+////				// 调用Google支付页面
+////				String productID = "oas_mtester_300_7174";// testpay_m_product_1 testpay_nm_product_1 oas_ahbr_300  oas_ahbr_1500
+////				Intent intent = new Intent().setClass(FragmentShop.super.getActivity(), ActivityGooglePlayBilling.class);
+////				startActivity(intent.putExtra("inAppProductID", productID).putExtra("revenue", "0.99").putExtra("ext", ""));
+//
+////				//订单列表
+////				startActivity(new Intent().setClass(FragmentShop.super.getActivity(), ActivityOrderList.class));
+//
+////				FragmentShop.super.getActivity().overridePendingTransition(R.anim.slide_in_right, R.anim.slide_out_right);
+////				BasesUtils.showDialogBySystemUI(getActivity(), "显示内容", "取消取消取消", new DialogInterface.OnClickListener() {
+////					@Override
+////					public void onClick(DialogInterface dialog, int which) {
+////						System.out.println("点击取消按钮了，，，，，，" + which);
+////					}
+////				}, null, new DialogInterface.OnClickListener() {
+////					@Override
+////					public void onClick(DialogInterface dialog, int which) {
+////						System.out.println("点击中性按钮了，，，，，，" + which);
+////					}
+////				}, "确定确定确定", new DialogInterface.OnClickListener() {
+////					@Override
+////					public void onClick(DialogInterface dialog, int which) {
+////						System.out.println("点击确定按钮了，，，，，，" + which);
+////					}
+////				});
+//				BasesUtils.showSingleChoiceDialogListBySystemUI(getActivity(), new String[]{"123", "456", "123sd", "456sdf", "1234646", "456wrwer"}, 10, new DialogInterface.OnClickListener() {
+//					@Override
+//					public void onClick(DialogInterface dialog, int which) {
+//						dialog.dismiss();
+//					}
+//				});
+//			}
+//		});
+
+		handler = new ShopHeadImageHandler(new WeakReference<FragmentShop>(this));
+
+		handler.sendEmptyMessageDelayed(ShopHeadImageHandler.MSG_LOADALL, 3000);
+	}// end of onActivityCreated
+
+	private void loadAllData(){
+		main_shop_wait.setVisibility(View.VISIBLE);
+		HttpService.instance().getShopInfo(new MyCallBack(this.getActivity()));
+	}
+
+	private class MyCallBack implements CallbackResultForActivity{
+		ActivityMain a;
+		public MyCallBack(Activity a){
+			this.a = (ActivityMain)a;
+		}
+		@Override
+		public void exception(Exception e) {
+			main_shop_wait.setVisibility(View.INVISIBLE);
+			networkError =getActivity().findViewById(R.id.main_shop_netwrok_error);
+			networkError.setVisibility(View.VISIBLE);
+			networkError.findViewById(R.id.common_network_retry).setOnClickListener(new View.OnClickListener() {
+				@Override
+				public void onClick(View v) {
+					networkError.setVisibility(View.INVISIBLE);
+					loadAllData();
+				}
+			});
+		}
+
+		@Override
+		public void success(Object data, int statusCode, String msg) {
+			main_shop_wait.setVisibility(View.INVISIBLE);
+			shop = (ShopList)data;
+//			for (ShopFocus focus:shop.focusList) {
+//				System.out.println("focus:"+focus.focus_img_url);
+//			}
+//			for (ProductInfo p:shop.newestList) {
+//				System.out.println("newest:"+p.product_id);
+//			}
+//			for (ProductInfo p:shop.hotList) {
+//				System.out.println("hot:"+p.product_id);
+//			}
+//			for (ProductInfo p:shop.browseList) {
+//				System.out.println("browse:"+p.id);
+//			}
+			initViewPager();
+			initNewest();
+			initHotest();
+			initBrowser();
+		}
+
+		@Override
+		public void fail(int statusCode, String msg) {// 失败与异常相同处理，否则，失败时无法触发重新加载数据
+			main_shop_wait.setVisibility(View.INVISIBLE);
+			networkError =getActivity().findViewById(R.id.main_shop_netwrok_error);
+			networkError.setVisibility(View.VISIBLE);
+			networkError.findViewById(R.id.common_network_retry).setOnClickListener(new View.OnClickListener() {
+				@Override
+				public void onClick(View v) {
+					networkError.setVisibility(View.INVISIBLE);
+					loadAllData();
+				}
+			});
+		}
+	}
+
+	private void initNewest(){
+		if(shop == null || shop.newestList == null || shop.newestList.size() <= 0){
+			getActivity().findViewById(R.id.main_shop_newest).setVisibility(View.GONE);
+			return;
+		}
+		GridView newestGridView = (GridView)getActivity().findViewById(R.id.fragment_shop_category_newest_grid);
+		final AdapterShopNewestHotProductList newestAdapter = new AdapterShopNewestHotProductList(getActivity(), shop.newestList, 1, null);
+		newestGridView.setAdapter(newestAdapter);
+		newestGridView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+			@Override
+			public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+				startActivity(new Intent().setClass(getActivity(), ActivityProductDetails.class).putExtra("id", newestAdapter.getItem(position).product_id));
+			}
+		});
+	}
+	private void initHotest(){
+		if(shop == null || shop.hotList == null || shop.hotList.size() <= 0){
+			getActivity().findViewById(R.id.main_shop_hot).setVisibility(View.GONE);
+			return;
+		}
+		GridView hotestGridView = (GridView)getActivity().findViewById(R.id.fragment_shop_category_hot_grid);
+		final AdapterShopNewestHotProductList hotestAdapter = new AdapterShopNewestHotProductList(getActivity(), shop.hotList, 1, null);
+		hotestGridView.setAdapter(hotestAdapter);
+		hotestGridView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+			@Override
+			public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+				startActivity(new Intent().setClass(getActivity(), ActivityProductDetails.class).putExtra("id", hotestAdapter.getItem(position).product_id));
+			}
+		});
+	}
+	ListView browseListView;
+	private void initBrowser(){
+		if(shop == null || shop.browseList == null || shop.browseList.size() <= 0){
+			getActivity().findViewById(R.id.main_shop_review).setVisibility(View.GONE);
+
+			return;
+		}
+		browseListView = (ListView)getActivity().findViewById(R.id.fragment_shop_category_review_grid);
+		final AdapterProdcutList reviewAdapter = new AdapterProdcutList(getActivity(), shop.browseList, 1, null);
+		browseListView.setAdapter(reviewAdapter);
+		browseListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+			@Override
+			public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+				startActivity(new Intent().setClass(getActivity(), ActivityProductDetails.class).putExtra("id", reviewAdapter.getItem(position).product_id));
+			}
+		});
+
+		ViewGroup.LayoutParams params = browseListView.getLayoutParams();
+		params.height = shop.browseList.size() * DisplayUtil.dip2px(78, BasesUtils.getDisplayMetrics(getActivity()).density) + (browseListView.getDividerHeight() * (reviewAdapter.getCount() - 1));
+		// listView.getDividerHeight()获取子项间分隔符占用的高度
+		// params.height最后得到整个ListView完整显示需要的高度
+		browseListView.setLayoutParams(params);
+
+	}
+	private void initViewPager(){
+		viewPager = (ViewPager) getActivity().findViewById(R.id.main_shop_viewpager);
+
+		viewPagerImages.clear();
+		headAdapter = new AdapterShopHeadImage(viewPagerImages);
+		viewPager.setAdapter(headAdapter);
+		viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {
+			@Override
+			public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
+			}
+
+			//配合Adapter的currentItem字段进行设置。
+			@Override
+			public void onPageSelected(int position) {
+				handler.sendMessage(Message.obtain(handler, ShopHeadImageHandler.MSG_PAGE_CHANGED, position, 0));
+
+				int size = viewPagerImageFlags.size();
+				if (size <= 0)
+					return;
+				viewPagerImageFlags.get(position % size)
+						.setImageResource(R.mipmap.common_viewpager_select);
+				for (int i = 0; i < size; i++) {
+					if (position % size != i) {
+						viewPagerImageFlags.get(i)
+								.setImageResource(R.mipmap.common_viewpager_unselect);
+					}
+				}
+			}
+
+			//覆写该方法实现轮播效果的暂停和恢复
+			@Override
+			public void onPageScrollStateChanged(int state) {
+
+				switch (state) {
+					case ViewPager.SCROLL_STATE_DRAGGING:
+//						handler.sendEmptyMessage(ImageHandler.MSG_KEEP_SILENT);
+						handler.removeMessages(ShopHeadImageHandler.MSG_UPDATE_IMAGE);
+						//开始轮播效果
+						handler.sendEmptyMessageDelayed(ShopHeadImageHandler.MSG_UPDATE_IMAGE, ShopHeadImageHandler.MSG_DELAY);
+						break;
+					case ViewPager.SCROLL_STATE_IDLE:
+						handler.removeMessages(ShopHeadImageHandler.MSG_UPDATE_IMAGE);
+						handler.sendEmptyMessageDelayed(ShopHeadImageHandler.MSG_UPDATE_IMAGE, ShopHeadImageHandler.MSG_DELAY);
+						break;
+					default:
+						break;
+				}// end of switch
+			}// end of onPageScrollStateChanged
+		});
+
+//		viewPager.setCurrentItem(Integer.MAX_VALUE/2);//默认在中间，使用户看不到边界
+		viewPager.setCurrentItem(0);//测试时默认0
+		initViewPagerData();
+	}// end of initViewPager
+
+	private void initViewPagerData(){
+
+		int count = shop.focusList.size();
+		for (int k = 0; k < 3; k++) {// 循环3次，解决当轮播图只有一个时，无法轮播的问题
+			for (int i = 0; i < count; i++) {
+				final ShopFocus sf = shop.focusList.get(i);
+				LayoutInflater inflater = LayoutInflater.from(this.getActivity());
+				final ImageView view = (ImageView) inflater.inflate(R.layout.fragment_main_shop_viewpager, null);
+				view.setBackgroundResource(R.mipmap.shop_viewpager_bg);
+				view.setOnClickListener(new View.OnClickListener() {
+					@Override
+					public void onClick(View v) {
+						sf.startActivity(getActivity());
+					}
+				});
+				BasesUtils.loadImg(getActivity(), view, sf.focus_img_url);
+
+				viewPagerImages.add(view);
+			}//end for
+		}
+
+		headAdapter.viewlist = viewPagerImages;
+		headAdapter.notifyDataSetChanged();
+		if(!handler.hasMessages(ShopHeadImageHandler.MSG_UPDATE_IMAGE) && viewPagerImages.size()>0)
+			//开始轮播效果
+			handler.sendEmptyMessageDelayed(ShopHeadImageHandler.MSG_UPDATE_IMAGE, ShopHeadImageHandler.MSG_DELAY);
+
+		//ViewPager指示标志
+		LinearLayout viewPagerFlag = (LinearLayout)getActivity().findViewById(R.id.main_shop_viewpager_flag);
+		for (int i = 0; i < count; i++) {
+			ImageView iv = new ImageView(getActivity());
+			iv.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
+			iv.setPadding(0,0,10,0);
+			if (i == viewPager.getCurrentItem()){
+				iv.setImageResource(R.mipmap.common_viewpager_select);
+			}else
+				iv.setImageResource(R.mipmap.common_viewpager_unselect);
+			viewPagerFlag.addView(iv);
+			viewPagerImageFlags.add(iv);
+		}// end of for
+
+
+	}
+	@Override
+	public void onResume() {
+		super.onResume();
+		if(!handler.hasMessages(ShopHeadImageHandler.MSG_UPDATE_IMAGE) && viewPagerImages.size()>0)
+			//开始轮播效果
+			handler.sendEmptyMessageDelayed(ShopHeadImageHandler.MSG_UPDATE_IMAGE, ShopHeadImageHandler.MSG_DELAY);
+	}
+
+	@Override
+	public void onSaveInstanceState(Bundle outState) {
+		super.onSaveInstanceState(outState);
+	}
+
+	@Override
+	public void onDestroyView() {
+		super.onDestroyView();
+	}
+
+	private static class ShopHeadImageHandler extends Handler{
+
+		/**
+		 * 请求更新显示的View。
+		 */
+		protected static final int MSG_UPDATE_IMAGE  = 1;
+		/**
+		 * 请求暂停轮播。
+		 */
+		protected static final int MSG_KEEP_SILENT   = 2;
+		/**
+		 * 请求恢复轮播。
+		 */
+		protected static final int MSG_BREAK_SILENT  = 3;
+		/**
+		 * 记录最新的页号，当用户手动滑动时需要记录新页号，否则会使轮播的页面出错。
+		 * 例如当前如果在第一页，本来准备播放的是第二页，而这时候用户滑动到了末页，
+		 * 则应该播放的是第一页，如果继续按照原来的第二页播放，则逻辑上有问题。
+		 */
+		protected static final int MSG_PAGE_CHANGED  = 4;
+
+		protected static final int MSG_LOADALL = 100;
+
+		//轮播间隔时间
+		protected static final long MSG_DELAY = 3000;
+
+		//使用弱引用避免Handler泄露.这里的泛型参数可以不是Activity，也可以是Fragment等
+		private WeakReference<FragmentShop> weakReference;
+		private int currentItem = 0;
+
+		protected ShopHeadImageHandler(WeakReference<FragmentShop> wk){
+			weakReference = wk;
+		}
+
+		@Override
+		public void handleMessage(Message msg) {
+			super.handleMessage(msg);
+			FragmentShop fragmentShop = weakReference.get();
+			if (fragmentShop.getActivity()==null){
+				//Activity已经回收，无需再处理UI了
+				return ;
+			}
+
+			//检查消息队列并移除未发送的消息，这主要是避免在复杂环境下消息出现重复等问题。
+//			if (fragmentShop.handler.hasMessages(MSG_UPDATE_IMAGE)){
+//				fragmentShop.handler.removeMessages(MSG_UPDATE_IMAGE);
+//			}
+			switch (msg.what) {
+				case MSG_UPDATE_IMAGE:
+					currentItem++;
+					fragmentShop.viewPager.setCurrentItem(currentItem);
+					//准备下次播放
+					fragmentShop.handler.sendEmptyMessageDelayed(MSG_UPDATE_IMAGE, MSG_DELAY);
+					break;
+				case MSG_KEEP_SILENT:
+					//只要不发送消息就暂停了
+					break;
+				case MSG_BREAK_SILENT:
+					fragmentShop.handler.sendEmptyMessageDelayed(MSG_UPDATE_IMAGE, MSG_DELAY);
+					break;
+				case MSG_PAGE_CHANGED:
+					//记录当前的页号，避免播放的时候页面显示不正确。
+					currentItem = msg.arg1;
+					break;
+				case MSG_LOADALL:
+					fragmentShop.loadAllData();
+					break;
+				default:
+					break;
+			}// end of switch
+		}// end of handleMessage
+	}// end of ImageHandler
+
+	private class AdapterShopHeadImage extends PagerAdapter {
+
+		private ArrayList<ImageView> viewlist;
+
+		public AdapterShopHeadImage(ArrayList<ImageView> viewlist) {
+			this.viewlist = viewlist;
+		}
+
+		@Override
+		public int getCount() {
+			//设置成最大，使用户看不到边界
+			return Integer.MAX_VALUE;
+		}
+
+		@Override
+		public boolean isViewFromObject(View arg0, Object arg1) {
+			return arg0==arg1;
+		}
+		@Override
+		public void destroyItem(ViewGroup container, int position,
+								Object object) {
+			//Warning：不要在这里调用removeView
+		}
+		@Override
+		public Object instantiateItem(ViewGroup container, int position) {
+			if(viewlist == null || viewlist.size() <= 0)
+				return  null;
+
+			//对ViewPager页号求模取出View列表中要显示的项
+			position %= viewlist.size();
+			if (position<0){
+				position = viewlist.size()+position;
+			}
+
+			ImageView view = viewlist.get(position);
+			//如果View已经在之前添加到了一个父组件，则必须先remove，否则会抛出IllegalStateException。
+			ViewParent vp =view.getParent();
+			if (vp!=null){
+				ViewGroup parent = (ViewGroup)vp;
+				parent.removeView(view);
+			}
+			container.addView(view);
+			//add listeners here if necessary
+			return view;
+		}
+	}// end of AdapterShopHeadImage
+}// end of FragmentShop
Index: app/src/main/java/com/base/tools/google/IabResult.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/google/IabResult.java	(revision )
+++ app/src/main/java/com/base/tools/google/IabResult.java	(revision )
@@ -0,0 +1,45 @@
+/* Copyright (c) 2012 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.base.tools.google;
+
+/**
+ * Represents the result of an in-app billing operation.
+ * A result is composed of a response code (an integer) and possibly a
+ * message (String). You can get those by calling
+ * {@link #getResponse} and {@link #getMessage()}, respectively. You
+ * can also inquire whether a result is a success or a failure by
+ * calling {@link #isSuccess()} and {@link #isFailure()}.
+ */
+public class IabResult {
+    int mResponse;
+    String mMessage;
+
+    public IabResult(int response, String message) {
+        mResponse = response;
+        if (message == null || message.trim().length() == 0) {
+            mMessage = IabHelper.getResponseDesc(response);
+        }
+        else {
+            mMessage = message + " (response: " + IabHelper.getResponseDesc(response) + ")";
+        }
+    }
+    public int getResponse() { return mResponse; }
+    public String getMessage() { return mMessage; }
+    public boolean isSuccess() { return mResponse == IabHelper.BILLING_RESPONSE_RESULT_OK; }
+    public boolean isFailure() { return !isSuccess(); }
+    public String toString() { return "IabResult: " + getMessage(); }
+}
+
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(revision )
+++ app/src/main/AndroidManifest.xml	(revision )
@@ -0,0 +1,103 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    package="com.oasgames.android.oaspay"
+    android:versionCode="3"
+    android:versionName="1.0.0"
+    tools:ignore="GradleOverrides">
+
+    <uses-sdk
+        android:minSdkVersion="11"
+        android:targetSdkVersion="21" />
+
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
+    <uses-permission android:name="android.permission.CAMERA" />
+    <uses-permission android:name="android.permission.FLASHLIGHT" />
+    <uses-permission android:name="com.android.vending.BILLING" />
+    <uses-feature android:name="android.hardware.camera" android:required="false"/>
+    <uses-feature android:name="android.hardware.camera.autofocus" android:required="false"/>
+
+    <application
+        android:name=".activity.MyApplication"
+        android:allowBackup="true"
+        android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name"
+        android:theme="@style/AppTheme">
+        <activity
+            android:name=".activity.ActivityLogo"
+            android:label="@string/app_name"
+            android:screenOrientation="portrait">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+        <activity
+            android:name=".activity.ActivityMain"
+            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
+            android:screenOrientation="portrait" android:launchMode="singleTop"/>
+        <activity android:name="com.facebook.FacebookActivity"
+            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
+            android:theme="@android:style/Theme.Translucent.NoTitleBar"
+            android:label="@string/app_name" />
+        <activity android:name=".activity.ActivityLogin"
+            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
+            android:windowSoftInputMode="stateHidden|stateAlwaysHidden"
+            android:screenOrientation="portrait"/>
+        <activity android:name=".activity.ActivityGooglePlayBilling"
+            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
+            android:screenOrientation="portrait"/>
+        <activity android:name=".activity.ActivitySearch"
+            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
+            android:windowSoftInputMode="stateHidden|stateAlwaysHidden"
+            android:screenOrientation="portrait"/>
+        <activity android:name=".activity.ActivityOrderListSlide"
+            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
+            android:screenOrientation="portrait"/>
+        <activity android:name=".activity.ActivityOrderDetails"
+            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
+            android:screenOrientation="portrait" android:launchMode="singleTask"/>
+        <activity android:name=".activity.ActivityProductList"
+            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
+            android:screenOrientation="portrait"/>
+        <activity android:name=".activity.ActivityProductDetails"
+            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
+            android:screenOrientation="portrait"/>
+        <activity android:name=".activity.ActivityCapture"
+            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
+            android:screenOrientation="portrait"/>
+        <activity android:name=".activity.ActivityCaptureInput"
+            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
+            android:screenOrientation="portrait"/>
+        <activity android:name=".activity.ActivityPayPackageList"
+            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
+            android:screenOrientation="portrait"/>
+        <activity android:name=".activity.ActivityAbout"
+            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
+            android:screenOrientation="portrait"/>
+        <activity android:name=".activity.ActivityNewsDetails"
+            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
+            android:screenOrientation="portrait"/>
+        <activity android:name=".activity.ActivityWebview"
+            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
+            android:screenOrientation="portrait"/>
+
+
+        <meta-data
+            android:name="com.google.android.gms.version"
+            android:value="@integer/google_play_services_version" />
+        <meta-data
+            android:name="com.googleplay.ApplicationId"
+            android:value="@string/googleplay_app_id" />
+        <meta-data
+            android:name="com.facebook.sdk.ApplicationId"
+            android:value="@string/facebook_app_id" />
+        <!--<provider
+        android:name="com.facebook.FacebookContentProvider"
+        android:authorities="com.facebook.app.FacebookContentProvider340989056058098"
+        android:exported="true" />-->
+    </application>
+
+</manifest>
Index: app/src/main/java/com/oasgames/android/oaspay/activity/ActivityLogin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/activity/ActivityLogin.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/activity/ActivityLogin.java	(revision )
@@ -0,0 +1,728 @@
+package com.oasgames.android.oaspay.activity;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentSender.SendIntentException;
+import android.content.res.Configuration;
+import android.net.Uri;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.text.Editable;
+import android.text.TextUtils;
+import android.text.TextWatcher;
+import android.util.Log;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.View.OnFocusChangeListener;
+import android.view.ViewGroup;
+import android.view.inputmethod.InputMethodManager;
+import android.widget.EditText;
+import android.widget.ListView;
+import android.widget.PopupWindow;
+import android.widget.PopupWindow.OnDismissListener;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.base.tools.BasesApplication;
+import com.base.tools.activity.BasesActivity;
+import com.base.tools.entity.MemberBaseInfo;
+import com.base.tools.http.CallbackResultForActivity;
+import com.base.tools.utils.AESUtils;
+import com.base.tools.utils.BasesUtils;
+import com.base.tools.utils.DisplayUtil;
+import com.facebook.AccessToken;
+import com.facebook.FacebookException;
+import com.facebook.Profile;
+import com.facebook.login.LoginResult;
+import com.google.android.gms.auth.GoogleAuthException;
+import com.google.android.gms.auth.GoogleAuthUtil;
+import com.google.android.gms.auth.UserRecoverableAuthException;
+import com.google.android.gms.common.ConnectionResult;
+import com.google.android.gms.common.Scopes;
+import com.google.android.gms.common.api.GoogleApiClient;
+import com.google.android.gms.common.api.ResultCallback;
+import com.google.android.gms.common.api.Scope;
+import com.google.android.gms.common.api.Status;
+import com.google.android.gms.plus.Plus;
+import com.google.android.gms.plus.model.people.Person;
+import com.oasgames.android.oaspay.R;
+import com.oasgames.android.oaspay.adapter.LoginUserListAdapter;
+import com.oasgames.android.oaspay.service.HttpService;
+import com.oasgames.android.oaspay.tools.APPUtils;
+import com.oasgames.android.oaspay.tools.FacebookUtils;
+import com.oasgames.android.oaspay.tools.GoogleUtils;
+import com.oasgames.android.oaspay.tools.ReportUtils;
+
+import java.io.IOException;
+import java.lang.ref.WeakReference;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+public class ActivityLogin extends BasesActivity implements
+GoogleApiClient.ConnectionCallbacks,
+GoogleApiClient.OnConnectionFailedListener{
+
+	private static final String TAG = ActivityLogin.class.getSimpleName();
+	
+	private static final int HANDLER_RESULT_REGIST = 10;
+	private static final int HANDLER_SHOWVIEW = 200;
+	private static final int UITYPE_PAGEAUTOLOGIN = -1;//自动登录
+	private static final int UITYPE_PAGELOGINSELECT = 0;//登录方式选择界面
+	private static final int UITYPE_PAGELOGININPUT = 1;//登录账号输入界面
+	private static final int UITYPE_PAGEREGIST = 2;//OAS账号注册界面
+	private static final int UITYPE_FACEBOOK = 3;//Facebook登录界面
+	private static final int UITYPE_CHANGEUSER = 4;//用户切换首页
+	
+	
+	private View curView;
+	private TextView btnMoreUsers;
+	private EditText et_login_u, et_login_p;
+	private String username;
+	private String password;
+
+	private FacebookUtils fb;
+	
+	// 声明一个Handler对象
+	public MyHandler myHandler = null;
+//	private FacebookCallback fbCallback = null;
+	
+	List<MemberBaseInfo> listUsersLogined;
+	PopupWindow pupWindow;
+	LoginUserListAdapter adapter;
+	
+	/* Request code used to invoke sign in user interactions. */
+    private static final int RC_SIGN_IN = 0;
+    /* Client used to interact with Google APIs. */
+    private GoogleApiClient mGoogleApiClient;
+    private Boolean mIntentInProgress = false;
+    private Boolean mSignInClicked = false;
+    private Boolean mAuthException = false;
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		setContentView(R.layout.page_login);
+		initHead(true, true, null, true, getString(R.string.fragment_mine_head_login), false, null);
+		myHandler = new MyHandler(this);
+		
+		fb = new FacebookUtils(this);
+		fb.setFacebookCallbackInterface(new FacebookCallbackImpl(this));
+
+		init();// 获取历史登录用户
+
+        mGoogleApiClient = new GoogleApiClient.Builder(this)
+        .addConnectionCallbacks(this)
+        .addOnConnectionFailedListener(this)
+        .addApi(Plus.API)
+        .addScope(new Scope("profile"))
+        .build();
+
+	}
+
+	@Override
+	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+		super.onActivityResult(requestCode, resultCode, data);
+		if(fb != null)
+			fb.onActivityResult(requestCode, resultCode, data);
+		
+
+		if (requestCode == RC_SIGN_IN) {
+		    if (resultCode != RESULT_OK) {
+		    	// 可以增加“登录失败”提示
+		    	mSignInClicked = false;
+		    	mIntentInProgress = false;
+		    	mAuthException = false;
+		    	setWaitScreen(false);
+		    	return;
+		    }
+
+		    mIntentInProgress = false;
+
+		    if (!mGoogleApiClient.isConnected()) {// 第一次点击总是无法点击成功，需要reconnect
+		    	mGoogleApiClient.reconnect();
+		    }
+		  }
+		if(requestCode == GoogleUtils.REQUEST_CODE_RECOVER_FROM_PLAY_SERVICES_ERROR){
+			if (resultCode != RESULT_OK) {
+				// 可以增加“授权失败”提示
+				mSignInClicked = false;
+				mIntentInProgress = false;
+				mAuthException = false;
+				setWaitScreen(false);
+				return;
+			}
+			mIntentInProgress = false;
+
+			if (!mGoogleApiClient.isConnected()) {
+				mGoogleApiClient.reconnect();
+			}
+		}
+	}
+	public void buttonOnClick(View v) {
+		if(v == null)
+			return;
+		
+		if(v.getId() != R.id.login_edit_moreuser && null != pupWindow && pupWindow.isShowing()){
+			pupWindow.dismiss();
+		}
+
+		switch (v.getId()){
+			case R.id.login_edit_moreuser:
+				if(null == listUsersLogined || listUsersLogined.size() <= 0)
+					return;
+				popUserListWindow();
+				break;
+			case R.id.login_btn_submit:
+				InputMethodManager imm = (InputMethodManager)et_login_u.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
+				imm.hideSoftInputFromWindow(et_login_u.getWindowToken(), 0);
+				if(!check(false))
+					return;
+				mSignInClicked = false;
+				if(check(true))
+					loginByOAS();
+				break;
+			case R.id.login_btn_rule:
+				openBrowser(0);
+//				startActivity(new Intent().setClass(this, ActivityWebview.class).putExtra("type", 0));
+				break;
+			case R.id.login_btn_find_password:
+				openBrowser(1);
+//				startActivity(new Intent().setClass(this, ActivityWebview.class).putExtra("type", 1));
+				break;
+			case R.id.login_btn_otherstyle_facebook:
+				mSignInClicked = false;
+				FacebookUtils.logout();
+				fb.login(this);
+				curView = null;
+				break;
+			case R.id.login_btn_otherstyle_google:
+				if (mGoogleApiClient.isConnected())
+					mGoogleApiClient.clearDefaultAccountAndReconnect();
+
+				setWaitScreen(true);
+//			if (!mGoogleApiClient.isConnected() || !mGoogleApiClient.isConnecting()) {
+				mSignInClicked = true;
+				mGoogleApiClient.connect();
+//			}else{
+//				getProfileInformation();
+//			}
+				curView = null;
+				break;
+			case R.id.login_btn_register:// 跳链接
+				openBrowser(2);
+//				startActivity(new Intent().setClass(this, ActivityWebview.class).putExtra("type", 2));
+				break;
+		}
+
+	}
+
+	private void openBrowser(int type){
+		Intent intent = new Intent();
+		intent.setAction("android.intent.action.VIEW");
+		Uri content_url = null;
+		switch (type){
+			case 0:// 协议条款
+				content_url = Uri.parse("http://www.oasgames.com/TermsofService(AR).html");
+				break;
+			case 1:// 忘记密码
+				content_url = Uri.parse("http://www.oasgames.com/?a=ucenter&m=findpwd&lang=ar");
+				break;
+			case 2:// 注册
+				content_url = Uri.parse("http://www.oasgames.com/?a=widget&m=mob_reg_page&page_back=no&lang=ar-ar&third_login=no");
+				break;
+		}
+		intent.setData(content_url);
+		startActivity(intent);
+	}
+	/**
+	 * 各数据项合法性验证
+	 * @return
+	 */
+	private boolean check(boolean isNotice){
+		username = et_login_u.getText().toString().trim();
+		password = et_login_p.getText().toString().trim();
+
+		if(TextUtils.isEmpty(username)){
+			if (isNotice)
+				BasesUtils.showMsg(this, getResources().getString(BasesUtils.getResourceValue("string", "oasisgames_sdk_login_hint_username")));
+			return false;
+		}
+//		if(username.length() < 6 || username.length() > 50){
+//			BasesUtils.showMsg(this, getResources().getString(BasesUtils.getResourceValue("string", "oasisgames_sdk_login_username_notice_error_length")));
+//			return false;
+//		}
+		if(username.contains("@") && !BasesUtils.regexEmail(username)){//包含@符，并且不符合邮箱规则
+			if (isNotice)
+				BasesUtils.showMsg(this, getResources().getString(BasesUtils.getResourceValue("string", "oasisgames_sdk_login_username_notice_error")));
+			return false;
+		}else if(!username.contains("@")){//不包含@符，是普通账号
+			if(BasesUtils.regexNum(username)){// 账号格式验证,不能为纯数字
+				if (isNotice)
+					BasesUtils.showMsg(this, getResources().getString(BasesUtils.getResourceValue("string", "oasisgames_sdk_login_username_notice_error1")));
+				return false;
+			}else if(!BasesUtils.regexAccount(username)){// 账号格式验证,只能包含 a-zA-Z0-9_
+				if (isNotice)
+					BasesUtils.showMsg(this, getResources().getString(BasesUtils.getResourceValue("string", "oasisgames_sdk_login_username_notice_error2")));
+				return false;
+			}
+		}
+		if(TextUtils.isEmpty(password)){
+			if (isNotice)
+				BasesUtils.showMsg(this, getResources().getString(BasesUtils.getResourceValue("string", "oasisgames_sdk_login_hint_password")));
+			return false;
+		}
+		if(password.length() < 6 || password.length() > 15){
+			if (isNotice)
+				BasesUtils.showMsg(this, getResources().getString(BasesUtils.getResourceValue("string", "oasisgames_sdk_login_password_notice_error")));
+			return false;
+		}
+		return true;
+	}
+	
+	static class FacebookCallbackImpl implements FacebookUtils.FacebookCallbackInterface {
+
+		// WeakReference to the outer class's instance.
+		private WeakReference<ActivityLogin> mOuter;
+
+		public FacebookCallbackImpl(ActivityLogin activity) {
+			mOuter = new WeakReference<ActivityLogin>(activity);
+		}
+
+		@Override
+		public void onSuccess(final LoginResult loginResult) {
+			mOuter.get().myHandler.sendEmptyMessage(102);// loginFB
+		}
+
+		@Override
+		public void onCancel() {
+			BasesUtils.logDebug(TAG, "============FB login onCancel()");
+		}
+
+		@Override
+		public void onError(FacebookException exception) {
+			APPUtils.showErrorMessageByErrorCode(mOuter.get(), "-2000");
+			BasesUtils.logDebug(TAG, "============FB login onError()");
+		}
+	}
+
+	private void loginByFB(){
+		setWaitScreen(true);
+
+		Profile pro = Profile.getCurrentProfile();
+		HttpService.instance().login(MemberBaseInfo.USER_FACEBOOK, MemberBaseInfo.USER_FACEBOOK, AccessToken.getCurrentAccessToken().getToken(), pro != null ? pro.getName() : "", new MyCallBackLogin());
+	}
+	private void loginByGoogle(final String oasnickname, final String email, final String token){
+		setWaitScreen(true);
+		HttpService.instance().login(MemberBaseInfo.USER_GOOGLE, email, token, oasnickname, new MyCallBackLogin());
+	}
+	private void loginByOAS(){
+		setWaitScreen(true);
+		HttpService.instance().login(MemberBaseInfo.USER_REGISTED, username, password, username, new MyCallBackLogin());
+//					if(Session.getActiveSession()!=null)
+//						Session.getActiveSession().closeAndClearTokenInformation();
+	}
+
+	class MyCallBackLogin implements CallbackResultForActivity{
+		@Override
+		public void success(Object data, int statusCode, String msg) {
+			myHandler.sendEmptyMessage(HANDLER_RESULT);
+		}
+
+		@Override
+		public void exception(Exception e) {
+			myHandler.sendEmptyMessage(HANDLER_EXCEPTION_NETWORK);
+		}
+
+		@Override
+		public void fail(int statusCode, String msg) {
+			myHandler.sendEmptyMessage(HANDLER_EXCEPTION);
+		}
+	}
+
+	public static class MyHandler extends Handler {
+
+		// WeakReference to the outer class's instance.
+		private WeakReference<ActivityLogin> mOuter;
+
+		public MyHandler(ActivityLogin activity) {
+			mOuter = new WeakReference<ActivityLogin>(activity);
+		}
+
+		@Override
+		public void handleMessage(Message msg) {
+
+			ActivityLogin outer = mOuter.get();
+			if (outer != null) {
+				switch (msg.what) {
+				case WAITDAILOG_OPEN:
+					outer.setWaitScreen(false);
+					break;
+				case WAITDAILOG_CLOSE:
+					outer.setWaitScreen(false);
+					break;
+				case HANDLER_RESULT:
+					outer.setWaitScreen(false);
+					/*if(MemberBaseInfo.USER_FACEBOOK.equals(BasesApplication.userInfo.platform)){
+						FacebookUtils.logout();
+					}else */if(MemberBaseInfo.USER_GOOGLE.equals(BasesApplication.userInfo.platform)){
+						if(outer.mGoogleApiClient.isConnected())
+							// 清除默认账号，在切换时重新选择登录的账号
+							outer.mGoogleApiClient.clearDefaultAccountAndReconnect().setResultCallback(new ResultCallback<Status>() {
+								
+								@Override
+								public void onResult(Status arg0) {
+									System.out.println(arg0.isSuccess()+"  "+arg0.getStatusMessage());
+								}
+							});
+					}
+					if(null != BasesApplication.userInfo && "ok".equals(BasesApplication.userInfo.status)){
+//						BasesUtils.showMsg(outer, outer.getResources().getString(BasesUtils.getResourceValue("string", "oasisgames_sdk_login_result_1")));
+
+						APPUtils.clearInfoForLogout();// 登录、切换成功后，清楚服id、角色id
+						outer.myHandler.sendEmptyMessage(HANDLER_SUCECCES);
+					}else{
+						APPUtils.showErrorMessageByErrorCode(outer, BasesApplication.userInfo.error);
+						/*if("-4".equals(BasesApplication.userInfo.error)){
+							APPUtils.showErrorMessageByErrorCode(outer, BasesApplication.userInfo.error);
+						}else if("-18".equals(BasesApplication.userInfo.error)){// 第三方token失效
+							APPUtils.showDisableDialog(outer, "oasisgames_sdk_error_exception");
+						}else if("-13".equals(BasesApplication.userInfo.error)){
+							APPUtils.showDisableDialog(outer, "oasisgames_sdk_common_errorcode_negative_13");
+						}else if("-14".equals(BasesApplication.userInfo.error)){
+							if(!outer.UITypeRank.isEmpty() && outer.UITypeRank.get(0) == UITYPE_CHANGEUSER)
+								APPUtils.showDisableDialog(outer, "oasisgames_sdk_login_notice_14");//(切换的账号被封)
+							else
+								APPUtils.showDisableDialog(outer, "oasisgames_sdk_common_errorcode_negative_14");
+						}else{
+							BasesUtils.showMsg(outer, outer.getString(BasesUtils.getResourceValue("string", "oasisgames_sdk_common_errorcode_negative_999")) + ".Error code:" + BasesApplication.userInfo.error);
+						}*/
+					}
+						
+					break;
+				case HANDLER_SUCECCES:
+					outer.setResult(Activity.RESULT_OK);// 为“来源是否是个人中心”提供判断依据
+
+					Map<String, String> paras = new HashMap<>();
+					paras.put("logintype", BasesUtils.isLogin() ? BasesApplication.userInfo.platform : "loginno");
+					ReportUtils.add(ReportUtils.DEFAULTEVENT_LOGIN, paras, null);
+
+					outer.finish();
+					break;
+				case HANDLER_FAIL:
+					
+					break;
+				case HANDLER_EXCEPTION:
+					outer.setWaitScreen(false);
+					BasesUtils.showMsg(outer, outer.getResources().getString(R.string.common_nowifi));
+					break;
+				case HANDLER_EXCEPTION_NETWORK:
+					outer.setWaitScreen(false);
+					BasesUtils.showMsg(outer, outer.getResources().getString(R.string.common_nowifi));
+					break;
+				case 101:
+					String[] data = ((String)msg.obj).split("oasistag");
+					outer.loginByGoogle(data[0], data[1], data[2]);
+					
+					outer.mSignInClicked = false;// 状态重置
+					break;
+				case 102:
+					mOuter.get().loginByFB();
+					break;
+				default:
+					
+					break;
+				}
+			}
+		}
+	}
+
+	private void init(){
+
+		listUsersLogined = BasesUtils.getSPMembers();
+		et_login_u = (EditText) findViewById(R.id.login_edit_user);
+		et_login_p = (EditText) findViewById(R.id.login_edit_password);
+		btnMoreUsers = (TextView)findViewById(R.id.login_edit_moreuser);
+
+		et_login_u.setOnFocusChangeListener(new OnFocusChangeListener() {
+
+			@Override
+			public void onFocusChange(View arg0, boolean arg1) {
+				if (arg1 && null != pupWindow && pupWindow.isShowing()) {
+					pupWindow.dismiss();
+				}
+			}
+		});
+		et_login_p.setOnFocusChangeListener(new OnFocusChangeListener() {
+
+			@Override
+			public void onFocusChange(View arg0, boolean arg1) {
+				if (arg1 && null != pupWindow && pupWindow.isShowing()) {
+					pupWindow.dismiss();
+				}
+			}
+		});
+		et_login_u.addTextChangedListener(new TextWatcher() {
+			@Override
+			public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+			}
+
+			@Override
+			public void onTextChanged(CharSequence s, int start, int before, int count) {
+			}
+
+			@Override
+			public void afterTextChanged(Editable s) {
+				checkSubmitButtonStatus();
+			}
+		});
+		et_login_p.addTextChangedListener(new TextWatcher() {
+			@Override
+			public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+			}
+
+			@Override
+			public void onTextChanged(CharSequence s, int start, int before, int count) {
+			}
+
+			@Override
+			public void afterTextChanged(Editable s) {
+				checkSubmitButtonStatus();
+			}
+		});
+
+		
+		if(null == listUsersLogined || listUsersLogined.size() <= 0){
+			btnMoreUsers.setVisibility(View.GONE);
+		}else{
+			if(listUsersLogined.size() == 1){
+				btnMoreUsers.setVisibility(View.GONE);
+			}
+			showUserInfo(listUsersLogined.get(0));
+		}
+
+		checkSubmitButtonStatus();
+				
+	}
+	private void checkSubmitButtonStatus(){
+		if(check(false)){
+			findViewById(R.id.login_btn_submit).setBackgroundResource(R.drawable.common_button_1_selector);
+		}else
+			findViewById(R.id.login_btn_submit).setBackgroundResource(R.drawable.common_bg_a5a4a4);
+
+	}
+	private void popUserListWindow(){
+		if(null != pupWindow && pupWindow.isShowing()){ 
+			pupWindow.dismiss();
+			return;
+		}
+		
+		// 下拉框展开时，密码输入框获得焦点
+		et_login_p.requestFocus();
+		
+		View pupView = this.getLayoutInflater().inflate(R.layout.page_login_user_list, null);
+		pupWindow = new PopupWindow(pupView, ((RelativeLayout)et_login_u.getParent()).getWidth(), ViewGroup.LayoutParams.WRAP_CONTENT);
+		pupWindow.setOutsideTouchable(false);
+		pupWindow.setFocusable(false);
+		pupWindow.setOnDismissListener(new OnDismissListener() {
+
+			@Override
+			public void onDismiss() {
+				btnMoreUsers.setBackgroundResource(R.mipmap.common_arrow_down);
+			}
+		});
+		ListView lv = (ListView) pupView.findViewById(R.id.login_user_list);
+
+		adapter = new LoginUserListAdapter(this, listUsersLogined, 1, null);
+		lv.setAdapter(adapter);
+
+		pupWindow.showAsDropDown(et_login_u, 0, DisplayUtil.dip2px(5, BasesUtils.getDisplayMetrics(this).density));
+
+		btnMoreUsers.setBackgroundResource(R.mipmap.common_arrow_up);
+	}
+	public void showUserInfo(MemberBaseInfo info){
+		et_login_u.setText(info.memberName);
+		et_login_p.setText(AESUtils.decrypt(info.password));
+		if(null != pupWindow && pupWindow.isShowing())
+			pupWindow.dismiss();
+	}
+
+	public boolean onTouchEvent(MotionEvent event) {
+		   if (pupWindow != null && pupWindow.isShowing()) {
+			   pupWindow.dismiss();
+		   }
+		   return super.onTouchEvent(event);
+		}
+
+	@Override
+	public void onConfigurationChanged(Configuration newConfig) {
+	    super.onConfigurationChanged(newConfig);
+	}
+
+	/**
+	 * 用户取消操作
+	 */
+	private void setResultForCancle(){
+		setResult(Activity.RESULT_CANCELED);
+	}
+
+	class MyGoogleLoginCallback implements GoogleUtils.GoogleLoginCallback{
+		@Override
+		public void success(Person p, String email, String token) {
+			String personName = "";
+			if(p != null)
+				personName = p.getDisplayName();
+			System.out.println("========Name="+personName +"; email="+email+";  token="+token);
+//			loginByGoogle(personName, email, token);
+			Message msg = new Message();
+			msg.what = 101;
+			msg.obj = personName+"oasistag"+email+"oasistag"+token;
+			myHandler.sendMessage(msg);
+		}
+
+		@Override
+		public void exception(Exception e) {
+			
+			if(e instanceof UserRecoverableAuthException){
+				Log.e(TAG, "Google Exception:UserRecoverableAuthException ");
+				e.printStackTrace();
+				Intent intent = ((UserRecoverableAuthException)e).getIntent();
+                startActivityForResult(intent, GoogleUtils.REQUEST_CODE_RECOVER_FROM_PLAY_SERVICES_ERROR);
+                mAuthException = true;
+			}else if(e instanceof GoogleAuthException){
+				Log.e(TAG, "Google Exception:GoogleAuthException ");
+				e.printStackTrace();
+				myHandler.sendEmptyMessage(HANDLER_EXCEPTION);
+				mSignInClicked = false;
+				mAuthException = false;
+			}else if(e instanceof IOException){
+				Log.e(TAG, "Google Exception:IOException ");
+				e.printStackTrace();
+				myHandler.sendEmptyMessage(HANDLER_EXCEPTION);
+				mSignInClicked = false;
+				mAuthException = false;
+			}
+			
+		}
+	}
+	/**
+	 * Fetching user's information name, email, profile pic
+	 * */
+	private void getProfileInformation() {
+		final MyGoogleLoginCallback callback = new MyGoogleLoginCallback();
+	    	final Person currentPerson = Plus.PeopleApi.getCurrentPerson(mGoogleApiClient);
+	    	final String email = Plus.AccountApi.getAccountName(mGoogleApiClient);
+	    	BasesUtils.logDebug(TAG, "email: " + email);
+	    	if(!TextUtils.isEmpty(email)){
+	    		new Thread(new Runnable() {
+					
+					@Override
+					public void run() {
+						String token;
+						try {
+							token = GoogleAuthUtil.getToken(ActivityLogin.this, email, "oauth2:"+Scopes.PROFILE+" https://www.googleapis.com/auth/userinfo.profile");
+							BasesUtils.logDebug(TAG, "token: " + token);
+							
+							callback.success(currentPerson, email, token);
+						} catch(Exception e){
+							callback.exception(e);
+						}
+						
+					}
+				}).start();
+	    	}
+	        if (currentPerson != null) {
+	            
+	            String personName = currentPerson.getDisplayName();
+	            String personPhotoUrl = currentPerson.getImage().getUrl();
+	            String personGooglePlusProfile = currentPerson.getUrl();
+	 
+	            Log.d(TAG, "Name: " + personName + ", plusProfile: "
+	                    + personGooglePlusProfile + ", email: " + email
+	                    + ", Image: " + personPhotoUrl);
+	 
+//	            txtName.setText(personName);
+//	            txtEmail.setText(email);
+	 
+	            // by default the profile url gives 50x50 px image only
+	            // we can replace the value with whatever dimension we want by
+	            // replacing sz=X
+//	            personPhotoUrl = personPhotoUrl.substring(0,
+//	                    personPhotoUrl.length() - 2)
+//	                    + PROFILE_PIC_SIZE;
+//	 
+//	            new LoadProfileImage(imgProfilePic).execute(personPhotoUrl);
+	 
+	        } 
+	}
+
+	@Override
+	protected void onResume() {
+		if(curView != null)
+			buttonOnClick(curView);
+		super.onResume();
+	}
+	
+	@Override
+	protected void onStart() {
+		super.onStart();
+		
+		/*注释此代码，是不想一进来就connect，希望是用户想connect时再执行
+		 * if(!mAuthException)
+		 * 	mGoogleApiClient.connect();
+		*/	
+	}
+
+	@Override
+	protected void onStop() {
+		super.onStop();
+		mGoogleApiClient.disconnect();
+	}
+	@Override
+	protected void onDestroy() {
+		super.onDestroy();
+		myHandler.removeCallbacksAndMessages(null);
+	}
+	@Override
+	public void onConnectionFailed(ConnectionResult result) {
+		if (!mIntentInProgress) {
+			if (mSignInClicked) {
+			    if (result.hasResolution()) {
+			      // The user has already clicked 'sign-in' so we attempt to resolve all
+			      // errors until the user is signed in, or they cancel.
+			      try {
+			        result.startResolutionForResult(this, RC_SIGN_IN);
+			        mIntentInProgress = true;
+			      } catch (SendIntentException e) {
+			        // The intent was canceled before it was sent.  Return to the default
+			        // state and attempt to connect to get an updated ConnectionResult.
+						mIntentInProgress = false;
+						mAuthException = false;
+						mSignInClicked = false;
+						setWaitScreen(false);
+						myHandler.sendEmptyMessage(HANDLER_EXCEPTION);
+			      }
+			    }else{
+			    	mIntentInProgress = false;
+			    	mAuthException = false;
+			    	mSignInClicked = false;
+			    	setWaitScreen(false);
+			    	myHandler.sendEmptyMessage(HANDLER_EXCEPTION);
+			    }
+			}
+		}
+	}
+
+	@Override
+	public void onConnected(Bundle arg0) {
+		if(mSignInClicked){
+			getProfileInformation();
+		}
+	}
+
+	@Override
+	public void onConnectionSuspended(int arg0) {
+		mGoogleApiClient.connect();
+	}
+}
Index: app/src/main/java/com/oasgames/android/oaspay/adapter/LoginUserListAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/adapter/LoginUserListAdapter.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/adapter/LoginUserListAdapter.java	(revision )
@@ -0,0 +1,62 @@
+package com.oasgames.android.oaspay.adapter;
+
+import android.app.Activity;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.base.tools.entity.MemberBaseInfo;
+import com.base.tools.list.BasesListAdapter;
+import com.oasgames.android.oaspay.R;
+import com.oasgames.android.oaspay.activity.ActivityLogin;
+
+import java.util.List;
+
+
+/**
+ * 已登录用户列表，用于登录页面展示
+ * @author Administrator
+ *
+ */
+public class LoginUserListAdapter extends BasesListAdapter<MemberBaseInfo> {
+	ActivityLogin c;
+	public LoginUserListAdapter(Activity activity, List<MemberBaseInfo> data,
+			int count, LinearLayout footerView) {
+		super(activity, data, count, footerView);
+		this.c = (ActivityLogin)activity;
+	}
+
+	@Override
+	public void loadMore() {
+		// no more
+	}
+
+	@Override
+	public View getRowView(int position, View convertView, ViewGroup parent) {
+		ViewHolder holder = null;
+		if(null == convertView){
+			convertView = c.getLayoutInflater().inflate(R.layout.page_login_user_list_item, null);
+			holder = new ViewHolder();
+			holder.name = (TextView) convertView.findViewById(R.id.login_user_list_item_name);
+
+			convertView.setTag(holder);
+		}else{
+			holder = (ViewHolder) convertView.getTag();
+		}
+		
+		final MemberBaseInfo info = getItem(position);
+		holder.name.setText(info.memberName);
+		convertView.setOnClickListener(new View.OnClickListener() {
+			@Override
+			public void onClick(View v) {
+				c.showUserInfo(info);
+			}
+		});
+		return convertView;
+	}
+
+	static class ViewHolder {
+		TextView name;
+	}
+}
Index: app/src/main/java/com/oasgames/android/oaspay/entity/OrderList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/entity/OrderList.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/entity/OrderList.java	(revision )
@@ -0,0 +1,37 @@
+package com.oasgames.android.oaspay.entity;
+
+import java.io.Serializable;
+import java.util.List;
+
+/**
+ * 订单列表集合
+ * @author xdb
+ *
+ */
+public class OrderList implements Serializable{
+	private static final long serialVersionUID = 1598605839985469091L;
+	
+	public String cur_page;			//当前页号
+	public String total_page;		//总页数
+	public String every_page_count;			//每页记录数
+	public List list;	//数据集合
+
+
+	public boolean isEmpty(){
+		if(list == null || list.size()<= 0)
+			return true;
+		return false;
+	}
+
+	public void setCur_page(String cur_page) {
+		this.cur_page = cur_page;
+	}
+
+	public void setTotal_page(String total_page) {
+		this.total_page = total_page;
+	}
+
+	public void setEvery_page_count(String every_page_count) {
+		this.every_page_count = every_page_count;
+	}
+}
Index: app/src/main/res/values/baseinfo.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/baseinfo.xml	(revision )
+++ app/src/main/res/values/baseinfo.xml	(revision )
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources xmlns:tools="http://schemas.android.com/tools"
+	tools:ignore="TypographyDashes">
+
+<string name="app_code">loar</string>
+
+<string name="app_publickey">ggsaPOLW05QpMfj1w5SotegFUQgpMb</string>
+
+<string name="app_environment">sandbox</string><!--   production sandbox  -->
+
+<string name="app_mode">online</string>
+
+<string name="app_mdata_appid">331358106</string>
+
+<string name="googleplay_app_id">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnGR8uBbcKKkZ+hmFGVQg5tnjoJjxVAbrsogXwX6aNvJZ+GeM77llN76vhF/x7GH3tU4yH0iLUcHjcMPGvIG8iAp8//dQMoH2Me+qeRTUwlPCOVbw0WzfefvYtTgqPIk/89SMdWIqe883u3omvve5Gcecya55E78qSD7WNmZYeNH/XXL+OQfFSwx3p5uOQfHUBn1HOLstdeSEbmOA4HPgAMwrHRkGFA+rMcy9f6ipVGlZ4ecOdny2EDgzW2h3sCiKMN6ZQQ1MeCzjcTelt0jEcXgL8jHejKwQHlGV6u/fMhZbZ96CKmcq4YhWaTxvymmm3kVq08SxevhcMz7lCmXQaQIDAQAB</string>
+
+<string name="facebook_app_id">340989056058098</string>
+
+</resources>
\ No newline at end of file
Index: .idea/dictionaries/Administrator.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/dictionaries/Administrator.xml	(revision )
+++ .idea/dictionaries/Administrator.xml	(revision )
@@ -0,0 +1,3 @@
+<component name="ProjectDictionaryState">
+  <dictionary name="Administrator" />
+</component>
\ No newline at end of file
Index: app/src/main/res/drawable/main_foot_shop_selector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/main_foot_shop_selector.xml	(revision )
+++ app/src/main/res/drawable/main_foot_shop_selector.xml	(revision )
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@mipmap/main_foot_shop_checked" android:state_pressed="true"/>
+    <item android:drawable="@mipmap/main_foot_shop_checked" android:state_focused="true"/>
+    <item android:drawable="@mipmap/main_foot_shop_checked" android:state_selected="true"/>
+    <item android:drawable="@mipmap/main_foot_shop_checked" android:state_checked="true"/>
+    <item android:drawable="@mipmap/main_foot_shop_uncheck"/>
+
+</selector>
\ No newline at end of file
Index: app/src/main/java/com/nineoldandroids/util/FloatProperty.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nineoldandroids/util/FloatProperty.java	(revision )
+++ app/src/main/java/com/nineoldandroids/util/FloatProperty.java	(revision )
@@ -0,0 +1,46 @@
+/*
+ * Copyright (C) 2011 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.nineoldandroids.util;
+
+/**
+ * An implementation of {@link android.util.Property} to be used specifically with fields of type
+ * <code>float</code>. This type-specific subclass enables performance benefit by allowing
+ * calls to a {@link #set(Object, Float) set()} function that takes the primitive
+ * <code>float</code> type and avoids autoboxing and other overhead associated with the
+ * <code>Float</code> class.
+ *
+ * @param <T> The class on which the Property is declared.
+ *
+ * @hide
+ */
+public abstract class FloatProperty<T> extends Property<T, Float> {
+
+    public FloatProperty(String name) {
+        super(Float.class, name);
+    }
+
+    /**
+     * A type-specific override of the {@link #set(Object, Float)} that is faster when dealing
+     * with fields of type <code>float</code>.
+     */
+    public abstract void setValue(T object, float value);
+
+    @Override
+    final public void set(T object, Float value) {
+        setValue(object, value);
+    }
+
+}
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(revision )
+++ .idea/gradle.xml	(revision )
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="GradleSettings">
+    <option name="linkedExternalProjectsSettings">
+      <GradleProjectSettings>
+        <option name="distributionType" value="LOCAL" />
+        <option name="externalProjectPath" value="$PROJECT_DIR$" />
+        <option name="gradleHome" value="D:\OASIS\soft\Android Studio\gradle\gradle-2.4" />
+        <option name="gradleJvm" value="1.8" />
+        <option name="modules">
+          <set>
+            <option value="$PROJECT_DIR$" />
+            <option value="$PROJECT_DIR$/app" />
+          </set>
+        </option>
+      </GradleProjectSettings>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/java/com/oasgames/android/oaspay/activity/FragmentNews.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/activity/FragmentNews.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/activity/FragmentNews.java	(revision )
@@ -0,0 +1,117 @@
+package com.oasgames.android.oaspay.activity;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.text.TextUtils;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.ListView;
+
+import com.base.tools.http.CallbackResultForActivity;
+import com.oasgames.android.oaspay.R;
+import com.oasgames.android.oaspay.adapter.AdapterNewsList;
+import com.oasgames.android.oaspay.entity.NewsInfo;
+import com.oasgames.android.oaspay.entity.NewsList;
+import com.oasgames.android.oaspay.service.HttpService;
+
+import java.util.ArrayList;
+
+
+public class FragmentNews extends Fragment {
+	final String TAG = FragmentNews.class.getSimpleName();
+	final int PAGESIZE = 20;
+	ListView listView;
+	AdapterNewsList adapter;
+
+	NewsList list = null;
+	boolean isLoading = false;
+	View main_news_wait;
+	@Override
+	public View onCreateView(LayoutInflater inflater, ViewGroup container,
+			Bundle savedInstanceState) {
+		super.onCreateView(inflater, container, savedInstanceState);
+		return inflater.inflate(R.layout.fragment_main_news, null);
+	}
+
+	@Override
+	public void onActivityCreated(Bundle savedInstanceState) {
+		super.onActivityCreated(savedInstanceState);
+
+		main_news_wait = getActivity().findViewById(R.id.main_news_wait);
+
+		listView = (ListView)getActivity().findViewById(R.id.main_news_list);
+		adapter = new AdapterNewsList(this, new ArrayList<NewsInfo>(), 1, null);
+		listView.setAdapter(adapter);
+		listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+			@Override
+			public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+				startActivity(new Intent().setClass(getActivity(), ActivityNewsDetails.class).putExtra("link", adapter.getItem(position).detail_url));
+			}
+		});
+		loadNews();
+
+	}
+
+	@Override
+	public void onResume() {
+		super.onResume();
+	}
+
+	private void loadNews(){
+		HttpService.instance().getNewsList((list==null|| TextUtils.isEmpty(list.cur_page))?1:Integer.valueOf(list.cur_page) + 1, PAGESIZE, new MyCallBack());
+	}
+	public void loadMoreNews(){
+		if(isLoading)
+			return;
+		isLoading = true;
+		loadNews();
+	}
+	public void retry(){
+		loadNews();
+	}
+	class MyCallBack implements CallbackResultForActivity{
+		@Override
+		public void success(Object data, int statusCode, String msg) {
+			main_news_wait.setVisibility(View.INVISIBLE);
+
+			list = (NewsList)data;
+			if(list != null) {
+				adapter.currentPage = Integer.valueOf(list.cur_page);
+				adapter.pages = Integer.valueOf(list.total_page);
+
+				if (adapter.data == null)
+					adapter.data = list.list;
+				else
+					adapter.data.addAll(list.list);
+				adapter.notifyDataSetChanged();
+			}
+			isLoading = false;
+		}
+
+		@Override
+		public void fail(int statusCode, String msg) {
+			main_news_wait.setVisibility(View.INVISIBLE);
+			isLoading = false;
+		}
+
+		@Override
+		public void exception(Exception e) {
+			main_news_wait.setVisibility(View.INVISIBLE);
+			isLoading = false;
+
+			if(list == null) {
+				View netError = getActivity().findViewById(R.id.main_news_network_error);
+				netError.setVisibility(View.VISIBLE);
+				netError.findViewById(R.id.common_network_retry).setOnClickListener(new View.OnClickListener() {
+					@Override
+					public void onClick(View v) {
+						loadNews();
+					}
+				});
+			}
+		}
+	}
+}
Index: app/src/main/res/anim/slide_out_right.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/anim/slide_out_right.xml	(revision )
+++ app/src/main/res/anim/slide_out_right.xml	(revision )
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+/* //device/apps/common/res/anim/slide_out_right.xml
+**
+** Copyright 2007, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License"); 
+** you may not use this file except in compliance with the License. 
+** You may obtain a copy of the License at 
+**
+**     http://www.apache.org/licenses/LICENSE-2.0 
+**
+** Unless required by applicable law or agreed to in writing, software 
+** distributed under the License is distributed on an "AS IS" BASIS, 
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+** See the License for the specific language governing permissions and 
+** limitations under the License.
+*/
+-->
+
+<set xmlns:android="http://schemas.android.com/apk/res/android">
+	<translate android:fromXDelta="0" android:toXDelta="100%p"
+            android:duration="@android:integer/config_shortAnimTime"
+        android:interpolator="@android:anim/decelerate_interpolator"/>
+	<!--<alpha android:fromAlpha="1.0" android:toAlpha="0.0"
+            android:duration="@android:integer/config_mediumAnimTime" />-->
+</set>
Index: app/src/main/java/com/oasgames/android/oaspay/activity/ActivityAbout.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/activity/ActivityAbout.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/activity/ActivityAbout.java	(revision )
@@ -0,0 +1,29 @@
+package com.oasgames.android.oaspay.activity;
+
+import android.os.Bundle;
+import android.webkit.WebSettings;
+import android.webkit.WebView;
+
+import com.base.tools.activity.BasesActivity;
+import com.oasgames.android.oaspay.R;
+
+/**
+ * 界面 关于我们
+ * Created by Administrator on 2015/10/16.
+ */
+public class ActivityAbout extends BasesActivity {
+    WebView webView;
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.page_about);
+        initHead(true, true, null, false, getString(R.string.fragment_mine_head_list_3),false,null);
+
+        webView = (WebView)findViewById(R.id.about_webview);
+        webView.loadUrl("file:///android_asset/about.html");
+
+        //启用支持javascript
+        WebSettings settings = webView.getSettings();
+        settings.setJavaScriptEnabled(true);
+    }
+}
Index: app/src/main/res/layout/page_capture.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/page_capture.xml	(revision )
+++ app/src/main/res/layout/page_capture.xml	(revision )
@@ -0,0 +1,47 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:orientation="vertical">
+
+    <include layout="@layout/common_head"/>
+
+    <RelativeLayout
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent" >
+
+        <SurfaceView
+            android:id="@+id/captrue_preview"
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:layout_gravity="center" />
+
+        <com.google.zxing.view.ViewfinderView
+            android:id="@+id/captrue_viewfinder"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_centerVertical="true"/>
+
+        <LinearLayout android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:orientation="vertical"
+			android:background="@color/common_background_333333"
+			android:layout_alignParentBottom="true">
+
+            <TextView android:layout_width="fill_parent"
+	            android:layout_height="@dimen/main_foot_height"
+				android:layout_marginTop="@dimen/common_content_margin_30"
+				android:layout_marginBottom="@dimen/common_content_margin_30"
+				android:layout_marginRight="@dimen/common_content_margin_50"
+				android:layout_marginLeft="@dimen/common_content_margin_50"
+				android:background="@drawable/common_button_1_selector"
+				android:text="@string/capture_scan_text2_3"
+	            android:textColor="@color/common_font_color_ffffff"
+	            android:textSize="@dimen/common_font_size_16"
+				android:gravity="center"
+                android:clickable="true"
+				android:onClick="onClickViewToInput"/>
+        </LinearLayout>
+    </RelativeLayout>
+
+</LinearLayout>
\ No newline at end of file
Index: app/src/main/java/com/base/tools/utils/BasesUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/utils/BasesUtils.java	(revision )
+++ app/src/main/java/com/base/tools/utils/BasesUtils.java	(revision )
@@ -0,0 +1,794 @@
+/**
+ * 应用工具类
+ */
+package com.base.tools.utils;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.app.ProgressDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.SharedPreferences;
+import android.content.pm.PackageInfo;
+import android.content.pm.PackageManager;
+import android.content.pm.PackageManager.NameNotFoundException;
+import android.content.pm.Signature;
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.Bitmap.CompressFormat;
+import android.graphics.BitmapFactory;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.PorterDuff;
+import android.graphics.PorterDuffXfermode;
+import android.graphics.Rect;
+import android.graphics.RectF;
+import android.graphics.drawable.BitmapDrawable;
+import android.os.Environment;
+import android.os.StatFs;
+import android.preference.PreferenceManager;
+import android.text.TextUtils;
+import android.util.Base64;
+import android.util.DisplayMetrics;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.Toast;
+
+import com.base.tools.BasesApplication;
+import com.base.tools.entity.MemberBaseInfo;
+import com.base.tools.entity.PhoneInfo;
+import com.mopub.volley.Response;
+import com.mopub.volley.VolleyError;
+import com.mopub.volley.toolbox.ImageRequest;
+
+import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+/**
+ * @author xdb
+ * 
+ */
+public class BasesUtils {
+	/**
+	 * 获取FB的key hash
+	 */
+	public static void getFBKeyHash(Activity activity){
+
+		//获取当前应用的 key hash（分为签名与非签名两种）
+		try {
+			PackageInfo info = activity.getPackageManager().getPackageInfo(activity.getPackageName(), PackageManager.GET_SIGNATURES);
+			for (Signature signature : info.signatures) {
+				MessageDigest md = MessageDigest.getInstance("SHA");
+				md.update(signature.toByteArray());
+				String sign = Base64
+						.encodeToString(md.digest(), Base64.DEFAULT);
+				Log.e("FB KEY HASH:", sign);
+			}
+		} catch (NameNotFoundException e) {
+		} catch (NoSuchAlgorithmException e) {
+		}
+	}
+	/**
+	 * 获取手机基本信息
+	 * @param c
+	 * @return
+	 */
+	public static PhoneInfo getPhoneInfo(Context c){
+		PhoneInfo info = PhoneInfo.instance();
+//		TelephonyManager tm = (TelephonyManager) c.getSystemService(Service.TELEPHONY_SERVICE);
+//		info.setDeviceId(tm.getDeviceId());
+		info.setModel(android.os.Build.MODEL);
+		info.setBrand(android.os.Build.BRAND);
+		info.setSoftwareType("android");//android.os.Build.TYPE
+		info.setSoftwareVersion(android.os.Build.VERSION.RELEASE);
+
+		info.setAndroidID(android.provider.Settings.Secure.getString(c.getContentResolver(), android.provider.Settings.Secure.ANDROID_ID));
+
+		/**
+		 * 获取版本号
+		 */
+		try {
+			PackageManager manager = c.getPackageManager();
+			PackageInfo packinfo = manager.getPackageInfo(c.getPackageName(), 0);
+			info.setBundleid(packinfo.packageName);
+			info.setBundleversion(packinfo.versionName);
+			info.setBundleversioncode(""+packinfo.versionCode);
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+
+		SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(c);
+		info.setReferrer(preferences.getString("referrer", ""));
+		return info;
+	}
+	/**
+	 * 获取手机唯一码
+	 * 优先顺序：	1、游戏方传来的唯一码（肯能为任意字符）
+	 * 			2、DeviceID
+	 * 			3、AndroidID
+	 * 			4、"OAS_ANDROID_"+System.nanoTime()
+	 * @return
+	 */
+	public static String getMobileCode(){
+		if(!TextUtils.isEmpty(PhoneInfo.instance().mobilecode))
+			return PhoneInfo.instance().mobilecode;
+
+		String mobileCode = (BasesApplication.setting==null)?"":BasesApplication.setting.getString("notRegistUserName", "");
+
+		if(TextUtils.isEmpty(mobileCode))
+			mobileCode = PhoneInfo.instance().androidID;
+
+		if(TextUtils.isEmpty(mobileCode))
+			mobileCode = "OAS_ANDROID_"+System.nanoTime();
+
+		PhoneInfo.instance().setMobilecode(mobileCode);
+
+		BasesApplication.settingEditor.putString("notRegistUserName", mobileCode);
+		BasesApplication.settingEditor.commit();
+
+		return mobileCode;
+	}
+	private static void showMsg(Activity activity, String msg, int type) {
+		if (type == Toast.LENGTH_LONG)
+			Toast.makeText(activity, msg, Toast.LENGTH_LONG).show();
+		else if (type == Toast.LENGTH_SHORT)
+			Toast.makeText(activity, msg, Toast.LENGTH_SHORT).show();
+	}
+	/**
+	 * Toast显示提示信息
+	 *
+	 * @param activity
+	 * @param msg
+	 *            显示内容
+	 */
+	public static void showMsg(Activity activity, String msg) {
+		showMsg(activity, msg, Toast.LENGTH_LONG);
+	}
+
+	/**
+	 * 加载更多
+	 * 
+	 * @return
+	 */
+	public static View getLoadMoreFootView(Activity activity, int layout) {
+		LayoutInflater inflater = activity.getLayoutInflater();
+		View view = inflater.inflate(layout, null);
+		return view;
+	}
+
+	/**
+	 * 最后一行
+	 * 
+	 * @return
+	 */
+	public static View getEndViewFootView(Activity activity, int layout) {
+		LayoutInflater inflater = activity.getLayoutInflater();
+		View view = inflater.inflate(layout, null);
+		return view;
+
+	}
+
+	/**
+	 * 没有数据
+	 * 
+	 * @return
+	 */
+	public static View getNotDataFootView(Activity activity, int layout) {
+		LayoutInflater inflater = activity.getLayoutInflater();
+		View view = inflater.inflate(layout, null);
+		return view;
+
+	}
+
+	/**
+	 * 判断存储卡是否存在 
+	 * @return
+	 */
+	public static boolean checkSDCard() {
+
+		if (Environment.getExternalStorageState().equals(
+				Environment.MEDIA_MOUNTED)) {
+			return true;
+		} else {
+			return false;
+		}
+	}
+
+	/**
+	 * 获取SD卡剩余空间.
+	 * 
+	 * @return
+	 */
+	public static long getSDCardAvailableBlocks() {
+		String state = Environment.getExternalStorageState();
+		if (Environment.MEDIA_MOUNTED.equals(state)) {
+			File sdcardDir = Environment.getExternalStorageDirectory();
+			StatFs sf = new StatFs(sdcardDir.getPath());
+			return sf.getAvailableBlocks();
+		} else
+			return 0;
+	}
+
+
+	/**
+	 * 公共消息提示框（系统UI）,如果某些按钮不用，请将“按钮显示内容”置为null
+	 * @param c
+	 * @param message   提示内容
+	 * @param negativeText   按钮显示内容（消极, 左边）
+	 * @param neutralText   按钮显示内容（中性, 中间）
+	 * @param positiveText   按钮显示内容（积极，, 右边）
+	 */
+	public static void showDialogBySystemUI(Context c, String message,
+											String negativeText, DialogInterface.OnClickListener negativeListener,
+											String neutralText, DialogInterface.OnClickListener neutralListener,
+											String positiveText, DialogInterface.OnClickListener positiveListener){
+		AlertDialog.Builder d = new AlertDialog.Builder(c);
+
+		d.setCancelable(false);
+		d.setMessage(message);
+		if(!TextUtils.isEmpty(negativeText))
+			d.setNegativeButton(negativeText, negativeListener);
+		if(!TextUtils.isEmpty(positiveText))
+			d.setPositiveButton(positiveText, positiveListener);
+		if(!TextUtils.isEmpty(neutralText))
+			d.setNeutralButton(neutralText, neutralListener);
+
+		d.show();
+	}// end of showDialogBySystemUI
+
+	/**
+	 * 单选列表对话框（系统UI）
+	 * @param c
+	 * @param items		列表展示数据
+	 * @param checkedItem	默认选中Item索引（-1表示不选中任何项）
+	 * @param listener		选中监听事件
+	 */
+	public static void showSingleChoiceDialogListBySystemUI(Context c, String[] items, int checkedItem, DialogInterface.OnClickListener listener){
+		AlertDialog.Builder d = new AlertDialog.Builder(c);
+		d.setSingleChoiceItems(items, checkedItem, listener);
+
+		d.show();
+	}// end of showSingleChoiceDialogListBySystemUI
+	/**
+	 * 
+	 * 进度加载方法
+	 */
+	public static ProgressDialog loadProgress(Activity activity) {
+		// 带进度条的对话框
+		ProgressDialog mydialog = new ProgressDialog(activity);
+		mydialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
+//		mydialog.setTitle("数据加载提示");
+//		mydialog.setMessage("Loading ...");
+		mydialog.setIndeterminate(true);
+		mydialog.show();
+		mydialog.setContentView(BasesUtils.getResourceValue("layout", "oasisgames_sdk_common_waiting_anim"));
+		return mydialog;
+	}
+	
+	/**
+	 * 
+	 * @param activity
+	 * @param layout
+	 * @return
+	 */
+	public static AlertDialog createWaitDialog(Activity activity, int layout) {
+		AlertDialog dialog_wait = new AlertDialog.Builder(activity).create();
+		dialog_wait.show();
+		if (layout == -1)// 默认样式
+			layout = BasesUtils.getResourceValue(activity, "layout", "oasisgames_sdk_common_waiting_anim");
+		dialog_wait.setContentView(layout);
+		dialog_wait.setCanceledOnTouchOutside(false);
+		return dialog_wait;
+	}
+
+	public static DisplayMetrics getDisplayMetrics(Activity a){
+		if(PhoneInfo.instance().dm == null) {
+			DisplayMetrics outMetrics = new DisplayMetrics();
+			a.getWindowManager().getDefaultDisplay().getMetrics(outMetrics);
+			PhoneInfo.instance().dm = outMetrics;
+		}
+		return PhoneInfo.instance().dm;
+	}
+
+	/**
+	 * 账号注册时特殊字符验证
+	 * @param text
+	 * @return
+	 */
+	public static boolean regexSpecilChar(String text){
+		
+		return RegexName(text, "^[^&#]+");
+	}
+	/**
+	 * 纯数字格式验证
+	 * @param text
+	 * @return
+	 */
+	public static boolean regexNum(String text){
+		
+		return RegexName(text, "^[0-9]+");
+	}
+	/**
+	 * 账号格式验证  0-9a-zA-Z 下划线
+	 * @param text
+	 * @return
+	 */
+	public static boolean regexAccount(String text){
+		
+		return RegexName(text, "^[a-zA-Z0-9_]+");
+	}
+	static String emailRegEx = "^([a-z0-9A-Z]+[-|\\._]?)+[a-z0-9A-Z]@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\\.)+[a-zA-Z]{2,}$"; 
+	/**
+	 * 邮箱格式验证
+	 * @param email
+	 * @return
+	 */
+	public static boolean regexEmail(String email){
+		
+		return RegexName(email, emailRegEx);
+	}
+	/**
+	 * 正则验证
+	 * 
+	 * @return
+	 */
+	public static boolean RegexName(String str, String eg) {
+		Matcher m = Pattern.compile(eg,
+				Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE).matcher(str);
+		return m.matches();
+	}
+
+	/**
+	 * 通过Bitmap形式设置背景，在activity销毁时，一定调用distoryBackgroudByBitmap
+	 * 
+	 * @param r
+	 * @param view
+	 * @param imageId
+	 */
+	public static void setBackgroudByBitmap(Resources r, View view, int imageId) {
+		if (null != view) {
+			Bitmap bm = BitmapFactory.decodeResource(r, imageId);
+			BitmapDrawable bd = new BitmapDrawable(r, bm);
+			view.setBackgroundDrawable(bd);
+		}
+	}
+
+	/**
+	 * 销毁Bitmap，减少内存
+	 * 
+	 * @param r
+	 * @param view
+	 */
+	public static void distoryBackgroudByBitmap(Resources r, View view) {
+		BitmapDrawable bd = null;
+		if (null != view) {
+			bd = (BitmapDrawable) view.getBackground();
+			view.setBackgroundResource(0);// 别忘了把背景设为null，避免onDraw刷新背景时候出现used a
+											// recycled bitmap错误
+			bd.setCallback(null);
+			bd.getBitmap().recycle();
+		}
+	}
+
+	public static void cacheUserInfo(String memberName, String memberPwd) {
+		if(TextUtils.isEmpty(memberPwd))// 密码为空，不报存账户信息 
+			return;
+		
+		// 需要考虑更加安全的方式
+
+		// OAS 账号，需要保存账号及密码，其余类型不用处理
+		List<MemberBaseInfo> memberBaseInfos = getSPMembers();
+		String userinfos = memberName + "/"+AESUtils.encrypt(memberPwd);
+		if(null == memberBaseInfos || memberBaseInfos.size() <= 0){
+			BasesApplication.settingEditor.putString("members", userinfos);
+			BasesApplication.settingEditor.commit();// 编辑器提交保存
+			return;
+		} 
+
+		checkUser(memberName, memberPwd, memberBaseInfos);// 检查是否已存在相同用户信息，存在先移除该用户信息
+		int index = 0;
+		// 最终保存的用户信息都在list中
+		for (MemberBaseInfo user : memberBaseInfos) {
+			if(index >= 2)// 最多存3个，所以此处为2
+				continue;
+			String uname = user.memberName;
+			String pwd = user.password;
+			String userinfo = uname + "/" + pwd;
+			if (userinfos == "") {
+				userinfos = userinfo;
+			} else {
+				userinfos += "," + userinfo;
+			}
+			index ++;
+		}
+
+		BasesApplication.settingEditor.putString("members", userinfos);
+		BasesApplication.settingEditor.commit();// 编辑器提交保存
+	}
+
+	public static void deleteUserInfo(String memberName, String memberPwd){
+		List<MemberBaseInfo> memberBaseInfos = getSPMembers();
+		if(null == memberBaseInfos || memberBaseInfos.size() <= 0){
+			return;
+		}
+		String userinfos = "";
+		for (MemberBaseInfo user : memberBaseInfos) {
+			
+			String uname = user.memberName;
+			String pwd = user.password;
+			
+			if(uname.equals(memberName)){
+				continue;
+			}
+			
+			String userinfo = uname + "/" + pwd;
+			if ("".equals(userinfos)) {
+				userinfos = userinfo;
+			} else {
+				userinfos += "," + userinfo;
+			}
+		}
+
+		BasesApplication.settingEditor.putString("members", userinfos);
+		BasesApplication.settingEditor.commit();
+	}
+	// 得到用户信息
+	public static List<MemberBaseInfo> getSPMembers() {
+		List<MemberBaseInfo> memberBaseInfos = new ArrayList<MemberBaseInfo>();// 用于保存用户列表信息
+		String userinfos = (BasesApplication.setting==null)?"":BasesApplication.setting.getString("members", "");// 取得所有用户信息
+		// 获得用户字串
+		if (userinfos != "")// 有数据
+		{
+			// name1/pwd1,name2/pwd2
+			if (userinfos.contains(","))// 判断有无, 逗号代表用户每个用户分割点
+			{
+				String[] users = userinfos.split(",");
+				for (String str : users) {
+					MemberBaseInfo memberBaseInfo = new MemberBaseInfo();
+					String[] user = str.split("/");
+					if(user.length>=1)
+						memberBaseInfo.memberName = TextUtils.isEmpty(user[0])?"":user[0];// 用户名
+					if(user.length>=2)	
+						memberBaseInfo.password = TextUtils.isEmpty(user[1])?"":user[1];// 密码
+					memberBaseInfos.add(memberBaseInfo);
+				}
+			} else {
+				// 没有, 代表只有一个用户
+				MemberBaseInfo memberBaseInfo = new MemberBaseInfo();
+				String[] user = userinfos.split("/");
+				if(user.length>=1)
+					memberBaseInfo.memberName = TextUtils.isEmpty(user[0])?"":user[0];// 用户名
+				if(user.length>=2)	
+					memberBaseInfo.password = TextUtils.isEmpty(user[1])?"":user[1];// 密码
+				memberBaseInfos.add(memberBaseInfo);
+			}
+			return memberBaseInfos;
+		} else {
+//			MemberBaseInfo memberBaseInfo = new MemberBaseInfo();
+//			memberBaseInfo.memberName = "user1";
+//			memberBaseInfo.password ="1";
+//			memberBaseInfos.add(memberBaseInfo);
+//			
+//			memberBaseInfo = new MemberBaseInfo();
+//			memberBaseInfo.memberName = "user2";
+//			memberBaseInfo.password ="2";
+//			memberBaseInfos.add(memberBaseInfo);
+			return memberBaseInfos;
+		}
+	}
+
+	// 检查是否包含此用户名 没有包含就保存到?
+	private static void checkUser(String memberName, String memberPwd,
+			List<MemberBaseInfo> memberBaseInfos) {
+		int position = -1;
+		int num = memberBaseInfos.size();
+		for (int i = 0; i <num; i++) {
+			if (memberName.equals(memberBaseInfos.get(i).memberName)) {
+				position = i;
+				break;
+			}
+		}
+		if (position >= 0) {// 已存在
+			memberBaseInfos.remove(position);
+		}
+//		MemberBaseInfo memberBaseInfo = new MemberBaseInfo();
+//		memberBaseInfo.memberName = memberName;
+//		memberBaseInfo.password = memberPwd;
+//		memberBaseInfos.add(memberBaseInfo);
+	}
+	
+	/**
+	 * 动态获取资源
+	 * @param type
+	 * @param name
+	 * @return
+	 */
+	public static int getResourceValue(String type, String name){
+		Class r = null;
+        int id = 0;
+        try
+        {
+        	r = Class.forName(BasesApplication.packageName + ".R");
+
+            Class[] classes = r.getClasses();
+            Class desireClass = null;
+
+            for (int i = 0; i < classes.length; i++)
+            {
+                if (classes[i].getName().split("\\$")[1].equals(type))
+                {
+                    desireClass = classes[i];
+                    break;
+                }
+            }
+
+            if (desireClass != null)
+                id = desireClass.getField(name).getInt(desireClass);
+        }catch(Exception e){
+        	e.printStackTrace();
+        }
+		return id;
+	}
+	public static int getResourceValue(Activity c, String type, String name){
+		if(TextUtils.isEmpty(BasesApplication.packageName)){
+			PackageManager manager = c.getPackageManager();
+	        try {
+				PackageInfo packinfo = manager.getPackageInfo(c.getPackageName(), 0);
+				BasesApplication.packageName = packinfo.packageName;
+			} catch (NameNotFoundException e) {
+			}
+		}
+		
+		return getResourceValue(type, name);
+	}
+	public static int[] getResourceValueByStyleable(String name){
+		Class r = null;
+		int[] id = null;
+		try
+		{
+			r = Class.forName(BasesApplication.packageName + ".R");
+			
+			Class[] classes = r.getClasses();
+			Class desireClass = null;
+			
+			for (int i = 0; i < classes.length; i++)
+			{
+				if (classes[i].getName().split("\\$")[1].equals("styleable"))
+				{
+					desireClass = classes[i];
+					break;
+				}
+			}
+			if ((desireClass != null) && (desireClass.getField(name).get(desireClass) != null) && (desireClass.getField(name).get(desireClass).getClass().isArray()))  
+		        id = (int[])desireClass.getField(name).get(desireClass);
+		}catch(Exception e){
+			e.printStackTrace();
+		}
+		return id;
+	}
+
+	/**
+	 * 日志打印
+	 * @param logLevel 日志级别
+	 * @param tag		日志tag
+	 * @param msg		日志消息
+	 */
+	private static void printLog(int logLevel, String tag, String msg){
+		if(Log.DEBUG == logLevel){
+			if(BasesApplication.OASISSDK_ENVIRONMENT_SANDBOX)
+				Log.d(tag, msg);
+		}else if(Log.WARN == logLevel){
+			Log.w(tag, msg);
+		}else if(Log.ERROR == logLevel){
+			Log.e(tag, msg);
+		}
+	}
+	public static void logDebug(String tag, String msg){
+		printLog(Log.DEBUG, tag, msg);
+	}
+	public static void logWarn(String tag, String msg){
+		printLog(Log.WARN, tag, msg);
+	}
+	public static void logError(String tag, String msg){
+		printLog(Log.ERROR, tag, msg);
+	}
+	/**
+	 * 是否登录成功，通过BasesApplication.userInfo 判断是否登录成功
+	 * @return
+	 */
+	public static boolean isLogin(){
+		if(BasesApplication.userInfo != null && !TextUtils.isEmpty(BasesApplication.userInfo.uid) && !TextUtils.isEmpty(BasesApplication.userInfo.token))
+			return true;
+		return false;
+	}
+	
+	static SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
+	public static void cacheLog(int type, String log){
+		if(BasesApplication.OASISSDK_ENVIRONMENT_SANDBOX){
+			if(BasesApplication.logLists == null)
+				BasesApplication.logLists = new ArrayList<String>();
+			BasesApplication.logLists.add(0, "<B>【"+sdf.format(new Date())+"】【"+(type==1?"GAME":"SDK")+"】</B>"+log+"<br>");
+		}
+		
+		if(BasesApplication.logListsSD == null)
+			BasesApplication.logListsSD = new ArrayList<String>();
+		
+		if(type == 1)// 将游戏调用的接口顺序作为日志存入SD卡，通过 ReportTimer完成写文件操作
+			BasesApplication.logListsSD.add("【"+sdf.format(new Date())+"】"+log+"\r\n\r\n");
+	}
+	public static String Bitmap2Base64String(String path) {
+		if(TextUtils.isEmpty(path))
+			return "";
+		Bitmap bm = null;
+		try {
+			bm = BitmapFactory.decodeFile(path);// 处理内存溢出
+		} catch (OutOfMemoryError e1) {
+			bm = getSmallBitmap(path, 480, 800);
+		}
+		if(bm == null)
+			return "";
+		
+		String farmat = path.substring(path.lastIndexOf(".")+1);
+		CompressFormat cf = CompressFormat.JPEG;
+		if("jpg".equals(farmat) || "jpeg".equals(farmat)
+				|| "JPG".equals(farmat) || "JPEG".equals(farmat))
+			cf = CompressFormat.JPEG;
+		else if("png".equals(farmat) || "PNG".equals(farmat))
+			cf = CompressFormat.PNG;
+			
+		ByteArrayOutputStream baos = null;
+		try {
+			baos = new ByteArrayOutputStream();
+			int options = 100;
+			bm.compress(cf, options, baos);
+			double maxSize = 1024*500; // 2015-09-09将此值更新为500K  
+			
+			long size = baos.toByteArray().length;
+			    
+			if(size > maxSize){
+				double f = maxSize/size;
+				int v = (int)(f*100);// 得到压缩百分比
+				
+				if(v>0 && v<100){
+					baos.reset();
+					bm.compress(cf, v, baos);
+				}
+			}
+		} catch (Exception e) {
+			if(bm != null)
+				bm.recycle();
+			bm = null;
+			return "";
+		}
+		if(bm != null)
+			bm.recycle();
+		bm = null;
+		return Base64.encodeToString(baos.toByteArray(), Base64.DEFAULT);
+	}
+	public static String Bitmap2Base64String(Bitmap bm) {
+		return Base64.encodeToString(Bitmap2Bytes(bm), Base64.DEFAULT);
+	}
+	public static byte[] Bitmap2Bytes(Bitmap bm) {
+		ByteArrayOutputStream baos = new ByteArrayOutputStream();
+		int options = 100;
+		bm.compress(CompressFormat.JPEG, options, baos);
+		double maxSize = 1024*1024; // 1M  
+		
+		long size = baos.toByteArray().length;
+	        
+		if(size > maxSize){
+			double f = maxSize/size;
+			int v = (int)(f*100);// 得到压缩百分比
+			
+			if(v>0 && v<100){
+				baos.reset();
+				bm.compress(CompressFormat.JPEG, v, baos);
+			}
+		}
+		
+		return baos.toByteArray();
+	}
+	//计算图片的缩放值
+	public static int calculateInSampleSize(BitmapFactory.Options options,int reqWidth, int reqHeight) {
+	    final int height = options.outHeight;
+	    final int width = options.outWidth;
+	    int inSampleSize = 1;
+
+	    if (height > reqHeight || width > reqWidth) {
+	             final int heightRatio = Math.round((float) height/ (float) reqHeight);
+	             final int widthRatio = Math.round((float) width / (float) reqWidth);
+	             inSampleSize = heightRatio < widthRatio ? heightRatio : widthRatio;
+	    }
+	        return inSampleSize;
+	}
+	// 根据路径获得图片并压缩，返回bitmap用于显示
+	public static Bitmap getSmallBitmap(String filePath, int showWidth, int showHeight) {
+	        final BitmapFactory.Options options = new BitmapFactory.Options();
+	        options.inJustDecodeBounds = true;
+	        Bitmap b = null;
+	        try {
+				b = BitmapFactory.decodeFile(filePath, options);
+			} catch (OutOfMemoryError e) {
+				return null;
+			}
+
+	        // Calculate inSampleSize
+	    options.inSampleSize = calculateInSampleSize(options, showWidth, showHeight);
+
+	        // Decode bitmap with inSampleSize set
+	    options.inJustDecodeBounds = false;
+
+	    try {
+			b = BitmapFactory.decodeFile(filePath, options);
+		} catch (OutOfMemoryError e) {
+			return null;
+		}
+	    return b;
+	    }
+	public static boolean checkCameraDevice(Context context) {
+		if (context.getPackageManager().hasSystemFeature(
+				PackageManager.FEATURE_CAMERA)) {
+			return true;
+		} else {
+			return false;
+		}
+	}
+	public static void loadImg(Activity activity, final ImageView imageView, String imgUrl){
+		if(TextUtils.isEmpty(imgUrl) || "null".equals(imgUrl))
+			return;
+		ImageRequest iq = new ImageRequest(imgUrl,
+
+				new Response.Listener<Bitmap>() {
+					@Override
+					public void onResponse(Bitmap arg0) {
+						if(arg0 != null){
+							imageView.setImageBitmap(arg0);
+							imageView.postInvalidate();
+						}
+					}
+				},
+				getDisplayMetrics(activity).widthPixels,//DisplayUtil.dip2px(200, BaseUtils.getDensity()), // 以布局文件为准，200dip
+				getDisplayMetrics(activity).heightPixels,//DisplayUtil.dip2px(200, BaseUtils.getDensity()),
+				Bitmap.Config.ARGB_8888,
+				new Response.ErrorListener() {
+
+					@Override
+					public void onErrorResponse(VolleyError arg0) {
+					}
+
+				});
+		BasesApplication.volleyRequestQueue.add(iq);
+	}
+	/**
+	 * 获取圆角位图的方法
+	 * @param bitmap 需要转化成圆角的位图
+	 * @param pixels 圆角的度数，数值越大，圆角越大
+	 * @return 处理后的圆角位图
+	 */
+	public static Bitmap toRoundCorner(Bitmap bitmap, int pixels) {
+		Bitmap output = Bitmap.createBitmap(bitmap.getWidth(),
+				bitmap.getHeight(), Bitmap.Config.ARGB_8888);
+		Canvas canvas = new Canvas(output);
+		final int color = 0xff424242;
+		final Paint paint = new Paint();
+		final Rect rect = new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight());
+		final RectF rectF = new RectF(rect);
+		final float roundPx = pixels;
+		paint.setAntiAlias(true);
+		canvas.drawARGB(0, 0, 0, 0);
+		paint.setColor(color);
+		canvas.drawRoundRect(rectF, roundPx, roundPx, paint);
+		paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
+		canvas.drawBitmap(bitmap, rect, rect, paint);
+		return output;
+	}
+}
Index: app/src/main/res/layout/row_right_back_view.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/row_right_back_view.xml	(revision )
+++ app/src/main/res/layout/row_right_back_view.xml	(revision )
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="wrap_content"
+    android:layout_height="match_parent"
+    android:background="#FF0000" >
+
+    <Button
+        android:id="@+id/delete"
+        android:layout_width="0dp"
+        android:layout_height="match_parent"
+        android:layout_gravity="center"
+        android:layout_weight="1"
+        android:text="删除" />
+
+    <Button
+        android:id="@+id/edit"
+        android:layout_width="0dp"
+        android:layout_height="match_parent"
+        android:layout_gravity="center"
+        android:layout_weight="1"
+        android:text="编辑" />
+
+</LinearLayout>
\ No newline at end of file
Index: app/src/main/java/com/base/tools/json/BasesJsonParser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/json/BasesJsonParser.java	(revision )
+++ app/src/main/java/com/base/tools/json/BasesJsonParser.java	(revision )
@@ -0,0 +1,456 @@
+package com.base.tools.json;
+
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Hashtable;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Vector;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+import org.xmlpull.v1.XmlPullParserException;
+
+import com.base.tools.exception.BasesDataErrorException;
+
+public class BasesJsonParser {
+
+	private BasesJsonParser() {
+
+	}
+
+	private static BasesJsonParser parser = null;
+
+	public static BasesJsonParser newInstance() {
+		if (parser == null) {
+			parser = new BasesJsonParser();
+		}
+		return parser;
+	}
+	/**
+	 * json解析方法，将json文档转换成对象，要求对象的属性命名等同于json节点名称.
+	 * 
+	 * @param json
+	 *            json文本
+	 * @param object
+	 *            需要转换的目标对象
+	 * @throws BasesDataErrorException
+	 * @throws JSONException
+	 */
+	@SuppressWarnings("rawtypes")
+	public void parserJson2Obj(String json, Object object) throws JSONException, BasesDataErrorException {
+		JSONObject arr = new JSONObject(json);
+
+		if (object == null)
+			throw new BasesDataErrorException("Object is null,please init Object");
+
+				Iterator it = arr.keys();
+				while (it.hasNext()) {
+					String type = (String) it.next();
+					Object value = arr.get(type);
+					if(null != value && !"null".equals(value) && !"".equals(value))
+						setValue(type, String.valueOf(value), object);
+				}
+			
+	}
+	/**
+	 * json解析方法，将json文档转换成对象，要求对象的属性命名等同于json节点名称.
+	 * 
+	 * @param json
+	 *            json文本
+	 * @param object
+	 *            需要转换的目标对象
+	 * @param TagName
+	 *            需要转换对象对应于XML中的节点
+	 * @throws BasesDataErrorException
+	 * @throws JSONException
+	 */
+	@SuppressWarnings("rawtypes")
+	public void parserJSON2Obj(String json, Object object, String TagName) throws JSONException, BasesDataErrorException {
+		JSONArray arr = new JSONArray(json);
+
+		if (object == null)
+			throw new BasesDataErrorException("Object is null,please init Object");
+
+		int length = arr.length();
+		if (null == TagName || TagName.equals("")) {
+			for (int j = 0; j < length; j++) {
+				JSONObject categoryJson = arr.getJSONObject(j);
+				Iterator it = categoryJson.keys();
+				while (it.hasNext()) {
+					String type = (String) it.next();
+					Object value = categoryJson.get(type);
+					if(null != value && !"null".equals(value) && !"".equals(value))
+						setValue(type, String.valueOf(value), object);
+				}
+			}
+		} else {
+			for (int i = 0; i < length; i++) {
+
+				JSONObject jobj = arr.getJSONObject(i);
+				JSONArray sub_arr = jobj.getJSONArray(TagName);
+				int subLength = sub_arr.length();
+				for (int j = 0; j < subLength; j++) {
+					JSONObject categoryJson = sub_arr.getJSONObject(j);
+					Iterator it = categoryJson.keys();
+					while (it.hasNext()) {
+						String type = (String) it.next();
+						Object value = categoryJson.get(type);
+						if(null != value && !"null".equals(value) && !"".equals(value))
+							setValue(type, String.valueOf(value), object);
+					}
+				}
+			}
+		}
+	}
+
+	/**
+	 * json解析方法，将json文档转换成对象的Vector集合，对于循环出现的节点使用，要求对象的属性命名等同于json节点名称.
+	 * 从JSONObject 开始 ，通过tagName，解析JSONArray
+	 * 
+	 * @param json
+	 *            json文本
+	 * @param obj
+	 *            需要转换的目标对象
+	 * @param TagName
+	 *            需要转换对象对应于XML中的节点名称(每个循环节点的根节点名称)
+	 * @return Vector
+	 * @throws IllegalAccessException
+	 * @throws InstantiationException
+	 * @throws BasesDataErrorException
+	 * @throws JSONException
+	 */
+	@SuppressWarnings("rawtypes")
+	public List<Object> parserJSONObj2ObjList(String json, Object object, String TagName) throws JSONException,
+			BasesDataErrorException, IllegalAccessException, InstantiationException {
+		List<Object> vector = null;
+		JSONObject arr = new JSONObject(json);
+
+		if (object == null)
+			throw new BasesDataErrorException("Object is null,please init Object");
+
+		vector = new ArrayList<Object>();
+			JSONArray sub_arr = arr.getJSONArray(TagName);
+			int subLength = sub_arr.length();
+			for (int j = 0; j < subLength; j++) {
+				object = object.getClass().newInstance();
+				JSONObject categoryJson = sub_arr.getJSONObject(j);
+				Iterator it = categoryJson.keys();
+				while (it.hasNext()) {
+					String type = (String) it.next();
+					Object value = categoryJson.get(type);
+					if(null != value && !"null".equals(value) && !"".equals(value))
+						setValue(type, String.valueOf(value), object);
+				}
+				vector.add(object);
+			}
+		return vector;
+	}
+	/**
+	 * json解析方法，将json文档转换成对象的Vector集合，对于循环出现的节点使用，要求对象的属性命名等同于json节点名称.
+	 * 
+	 * @param json
+	 *            json文本
+	 * @param obj
+	 *            需要转换的目标对象
+	 * @param TagName
+	 *            需要转换对象对应于json中的节点名称(每个循环节点的根节点名称)
+	 * @return Vector
+	 * @throws IllegalAccessException
+	 * @throws InstantiationException
+	 * @throws BasesDataErrorException
+	 * @throws JSONException
+	 */
+	@SuppressWarnings("rawtypes")
+	public List<Object> parserJSON2ObjList(String json, Object object, String TagName) throws JSONException,
+			BasesDataErrorException, IllegalAccessException, InstantiationException {
+		List<Object> vector = null;
+		JSONArray arr = new JSONArray(json);
+
+		if (object == null)
+			throw new BasesDataErrorException("Object is null,please init Object");
+
+		vector = new ArrayList<Object>();
+		int length = arr.length();
+		for (int i = 0; i < length; i++) {
+
+			JSONObject jobj = arr.getJSONObject(i);
+			JSONArray sub_arr = jobj.getJSONArray(TagName);
+			int subLength = sub_arr.length();
+			for (int j = 0; j < subLength; j++) {
+				object = object.getClass().newInstance();
+				JSONObject categoryJson = sub_arr.getJSONObject(j);
+				Iterator it = categoryJson.keys();
+				while (it.hasNext()) {
+					String type = (String) it.next();
+					Object value = categoryJson.get(type);
+					if(null != value && !"null".equals(value) && !"".equals(value))
+						setValue(type, String.valueOf(value), object);
+				}
+				vector.add(object);
+			}
+		}
+		return vector;
+	}
+
+	/**
+	 * 解析json为List
+	 * @param json
+	 * @param object
+	 * @return
+	 * @throws JSONException
+	 * @throws BasesDataErrorException
+	 * @throws IllegalAccessException
+	 * @throws InstantiationException
+	 */
+	@SuppressWarnings("rawtypes")
+	public List<Object> parserJSON2ObjList(String json, Object object) throws JSONException,
+			BasesDataErrorException, IllegalAccessException, InstantiationException {
+		List<Object> vector = null;
+		JSONArray arr = new JSONArray(json);
+
+		if (object == null)
+			throw new BasesDataErrorException("Object is null,please init Object");
+
+		vector = new ArrayList<Object>();
+		int length = arr.length();
+		for (int i = 0; i < length; i++) {
+
+			JSONObject jobj = arr.getJSONObject(i);
+			object = object.getClass().newInstance();
+
+			Iterator it = jobj.keys();
+			while (it.hasNext()) {
+				String type = (String) it.next();
+				Object value = jobj.get(type);
+				if(null != value && !"null".equals(value) && !"".equals(value))
+					setValue(type, String.valueOf(value), object);
+			}
+			vector.add(object);
+		}
+		return vector;
+	}
+
+	/**
+	 * json解析方法，将json文档转换成HashMap，转换后格式Map<tagname,tagvalue>.
+	 * 
+	 * @param json
+	 *            json文本
+	 * @param tagNames
+	 *            [] 需要转换的节点的父节点名称数组
+	 * @return Table 如果没有匹配节点return null
+	 * @throws JSONException
+	 * @throws BasesDataErrorException
+	 */
+	public Hashtable<String, String> parserJSON2Map(String json, String[] tagNames) throws JSONException, BasesDataErrorException {
+		Hashtable<String, String> table = null;
+		if (null == tagNames || tagNames.length <= 0)
+			throw new BasesDataErrorException("tag name is null");
+		table = new Hashtable<String, String>();
+		initHashtable(table, tagNames);
+		if(!json.startsWith("["))
+			json = "["+json;
+		if(!json.endsWith("]"))
+			json += "]";
+		JSONArray arr = new JSONArray(json);
+		int length = arr.length();
+		for (int i = 0; i < length; i++) {
+				JSONObject jobj = arr.getJSONObject(i);
+	
+				for (String tag : tagNames) {
+					Object value = jobj.get(tag);
+					if (null != value && !value.equals(""))
+						table.put(tag, value.toString());
+				}
+		}
+		return table.size() == 0 ? null : table;
+	}
+
+	/**
+	 * 将制定tag下得json转换为map
+	 * @param json
+	 * @param tagName
+	 * @return
+	 * @throws JSONException
+	 * @throws BasesDataErrorException
+	 */
+	public Map<String, String> parserJSON2Map(String json, String tagName) throws JSONException, BasesDataErrorException {
+
+		Map<String, String> map = null;
+		JSONObject arr = new JSONObject(json);
+		if(arr.has(tagName)){
+			map = new HashMap<String, String>();
+			JSONObject jobj = arr.getJSONObject(tagName);
+			Iterator<String> iter = jobj.keys();
+			for (Iterator iterator = iter; iterator.hasNext();) {
+				String key = (String) iterator.next();
+				map.put(key, (String)jobj.get(key));
+			}
+			
+		}
+		
+		return map;
+	}
+
+	private void initHashtable(Hashtable<String, String> table, String[] tagNames) {
+		for (int i = 0; i < tagNames.length; i++) {
+			table.put(tagNames[i], "");
+		}
+		return;
+	}
+
+	/**
+	 * json解析方法，将json文档转换成对象的list集合，对于循环出现的节点使用，要求对象的属性命名等同于json节点名称.
+	 * 
+	 * @param json
+	 *            json文本
+	 * @param obj
+	 *            需要转换的目标对象
+	 * @param TagName
+	 *            需要转换对象对应于XML中的节点名称(每个循环节点的根节点名称)
+	 * @return Vector 如果没有匹配节点return null
+	 * @throws BasesDataErrorException
+	 * @throws JSONException
+	 */
+	@SuppressWarnings("rawtypes")
+	public Vector<Hashtable<String, String>> parserJSON2MapList(String json, String TagName)
+			throws XmlPullParserException, IOException, IllegalAccessException, InstantiationException, BasesDataErrorException,
+			JSONException {
+		Hashtable<String, String> table = null;
+		Vector<Hashtable<String, String>> vector = new Vector<Hashtable<String, String>>();// 初始化vector
+
+		JSONArray arr = new JSONArray(json);
+		int length = arr.length();
+		for (int i = 0; i < length; i++) {
+
+			JSONObject jobj = arr.getJSONObject(i);
+
+			JSONArray sub_arr = jobj.getJSONArray(TagName);
+			int subLength = sub_arr.length();
+			for (int j = 0; j < subLength; j++) {
+				JSONObject categoryJson = sub_arr.getJSONObject(j);
+				Iterator it = categoryJson.keys();
+
+				table = new Hashtable<String, String>();
+				while (it.hasNext()) {
+					String type = (String) it.next();
+					Object value = categoryJson.get(type);
+					if(null != value && !"null".equals(value) && !"".equals(value))
+						table.put(type, (String) categoryJson.get(type));
+				}
+				vector.add(table);
+			}
+		}
+
+		return vector;
+	}
+
+	/**
+	 * 对象赋值方法.
+	 * 
+	 * @param fieldName
+	 *            属性名称
+	 * @param fieldValue
+	 *            属性值
+	 * @param obj
+	 *            所属对象
+	 * @throws BasesDataErrorException
+	 */
+	private static void setValue(String fieldName, String fieldValue, Object obj) throws BasesDataErrorException {
+
+		if (fieldValue == null || fieldValue.length() == 0)
+			return;
+
+		Class<? extends Object> cls = obj.getClass();
+
+		String methodName = getMethodName(fieldName);
+		Method method;
+
+		try {
+			method = cls.getDeclaredMethod(methodName, String.class);
+			method.invoke(obj, new Object[] { fieldValue });
+		} catch (SecurityException e) {
+			throw new BasesDataErrorException(e.getMessage());
+		} catch (IllegalArgumentException e) {
+			throw new BasesDataErrorException(e.getMessage());
+		} catch (IllegalAccessException e) {
+			throw new BasesDataErrorException(e.getMessage());
+		} catch (InvocationTargetException e) {
+			throw new BasesDataErrorException(e.getMessage());
+		} catch (NoSuchMethodException e) {
+			Class<?> superclass = cls.getSuperclass();
+			try {
+				method = superclass.getDeclaredMethod(methodName, String.class);
+				method.invoke(obj, new Object[] { fieldValue });
+			} catch (SecurityException ex) {
+				throw new BasesDataErrorException(ex.getMessage());
+			} catch (NoSuchMethodException ex) {
+				return;
+			} catch (IllegalArgumentException ex) {
+				throw new BasesDataErrorException(ex.getMessage());
+			} catch (IllegalAccessException ex) {
+				throw new BasesDataErrorException(ex.getMessage());
+			} catch (InvocationTargetException ex) {
+				throw new BasesDataErrorException(ex.getMessage());
+			}
+		}
+	}
+
+	/**
+	 * 根据属性名得到相应的set方法名.
+	 * 
+	 * @param fieldName
+	 *            属性名
+	 * @return
+	 */
+	private static String getMethodName(String fieldName) {
+		char[] charArray = fieldName.toCharArray();
+		if (charArray[0] >= 'a' && charArray[0] <= 'z')
+			charArray[0] = (char) (charArray[0] - 32);
+		return "set" + new String(charArray);
+	}
+
+	public static void setValue(String fieldName, Object list, Object obj) throws BasesDataErrorException {
+		if (list == null)
+			return;
+
+		Class<? extends Object> cls = obj.getClass();
+
+		String methodName = getMethodName(fieldName);
+		Method method;
+
+		try {
+			method = cls.getDeclaredMethod(methodName, List.class);
+			method.invoke(obj, list);
+		} catch (SecurityException e) {
+			throw new BasesDataErrorException(e.getMessage());
+		} catch (IllegalArgumentException e) {
+			throw new BasesDataErrorException(e.getMessage());
+		} catch (IllegalAccessException e) {
+			throw new BasesDataErrorException(e.getMessage());
+		} catch (InvocationTargetException e) {
+			throw new BasesDataErrorException(e.getMessage());
+		} catch (NoSuchMethodException e) {
+			Class<?> superclass = cls.getSuperclass();
+			try {
+				method = superclass.getDeclaredMethod(methodName, List.class);
+				method.invoke(obj, list);
+			} catch (SecurityException ex) {
+				throw new BasesDataErrorException(ex.getMessage());
+			} catch (NoSuchMethodException ex) {
+				return;
+			} catch (IllegalArgumentException ex) {
+				throw new BasesDataErrorException(ex.getMessage());
+			} catch (IllegalAccessException ex) {
+				throw new BasesDataErrorException(ex.getMessage());
+			} catch (InvocationTargetException ex) {
+				throw new BasesDataErrorException(ex.getMessage());
+			}
+		}
+	}
+}
Index: app/src/main/java/com/google/zxing/camera/CameraConfigurationManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/google/zxing/camera/CameraConfigurationManager.java	(revision )
+++ app/src/main/java/com/google/zxing/camera/CameraConfigurationManager.java	(revision )
@@ -0,0 +1,300 @@
+/*
+ * Copyright (C) 2010 ZXing authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.zxing.camera;
+
+import android.content.Context;
+import android.graphics.Point;
+import android.hardware.Camera;
+import android.os.Build;
+import android.util.Log;
+import android.view.Display;
+import android.view.WindowManager;
+
+import java.lang.reflect.Method;
+import java.util.regex.Pattern;
+
+final class CameraConfigurationManager {
+
+  private static final String TAG = CameraConfigurationManager.class.getSimpleName();
+
+  private static final int TEN_DESIRED_ZOOM = 27;
+  private static final int DESIRED_SHARPNESS = 30;
+
+  private static final Pattern COMMA_PATTERN = Pattern.compile(",");
+
+  private final Context context;
+  private Point screenResolution;
+  private Point cameraResolution;
+  private int previewFormat;
+  private String previewFormatString;
+
+  CameraConfigurationManager(Context context) {
+    this.context = context;
+  }
+
+  /**
+   * Reads, one time, values from the camera that are needed by the app.
+   */
+  void initFromCameraParameters(Camera camera) {
+    Camera.Parameters parameters = camera.getParameters();
+    previewFormat = parameters.getPreviewFormat();
+    previewFormatString = parameters.get("preview-format");
+    Log.d(TAG, "Default preview format: " + previewFormat + '/' + previewFormatString);
+    WindowManager manager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
+    Display display = manager.getDefaultDisplay();
+    screenResolution = new Point(display.getWidth(), display.getHeight());
+    Log.d(TAG, "Screen resolution: " + screenResolution);
+    
+    /*   214-09-19 修改一下代码，解决取景框中二维码缩放问题     */
+//    cameraResolution = getCameraResolution(parameters, screenResolution);
+//    Log.d(TAG, "Camera resolution: " + screenResolution);
+    Point screenResolutionForCamera = new Point();
+    screenResolutionForCamera.x = screenResolution.x;
+    screenResolutionForCamera.y = screenResolution.y;
+    // preview size is always something like 480*320, other 320*480
+    if (screenResolution.x < screenResolution.y) {
+    	screenResolutionForCamera.x = screenResolution.y;
+    	screenResolutionForCamera.y = screenResolution.x;
+    }
+    cameraResolution = getCameraResolution(parameters, screenResolutionForCamera);
+    Log.d(TAG, "Camera resolution: " + screenResolutionForCamera);
+  }
+
+  /**
+   * Sets the camera up to take preview images which are used for both preview and decoding.
+   * We detect the preview format here so that buildLuminanceSource() can build an appropriate
+   * LuminanceSource subclass. In the future we may want to force YUV420SP as it's the smallest,
+   * and the planar Y can be used for barcode scanning without a copy in some cases.
+   */
+  void setDesiredCameraParameters(Camera camera) {
+    Camera.Parameters parameters = camera.getParameters();
+    Log.d(TAG, "Setting preview size: " + cameraResolution);
+    parameters.setPreviewSize(cameraResolution.x, cameraResolution.y);
+    setFlash(parameters);
+    setZoom(parameters);
+    //setSharpness(parameters);
+    //modify here
+    
+//    camera.setDisplayOrientation(90);
+    //����2.1
+    setDisplayOrientation(camera, 90);
+    camera.setParameters(parameters);
+  }
+
+  Point getCameraResolution() {
+    return cameraResolution;
+  }
+
+  Point getScreenResolution() {
+    return screenResolution;
+  }
+
+  int getPreviewFormat() {
+    return previewFormat;
+  }
+
+  String getPreviewFormatString() {
+    return previewFormatString;
+  }
+
+  private static Point getCameraResolution(Camera.Parameters parameters, Point screenResolution) {
+
+    String previewSizeValueString = parameters.get("preview-size-values");
+    // saw this on Xperia
+    if (previewSizeValueString == null) {
+      previewSizeValueString = parameters.get("preview-size-value");
+    }
+
+    Point cameraResolution = null;
+
+    if (previewSizeValueString != null) {
+      Log.d(TAG, "preview-size-values parameter: " + previewSizeValueString);
+      cameraResolution = findBestPreviewSizeValue(previewSizeValueString, screenResolution);
+    }
+
+    if (cameraResolution == null) {
+      // Ensure that the camera resolution is a multiple of 8, as the screen may not be.
+      cameraResolution = new Point(
+          (screenResolution.x >> 3) << 3,
+          (screenResolution.y >> 3) << 3);
+    }
+
+    return cameraResolution;
+  }
+
+  private static Point findBestPreviewSizeValue(CharSequence previewSizeValueString, Point screenResolution) {
+    int bestX = 0;
+    int bestY = 0;
+    int diff = Integer.MAX_VALUE;
+    for (String previewSize : COMMA_PATTERN.split(previewSizeValueString)) {
+
+      previewSize = previewSize.trim();
+      int dimPosition = previewSize.indexOf('x');
+      if (dimPosition < 0) {
+        Log.w(TAG, "Bad preview-size: " + previewSize);
+        continue;
+      }
+
+      int newX;
+      int newY;
+      try {
+        newX = Integer.parseInt(previewSize.substring(0, dimPosition));
+        newY = Integer.parseInt(previewSize.substring(dimPosition + 1));
+      } catch (NumberFormatException nfe) {
+        Log.w(TAG, "Bad preview-size: " + previewSize);
+        continue;
+      }
+
+      int newDiff = Math.abs(newX - screenResolution.x) + Math.abs(newY - screenResolution.y);
+      if (newDiff == 0) {
+        bestX = newX;
+        bestY = newY;
+        break;
+      } else if (newDiff < diff) {
+        bestX = newX;
+        bestY = newY;
+        diff = newDiff;
+      }
+
+    }
+
+    if (bestX > 0 && bestY > 0) {
+      return new Point(bestX, bestY);
+    }
+    return null;
+  }
+
+  private static int findBestMotZoomValue(CharSequence stringValues, int tenDesiredZoom) {
+    int tenBestValue = 0;
+    for (String stringValue : COMMA_PATTERN.split(stringValues)) {
+      stringValue = stringValue.trim();
+      double value;
+      try {
+        value = Double.parseDouble(stringValue);
+      } catch (NumberFormatException nfe) {
+        return tenDesiredZoom;
+      }
+      int tenValue = (int) (10.0 * value);
+      if (Math.abs(tenDesiredZoom - value) < Math.abs(tenDesiredZoom - tenBestValue)) {
+        tenBestValue = tenValue;
+      }
+    }
+    return tenBestValue;
+  }
+
+  private void setFlash(Camera.Parameters parameters) {
+    // FIXME: This is a hack to turn the flash off on the Samsung Galaxy.
+    // And this is a hack-hack to work around a different value on the Behold II
+    // Restrict Behold II check to Cupcake, per Samsung's advice
+    //if (Build.MODEL.contains("Behold II") &&
+    //    CameraManager.SDK_INT == Build.VERSION_CODES.CUPCAKE) {
+    if (Build.MODEL.contains("Behold II") && CameraManager.SDK_INT == 3) { // 3 = Cupcake
+      parameters.set("flash-value", 1);
+    } else {
+      parameters.set("flash-value", 2);
+    }
+    // This is the standard setting to turn the flash off that all devices should honor.
+    parameters.set("flash-mode", "off");
+  }
+
+  private void setZoom(Camera.Parameters parameters) {
+
+    String zoomSupportedString = parameters.get("zoom-supported");
+    if (zoomSupportedString != null && !Boolean.parseBoolean(zoomSupportedString)) {
+      return;
+    }
+
+    int tenDesiredZoom = TEN_DESIRED_ZOOM;
+
+    String maxZoomString = parameters.get("max-zoom");
+    if (maxZoomString != null) {
+      try {
+        int tenMaxZoom = (int) (10.0 * Double.parseDouble(maxZoomString));
+        if (tenDesiredZoom > tenMaxZoom) {
+          tenDesiredZoom = tenMaxZoom;
+        }
+      } catch (NumberFormatException nfe) {
+        Log.w(TAG, "Bad max-zoom: " + maxZoomString);
+      }
+    }
+
+    String takingPictureZoomMaxString = parameters.get("taking-picture-zoom-max");
+    if (takingPictureZoomMaxString != null) {
+      try {
+        int tenMaxZoom = Integer.parseInt(takingPictureZoomMaxString);
+        if (tenDesiredZoom > tenMaxZoom) {
+          tenDesiredZoom = tenMaxZoom;
+        }
+      } catch (NumberFormatException nfe) {
+        Log.w(TAG, "Bad taking-picture-zoom-max: " + takingPictureZoomMaxString);
+      }
+    }
+
+    String motZoomValuesString = parameters.get("mot-zoom-values");
+    if (motZoomValuesString != null) {
+      tenDesiredZoom = findBestMotZoomValue(motZoomValuesString, tenDesiredZoom);
+    }
+
+    String motZoomStepString = parameters.get("mot-zoom-step");
+    if (motZoomStepString != null) {
+      try {
+        double motZoomStep = Double.parseDouble(motZoomStepString.trim());
+        int tenZoomStep = (int) (10.0 * motZoomStep);
+        if (tenZoomStep > 1) {
+          tenDesiredZoom -= tenDesiredZoom % tenZoomStep;
+        }
+      } catch (NumberFormatException nfe) {
+        // continue
+      }
+    }
+
+    // Set zoom. This helps encourage the user to pull back.
+    // Some devices like the Behold have a zoom parameter
+    if (maxZoomString != null || motZoomValuesString != null) {
+      parameters.set("zoom", String.valueOf(tenDesiredZoom / 10.0));
+    }
+
+    // Most devices, like the Hero, appear to expose this zoom parameter.
+    // It takes on values like "27" which appears to mean 2.7x zoom
+    if (takingPictureZoomMaxString != null) {
+      parameters.set("taking-picture-zoom", tenDesiredZoom);
+    }
+  }
+
+	public static int getDesiredSharpness() {
+		return DESIRED_SHARPNESS;
+	}
+	
+	/**
+	 * compatible  1.6
+	 * @param camera
+	 * @param angle
+	 */
+	protected void setDisplayOrientation(Camera camera, int angle){  
+        Method downPolymorphic;  
+        try  
+        {  
+            downPolymorphic = camera.getClass().getMethod("setDisplayOrientation", new Class[] { int.class });  
+            if (downPolymorphic != null)  
+                downPolymorphic.invoke(camera, new Object[] { angle });  
+        }  
+        catch (Exception e1)  
+        {  
+        }  
+   }  
+
+}
Index: app/src/main/res/layout/activity_main_foot.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_main_foot.xml	(revision )
+++ app/src/main/res/layout/activity_main_foot.xml	(revision )
@@ -0,0 +1,70 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="@dimen/main_foot_height"
+    android:orientation="vertical">
+    <TextView
+        android:layout_width="fill_parent"
+        android:layout_height="2dip"
+        android:background="@color/common_list_item_divide_bg"/>
+
+    <FrameLayout
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:background="@color/main_foot_bg">
+
+        <RadioGroup
+            android:id="@+id/main_tab_group"
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:layout_gravity="bottom"
+            android:gravity="center"
+            android:orientation="horizontal" >
+            <!-- android:background="@drawable/bottom1" -->
+
+            <RadioButton
+                android:id="@+id/main_tab_0"
+                style="@style/MMTabButton"
+                android:layout_gravity="center"
+                android:text="@string/main_foot_1"
+                android:drawableTop="@drawable/main_foot_shop_selector"
+                android:tag="a"/>
+
+            <RadioButton
+                android:id="@+id/main_tab_1"
+                style="@style/MMTabButton"
+                android:checked="true"
+                android:text="@string/main_foot_2"
+                android:drawableTop="@drawable/main_foot_news_selector"
+                android:tag="b"/>
+
+            <RadioButton
+                android:id="@+id/main_tab_2"
+                style="@style/MMTabButton"
+                android:text="@string/main_foot_3"
+                android:drawableTop="@drawable/main_foot_mine_selector"
+                android:tag="c"/>
+
+        </RadioGroup>
+
+        <TextView
+            android:id="@+id/main_tab_new_message"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_horizontal|top"
+            android:layout_marginLeft="60dip"
+            android:layout_marginTop="1dip"
+            android:gravity="center"
+            android:text="1"
+            android:textColor="#ffffff"
+            android:textSize="10sp"
+            android:visibility="gone" />
+        <!-- android:background="@drawable/tips" -->
+        <LinearLayout
+            android:id="@+id/main_foot_flag"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal"
+            android:layout_gravity="bottom"/>
+    </FrameLayout>
+</LinearLayout>
\ No newline at end of file
Index: app/src/main/res/layout/page_login.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/page_login.xml	(revision )
+++ app/src/main/res/layout/page_login.xml	(revision )
@@ -0,0 +1,222 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/common_background_all_page">
+
+    <include layout="@layout/common_head"/>
+
+    <ScrollView
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:orientation="vertical"
+            android:gravity="center_horizontal">
+
+            <TextView
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="@string/login_title_sub"
+                android:textColor="@color/common_font_color_49a81a"
+                android:textSize="@dimen/common_font_size_16"
+                android:layout_gravity="center_horizontal"
+                android:layout_marginTop="@dimen/common_content_margin_30"/>
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="vertical"
+                android:layout_marginRight="@dimen/common_content_margin_20"
+                android:layout_marginLeft="@dimen/common_content_margin_20">
+                <RelativeLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="@dimen/login_edit_height"
+                    android:layout_marginTop="@dimen/common_content_margin_15">
+
+                    <TextView
+                        android:id="@+id/login_edit_label_user"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_alignParentRight="true"
+                        android:text="@string/login_edit_user"
+                        android:textColor="@color/common_font_color_000000"
+                        android:textSize="@dimen/common_font_size_14"
+                        android:layout_centerVertical="true"/>
+                    <EditText
+                        android:id="@+id/login_edit_user"
+                        android:layout_width="fill_parent"
+                        android:layout_height="wrap_content"
+                        android:hint="@string/login_edit_user_hint"
+                        android:inputType="text|textEmailAddress"
+                        android:textColor="@color/common_font_color_000000"
+                        android:textSize="@dimen/common_font_size_12"
+                        android:layout_centerVertical="true"
+                        android:layout_toLeftOf="@id/login_edit_label_user"
+                        android:gravity="right|center_vertical"
+                        android:paddingRight="@dimen/common_content_margin_5"
+                        android:background="@null"
+                        android:singleLine="true"/>
+                    <TextView
+                        android:id="@+id/login_edit_moreuser"
+                        android:layout_width="@dimen/common_head_back_height"
+                        android:layout_height="@dimen/common_head_back_height"
+                        android:layout_alignParentLeft="true"
+                        android:background="@mipmap/common_arrow_down"
+                        android:layout_centerVertical="true"
+                        android:clickable="true"
+                        android:onClick="buttonOnClick"/>
+                    <TextView
+                        android:layout_width="match_parent"
+                        android:layout_height="2dip"
+                        android:background="@color/common_font_color_49a81a"
+                        android:layout_alignParentBottom="true"/>
+                </RelativeLayout>
+                <RelativeLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="@dimen/login_edit_height"
+                    android:layout_marginTop="@dimen/common_content_margin_15">
+
+                    <TextView
+                        android:id="@+id/login_edit_label_password"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_alignParentRight="true"
+                        android:text="@string/login_edit_password"
+                        android:textColor="@color/common_font_color_000000"
+                        android:textSize="@dimen/common_font_size_14"
+                        android:layout_centerVertical="true"/>
+                    <EditText
+                        android:id="@+id/login_edit_password"
+                        android:layout_width="fill_parent"
+                        android:layout_height="wrap_content"
+                        android:hint="@string/login_edit_password_hint"
+                        android:inputType="textPassword"
+                        android:textColor="@color/common_font_color_000000"
+                        android:textSize="@dimen/common_font_size_12"
+                        android:layout_centerVertical="true"
+                        android:layout_toLeftOf="@id/login_edit_label_password"
+                        android:gravity="right|center_vertical"
+                        android:paddingRight="@dimen/common_content_margin_5"
+                        android:background="@null"
+                        android:singleLine="true"
+                        android:maxLength="15"/>
+                    <TextView
+                        android:layout_width="match_parent"
+                        android:layout_height="2dip"
+                        android:background="@color/common_font_color_49a81a"
+                        android:layout_alignParentBottom="true"/>
+                </RelativeLayout>
+            </LinearLayout>
+            <TextView
+                android:id="@+id/login_btn_submit"
+                android:layout_width="fill_parent"
+                android:layout_height="@dimen/fragment_mine_exit_height"
+                android:text="@string/fragment_mine_head_login"
+                android:background="@drawable/common_bg_a5a4a4"
+                android:layout_marginTop="@dimen/common_content_margin_30"
+                android:layout_marginLeft="@dimen/common_content_margin_50"
+                android:layout_marginRight="@dimen/common_content_margin_50"
+                android:layout_marginBottom="@dimen/common_content_margin_10"
+                android:gravity="center"
+                android:textSize="@dimen/common_font_size_16"
+                android:textColor="@color/common_font_color_ffffff"
+                android:clickable="true"
+                android:onClick="buttonOnClick"/>
+            <RelativeLayout
+                android:layout_width="match_parent"
+                android:layout_height="@dimen/login_edit_height"
+                android:orientation="horizontal">
+                <TextView
+                    android:id="@+id/login_btn_rule"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_centerVertical="true"
+                    android:layout_alignParentLeft="true"
+                    android:layout_marginLeft="@dimen/common_content_margin_20"
+                    android:text="@string/login_other_rule"
+                    android:textSize="@dimen/common_font_size_12"
+                    android:textColor="@color/common_font_color_000000"
+                    android:clickable="true"
+                    android:onClick="buttonOnClick"/>
+                <TextView
+                    android:id="@+id/login_btn_find_password"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_centerVertical="true"
+                    android:layout_alignParentRight="true"
+                    android:layout_marginRight="@dimen/common_content_margin_20"
+                    android:text="@string/login_other_findpwd"
+                    android:textSize="@dimen/common_font_size_12"
+                    android:textColor="@color/common_font_color_000000"
+                    android:clickable="true"
+                    android:onClick="buttonOnClick"/>
+            </RelativeLayout>
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="@dimen/login_edit_height"
+                android:orientation="horizontal"
+                android:layout_marginTop="@dimen/common_content_margin_30">
+                <TextView
+                    android:layout_width="match_parent"
+                    android:layout_height="2dip"
+                    android:background="@color/common_list_item_divide_bg"
+                    android:layout_gravity="center_vertical"
+                    android:layout_weight="3"/>
+                <TextView
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_gravity="center_vertical"
+                    android:text="@string/login_other_loginstyle"
+                    android:textSize="@dimen/common_font_size_12"
+                    android:textColor="@color/common_font_color_868585"
+                    android:layout_weight="2"
+                    android:gravity="center_horizontal"/>
+                <TextView
+                    android:layout_width="match_parent"
+                    android:layout_height="2dip"
+                    android:background="@color/common_list_item_divide_bg"
+                    android:layout_gravity="center_vertical"
+                    android:layout_weight="3"/>
+            </LinearLayout>
+            <LinearLayout
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:orientation="horizontal"
+                android:layout_gravity="center_horizontal"
+                android:layout_marginTop="@dimen/common_content_margin_30"
+                android:layout_marginBottom="@dimen/common_content_margin_20">
+                <TextView
+                    android:id="@+id/login_btn_otherstyle_facebook"
+                    android:layout_width="@dimen/login_style_btn_height"
+                    android:layout_height="@dimen/login_style_btn_height"
+                    android:background="@drawable/login_style_facebook_selector"
+                    android:layout_margin="@dimen/common_content_margin_5"
+                    android:clickable="true"
+                    android:onClick="buttonOnClick"/>
+                <TextView
+                    android:id="@+id/login_btn_otherstyle_google"
+                    android:layout_width="@dimen/login_style_btn_height"
+                    android:layout_height="@dimen/login_style_btn_height"
+                    android:background="@drawable/login_style_google_selector"
+                    android:layout_margin="@dimen/common_content_margin_5"
+                    android:clickable="true"
+                    android:onClick="buttonOnClick"/>
+            </LinearLayout>
+            <TextView
+                android:id="@+id/login_btn_register"
+                android:layout_width="@dimen/login_register_btn_width"
+                android:layout_height="@dimen/login_register_btn_height"
+                android:background="@drawable/common_button_2_selector"
+                android:layout_margin="@dimen/common_content_margin_10"
+                android:clickable="true"
+                android:onClick="buttonOnClick"
+                android:gravity="center"
+                android:text="@string/login_register"
+                android:textColor="@color/common_font_color_49a81a"
+                android:textSize="@dimen/common_font_size_12"/>
+        </LinearLayout>
+    </ScrollView>
+</LinearLayout>
\ No newline at end of file
Index: app/src/main/java/com/nineoldandroids/animation/TimeAnimator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nineoldandroids/animation/TimeAnimator.java	(revision )
+++ app/src/main/java/com/nineoldandroids/animation/TimeAnimator.java	(revision )
@@ -0,0 +1,78 @@
+package com.nineoldandroids.animation;
+
+/**
+ * This class provides a simple callback mechanism to listeners that is synchronized with other
+ * animators in the system. There is no duration, interpolation, or object value-setting
+ * with this Animator. Instead, it is simply started and proceeds to send out events on every
+ * animation frame to its TimeListener (if set), with information about this animator,
+ * the total elapsed time, and the time since the last animation frame.
+ *
+ * @hide
+ */
+public class TimeAnimator extends ValueAnimator {
+
+    private TimeListener mListener;
+    private long mPreviousTime = -1;
+
+    @Override
+    boolean animationFrame(long currentTime) {
+        if (mPlayingState == STOPPED) {
+            mPlayingState = RUNNING;
+            if (mSeekTime < 0) {
+                mStartTime = currentTime;
+            } else {
+                mStartTime = currentTime - mSeekTime;
+                // Now that we're playing, reset the seek time
+                mSeekTime = -1;
+            }
+        }
+        if (mListener != null) {
+            long totalTime = currentTime - mStartTime;
+            long deltaTime = (mPreviousTime < 0) ? 0 : (currentTime - mPreviousTime);
+            mPreviousTime = currentTime;
+            mListener.onTimeUpdate(this, totalTime, deltaTime);
+        }
+        return false;
+    }
+
+    /**
+     * Sets a listener that is sent update events throughout the life of
+     * an animation.
+     *
+     * @param listener the listener to be set.
+     */
+    public void setTimeListener(TimeListener listener) {
+        mListener = listener;
+    }
+
+    @Override
+    void animateValue(float fraction) {
+        // Noop
+    }
+
+    @Override
+    void initAnimation() {
+        // noop
+    }
+
+    /**
+     * Implementors of this interface can set themselves as update listeners
+     * to a <code>TimeAnimator</code> instance to receive callbacks on every animation
+     * frame to receive the total time since the animator started and the delta time
+     * since the last frame. The first time the listener is called, totalTime and
+     * deltaTime should both be zero.
+     *
+     * @hide
+     */
+    public static interface TimeListener {
+        /**
+         * <p>Notifies listeners of the occurrence of another frame of the animation,
+         * along with information about the elapsed time.</p>
+         *
+         * @param animation The animator sending out the notification.
+         * @param totalTime The
+         */
+        void onTimeUpdate(TimeAnimator animation, long totalTime, long deltaTime);
+
+    }
+}
Index: app/src/main/java/com/nineoldandroids/view/ViewHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nineoldandroids/view/ViewHelper.java	(revision )
+++ app/src/main/java/com/nineoldandroids/view/ViewHelper.java	(revision )
@@ -0,0 +1,292 @@
+package com.nineoldandroids.view;
+
+import android.view.View;
+
+import static com.nineoldandroids.view.animation.AnimatorProxy.NEEDS_PROXY;
+import static com.nineoldandroids.view.animation.AnimatorProxy.wrap;
+
+public final class ViewHelper {
+    private ViewHelper() {}
+
+    public static float getAlpha(View view) {
+        return NEEDS_PROXY ? wrap(view).getAlpha() : Honeycomb.getAlpha(view);
+    }
+
+    public static void setAlpha(View view, float alpha) {
+        if (NEEDS_PROXY) {
+            wrap(view).setAlpha(alpha);
+        } else {
+            Honeycomb.setAlpha(view, alpha);
+        }
+    }
+
+    public static float getPivotX(View view) {
+        return NEEDS_PROXY ? wrap(view).getPivotX() : Honeycomb.getPivotX(view);
+    }
+
+    public static void setPivotX(View view, float pivotX) {
+        if (NEEDS_PROXY) {
+            wrap(view).setPivotX(pivotX);
+        } else {
+            Honeycomb.setPivotX(view, pivotX);
+        }
+    }
+
+    public static float getPivotY(View view) {
+        return NEEDS_PROXY ? wrap(view).getPivotY() : Honeycomb.getPivotY(view);
+    }
+
+    public static void setPivotY(View view, float pivotY) {
+        if (NEEDS_PROXY) {
+            wrap(view).setPivotY(pivotY);
+        } else {
+            Honeycomb.setPivotY(view, pivotY);
+        }
+    }
+
+    public static float getRotation(View view) {
+        return NEEDS_PROXY ? wrap(view).getRotation() : Honeycomb.getRotation(view);
+    }
+
+    public static void setRotation(View view, float rotation) {
+        if (NEEDS_PROXY) {
+            wrap(view).setRotation(rotation);
+        } else {
+            Honeycomb.setRotation(view, rotation);
+        }
+    }
+
+    public static float getRotationX(View view) {
+        return NEEDS_PROXY ? wrap(view).getRotationX() : Honeycomb.getRotationX(view);
+    }
+
+    public static void setRotationX(View view, float rotationX) {
+        if (NEEDS_PROXY) {
+            wrap(view).setRotationX(rotationX);
+        } else {
+            Honeycomb.setRotationX(view, rotationX);
+        }
+    }
+
+    public static float getRotationY(View view) {
+        return NEEDS_PROXY ? wrap(view).getRotationY() : Honeycomb.getRotationY(view);
+    }
+
+    public static void setRotationY(View view, float rotationY) {
+        if (NEEDS_PROXY) {
+            wrap(view).setRotationY(rotationY);
+        } else {
+            Honeycomb.setRotationY(view, rotationY);
+        }
+    }
+
+    public static float getScaleX(View view) {
+        return NEEDS_PROXY ? wrap(view).getScaleX() : Honeycomb.getScaleX(view);
+    }
+
+    public static void setScaleX(View view, float scaleX) {
+        if (NEEDS_PROXY) {
+            wrap(view).setScaleX(scaleX);
+        } else {
+            Honeycomb.setScaleX(view, scaleX);
+        }
+    }
+
+    public static float getScaleY(View view) {
+        return NEEDS_PROXY ? wrap(view).getScaleY() : Honeycomb.getScaleY(view);
+    }
+
+    public static void setScaleY(View view, float scaleY) {
+        if (NEEDS_PROXY) {
+            wrap(view).setScaleY(scaleY);
+        } else {
+            Honeycomb.setScaleY(view, scaleY);
+        }
+    }
+
+    public static float getScrollX(View view) {
+        return NEEDS_PROXY ? wrap(view).getScrollX() : Honeycomb.getScrollX(view);
+    }
+
+    public static void setScrollX(View view, int scrollX) {
+        if (NEEDS_PROXY) {
+            wrap(view).setScrollX(scrollX);
+        } else {
+            Honeycomb.setScrollX(view, scrollX);
+        }
+    }
+
+    public static float getScrollY(View view) {
+        return NEEDS_PROXY ? wrap(view).getScrollY() : Honeycomb.getScrollY(view);
+    }
+
+    public static void setScrollY(View view, int scrollY) {
+        if (NEEDS_PROXY) {
+            wrap(view).setScrollY(scrollY);
+        } else {
+            Honeycomb.setScrollY(view, scrollY);
+        }
+    }
+
+    public static float getTranslationX(View view) {
+        return NEEDS_PROXY ? wrap(view).getTranslationX() : Honeycomb.getTranslationX(view);
+    }
+
+    public static void setTranslationX(View view, float translationX) {
+        if (NEEDS_PROXY) {
+            wrap(view).setTranslationX(translationX);
+        } else {
+            Honeycomb.setTranslationX(view, translationX);
+        }
+    }
+
+    public static float getTranslationY(View view) {
+        return NEEDS_PROXY ? wrap(view).getTranslationY() : Honeycomb.getTranslationY(view);
+    }
+
+    public static void setTranslationY(View view, float translationY) {
+        if (NEEDS_PROXY) {
+            wrap(view).setTranslationY(translationY);
+        } else {
+            Honeycomb.setTranslationY(view, translationY);
+        }
+    }
+
+    public static float getX(View view) {
+        return NEEDS_PROXY ? wrap(view).getX() : Honeycomb.getX(view);
+    }
+
+    public static void setX(View view, float x) {
+        if (NEEDS_PROXY) {
+            wrap(view).setX(x);
+        } else {
+            Honeycomb.setX(view, x);
+        }
+    }
+
+    public static float getY(View view) {
+        return NEEDS_PROXY ? wrap(view).getY() : Honeycomb.getY(view);
+    }
+
+    public static void setY(View view, float y) {
+        if (NEEDS_PROXY) {
+            wrap(view).setY(y);
+        } else {
+            Honeycomb.setY(view, y);
+        }
+    }
+
+    private static final class Honeycomb {
+        static float getAlpha(View view) {
+            return view.getAlpha();
+        }
+
+        static void setAlpha(View view, float alpha) {
+            view.setAlpha(alpha);
+        }
+
+        static float getPivotX(View view) {
+            return view.getPivotX();
+        }
+
+        static void setPivotX(View view, float pivotX) {
+            view.setPivotX(pivotX);
+        }
+
+        static float getPivotY(View view) {
+            return view.getPivotY();
+        }
+
+        static void setPivotY(View view, float pivotY) {
+            view.setPivotY(pivotY);
+        }
+
+        static float getRotation(View view) {
+            return view.getRotation();
+        }
+
+        static void setRotation(View view, float rotation) {
+            view.setRotation(rotation);
+        }
+
+        static float getRotationX(View view) {
+            return view.getRotationX();
+        }
+
+        static void setRotationX(View view, float rotationX) {
+            view.setRotationX(rotationX);
+        }
+
+        static float getRotationY(View view) {
+            return view.getRotationY();
+        }
+
+        static void setRotationY(View view, float rotationY) {
+            view.setRotationY(rotationY);
+        }
+
+        static float getScaleX(View view) {
+            return view.getScaleX();
+        }
+
+        static void setScaleX(View view, float scaleX) {
+            view.setScaleX(scaleX);
+        }
+
+        static float getScaleY(View view) {
+            return view.getScaleY();
+        }
+
+        static void setScaleY(View view, float scaleY) {
+            view.setScaleY(scaleY);
+        }
+
+        static float getScrollX(View view) {
+            return view.getScrollX();
+        }
+
+        static void setScrollX(View view, int scrollX) {
+            view.setScrollX(scrollX);
+        }
+
+        static float getScrollY(View view) {
+            return view.getScrollY();
+        }
+
+        static void setScrollY(View view, int scrollY) {
+            view.setScrollY(scrollY);
+        }
+
+        static float getTranslationX(View view) {
+            return view.getTranslationX();
+        }
+
+        static void setTranslationX(View view, float translationX) {
+            view.setTranslationX(translationX);
+        }
+
+        static float getTranslationY(View view) {
+            return view.getTranslationY();
+        }
+
+        static void setTranslationY(View view, float translationY) {
+            view.setTranslationY(translationY);
+        }
+
+        static float getX(View view) {
+            return view.getX();
+        }
+
+        static void setX(View view, float x) {
+            view.setX(x);
+        }
+
+        static float getY(View view) {
+            return view.getY();
+        }
+
+        static void setY(View view, float y) {
+            view.setY(y);
+        }
+    }
+}
Index: app/src/main/java/com/nineoldandroids/animation/ValueAnimator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nineoldandroids/animation/ValueAnimator.java	(revision )
+++ app/src/main/java/com/nineoldandroids/animation/ValueAnimator.java	(revision )
@@ -0,0 +1,1264 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.nineoldandroids.animation;
+
+import android.os.Handler;
+import android.os.Looper;
+import android.os.Message;
+import android.util.AndroidRuntimeException;
+import android.view.animation.AccelerateDecelerateInterpolator;
+import android.view.animation.AnimationUtils;
+import android.view.animation.Interpolator;
+import android.view.animation.LinearInterpolator;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+
+/**
+ * This class provides a simple timing engine for running animations
+ * which calculate animated values and set them on target objects.
+ *
+ * <p>There is a single timing pulse that all animations use. It runs in a
+ * custom handler to ensure that property changes happen on the UI thread.</p>
+ *
+ * <p>By default, ValueAnimator uses non-linear time interpolation, via the
+ * {@link AccelerateDecelerateInterpolator} class, which accelerates into and decelerates
+ * out of an animation. This behavior can be changed by calling
+ * {@link ValueAnimator#setInterpolator(TimeInterpolator)}.</p>
+ */
+public class ValueAnimator extends Animator {
+
+    /**
+     * Internal constants
+     */
+
+    /*
+     * The default amount of time in ms between animation frames
+     */
+    private static final long DEFAULT_FRAME_DELAY = 10;
+
+    /**
+     * Messages sent to timing handler: START is sent when an animation first begins, FRAME is sent
+     * by the handler to itself to process the next animation frame
+     */
+    static final int ANIMATION_START = 0;
+    static final int ANIMATION_FRAME = 1;
+
+    /**
+     * Values used with internal variable mPlayingState to indicate the current state of an
+     * animation.
+     */
+    static final int STOPPED    = 0; // Not yet playing
+    static final int RUNNING    = 1; // Playing normally
+    static final int SEEKED     = 2; // Seeked to some time value
+
+    /**
+     * Internal variables
+     * NOTE: This object implements the clone() method, making a deep copy of any referenced
+     * objects. As other non-trivial fields are added to this class, make sure to add logic
+     * to clone() to make deep copies of them.
+     */
+
+    // The first time that the animation's animateFrame() method is called. This time is used to
+    // determine elapsed time (and therefore the elapsed fraction) in subsequent calls
+    // to animateFrame()
+    long mStartTime;
+
+    /**
+     * Set when setCurrentPlayTime() is called. If negative, animation is not currently seeked
+     * to a value.
+     */
+    long mSeekTime = -1;
+
+    // TODO: We access the following ThreadLocal variables often, some of them on every update.
+    // If ThreadLocal access is significantly expensive, we may want to put all of these
+    // fields into a structure sot hat we just access ThreadLocal once to get the reference
+    // to that structure, then access the structure directly for each field.
+
+    // The static sAnimationHandler processes the internal timing loop on which all animations
+    // are based
+    private static ThreadLocal<AnimationHandler> sAnimationHandler =
+            new ThreadLocal<AnimationHandler>();
+
+    // The per-thread list of all active animations
+    private static final ThreadLocal<ArrayList<ValueAnimator>> sAnimations =
+            new ThreadLocal<ArrayList<ValueAnimator>>() {
+                @Override
+                protected ArrayList<ValueAnimator> initialValue() {
+                    return new ArrayList<ValueAnimator>();
+                }
+            };
+
+    // The per-thread set of animations to be started on the next animation frame
+    private static final ThreadLocal<ArrayList<ValueAnimator>> sPendingAnimations =
+            new ThreadLocal<ArrayList<ValueAnimator>>() {
+                @Override
+                protected ArrayList<ValueAnimator> initialValue() {
+                    return new ArrayList<ValueAnimator>();
+                }
+            };
+
+    /**
+     * Internal per-thread collections used to avoid set collisions as animations start and end
+     * while being processed.
+     */
+    private static final ThreadLocal<ArrayList<ValueAnimator>> sDelayedAnims =
+            new ThreadLocal<ArrayList<ValueAnimator>>() {
+                @Override
+                protected ArrayList<ValueAnimator> initialValue() {
+                    return new ArrayList<ValueAnimator>();
+                }
+            };
+
+    private static final ThreadLocal<ArrayList<ValueAnimator>> sEndingAnims =
+            new ThreadLocal<ArrayList<ValueAnimator>>() {
+                @Override
+                protected ArrayList<ValueAnimator> initialValue() {
+                    return new ArrayList<ValueAnimator>();
+                }
+            };
+
+    private static final ThreadLocal<ArrayList<ValueAnimator>> sReadyAnims =
+            new ThreadLocal<ArrayList<ValueAnimator>>() {
+                @Override
+                protected ArrayList<ValueAnimator> initialValue() {
+                    return new ArrayList<ValueAnimator>();
+                }
+            };
+
+    // The time interpolator to be used if none is set on the animation
+    private static final /*Time*/Interpolator sDefaultInterpolator =
+            new AccelerateDecelerateInterpolator();
+
+    // type evaluators for the primitive types handled by this implementation
+    private static final TypeEvaluator sIntEvaluator = new IntEvaluator();
+    private static final TypeEvaluator sFloatEvaluator = new FloatEvaluator();
+
+    /**
+     * Used to indicate whether the animation is currently playing in reverse. This causes the
+     * elapsed fraction to be inverted to calculate the appropriate values.
+     */
+    private boolean mPlayingBackwards = false;
+
+    /**
+     * This variable tracks the current iteration that is playing. When mCurrentIteration exceeds the
+     * repeatCount (if repeatCount!=INFINITE), the animation ends
+     */
+    private int mCurrentIteration = 0;
+
+    /**
+     * Tracks current elapsed/eased fraction, for querying in getAnimatedFraction().
+     */
+    private float mCurrentFraction = 0f;
+
+    /**
+     * Tracks whether a startDelay'd animation has begun playing through the startDelay.
+     */
+    private boolean mStartedDelay = false;
+
+    /**
+     * Tracks the time at which the animation began playing through its startDelay. This is
+     * different from the mStartTime variable, which is used to track when the animation became
+     * active (which is when the startDelay expired and the animation was added to the active
+     * animations list).
+     */
+    private long mDelayStartTime;
+
+    /**
+     * Flag that represents the current state of the animation. Used to figure out when to start
+     * an animation (if state == STOPPED). Also used to end an animation that
+     * has been cancel()'d or end()'d since the last animation frame. Possible values are
+     * STOPPED, RUNNING, SEEKED.
+     */
+    int mPlayingState = STOPPED;
+
+    /**
+     * Additional playing state to indicate whether an animator has been start()'d. There is
+     * some lag between a call to start() and the first animation frame. We should still note
+     * that the animation has been started, even if it's first animation frame has not yet
+     * happened, and reflect that state in isRunning().
+     * Note that delayed animations are different: they are not started until their first
+     * animation frame, which occurs after their delay elapses.
+     */
+    private boolean mRunning = false;
+
+    /**
+     * Additional playing state to indicate whether an animator has been start()'d, whether or
+     * not there is a nonzero startDelay.
+     */
+    private boolean mStarted = false;
+
+    /**
+     * Flag that denotes whether the animation is set up and ready to go. Used to
+     * set up animation that has not yet been started.
+     */
+    boolean mInitialized = false;
+
+    //
+    // Backing variables
+    //
+
+    // How long the animation should last in ms
+    private long mDuration = 300;
+
+    // The amount of time in ms to delay starting the animation after start() is called
+    private long mStartDelay = 0;
+
+    // The number of milliseconds between animation frames
+    private static long sFrameDelay = DEFAULT_FRAME_DELAY;
+
+    // The number of times the animation will repeat. The default is 0, which means the animation
+    // will play only once
+    private int mRepeatCount = 0;
+
+    /**
+     * The type of repetition that will occur when repeatMode is nonzero. RESTART means the
+     * animation will start from the beginning on every new cycle. REVERSE means the animation
+     * will reverse directions on each iteration.
+     */
+    private int mRepeatMode = RESTART;
+
+    /**
+     * The time interpolator to be used. The elapsed fraction of the animation will be passed
+     * through this interpolator to calculate the interpolated fraction, which is then used to
+     * calculate the animated values.
+     */
+    private /*Time*/Interpolator mInterpolator = sDefaultInterpolator;
+
+    /**
+     * The set of listeners to be sent events through the life of an animation.
+     */
+    private ArrayList<AnimatorUpdateListener> mUpdateListeners = null;
+
+    /**
+     * The property/value sets being animated.
+     */
+    PropertyValuesHolder[] mValues;
+
+    /**
+     * A hashmap of the PropertyValuesHolder objects. This map is used to lookup animated values
+     * by property name during calls to getAnimatedValue(String).
+     */
+    HashMap<String, PropertyValuesHolder> mValuesMap;
+
+    /**
+     * Public constants
+     */
+
+    /**
+     * When the animation reaches the end and <code>repeatCount</code> is INFINITE
+     * or a positive value, the animation restarts from the beginning.
+     */
+    public static final int RESTART = 1;
+    /**
+     * When the animation reaches the end and <code>repeatCount</code> is INFINITE
+     * or a positive value, the animation reverses direction on every iteration.
+     */
+    public static final int REVERSE = 2;
+    /**
+     * This value used used with the {@link #setRepeatCount(int)} property to repeat
+     * the animation indefinitely.
+     */
+    public static final int INFINITE = -1;
+
+    /**
+     * Creates a new ValueAnimator object. This default constructor is primarily for
+     * use internally; the factory methods which take parameters are more generally
+     * useful.
+     */
+    public ValueAnimator() {
+    }
+
+    /**
+     * Constructs and returns a ValueAnimator that animates between int values. A single
+     * value implies that that value is the one being animated to. However, this is not typically
+     * useful in a ValueAnimator object because there is no way for the object to determine the
+     * starting value for the animation (unlike ObjectAnimator, which can derive that value
+     * from the target object and property being animated). Therefore, there should typically
+     * be two or more values.
+     *
+     * @param values A set of values that the animation will animate between over time.
+     * @return A ValueAnimator object that is set up to animate between the given values.
+     */
+    public static ValueAnimator ofInt(int... values) {
+        ValueAnimator anim = new ValueAnimator();
+        anim.setIntValues(values);
+        return anim;
+    }
+
+    /**
+     * Constructs and returns a ValueAnimator that animates between float values. A single
+     * value implies that that value is the one being animated to. However, this is not typically
+     * useful in a ValueAnimator object because there is no way for the object to determine the
+     * starting value for the animation (unlike ObjectAnimator, which can derive that value
+     * from the target object and property being animated). Therefore, there should typically
+     * be two or more values.
+     *
+     * @param values A set of values that the animation will animate between over time.
+     * @return A ValueAnimator object that is set up to animate between the given values.
+     */
+    public static ValueAnimator ofFloat(float... values) {
+        ValueAnimator anim = new ValueAnimator();
+        anim.setFloatValues(values);
+        return anim;
+    }
+
+    /**
+     * Constructs and returns a ValueAnimator that animates between the values
+     * specified in the PropertyValuesHolder objects.
+     *
+     * @param values A set of PropertyValuesHolder objects whose values will be animated
+     * between over time.
+     * @return A ValueAnimator object that is set up to animate between the given values.
+     */
+    public static ValueAnimator ofPropertyValuesHolder(PropertyValuesHolder... values) {
+        ValueAnimator anim = new ValueAnimator();
+        anim.setValues(values);
+        return anim;
+    }
+    /**
+     * Constructs and returns a ValueAnimator that animates between Object values. A single
+     * value implies that that value is the one being animated to. However, this is not typically
+     * useful in a ValueAnimator object because there is no way for the object to determine the
+     * starting value for the animation (unlike ObjectAnimator, which can derive that value
+     * from the target object and property being animated). Therefore, there should typically
+     * be two or more values.
+     *
+     * <p>Since ValueAnimator does not know how to animate between arbitrary Objects, this
+     * factory method also takes a TypeEvaluator object that the ValueAnimator will use
+     * to perform that interpolation.
+     *
+     * @param evaluator A TypeEvaluator that will be called on each animation frame to
+     * provide the ncessry interpolation between the Object values to derive the animated
+     * value.
+     * @param values A set of values that the animation will animate between over time.
+     * @return A ValueAnimator object that is set up to animate between the given values.
+     */
+    public static ValueAnimator ofObject(TypeEvaluator evaluator, Object... values) {
+        ValueAnimator anim = new ValueAnimator();
+        anim.setObjectValues(values);
+        anim.setEvaluator(evaluator);
+        return anim;
+    }
+
+    /**
+     * Sets int values that will be animated between. A single
+     * value implies that that value is the one being animated to. However, this is not typically
+     * useful in a ValueAnimator object because there is no way for the object to determine the
+     * starting value for the animation (unlike ObjectAnimator, which can derive that value
+     * from the target object and property being animated). Therefore, there should typically
+     * be two or more values.
+     *
+     * <p>If there are already multiple sets of values defined for this ValueAnimator via more
+     * than one PropertyValuesHolder object, this method will set the values for the first
+     * of those objects.</p>
+     *
+     * @param values A set of values that the animation will animate between over time.
+     */
+    public void setIntValues(int... values) {
+        if (values == null || values.length == 0) {
+            return;
+        }
+        if (mValues == null || mValues.length == 0) {
+            setValues(new PropertyValuesHolder[]{PropertyValuesHolder.ofInt("", values)});
+        } else {
+            PropertyValuesHolder valuesHolder = mValues[0];
+            valuesHolder.setIntValues(values);
+        }
+        // New property/values/target should cause re-initialization prior to starting
+        mInitialized = false;
+    }
+
+    /**
+     * Sets float values that will be animated between. A single
+     * value implies that that value is the one being animated to. However, this is not typically
+     * useful in a ValueAnimator object because there is no way for the object to determine the
+     * starting value for the animation (unlike ObjectAnimator, which can derive that value
+     * from the target object and property being animated). Therefore, there should typically
+     * be two or more values.
+     *
+     * <p>If there are already multiple sets of values defined for this ValueAnimator via more
+     * than one PropertyValuesHolder object, this method will set the values for the first
+     * of those objects.</p>
+     *
+     * @param values A set of values that the animation will animate between over time.
+     */
+    public void setFloatValues(float... values) {
+        if (values == null || values.length == 0) {
+            return;
+        }
+        if (mValues == null || mValues.length == 0) {
+            setValues(new PropertyValuesHolder[]{PropertyValuesHolder.ofFloat("", values)});
+        } else {
+            PropertyValuesHolder valuesHolder = mValues[0];
+            valuesHolder.setFloatValues(values);
+        }
+        // New property/values/target should cause re-initialization prior to starting
+        mInitialized = false;
+    }
+
+    /**
+     * Sets the values to animate between for this animation. A single
+     * value implies that that value is the one being animated to. However, this is not typically
+     * useful in a ValueAnimator object because there is no way for the object to determine the
+     * starting value for the animation (unlike ObjectAnimator, which can derive that value
+     * from the target object and property being animated). Therefore, there should typically
+     * be two or more values.
+     *
+     * <p>If there are already multiple sets of values defined for this ValueAnimator via more
+     * than one PropertyValuesHolder object, this method will set the values for the first
+     * of those objects.</p>
+     *
+     * <p>There should be a TypeEvaluator set on the ValueAnimator that knows how to interpolate
+     * between these value objects. ValueAnimator only knows how to interpolate between the
+     * primitive types specified in the other setValues() methods.</p>
+     *
+     * @param values The set of values to animate between.
+     */
+    public void setObjectValues(Object... values) {
+        if (values == null || values.length == 0) {
+            return;
+        }
+        if (mValues == null || mValues.length == 0) {
+            setValues(new PropertyValuesHolder[]{PropertyValuesHolder.ofObject("",
+                    (TypeEvaluator)null, values)});
+        } else {
+            PropertyValuesHolder valuesHolder = mValues[0];
+            valuesHolder.setObjectValues(values);
+        }
+        // New property/values/target should cause re-initialization prior to starting
+        mInitialized = false;
+    }
+
+    /**
+     * Sets the values, per property, being animated between. This function is called internally
+     * by the constructors of ValueAnimator that take a list of values. But an ValueAnimator can
+     * be constructed without values and this method can be called to set the values manually
+     * instead.
+     *
+     * @param values The set of values, per property, being animated between.
+     */
+    public void setValues(PropertyValuesHolder... values) {
+        int numValues = values.length;
+        mValues = values;
+        mValuesMap = new HashMap<String, PropertyValuesHolder>(numValues);
+        for (int i = 0; i < numValues; ++i) {
+            PropertyValuesHolder valuesHolder = (PropertyValuesHolder) values[i];
+            mValuesMap.put(valuesHolder.getPropertyName(), valuesHolder);
+        }
+        // New property/values/target should cause re-initialization prior to starting
+        mInitialized = false;
+    }
+
+    /**
+     * Returns the values that this ValueAnimator animates between. These values are stored in
+     * PropertyValuesHolder objects, even if the ValueAnimator was created with a simple list
+     * of value objects instead.
+     *
+     * @return PropertyValuesHolder[] An array of PropertyValuesHolder objects which hold the
+     * values, per property, that define the animation.
+     */
+    public PropertyValuesHolder[] getValues() {
+        return mValues;
+    }
+
+    /**
+     * This function is called immediately before processing the first animation
+     * frame of an animation. If there is a nonzero <code>startDelay</code>, the
+     * function is called after that delay ends.
+     * It takes care of the final initialization steps for the
+     * animation.
+     *
+     *  <p>Overrides of this method should call the superclass method to ensure
+     *  that internal mechanisms for the animation are set up correctly.</p>
+     */
+    void initAnimation() {
+        if (!mInitialized) {
+            int numValues = mValues.length;
+            for (int i = 0; i < numValues; ++i) {
+                mValues[i].init();
+            }
+            mInitialized = true;
+        }
+    }
+
+
+    /**
+     * Sets the length of the animation. The default duration is 300 milliseconds.
+     *
+     * @param duration The length of the animation, in milliseconds. This value cannot
+     * be negative.
+     * @return ValueAnimator The object called with setDuration(). This return
+     * value makes it easier to compose statements together that construct and then set the
+     * duration, as in <code>ValueAnimator.ofInt(0, 10).setDuration(500).start()</code>.
+     */
+    public ValueAnimator setDuration(long duration) {
+        if (duration < 0) {
+            throw new IllegalArgumentException("Animators cannot have negative duration: " +
+                    duration);
+        }
+        mDuration = duration;
+        return this;
+    }
+
+    /**
+     * Gets the length of the animation. The default duration is 300 milliseconds.
+     *
+     * @return The length of the animation, in milliseconds.
+     */
+    public long getDuration() {
+        return mDuration;
+    }
+
+    /**
+     * Sets the position of the animation to the specified point in time. This time should
+     * be between 0 and the total duration of the animation, including any repetition. If
+     * the animation has not yet been started, then it will not advance forward after it is
+     * set to this time; it will simply set the time to this value and perform any appropriate
+     * actions based on that time. If the animation is already running, then setCurrentPlayTime()
+     * will set the current playing time to this value and continue playing from that point.
+     *
+     * @param playTime The time, in milliseconds, to which the animation is advanced or rewound.
+     */
+    public void setCurrentPlayTime(long playTime) {
+        initAnimation();
+        long currentTime = AnimationUtils.currentAnimationTimeMillis();
+        if (mPlayingState != RUNNING) {
+            mSeekTime = playTime;
+            mPlayingState = SEEKED;
+        }
+        mStartTime = currentTime - playTime;
+        animationFrame(currentTime);
+    }
+
+    /**
+     * Gets the current position of the animation in time, which is equal to the current
+     * time minus the time that the animation started. An animation that is not yet started will
+     * return a value of zero.
+     *
+     * @return The current position in time of the animation.
+     */
+    public long getCurrentPlayTime() {
+        if (!mInitialized || mPlayingState == STOPPED) {
+            return 0;
+        }
+        return AnimationUtils.currentAnimationTimeMillis() - mStartTime;
+    }
+
+    /**
+     * This custom, static handler handles the timing pulse that is shared by
+     * all active animations. This approach ensures that the setting of animation
+     * values will happen on the UI thread and that all animations will share
+     * the same times for calculating their values, which makes synchronizing
+     * animations possible.
+     *
+     */
+    private static class AnimationHandler extends Handler {
+        /**
+         * There are only two messages that we care about: ANIMATION_START and
+         * ANIMATION_FRAME. The START message is sent when an animation's start()
+         * method is called. It cannot start synchronously when start() is called
+         * because the call may be on the wrong thread, and it would also not be
+         * synchronized with other animations because it would not start on a common
+         * timing pulse. So each animation sends a START message to the handler, which
+         * causes the handler to place the animation on the active animations queue and
+         * start processing frames for that animation.
+         * The FRAME message is the one that is sent over and over while there are any
+         * active animations to process.
+         */
+        @Override
+        public void handleMessage(Message msg) {
+            boolean callAgain = true;
+            ArrayList<ValueAnimator> animations = sAnimations.get();
+            ArrayList<ValueAnimator> delayedAnims = sDelayedAnims.get();
+            switch (msg.what) {
+                // TODO: should we avoid sending frame message when starting if we
+                // were already running?
+                case ANIMATION_START:
+                    ArrayList<ValueAnimator> pendingAnimations = sPendingAnimations.get();
+                    if (animations.size() > 0 || delayedAnims.size() > 0) {
+                        callAgain = false;
+                    }
+                    // pendingAnims holds any animations that have requested to be started
+                    // We're going to clear sPendingAnimations, but starting animation may
+                    // cause more to be added to the pending list (for example, if one animation
+                    // starting triggers another starting). So we loop until sPendingAnimations
+                    // is empty.
+                    while (pendingAnimations.size() > 0) {
+                        ArrayList<ValueAnimator> pendingCopy =
+                                (ArrayList<ValueAnimator>) pendingAnimations.clone();
+                        pendingAnimations.clear();
+                        int count = pendingCopy.size();
+                        for (int i = 0; i < count; ++i) {
+                            ValueAnimator anim = pendingCopy.get(i);
+                            // If the animation has a startDelay, place it on the delayed list
+                            if (anim.mStartDelay == 0) {
+                                anim.startAnimation();
+                            } else {
+                                delayedAnims.add(anim);
+                            }
+                        }
+                    }
+                    // fall through to process first frame of new animations
+                case ANIMATION_FRAME:
+                    // currentTime holds the common time for all animations processed
+                    // during this frame
+                    long currentTime = AnimationUtils.currentAnimationTimeMillis();
+                    ArrayList<ValueAnimator> readyAnims = sReadyAnims.get();
+                    ArrayList<ValueAnimator> endingAnims = sEndingAnims.get();
+
+                    // First, process animations currently sitting on the delayed queue, adding
+                    // them to the active animations if they are ready
+                    int numDelayedAnims = delayedAnims.size();
+                    for (int i = 0; i < numDelayedAnims; ++i) {
+                        ValueAnimator anim = delayedAnims.get(i);
+                        if (anim.delayedAnimationFrame(currentTime)) {
+                            readyAnims.add(anim);
+                        }
+                    }
+                    int numReadyAnims = readyAnims.size();
+                    if (numReadyAnims > 0) {
+                        for (int i = 0; i < numReadyAnims; ++i) {
+                            ValueAnimator anim = readyAnims.get(i);
+                            anim.startAnimation();
+                            anim.mRunning = true;
+                            delayedAnims.remove(anim);
+                        }
+                        readyAnims.clear();
+                    }
+
+                    // Now process all active animations. The return value from animationFrame()
+                    // tells the handler whether it should now be ended
+                    int numAnims = animations.size();
+                    int i = 0;
+                    while (i < numAnims) {
+                        ValueAnimator anim = animations.get(i);
+                        if (anim.animationFrame(currentTime)) {
+                            endingAnims.add(anim);
+                        }
+                        if (animations.size() == numAnims) {
+                            ++i;
+                        } else {
+                            // An animation might be canceled or ended by client code
+                            // during the animation frame. Check to see if this happened by
+                            // seeing whether the current index is the same as it was before
+                            // calling animationFrame(). Another approach would be to copy
+                            // animations to a temporary list and process that list instead,
+                            // but that entails garbage and processing overhead that would
+                            // be nice to avoid.
+                            --numAnims;
+                            endingAnims.remove(anim);
+                        }
+                    }
+                    if (endingAnims.size() > 0) {
+                        for (i = 0; i < endingAnims.size(); ++i) {
+                            endingAnims.get(i).endAnimation();
+                        }
+                        endingAnims.clear();
+                    }
+
+                    // If there are still active or delayed animations, call the handler again
+                    // after the frameDelay
+                    if (callAgain && (!animations.isEmpty() || !delayedAnims.isEmpty())) {
+                        sendEmptyMessageDelayed(ANIMATION_FRAME, Math.max(0, sFrameDelay -
+                            (AnimationUtils.currentAnimationTimeMillis() - currentTime)));
+                    }
+                    break;
+            }
+        }
+    }
+
+    /**
+     * The amount of time, in milliseconds, to delay starting the animation after
+     * {@link #start()} is called.
+     *
+     * @return the number of milliseconds to delay running the animation
+     */
+    public long getStartDelay() {
+        return mStartDelay;
+    }
+
+    /**
+     * The amount of time, in milliseconds, to delay starting the animation after
+     * {@link #start()} is called.
+
+     * @param startDelay The amount of the delay, in milliseconds
+     */
+    public void setStartDelay(long startDelay) {
+        this.mStartDelay = startDelay;
+    }
+
+    /**
+     * The amount of time, in milliseconds, between each frame of the animation. This is a
+     * requested time that the animation will attempt to honor, but the actual delay between
+     * frames may be different, depending on system load and capabilities. This is a static
+     * function because the same delay will be applied to all animations, since they are all
+     * run off of a single timing loop.
+     *
+     * @return the requested time between frames, in milliseconds
+     */
+    public static long getFrameDelay() {
+        return sFrameDelay;
+    }
+
+    /**
+     * The amount of time, in milliseconds, between each frame of the animation. This is a
+     * requested time that the animation will attempt to honor, but the actual delay between
+     * frames may be different, depending on system load and capabilities. This is a static
+     * function because the same delay will be applied to all animations, since they are all
+     * run off of a single timing loop.
+     *
+     * @param frameDelay the requested time between frames, in milliseconds
+     */
+    public static void setFrameDelay(long frameDelay) {
+        sFrameDelay = frameDelay;
+    }
+
+    /**
+     * The most recent value calculated by this <code>ValueAnimator</code> when there is just one
+     * property being animated. This value is only sensible while the animation is running. The main
+     * purpose for this read-only property is to retrieve the value from the <code>ValueAnimator</code>
+     * during a call to {@link AnimatorUpdateListener#onAnimationUpdate(ValueAnimator)}, which
+     * is called during each animation frame, immediately after the value is calculated.
+     *
+     * @return animatedValue The value most recently calculated by this <code>ValueAnimator</code> for
+     * the single property being animated. If there are several properties being animated
+     * (specified by several PropertyValuesHolder objects in the constructor), this function
+     * returns the animated value for the first of those objects.
+     */
+    public Object getAnimatedValue() {
+        if (mValues != null && mValues.length > 0) {
+            return mValues[0].getAnimatedValue();
+        }
+        // Shouldn't get here; should always have values unless ValueAnimator was set up wrong
+        return null;
+    }
+
+    /**
+     * The most recent value calculated by this <code>ValueAnimator</code> for <code>propertyName</code>.
+     * The main purpose for this read-only property is to retrieve the value from the
+     * <code>ValueAnimator</code> during a call to
+     * {@link AnimatorUpdateListener#onAnimationUpdate(ValueAnimator)}, which
+     * is called during each animation frame, immediately after the value is calculated.
+     *
+     * @return animatedValue The value most recently calculated for the named property
+     * by this <code>ValueAnimator</code>.
+     */
+    public Object getAnimatedValue(String propertyName) {
+        PropertyValuesHolder valuesHolder = mValuesMap.get(propertyName);
+        if (valuesHolder != null) {
+            return valuesHolder.getAnimatedValue();
+        } else {
+            // At least avoid crashing if called with bogus propertyName
+            return null;
+        }
+    }
+
+    /**
+     * Sets how many times the animation should be repeated. If the repeat
+     * count is 0, the animation is never repeated. If the repeat count is
+     * greater than 0 or {@link #INFINITE}, the repeat mode will be taken
+     * into account. The repeat count is 0 by default.
+     *
+     * @param value the number of times the animation should be repeated
+     */
+    public void setRepeatCount(int value) {
+        mRepeatCount = value;
+    }
+    /**
+     * Defines how many times the animation should repeat. The default value
+     * is 0.
+     *
+     * @return the number of times the animation should repeat, or {@link #INFINITE}
+     */
+    public int getRepeatCount() {
+        return mRepeatCount;
+    }
+
+    /**
+     * Defines what this animation should do when it reaches the end. This
+     * setting is applied only when the repeat count is either greater than
+     * 0 or {@link #INFINITE}. Defaults to {@link #RESTART}.
+     *
+     * @param value {@link #RESTART} or {@link #REVERSE}
+     */
+    public void setRepeatMode(int value) {
+        mRepeatMode = value;
+    }
+
+    /**
+     * Defines what this animation should do when it reaches the end.
+     *
+     * @return either one of {@link #REVERSE} or {@link #RESTART}
+     */
+    public int getRepeatMode() {
+        return mRepeatMode;
+    }
+
+    /**
+     * Adds a listener to the set of listeners that are sent update events through the life of
+     * an animation. This method is called on all listeners for every frame of the animation,
+     * after the values for the animation have been calculated.
+     *
+     * @param listener the listener to be added to the current set of listeners for this animation.
+     */
+    public void addUpdateListener(AnimatorUpdateListener listener) {
+        if (mUpdateListeners == null) {
+            mUpdateListeners = new ArrayList<AnimatorUpdateListener>();
+        }
+        mUpdateListeners.add(listener);
+    }
+
+    /**
+     * Removes all listeners from the set listening to frame updates for this animation.
+     */
+    public void removeAllUpdateListeners() {
+        if (mUpdateListeners == null) {
+            return;
+        }
+        mUpdateListeners.clear();
+        mUpdateListeners = null;
+    }
+
+    /**
+     * Removes a listener from the set listening to frame updates for this animation.
+     *
+     * @param listener the listener to be removed from the current set of update listeners
+     * for this animation.
+     */
+    public void removeUpdateListener(AnimatorUpdateListener listener) {
+        if (mUpdateListeners == null) {
+            return;
+        }
+        mUpdateListeners.remove(listener);
+        if (mUpdateListeners.size() == 0) {
+            mUpdateListeners = null;
+        }
+    }
+
+
+    /**
+     * The time interpolator used in calculating the elapsed fraction of this animation. The
+     * interpolator determines whether the animation runs with linear or non-linear motion,
+     * such as acceleration and deceleration. The default value is
+     * {@link AccelerateDecelerateInterpolator}
+     *
+     * @param value the interpolator to be used by this animation. A value of <code>null</code>
+     * will result in linear interpolation.
+     */
+    @Override
+    public void setInterpolator(/*Time*/Interpolator value) {
+        if (value != null) {
+            mInterpolator = value;
+        } else {
+            mInterpolator = new LinearInterpolator();
+        }
+    }
+
+    /**
+     * Returns the timing interpolator that this ValueAnimator uses.
+     *
+     * @return The timing interpolator for this ValueAnimator.
+     */
+    public /*Time*/Interpolator getInterpolator() {
+        return mInterpolator;
+    }
+
+    /**
+     * The type evaluator to be used when calculating the animated values of this animation.
+     * The system will automatically assign a float or int evaluator based on the type
+     * of <code>startValue</code> and <code>endValue</code> in the constructor. But if these values
+     * are not one of these primitive types, or if different evaluation is desired (such as is
+     * necessary with int values that represent colors), a custom evaluator needs to be assigned.
+     * For example, when running an animation on color values, the {@link ArgbEvaluator}
+     * should be used to get correct RGB color interpolation.
+     *
+     * <p>If this ValueAnimator has only one set of values being animated between, this evaluator
+     * will be used for that set. If there are several sets of values being animated, which is
+     * the case if PropertyValuesHOlder objects were set on the ValueAnimator, then the evaluator
+     * is assigned just to the first PropertyValuesHolder object.</p>
+     *
+     * @param value the evaluator to be used this animation
+     */
+    public void setEvaluator(TypeEvaluator value) {
+        if (value != null && mValues != null && mValues.length > 0) {
+            mValues[0].setEvaluator(value);
+        }
+    }
+
+    /**
+     * Start the animation playing. This version of start() takes a boolean flag that indicates
+     * whether the animation should play in reverse. The flag is usually false, but may be set
+     * to true if called from the reverse() method.
+     *
+     * <p>The animation started by calling this method will be run on the thread that called
+     * this method. This thread should have a Looper on it (a runtime exception will be thrown if
+     * this is not the case). Also, if the animation will animate
+     * properties of objects in the view hierarchy, then the calling thread should be the UI
+     * thread for that view hierarchy.</p>
+     *
+     * @param playBackwards Whether the ValueAnimator should start playing in reverse.
+     */
+    private void start(boolean playBackwards) {
+        if (Looper.myLooper() == null) {
+            throw new AndroidRuntimeException("Animators may only be run on Looper threads");
+        }
+        mPlayingBackwards = playBackwards;
+        mCurrentIteration = 0;
+        mPlayingState = STOPPED;
+        mStarted = true;
+        mStartedDelay = false;
+        sPendingAnimations.get().add(this);
+        if (mStartDelay == 0) {
+            // This sets the initial value of the animation, prior to actually starting it running
+            setCurrentPlayTime(getCurrentPlayTime());
+            mPlayingState = STOPPED;
+            mRunning = true;
+
+            if (mListeners != null) {
+                ArrayList<AnimatorListener> tmpListeners =
+                        (ArrayList<AnimatorListener>) mListeners.clone();
+                int numListeners = tmpListeners.size();
+                for (int i = 0; i < numListeners; ++i) {
+                    tmpListeners.get(i).onAnimationStart(this);
+                }
+            }
+        }
+        AnimationHandler animationHandler = sAnimationHandler.get();
+        if (animationHandler == null) {
+            animationHandler = new AnimationHandler();
+            sAnimationHandler.set(animationHandler);
+        }
+        animationHandler.sendEmptyMessage(ANIMATION_START);
+    }
+
+    @Override
+    public void start() {
+        start(false);
+    }
+
+    @Override
+    public void cancel() {
+        // Only cancel if the animation is actually running or has been started and is about
+        // to run
+        if (mPlayingState != STOPPED || sPendingAnimations.get().contains(this) ||
+                sDelayedAnims.get().contains(this)) {
+            // Only notify listeners if the animator has actually started
+            if (mRunning && mListeners != null) {
+                ArrayList<AnimatorListener> tmpListeners =
+                        (ArrayList<AnimatorListener>) mListeners.clone();
+                for (AnimatorListener listener : tmpListeners) {
+                    listener.onAnimationCancel(this);
+                }
+            }
+            endAnimation();
+        }
+    }
+
+    @Override
+    public void end() {
+        if (!sAnimations.get().contains(this) && !sPendingAnimations.get().contains(this)) {
+            // Special case if the animation has not yet started; get it ready for ending
+            mStartedDelay = false;
+            startAnimation();
+        } else if (!mInitialized) {
+            initAnimation();
+        }
+        // The final value set on the target varies, depending on whether the animation
+        // was supposed to repeat an odd number of times
+        if (mRepeatCount > 0 && (mRepeatCount & 0x01) == 1) {
+            animateValue(0f);
+        } else {
+            animateValue(1f);
+        }
+        endAnimation();
+    }
+
+    @Override
+    public boolean isRunning() {
+        return (mPlayingState == RUNNING || mRunning);
+    }
+
+    @Override
+    public boolean isStarted() {
+        return mStarted;
+    }
+
+    /**
+     * Plays the ValueAnimator in reverse. If the animation is already running,
+     * it will stop itself and play backwards from the point reached when reverse was called.
+     * If the animation is not currently running, then it will start from the end and
+     * play backwards. This behavior is only set for the current animation; future playing
+     * of the animation will use the default behavior of playing forward.
+     */
+    public void reverse() {
+        mPlayingBackwards = !mPlayingBackwards;
+        if (mPlayingState == RUNNING) {
+            long currentTime = AnimationUtils.currentAnimationTimeMillis();
+            long currentPlayTime = currentTime - mStartTime;
+            long timeLeft = mDuration - currentPlayTime;
+            mStartTime = currentTime - timeLeft;
+        } else {
+            start(true);
+        }
+    }
+
+    /**
+     * Called internally to end an animation by removing it from the animations list. Must be
+     * called on the UI thread.
+     */
+    private void endAnimation() {
+        sAnimations.get().remove(this);
+        sPendingAnimations.get().remove(this);
+        sDelayedAnims.get().remove(this);
+        mPlayingState = STOPPED;
+        if (mRunning && mListeners != null) {
+            ArrayList<AnimatorListener> tmpListeners =
+                    (ArrayList<AnimatorListener>) mListeners.clone();
+            int numListeners = tmpListeners.size();
+            for (int i = 0; i < numListeners; ++i) {
+                tmpListeners.get(i).onAnimationEnd(this);
+            }
+        }
+        mRunning = false;
+        mStarted = false;
+    }
+
+    /**
+     * Called internally to start an animation by adding it to the active animations list. Must be
+     * called on the UI thread.
+     */
+    private void startAnimation() {
+        initAnimation();
+        sAnimations.get().add(this);
+        if (mStartDelay > 0 && mListeners != null) {
+            // Listeners were already notified in start() if startDelay is 0; this is
+            // just for delayed animations
+            ArrayList<AnimatorListener> tmpListeners =
+                    (ArrayList<AnimatorListener>) mListeners.clone();
+            int numListeners = tmpListeners.size();
+            for (int i = 0; i < numListeners; ++i) {
+                tmpListeners.get(i).onAnimationStart(this);
+            }
+        }
+    }
+
+    /**
+     * Internal function called to process an animation frame on an animation that is currently
+     * sleeping through its <code>startDelay</code> phase. The return value indicates whether it
+     * should be woken up and put on the active animations queue.
+     *
+     * @param currentTime The current animation time, used to calculate whether the animation
+     * has exceeded its <code>startDelay</code> and should be started.
+     * @return True if the animation's <code>startDelay</code> has been exceeded and the animation
+     * should be added to the set of active animations.
+     */
+    private boolean delayedAnimationFrame(long currentTime) {
+        if (!mStartedDelay) {
+            mStartedDelay = true;
+            mDelayStartTime = currentTime;
+        } else {
+            long deltaTime = currentTime - mDelayStartTime;
+            if (deltaTime > mStartDelay) {
+                // startDelay ended - start the anim and record the
+                // mStartTime appropriately
+                mStartTime = currentTime - (deltaTime - mStartDelay);
+                mPlayingState = RUNNING;
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * This internal function processes a single animation frame for a given animation. The
+     * currentTime parameter is the timing pulse sent by the handler, used to calculate the
+     * elapsed duration, and therefore
+     * the elapsed fraction, of the animation. The return value indicates whether the animation
+     * should be ended (which happens when the elapsed time of the animation exceeds the
+     * animation's duration, including the repeatCount).
+     *
+     * @param currentTime The current time, as tracked by the static timing handler
+     * @return true if the animation's duration, including any repetitions due to
+     * <code>repeatCount</code> has been exceeded and the animation should be ended.
+     */
+    boolean animationFrame(long currentTime) {
+        boolean done = false;
+
+        if (mPlayingState == STOPPED) {
+            mPlayingState = RUNNING;
+            if (mSeekTime < 0) {
+                mStartTime = currentTime;
+            } else {
+                mStartTime = currentTime - mSeekTime;
+                // Now that we're playing, reset the seek time
+                mSeekTime = -1;
+            }
+        }
+        switch (mPlayingState) {
+        case RUNNING:
+        case SEEKED:
+            float fraction = mDuration > 0 ? (float)(currentTime - mStartTime) / mDuration : 1f;
+            if (fraction >= 1f) {
+                if (mCurrentIteration < mRepeatCount || mRepeatCount == INFINITE) {
+                    // Time to repeat
+                    if (mListeners != null) {
+                        int numListeners = mListeners.size();
+                        for (int i = 0; i < numListeners; ++i) {
+                            mListeners.get(i).onAnimationRepeat(this);
+                        }
+                    }
+                    if (mRepeatMode == REVERSE) {
+                        mPlayingBackwards = mPlayingBackwards ? false : true;
+                    }
+                    mCurrentIteration += (int)fraction;
+                    fraction = fraction % 1f;
+                    mStartTime += mDuration;
+                } else {
+                    done = true;
+                    fraction = Math.min(fraction, 1.0f);
+                }
+            }
+            if (mPlayingBackwards) {
+                fraction = 1f - fraction;
+            }
+            animateValue(fraction);
+            break;
+        }
+
+        return done;
+    }
+
+    /**
+     * Returns the current animation fraction, which is the elapsed/interpolated fraction used in
+     * the most recent frame update on the animation.
+     *
+     * @return Elapsed/interpolated fraction of the animation.
+     */
+    public float getAnimatedFraction() {
+        return mCurrentFraction;
+    }
+
+    /**
+     * This method is called with the elapsed fraction of the animation during every
+     * animation frame. This function turns the elapsed fraction into an interpolated fraction
+     * and then into an animated value (from the evaluator. The function is called mostly during
+     * animation updates, but it is also called when the <code>end()</code>
+     * function is called, to set the final value on the property.
+     *
+     * <p>Overrides of this method must call the superclass to perform the calculation
+     * of the animated value.</p>
+     *
+     * @param fraction The elapsed fraction of the animation.
+     */
+    void animateValue(float fraction) {
+        fraction = mInterpolator.getInterpolation(fraction);
+        mCurrentFraction = fraction;
+        int numValues = mValues.length;
+        for (int i = 0; i < numValues; ++i) {
+            mValues[i].calculateValue(fraction);
+        }
+        if (mUpdateListeners != null) {
+            int numListeners = mUpdateListeners.size();
+            for (int i = 0; i < numListeners; ++i) {
+                mUpdateListeners.get(i).onAnimationUpdate(this);
+            }
+        }
+    }
+
+    @Override
+    public ValueAnimator clone() {
+        final ValueAnimator anim = (ValueAnimator) super.clone();
+        if (mUpdateListeners != null) {
+            ArrayList<AnimatorUpdateListener> oldListeners = mUpdateListeners;
+            anim.mUpdateListeners = new ArrayList<AnimatorUpdateListener>();
+            int numListeners = oldListeners.size();
+            for (int i = 0; i < numListeners; ++i) {
+                anim.mUpdateListeners.add(oldListeners.get(i));
+            }
+        }
+        anim.mSeekTime = -1;
+        anim.mPlayingBackwards = false;
+        anim.mCurrentIteration = 0;
+        anim.mInitialized = false;
+        anim.mPlayingState = STOPPED;
+        anim.mStartedDelay = false;
+        PropertyValuesHolder[] oldValues = mValues;
+        if (oldValues != null) {
+            int numValues = oldValues.length;
+            anim.mValues = new PropertyValuesHolder[numValues];
+            anim.mValuesMap = new HashMap<String, PropertyValuesHolder>(numValues);
+            for (int i = 0; i < numValues; ++i) {
+                PropertyValuesHolder newValuesHolder = oldValues[i].clone();
+                anim.mValues[i] = newValuesHolder;
+                anim.mValuesMap.put(newValuesHolder.getPropertyName(), newValuesHolder);
+            }
+        }
+        return anim;
+    }
+
+    /**
+     * Implementors of this interface can add themselves as update listeners
+     * to an <code>ValueAnimator</code> instance to receive callbacks on every animation
+     * frame, after the current frame's values have been calculated for that
+     * <code>ValueAnimator</code>.
+     */
+    public static interface AnimatorUpdateListener {
+        /**
+         * <p>Notifies the occurrence of another frame of the animation.</p>
+         *
+         * @param animation The animation which was repeated.
+         */
+        void onAnimationUpdate(ValueAnimator animation);
+
+    }
+
+    /**
+     * Return the number of animations currently running.
+     *
+     * Used by StrictMode internally to annotate violations.  Only
+     * called on the main thread.
+     *
+     * @hide
+     */
+    public static int getCurrentAnimationsCount() {
+        return sAnimations.get().size();
+    }
+
+    /**
+     * Clear all animations on this thread, without canceling or ending them.
+     * This should be used with caution.
+     *
+     * @hide
+     */
+    public static void clearAllAnimations() {
+        sAnimations.get().clear();
+        sPendingAnimations.get().clear();
+        sDelayedAnims.get().clear();
+    }
+
+    @Override
+    public String toString() {
+        String returnVal = "ValueAnimator@" + Integer.toHexString(hashCode());
+        if (mValues != null) {
+            for (int i = 0; i < mValues.length; ++i) {
+                returnVal += "\n    " + mValues[i].toString();
+            }
+        }
+        return returnVal;
+    }
+}
Index: app/src/main/res/layout/fragment_main_shop_viewpager.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_main_shop_viewpager.xml	(revision )
+++ app/src/main/res/layout/fragment_main_shop_viewpager.xml	(revision )
@@ -0,0 +1,5 @@
+<ImageView xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="@dimen/fragment_shop_viewpager_height"
+    android:scaleType="fitXY"/>
Index: app/src/main/java/com/google/zxing/camera/AutoFocusCallback.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/google/zxing/camera/AutoFocusCallback.java	(revision )
+++ app/src/main/java/com/google/zxing/camera/AutoFocusCallback.java	(revision )
@@ -0,0 +1,48 @@
+/*
+ * Copyright (C) 2010 ZXing authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.zxing.camera;
+
+import android.hardware.Camera;
+import android.os.Handler;
+import android.os.Message;
+import android.util.Log;
+
+final class AutoFocusCallback implements Camera.AutoFocusCallback {
+
+  private static final String TAG = AutoFocusCallback.class.getSimpleName();
+
+  private static final long AUTOFOCUS_INTERVAL_MS = 1500L;
+
+  private Handler autoFocusHandler;
+  private int autoFocusMessage;
+
+  void setHandler(Handler autoFocusHandler, int autoFocusMessage) {
+    this.autoFocusHandler = autoFocusHandler;
+    this.autoFocusMessage = autoFocusMessage;
+  }
+
+  public void onAutoFocus(boolean success, Camera camera) {
+    if (autoFocusHandler != null) {
+      Message message = autoFocusHandler.obtainMessage(autoFocusMessage, success);
+      autoFocusHandler.sendMessageDelayed(message, AUTOFOCUS_INTERVAL_MS);
+      autoFocusHandler = null;
+    } else {
+      Log.d(TAG, "Got auto-focus callback, but no handler for it");
+    }
+  }
+
+}
Index: app/src/main/res/layout/page_pay_package_list.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/page_pay_package_list.xml	(revision )
+++ app/src/main/res/layout/page_pay_package_list.xml	(revision )
@@ -0,0 +1,197 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/common_background_all_page">
+
+    <include layout="@layout/common_head"/>
+
+    <FrameLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+    <ScrollView
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+        <LinearLayout
+            android:id="@+id/pay_package_layout"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="vertical"
+            android:visibility="invisible"
+            android:paddingBottom="100dip">
+
+            <RelativeLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="@dimen/common_content_margin_10">
+                <TextView
+                    android:id="@+id/pay_package_list_nameflag"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="@string/pay_package_list_sub1"
+                    android:textColor="@color/common_font_color_868585"
+                    android:textSize="@dimen/common_font_size_12"
+                    android:layout_alignParentRight="true"
+                    android:layout_marginRight="@dimen/common_content_margin_20"/>
+                <TextView
+                    android:id="@+id/pay_package_list_name"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:textColor="@color/common_font_color_fb8f03"
+                    android:textSize="@dimen/common_font_size_12"
+                    android:layout_toLeftOf="@id/pay_package_list_nameflag"
+                    android:layout_marginRight="@dimen/common_content_margin_5"/>
+            </RelativeLayout>
+            <TextView
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:text="@string/pay_package_list_sub2"
+                android:textColor="@color/common_font_color_868585"
+                android:textSize="@dimen/common_font_size_12"
+                android:layout_marginTop="@dimen/common_content_margin_10"
+                android:layout_marginBottom="@dimen/common_content_margin_10"
+                android:gravity="right"
+                android:layout_marginRight="@dimen/common_content_margin_20"/>
+            <TextView
+                android:layout_width="match_parent"
+                android:layout_height="2dip"
+                android:background="@color/common_list_item_divide_bg"/>
+            <ListView
+                android:id="@+id/pay_package_list"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:listSelector="@drawable/common_list_item_selector"
+                android:divider="@color/common_list_item_divide_bg"
+                android:dividerHeight="2dip"/>
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="match_parent"
+                    android:orientation="vertical">
+
+                    <TextView
+                        android:layout_width="match_parent"
+                        android:layout_height="2dip"
+                        android:background="@color/common_list_item_divide_bg"/>
+                    <TextView
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:text="@string/pay_package_list_sub3"
+                        android:textColor="@color/common_font_color_868585"
+                        android:textSize="@dimen/common_font_size_12"
+                        android:layout_marginTop="@dimen/common_content_margin_10"
+                        android:layout_marginBottom="@dimen/common_content_margin_10"
+                        android:gravity="right"
+                        android:layout_marginRight="@dimen/common_content_margin_20"/>
+                    <TextView
+                        android:layout_width="match_parent"
+                        android:layout_height="2dip"
+                        android:background="@color/common_list_item_divide_bg"/>
+                    <RelativeLayout
+                        android:id="@+id/pay_package_list_servernamelayout"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content">
+
+                        <TextView
+                            android:id="@+id/pay_package_list_servername"
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:hint="@string/pay_package_list_sub4"
+                            android:textColor="@color/common_font_color_000000"
+                            android:textSize="@dimen/common_font_size_14"
+                            android:layout_marginTop="@dimen/common_content_margin_10"
+                            android:layout_marginBottom="@dimen/common_content_margin_10"
+                            android:gravity="right"
+                            android:layout_marginRight="@dimen/common_content_margin_20"
+                            android:layout_alignParentRight="true"
+                            android:layout_centerVertical="true"/>
+                        <TextView
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:layout_alignParentLeft="true"
+                            android:layout_centerVertical="true"
+                            android:layout_marginLeft="@dimen/common_content_margin_20"
+                            android:background="@mipmap/common_head_back_selected"/>
+                    </RelativeLayout>
+                    <TextView
+                        android:layout_width="match_parent"
+                        android:layout_height="2dip"
+                        android:background="@color/common_list_item_divide_bg"/>
+                    <RelativeLayout
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content">
+                        <TextView
+                            android:id="@+id/pay_package_list_rolename"
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:hint="@string/pay_package_list_sub5"
+                            android:textColor="@color/common_font_color_000000"
+                            android:textSize="@dimen/common_font_size_14"
+                            android:layout_marginTop="@dimen/common_content_margin_10"
+                            android:layout_marginBottom="@dimen/common_content_margin_10"
+                            android:layout_alignParentRight="true"
+                            android:gravity="right"
+                            android:layout_marginRight="@dimen/common_content_margin_20"
+                            android:layout_centerVertical="true"/>
+                        <TextView
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:layout_alignParentLeft="true"
+                            android:layout_centerVertical="true"
+                            android:layout_marginLeft="@dimen/common_content_margin_20"
+                            android:background="@mipmap/common_head_back_selected"
+                            android:visibility="invisible"/>
+                    </RelativeLayout>
+                    <TextView
+                        android:layout_width="match_parent"
+                        android:layout_height="2dip"
+                        android:background="@color/common_list_item_divide_bg"/>
+                    <RelativeLayout
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:layout_marginBottom="@dimen/common_content_margin_15">
+                        <TextView
+                            android:id="@+id/pay_package_list_sumfalg"
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:text="@string/pay_package_list_sub6"
+                            android:textColor="@color/common_font_color_000000"
+                            android:textSize="@dimen/common_font_size_14"
+                            android:layout_marginTop="@dimen/common_content_margin_10"
+                            android:layout_marginBottom="@dimen/common_content_margin_10"
+                            android:layout_alignParentRight="true"
+                            android:gravity="right"
+                            android:layout_marginRight="@dimen/common_content_margin_20"/>
+                        <TextView
+                            android:id="@+id/pay_package_list_sum"
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:textColor="@color/common_font_color_fb8f03"
+                            android:textSize="@dimen/common_font_size_16"
+                            android:layout_marginTop="@dimen/common_content_margin_10"
+                            android:layout_marginBottom="@dimen/common_content_margin_10"
+                            android:layout_toLeftOf="@id/pay_package_list_sumfalg"
+                            android:gravity="right"
+                            android:layout_marginRight="@dimen/common_content_margin_5"/>
+                    </RelativeLayout>
+                </LinearLayout>
+        </LinearLayout>
+    </ScrollView>
+
+        <TextView
+            android:id="@+id/pay_package_topay"
+            android:layout_width="match_parent"
+            android:layout_height="@dimen/fragment_mine_exit_height"
+            android:text="@string/pay_package_list_sub7"
+            android:textColor="@color/common_font_color_ffffff"
+            android:textSize="@dimen/common_font_size_16"
+            android:layout_marginTop="@dimen/common_content_margin_15"
+            android:layout_marginRight="@dimen/common_content_margin_50"
+            android:layout_marginLeft="@dimen/common_content_margin_50"
+            android:layout_marginBottom="@dimen/common_content_margin_30"
+            android:background="@drawable/common_bg_a5a4a4"
+            android:gravity="center"
+            android:layout_gravity="bottom"
+            android:visibility="invisible"/>
+        <include layout="@layout/common_network_error"/>
+    </FrameLayout>
+</LinearLayout>
\ No newline at end of file
Index: app/src/main/java/com/base/tools/http/MultipartEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/base/tools/http/MultipartEntity.java	(revision )
+++ app/src/main/java/com/base/tools/http/MultipartEntity.java	(revision )
@@ -0,0 +1,236 @@
+package com.base.tools.http;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.Closeable;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.util.Random;
+
+import org.apache.http.Header;
+import org.apache.http.HttpEntity;
+import org.apache.http.message.BasicHeader;
+import org.w3c.dom.Text;
+
+import android.text.TextUtils;
+
+public class MultipartEntity implements HttpEntity {
+
+    private final static char[] MULTIPART_CHARS = "-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
+            .toCharArray();
+    /**
+     * 换行符
+     */
+    private final String NEW_LINE_STR = "\r\n";
+    private final String CONTENT_TYPE = "Content-Type: ";
+    private final String CONTENT_DISPOSITION = "Content-Disposition: ";
+    /**
+     * 文本参数和字符集
+     */
+    private final String TYPE_TEXT_CHARSET = "text/plain; charset=UTF-8";
+
+    /**
+     * 字节流参数
+     */
+    private final String TYPE_OCTET_STREAM = "application/octet-stream";
+    /**
+     * 二进制参数
+     */
+    private final byte[] BINARY_ENCODING = "Content-Transfer-Encoding: binary\r\n\r\n".getBytes();
+    /**
+     * 文本参数
+     */
+    private final byte[] BIT_ENCODING = "Content-Transfer-Encoding: 8bit\r\n\r\n".getBytes();
+
+    /**
+     * 分隔符
+     */
+    private String mBoundary = null;
+    /**
+     * 输出流
+     */
+    ByteArrayOutputStream mOutputStream = new ByteArrayOutputStream();
+
+    public MultipartEntity() {
+        this.mBoundary = generateBoundary();
+    }
+
+    /**
+     * 生成分隔符
+     * 
+     * @return
+     */
+    private final String generateBoundary() {
+        final StringBuffer buf = new StringBuffer();
+        final Random rand = new Random();
+        for (int i = 0; i < 30; i++) {
+            buf.append(MULTIPART_CHARS[rand.nextInt(MULTIPART_CHARS.length)]);
+        }
+        return buf.toString();
+    }
+
+    /**
+     * 参数开头的分隔符
+     * 
+     * @throws IOException
+     */
+    private void writeFirstBoundary() throws IOException {
+        mOutputStream.write(("--" + mBoundary + "\r\n").getBytes());
+    }
+
+    /**
+     * 添加文本参数
+     * 
+     * @param key
+     * @param value
+     */
+    public void addStringPart(final String paramName, final String value) {
+        writeToOutputStream(paramName, TextUtils.isEmpty(value)?null:value.getBytes(), TYPE_TEXT_CHARSET, BIT_ENCODING, "");
+    }
+
+    /**
+     * 将数据写入到输出流中
+     * 
+     * @param key
+     * @param rawData
+     * @param type
+     * @param encodingBytes
+     * @param fileName
+     */
+    private void writeToOutputStream(String paramName, byte[] rawData, String type,
+            byte[] encodingBytes,
+            String fileName) {
+        try {
+            writeFirstBoundary();
+            mOutputStream.write((CONTENT_TYPE + type + NEW_LINE_STR).getBytes());
+            mOutputStream
+                    .write(getContentDispositionBytes(paramName, fileName));
+            mOutputStream.write(encodingBytes);
+            if(rawData != null)
+                mOutputStream.write(rawData);
+            mOutputStream.write(NEW_LINE_STR.getBytes());
+        } catch (final IOException e) {
+            e.printStackTrace();
+        }catch (OutOfMemoryError e) {
+            e.printStackTrace();
+        }
+    }
+
+    /**
+     * 添加二进制参数, 例如Bitmap的字节流参数
+     * 
+     * @param key
+     * @param rawData
+     */
+    public void addBinaryPart(String paramName, final byte[] rawData) {
+        writeToOutputStream(paramName, rawData, TYPE_OCTET_STREAM, BINARY_ENCODING, "no-file");
+    }
+
+    /**
+     * 添加文件参数,可以实现文件上传功能
+     * 
+     * @param key
+     * @param file
+     */
+    public void addFilePart(final String key, final File file) {
+        InputStream fin = null;
+        try {
+            fin = new FileInputStream(file);
+            writeFirstBoundary();
+            final String type = CONTENT_TYPE + TYPE_OCTET_STREAM + NEW_LINE_STR;
+            mOutputStream.write(getContentDispositionBytes(key, file.getName()));
+            mOutputStream.write(type.getBytes());
+            mOutputStream.write(BINARY_ENCODING);
+
+            final byte[] tmp = new byte[4096];
+            int len = 0;
+            while ((len = fin.read(tmp)) != -1) {
+                mOutputStream.write(tmp, 0, len);
+            }
+            mOutputStream.flush();
+        } catch (final IOException e) {
+            e.printStackTrace();
+        } finally {
+            closeSilently(fin);
+        }
+    }
+
+    private void closeSilently(Closeable closeable) {
+        try {
+            if (closeable != null) {
+                closeable.close();
+            }
+        } catch (final IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+    private byte[] getContentDispositionBytes(String paramName, String fileName) {
+        StringBuilder stringBuilder = new StringBuilder();
+        stringBuilder.append(CONTENT_DISPOSITION + "form-data; name=\"" + paramName + "\"");
+        // 文本参数没有filename参数,设置为空即可
+        if (!TextUtils.isEmpty(fileName)) {
+            stringBuilder.append("; filename=\""
+                    + fileName + "\"");
+        }
+
+        return stringBuilder.append(NEW_LINE_STR).toString().getBytes();
+    }
+
+    @Override
+    public long getContentLength() {
+        return mOutputStream.toByteArray().length;
+    }
+
+    @Override
+    public Header getContentType() {
+        return new BasicHeader("Content-Type", "multipart/form-data; boundary=" + mBoundary);
+    }
+
+    @Override
+    public boolean isChunked() {
+        return false;
+    }
+
+    @Override
+    public boolean isRepeatable() {
+        return false;
+    }
+
+    @Override
+    public boolean isStreaming() {
+        return false;
+    }
+
+    @Override
+    public void writeTo(final OutputStream outstream) throws IOException {
+        // 参数最末尾的结束符
+        final String endString = "--" + mBoundary + "--\r\n";
+        // 写入结束符
+        mOutputStream.write(endString.getBytes());
+        //
+        outstream.write(mOutputStream.toByteArray());
+    }
+
+    @Override
+    public Header getContentEncoding() {
+        return null;
+    }
+
+    @Override
+    public void consumeContent() throws IOException,
+            UnsupportedOperationException {
+        if (isStreaming()) {
+            throw new UnsupportedOperationException(
+                    "Streaming entity does not implement #consumeContent()");
+        }
+    }
+
+    @Override
+    public InputStream getContent() {
+        return new ByteArrayInputStream(mOutputStream.toByteArray());
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/oasgames/android/oaspay/entity/SearchInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/entity/SearchInfo.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/entity/SearchInfo.java	(revision )
@@ -0,0 +1,38 @@
+package com.oasgames.android.oaspay.entity;
+
+import java.io.Serializable;
+
+/**
+ * 搜索关键词（本地搜索记录） 详细信息
+ * @author xdb
+ *
+ */
+public class SearchInfo implements Serializable{
+	private static final long serialVersionUID = 1598605839985469091L;
+
+	public String id;			//主键 以创建时间代替
+	public String keyword;		//名称
+	public String createtime;	//创建时间
+	public String ext1;			//扩展1
+	public String ext2;			//扩展2
+
+	public void setId(String id) {
+		this.id = id;
+	}
+
+	public void setKeyword(String keyword) {
+		this.keyword = keyword;
+	}
+
+	public void setCreatetime(String createtime) {
+		this.createtime = createtime;
+	}
+
+	public void setExt1(String ext1) {
+		this.ext1 = ext1;
+	}
+
+	public void setExt2(String ext2) {
+		this.ext2 = ext2;
+	}
+}
Index: app/src/main/java/com/oasgames/android/oaspay/activity/ActivityProductDetails.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/activity/ActivityProductDetails.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/activity/ActivityProductDetails.java	(revision )
@@ -0,0 +1,148 @@
+package com.oasgames.android.oaspay.activity;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.text.TextUtils;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.base.tools.activity.BasesActivity;
+import com.base.tools.http.CallbackResultForActivity;
+import com.base.tools.utils.BasesUtils;
+import com.oasgames.android.oaspay.R;
+import com.oasgames.android.oaspay.entity.OrderInfo;
+import com.oasgames.android.oaspay.entity.ProductInfo;
+import com.oasgames.android.oaspay.service.HttpService;
+import com.oasgames.android.oaspay.tools.APPUtils;
+import com.oasgames.android.oaspay.tools.ReportUtils;
+
+import org.json.JSONArray;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * 界面 商品（礼品）详细
+ * Created by Administrator on 2015/10/16.
+ */
+public class ActivityProductDetails extends BasesActivity {
+    ProductInfo info;
+    String id;
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.page_product_details);
+
+        initHead(true, true, null, false, getString(R.string.product_details_title), false, null);
+
+        id = getIntent().getExtras().getString("id");
+
+        loadInfoById();
+
+    }
+    private void loadInfoById(){
+        setWaitScreen(true);
+        HttpService.instance().getProductDetails(id, new MyCallback());
+    }
+    class MyCallback implements CallbackResultForActivity{
+        @Override
+        public void success(Object data, int statusCode, String msg) {
+            info = (ProductInfo) data;
+            updateView();
+            setWaitScreen(false);
+
+            Map<String, String> paras = new HashMap<>();
+            paras.put("gitid", info.product_id);
+            ReportUtils.add(ReportUtils.DEFAULTEVENT_GITDETAILS, paras, null);
+        }
+
+        @Override
+        public void fail(int statusCode, String msg) {
+            setWaitScreen(false);
+            showNetWrokError();
+        }
+
+        @Override
+        public void exception(Exception e) {
+            setWaitScreen(false);
+            showNetWrokError();
+        }
+    }
+
+    @Override
+    public void retry() {
+        super.retry();
+        if(info == null){
+            loadInfoById();
+        }else{
+            getOrderID();
+        }
+    }
+
+    private void updateView(){
+        findViewById(R.id.product_details_layout).setVisibility(View.VISIBLE);
+        final ImageView img = (ImageView)findViewById(R.id.product_item_img);
+        BasesUtils.loadImg(this, img, info.product_img_url);
+
+        TextView tv = (TextView)findViewById(R.id.product_item_title);
+        tv.setText(info.product_name);
+
+        TextView price = (TextView)findViewById(R.id.product_details_price);
+        if(!TextUtils.isEmpty(info.amount_show))
+            price.setText(info.currency_show+info.amount_show);
+
+        findViewById(R.id.product_item_charge).setVisibility(View.INVISIBLE);
+
+        LinearLayout notice = (LinearLayout)findViewById(R.id.product_details_notice);// 添加说明
+        if(!TextUtils.isEmpty(info.content_info)){
+            try {
+                JSONArray ja = new JSONArray(info.content_info);
+                int count = ja.length();
+
+                for (int i = 0; i <count; i++) {
+                    View view = getLayoutInflater().inflate(R.layout.page_product_details_item, null);
+                    TextView tv_notice = (TextView)view.findViewById(R.id.product_details_item_notice);
+                    tv_notice.setText(ja.getString(i));
+                    notice.addView(view);
+                }
+            }catch (Exception e){
+
+            }
+        }
+    }
+    public void onClickViewTopay(View view){
+        if(BasesUtils.isLogin())
+            getOrderID();
+        else
+            startActivity(new Intent().setClass(this, ActivityLogin.class));
+    }
+    private void getOrderID(){
+        setWaitScreen(true);
+        HttpService.instance().sendOrder(id, "", "", "", "giftapp", new GetOrderIDCallback());
+    }
+
+    class GetOrderIDCallback implements CallbackResultForActivity{
+        @Override
+        public void success(Object data, int statusCode, String msg) {
+            setWaitScreen(false);
+            Intent in = new Intent().setClass(ActivityProductDetails.this, ActivityGooglePlayBilling.class);
+            in.putExtra("orderinfo", (OrderInfo)data);
+            startActivity(in);
+        }
+
+        @Override
+        public void fail(int statusCode, String msg) {
+            setWaitScreen(false);
+//            showNetWrokError();
+            APPUtils.showErrorMessageByErrorCode(ActivityProductDetails.this, "-2000");
+        }
+
+        @Override
+        public void exception(Exception e) {
+            setWaitScreen(false);
+            showNetWrokError();
+        }
+    }
+}
Index: app/src/main/java/com/google/zxing/view/ViewfinderView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/google/zxing/view/ViewfinderView.java	(revision )
+++ app/src/main/java/com/google/zxing/view/ViewfinderView.java	(revision )
@@ -0,0 +1,265 @@
+/*
+ * Copyright (C) 2008 ZXing authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.zxing.view;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.Rect;
+import android.graphics.Typeface;
+import android.util.AttributeSet;
+import android.view.View;
+
+import com.google.zxing.ResultPoint;
+import com.google.zxing.camera.CameraManager;
+import com.oasgames.android.oaspay.R;
+
+import java.util.Collection;
+import java.util.HashSet;
+
+/**
+ * This view is overlaid on top of the camera preview. It adds the viewfinder
+ * rectangle and partial transparency outside it, as well as the laser scanner
+ * animation and result points.
+ * 
+ */
+public final class ViewfinderView extends View {
+	private static final String TAG = "log";
+	/**
+	 * 刷新界面的时间
+	 */
+	private static final long ANIMATION_DELAY = 10L;
+	private static final int OPAQUE = 0xFF;
+
+	/**
+	 * 四个绿色边角对应的长度
+	 */
+	private int ScreenRate;
+	
+	/**
+	 * 四个绿色边角对应的宽度
+	 */
+	private static final int CORNER_WIDTH = 10;
+	/**
+	 * 扫描框中的中间线的宽度
+	 */
+	private static final int MIDDLE_LINE_WIDTH = 8;
+	
+	/**
+	 * 扫描框中的中间线的与扫描框左右的间隙
+	 */
+	private static final int MIDDLE_LINE_PADDING = 5;
+	
+	/**
+	 * 中间那条线每次刷新移动的距离
+	 */
+	private static final int SPEEN_DISTANCE = 5;
+	
+	/**
+	 * 手机的屏幕密度
+	 */
+	private static float density;
+	/**
+	 * 字体大小
+	 */
+	private static final int TEXT_SIZE = 12;
+	/**
+	 * 字体距离扫描框下面的距离
+	 */
+	private static final int TEXT_PADDING_TOP = 30;
+	
+	/**
+	 * 画笔对象的引用
+	 */
+	private Paint paint;
+	
+	/**
+	 * 中间滑动线的最顶端位置
+	 */
+	private int slideTop;
+	
+	/**
+	 * 中间滑动线的最底端位置
+	 */
+	private int slideBottom;
+	
+	/**
+	 * 将扫描的二维码拍下来，这里没有这个功能，暂时不考虑
+	 */
+	private Bitmap resultBitmap;
+	private final int maskColor;
+	private final int resultColor;
+	
+	private final int resultPointColor;
+	private Collection<ResultPoint> possibleResultPoints;
+	private Collection<ResultPoint> lastPossibleResultPoints;
+
+	boolean isFirst;
+	
+	public ViewfinderView(Context context, AttributeSet attrs) {
+		super(context, attrs);
+		
+		density = context.getResources().getDisplayMetrics().density;
+		//将像素转换成dp
+		ScreenRate = (int)(20 * density);
+
+		paint = new Paint();
+
+		maskColor = R.color.capture_viewfinder_mask;
+		resultColor = R.color.capture_result_view;
+
+		resultPointColor = R.color.capture_possible_result_points;
+		possibleResultPoints = new HashSet<ResultPoint>(5);
+	}
+
+	@Override
+	public void onDraw(Canvas canvas) {
+		//中间的扫描框，你要修改扫描框的大小，去CameraManager里面修改
+		if(CameraManager.get() == null)
+			return;
+		Rect frame = CameraManager.get().getFramingRect();
+		if (frame == null) {
+			return;
+		}
+		
+		//初始化中间线滑动的最上边和最下边
+		if(!isFirst){
+			isFirst = true;
+			slideTop = frame.top;
+			slideBottom = frame.bottom;
+		}
+		
+		//获取屏幕的宽和高
+		int width = canvas.getWidth();
+		int height = canvas.getHeight();
+//		int orientation = getContext().getResources().getConfiguration().orientation;
+//		if(orientation == Configuration.ORIENTATION_LANDSCAPE){
+//			width = canvas.getHeight();
+//			height = canvas.getWidth();
+//		}
+
+		paint.setColor(resultBitmap != null ? resultColor : maskColor);
+		
+		//画出扫描框外面的阴影部分，共四个部分，扫描框的上面到屏幕上面，扫描框的下面到屏幕下面
+		//扫描框的左边面到屏幕左边，扫描框的右边到屏幕右边
+		canvas.drawRect(0, 0, width, frame.top, paint);
+		canvas.drawRect(0, frame.top, frame.left, frame.bottom + 1, paint);
+		canvas.drawRect(frame.right + 1, frame.top, width, frame.bottom + 1,
+				paint);
+		canvas.drawRect(0, frame.bottom + 1, width, height, paint);
+		
+		
+
+		if (resultBitmap != null) {
+			// Draw the opaque result bitmap over the scanning rectangle
+			paint.setAlpha(OPAQUE);
+			canvas.drawBitmap(resultBitmap, frame.left, frame.top, paint);
+		} else {
+
+			//画扫描框边上的角，总共8个部分
+			paint.setColor(Color.GREEN);
+			canvas.drawRect(frame.left, frame.top, frame.left + ScreenRate,
+					frame.top + CORNER_WIDTH, paint);
+			canvas.drawRect(frame.left, frame.top, frame.left + CORNER_WIDTH, frame.top
+					+ ScreenRate, paint);
+			canvas.drawRect(frame.right - ScreenRate, frame.top, frame.right,
+					frame.top + CORNER_WIDTH, paint);
+			canvas.drawRect(frame.right - CORNER_WIDTH, frame.top, frame.right, frame.top
+					+ ScreenRate, paint);
+			canvas.drawRect(frame.left, frame.bottom - CORNER_WIDTH, frame.left
+					+ ScreenRate, frame.bottom, paint);
+			canvas.drawRect(frame.left, frame.bottom - ScreenRate,
+					frame.left + CORNER_WIDTH, frame.bottom, paint);
+			canvas.drawRect(frame.right - ScreenRate, frame.bottom - CORNER_WIDTH,
+					frame.right, frame.bottom, paint);
+			canvas.drawRect(frame.right - CORNER_WIDTH, frame.bottom - ScreenRate,
+					frame.right, frame.bottom, paint);
+
+			
+			//绘制中间的线,每次刷新界面，中间的线往下移动SPEEN_DISTANCE
+			slideTop += SPEEN_DISTANCE;
+			if(slideTop >= frame.bottom){
+				slideTop = frame.top;
+			}
+			canvas.drawRect(frame.left + MIDDLE_LINE_PADDING, slideTop - MIDDLE_LINE_WIDTH / 2, frame.right - MIDDLE_LINE_PADDING, slideTop + MIDDLE_LINE_WIDTH / 2, paint);
+			
+			
+			//画扫描框下面的字
+			paint.setColor(Color.WHITE);
+			paint.setTextSize(TEXT_SIZE * density);
+			paint.setAlpha(0xFF);
+			paint.setTypeface(Typeface.create("System", Typeface.BOLD));
+			paint.setTextAlign(Paint.Align.CENTER);
+			canvas.drawText(getResources().getString(R.string.capture_scan_text2_2), width/2, (float) (frame.bottom + (float)TEXT_PADDING_TOP *density), paint);
+
+			
+
+			Collection<ResultPoint> currentPossible = possibleResultPoints;
+			Collection<ResultPoint> currentLast = lastPossibleResultPoints;
+			if (currentPossible.isEmpty()) {
+				lastPossibleResultPoints = null;
+			} else {
+				possibleResultPoints = new HashSet<ResultPoint>(5);
+				lastPossibleResultPoints = currentPossible;
+				paint.setAlpha(OPAQUE);
+				paint.setColor(resultPointColor);
+				for (ResultPoint point : currentPossible) {
+					canvas.drawCircle(frame.left + point.getX(), frame.top
+							+ point.getY(), 6.0f, paint);
+				}
+			}
+			if (currentLast != null) {
+				paint.setAlpha(OPAQUE / 2);
+				paint.setColor(resultPointColor);
+				for (ResultPoint point : currentLast) {
+					canvas.drawCircle(frame.left + point.getX(), frame.top
+							+ point.getY(), 3.0f, paint);
+				}
+			}
+
+			
+			//只刷新扫描框的内容，其他地方不刷新
+			postInvalidateDelayed(ANIMATION_DELAY, frame.left, frame.top,
+					frame.right, frame.bottom);
+			
+		}
+	}
+
+	public void drawViewfinder() {
+		resultBitmap = null;
+		invalidate();
+	}
+
+	/**
+	 * Draw a bitmap with the result points highlighted instead of the live
+	 * scanning display.
+	 * 
+	 * @param barcode
+	 *            An image of the decoded barcode.
+	 */
+	public void drawResultBitmap(Bitmap barcode) {
+		resultBitmap = barcode;
+		invalidate();
+	}
+
+	public void addPossibleResultPoint(ResultPoint point) {
+		possibleResultPoints.add(point);
+	}
+
+}
Index: app/src/main/java/com/oasgames/android/oaspay/entity/PayHistoryInfoDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/entity/PayHistoryInfoDetail.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/entity/PayHistoryInfoDetail.java	(revision )
@@ -0,0 +1,52 @@
+package com.oasgames.android.oaspay.entity;
+
+import java.io.Serializable;
+
+/**
+ * 支付历史记录详细信息
+ * @author xdb
+ *
+ */
+public class PayHistoryInfoDetail implements Serializable{
+	/**
+	 * 
+	 */
+	private static final long serialVersionUID = 1598605839985469091L;
+	
+	public String oas_orderid;		//OAS订单id
+	public String pay_way;				//支付渠道
+	public String pay_way_sub;			//子支付渠道
+	public String amount;		//价格
+	public String currency;				//货币
+	public String game_coins;			//游戏币
+	public String send_time;		//时间
+	public String rewards;		//赠送游戏币
+	public void setOas_orderid(String oas_orderid) {
+		this.oas_orderid = oas_orderid;
+	}
+	public void setPay_way(String pay_way) {
+		this.pay_way = pay_way;
+	}
+	public void setPay_way_sub(String pay_way_sub) {
+		this.pay_way_sub = pay_way_sub;
+	}
+	public void setAmount(String amount) {
+		this.amount = amount;
+	}
+	public void setCurrency(String currency) {
+		this.currency = currency;
+	}
+	public void setGame_coins(String game_coins) {
+		this.game_coins = game_coins;
+	}
+	public void setSend_time(String send_time) {
+		this.send_time = send_time;
+	}
+	public void setRewards(String rewards) {
+		this.rewards = rewards;
+	}
+	
+	
+	
+	
+}
Index: app/src/main/java/com/oasgames/android/oaspay/tools/ReportUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/oasgames/android/oaspay/tools/ReportUtils.java	(revision )
+++ app/src/main/java/com/oasgames/android/oaspay/tools/ReportUtils.java	(revision )
@@ -0,0 +1,251 @@
+package com.oasgames.android.oaspay.tools;
+
+import com.base.tools.utils.BasesUtils;
+import com.oasgames.android.oaspay.entity.ReportInfo;
+import com.oasgames.android.oaspay.entity.ReportMdataInfo;
+
+import java.util.HashMap;
+import java.util.LinkedList;
+import java.util.Map;
+import java.util.Queue;
+import java.util.Timer;
+
+public class ReportUtils {
+	private static final String TAG = ReportUtils.class.getSimpleName();
+	
+	/**
+	 * 1.	进入商城TAB（含每次切换） event值：mall
+	 * ActivityMain reportEvent()
+	 */
+	public static final String DEFAULTEVENT_MALL = "mall";
+	/**
+	 * 2.	进入资讯TAB（含每次切换） event值：information
+	 * ActivityMain reportEvent()
+	 */
+	public static final String DEFAULTEVENT_INFORMATION = "information";
+	/**
+	 * 3.	进入我TAB（含每次切换）  event值：me
+	 * ActivityMain reportEvent()
+	 */
+	public static final String DEFAULTEVENT_ME = "me";
+	/**
+	 * 4.	进入商品列表页   event值：productlist
+	 * 含“全部道具”、“最新-更多”、“最热-更多”、“最近-更多”
+	 * ActivityProductList onCreat();
+	 */
+	public static final String DEFAULTEVENT_PRODUCTLIST = "productlist";
+	/**
+	 * 5.	进入我的订单页面（从主菜单进入）event值：fmenutmylist
+	 * FragmentShop 点击 “我的订单”项
+	 * ActivityMain onClickView();
+	 */
+	public static final String DEFAULTEVENT_FMENUTMYLIST = "fmenutmylist";
+	/**
+	 * 6.	进入我的订单页面（从个人中心进入） event值：fmetmylist
+	 * FragmentMine 点击 “我的订单”项
+	 * FragmentMine MyListener
+	 */
+	public static final String DEFAULTEVENT_FMETMYLIST = "fmetmylist";
+	/**
+	 * 7.	进入游戏充值页面  event值：gamepay
+	 * ActivityPayPackageList onCreat()
+	 */
+	public static final String DEFAULTEVENT_GAMEPAY = "gamepay";
+	/**
+	 * 8.	进入扫码页面   event值：scancode
+	 * ActivityCapture onCreat();
+	 */
+	public static final String DEFAULTEVENT_SCANCODE = "scancode";
+	/**
+	 * 9.	通过扫码页扫码的数量  event值：scancodenum
+	 * ActivityCapture handleDecode();// 扫码成功的数量（不管结果是否正确）
+	 */
+	public static final String DEFAULTEVENT_SCANCODENUM = "scancodenum";
+	/**
+	 * 10.	通过扫码页手动输入订单号的数量  event值：scancodeorder
+	 * ActivityCaptureInput check();//输入完成，经判断后、向服务器发送请求时，记录该事件
+	 */
+	public static final String DEFAULTEVENT_SCANCODEORDER = "scancodeorder";
+	/**
+	 *11.	通过扫码页扫无效码的数量  event值：scancodefail
+	 * ActivityCapture handleDecode();// 验证失败的二维码
+	 */
+	public static final String DEFAULTEVENT_SCANCODEFAIL = "scancodefail";
+	/**
+	 *12.	支付成功但发钻失败的数量  event值：sdiamondfail
+	 * params：orderid（OAS订单id）； uid（用户id）
+	 * ActivityGooglePlayBilling check();
+	 */
+	public static final String DEFAULTEVENT_SDIAMONDFAIL = "sdiamondfail";
+	/**
+	 *13.	查看礼包详情的数量  event值：gitdetails
+	 * params：gitid(礼包id)
+	 * ActivityProductDetails onCreate();
+	 */
+	public static final String DEFAULTEVENT_GITDETAILS = "gitdetails";
+	/**
+	 *14.	登陆成功的数量  event值：login
+	 * 	paras: logintype (未登录：loginno，OAS帐号登录：oas，Facebook帐号登录：facebook，Google帐号登录：google；Twitter帐号登录：twitter)
+	 * ActivityLogo 自动登录Callback
+	 * ActivityLogin 登录Callback
+	 */
+	public static final String DEFAULTEVENT_LOGIN = "login";
+
+	
+	/**
+	 * 数据上报定时器
+	 */
+	public static Timer reportTimer = new Timer();
+	
+	public static Queue<ReportInfo> queue = new LinkedList<ReportInfo>();
+	public static void add(String eventName, Map<String, String> params, Map<String, String> status){
+		synchronized (queue) {
+
+			boolean isSuc = queue.offer(new ReportMdataInfo(eventName, params, status));
+			if(isSuc){
+				BasesUtils.logDebug(TAG, eventName + " is created success for Mdata！");
+			}else{
+				BasesUtils.logDebug(TAG, eventName + " is created fail for Mdata！");
+			}
+		}
+	}
+
+	public static Map<String, Integer> localeMap = new HashMap<String, Integer>();
+
+	static{
+		localeMap.put("", 2048);// 默认值
+		localeMap.put("af", 1078);
+		localeMap.put("sq", 1052);
+		localeMap.put("ar", 1025);// 自定义ar值
+		localeMap.put("ar-sa", 1025);
+		localeMap.put("ar-iq", 2049);
+		localeMap.put("ar-eg", 3073);
+		localeMap.put("ar-ly", 4097);
+		localeMap.put("ar-dz", 5121);
+		localeMap.put("ar-ma", 6145);
+		localeMap.put("ar-tn", 7169);
+		localeMap.put("ar-om", 8193);
+		localeMap.put("ar-ye", 9217);
+		localeMap.put("ar-sy", 10241);
+		localeMap.put("ar-jo", 11265);
+		localeMap.put("ar-lb", 12289);
+		localeMap.put("ar-kw", 13313);
+		localeMap.put("ar-ae", 14337);
+		localeMap.put("ar-bh", 15361);
+		localeMap.put("ar-qa", 16385);
+		
+		localeMap.put("eu", 1069);		
+		localeMap.put("bg", 1026);
+		localeMap.put("be", 1059);
+		localeMap.put("ca", 1027);
+		localeMap.put("zh", 2052);
+		localeMap.put("zh-tw", 1028);
+		localeMap.put("zh-cn", 2052);
+		localeMap.put("zh-hk", 3076);
+		localeMap.put("zh-sg", 4100);
+		localeMap.put("hr", 1050);
+		localeMap.put("cs", 1029);
+		localeMap.put("da", 1030);
+		localeMap.put("n", 1043);
+		localeMap.put("nl-be", 2067);	
+		
+		localeMap.put("en", 9);
+		localeMap.put("en-us", 1033);
+		localeMap.put("en-gb", 2057);
+		localeMap.put("en-au", 3081);
+		localeMap.put("en-ca", 4105);
+		localeMap.put("en-nz", 5129);
+		localeMap.put("en-ie", 6153);
+		localeMap.put("en-za", 7177);
+		localeMap.put("en-jm", 8201);
+//		locale.put("en", 9225); // 处理为 locale.put("en", 9);
+		localeMap.put("en-bz", 10249);
+		localeMap.put("en-tt", 11273);
+		localeMap.put("et", 1061);
+		localeMap.put("fo", 1080);
+		localeMap.put("fa", 1065);
+		localeMap.put("fi", 1035);
+		localeMap.put("fr", 1036);
+		localeMap.put("fr-be", 2060);
+		localeMap.put("fr-ca", 3084);
+		localeMap.put("fr-ch", 4108);
+		localeMap.put("fr-lu", 5132);
+		localeMap.put("mk", 1071);
+		localeMap.put("gd", 1084);
+		localeMap.put("gd-ie", 2108);
+		
+		localeMap.put("de", 1031);
+		localeMap.put("de-ch", 2055);
+		localeMap.put("de-at", 3079);
+		localeMap.put("de-lu", 4103);
+		localeMap.put("de-li", 5127);
+		localeMap.put("el-gr", 1032);
+		localeMap.put("he", 1037);
+		localeMap.put("hi", 1081);
+		localeMap.put("hu", 1038);
+		localeMap.put("is", 1039);
+		localeMap.put("in", 1057);
+		localeMap.put("it", 1040);
+		localeMap.put("it-ch", 2064);
+		localeMap.put("ja", 1041);
+		localeMap.put("ko", 1042);
+//		locale.put("ko", 2066);// 处理为 locale.put("ko", 1042);
+		
+		localeMap.put("lv", 1062);
+		localeMap.put("lt", 1063);
+		localeMap.put("ms", 1086);
+		localeMap.put("mt", 1082);
+		localeMap.put("no", 1044);
+//		locale.put("no", 2068);// 处理为 locale.put("no", 1044);
+		localeMap.put("p", 1045);
+		localeMap.put("pt-br", 1046);
+		localeMap.put("pt", 2070);
+		localeMap.put("rm", 1047);
+		localeMap.put("ro", 1048);
+		localeMap.put("ro-mo", 2072);
+		localeMap.put("ru", 1049);
+		localeMap.put("ru-mo", 2073);
+		localeMap.put("sz", 1083);
+		localeMap.put("sr", 3098);
+//		locale.put("sr", 2074);	// 处理为 locale.put("sr", 3098);
+		localeMap.put("sk", 1051);
+		localeMap.put("s", 1060);
+		localeMap.put("sb", 1070);
+		
+		localeMap.put("es", 1034);//
+		localeMap.put("es-mx", 2058);
+//		locale.put("es", 3082);// 处理为 locale.put("es", 1034);
+		localeMap.put("es-gt", 4106);
+		localeMap.put("es-cr", 5130);
+		localeMap.put("es-pa", 6154);
+		localeMap.put("es-do", 7178);
+		localeMap.put("es-ve", 8202);
+		localeMap.put("es-co", 9226);
+		localeMap.put("es-pe", 10250);
+		localeMap.put("es-ar", 11274);
+		localeMap.put("es-ec", 12298);
+		localeMap.put("es-c", 13322);
+		localeMap.put("es-uy", 14346);
+		localeMap.put("es-py", 15370);
+		localeMap.put("es-bo", 16394);
+		localeMap.put("es-sv", 17418);
+		localeMap.put("es-hn", 18442);
+		localeMap.put("es-ni", 19466);
+		localeMap.put("es-pr", 20490);
+		
+		localeMap.put("sx", 1072);
+		localeMap.put("sv", 1053);
+		localeMap.put("sv-fi", 2077);
+		localeMap.put("th", 1054);
+		localeMap.put("ts", 1073);
+		localeMap.put("tn", 1074);
+		localeMap.put("tr", 1055);
+		localeMap.put("uk", 1058);
+		localeMap.put("ur", 1056);
+		localeMap.put("ve", 1075);
+		localeMap.put("vi", 1066);
+		localeMap.put("xh", 1076);
+		localeMap.put("ji", 1085);
+		localeMap.put("zu", 1077);
+	}
+}
